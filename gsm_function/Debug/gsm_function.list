
gsm_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005368  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005828  08005828  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005830  08005830  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  080058a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080058a0  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c971  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002050  00000000  00000000  0002ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000812  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002698c  00000000  00000000  0002fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3f0  00000000  00000000  000566d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9739  00000000  00000000  00063ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003244  00000000  00000000  0014d200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00150444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e0 	.word	0x080054e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054e0 	.word	0x080054e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
#define RXSIZE 200
uint8_t RxBuf[RXSIZE];
char *Rx_string;
char *str;
int _write(int file,char *ptr,int len)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
    int i=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e009      	b.n	80005f4 <_write+0x2a>
    	ITM_SendChar((*ptr++));
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	60ba      	str	r2, [r7, #8]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffc7 	bl	800057c <ITM_SendChar>
    for(i=0;i<len;i++)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dbf1      	blt.n	80005e0 <_write+0x16>
    return len;
 80005fc:	687b      	ldr	r3, [r7, #4]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <GSM_Send_AT_Command>:

char* GSM_Send_AT_Command(char* AT_CMD)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,sizeof(RxBuf));
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	2100      	movs	r1, #0
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <GSM_Send_AT_Command+0x48>)
 8000616:	f004 f9b3 	bl	8004980 <memset>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fdd8 	bl	80001d0 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <GSM_Send_AT_Command+0x4c>)
 800062a:	f002 fe77 	bl	800331c <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, 200,1000);
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	22c8      	movs	r2, #200	; 0xc8
 8000634:	4906      	ldr	r1, [pc, #24]	; (8000650 <GSM_Send_AT_Command+0x48>)
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <GSM_Send_AT_Command+0x4c>)
 8000638:	f002 fda6 	bl	8003188 <HAL_UART_Receive>
	printf("Received data %s\n",RxBuf);
 800063c:	4904      	ldr	r1, [pc, #16]	; (8000650 <GSM_Send_AT_Command+0x48>)
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <GSM_Send_AT_Command+0x50>)
 8000640:	f004 f858 	bl	80046f4 <iprintf>
	return (char *)RxBuf;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <GSM_Send_AT_Command+0x48>)

}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000010c 	.word	0x2000010c
 8000654:	20000084 	.word	0x20000084
 8000658:	080054f8 	.word	0x080054f8

0800065c <GSM_TCP_init>:
int GSM_TCP_init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	int state =0,substate=0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
	while(1)
	{
		switch(state)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b03      	cmp	r3, #3
 800066e:	f200 8109 	bhi.w	8000884 <GSM_TCP_init+0x228>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <GSM_TCP_init+0x1c>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	08000689 	.word	0x08000689
 800067c:	080006f5 	.word	0x080006f5
 8000680:	08000761 	.word	0x08000761
 8000684:	08000881 	.word	0x08000881
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <GSM_TCP_init+0x3a>
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d017      	beq.n	80006c4 <GSM_TCP_init+0x68>
							{
								substate=0;
							}
							break;
					}
					break;
 8000694:	e0f8      	b.n	8000888 <GSM_TCP_init+0x22c>
							str=GSM_Send_AT_Command("AT+CIPMODE?\r");
 8000696:	487f      	ldr	r0, [pc, #508]	; (8000894 <GSM_TCP_init+0x238>)
 8000698:	f7ff ffb6 	bl	8000608 <GSM_Send_AT_Command>
 800069c:	4603      	mov	r3, r0
 800069e:	4a7e      	ldr	r2, [pc, #504]	; (8000898 <GSM_TCP_init+0x23c>)
 80006a0:	6013      	str	r3, [r2, #0]
							if(strstr(str,"+CIPMODE: 0"))
 80006a2:	4b7d      	ldr	r3, [pc, #500]	; (8000898 <GSM_TCP_init+0x23c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	497d      	ldr	r1, [pc, #500]	; (800089c <GSM_TCP_init+0x240>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 f983 	bl	80049b4 <strstr>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d004      	beq.n	80006be <GSM_TCP_init+0x62>
								state=1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
								substate=0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
							break;
 80006bc:	e019      	b.n	80006f2 <GSM_TCP_init+0x96>
								substate=1;
 80006be:	2301      	movs	r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
							break;
 80006c2:	e016      	b.n	80006f2 <GSM_TCP_init+0x96>
							str=GSM_Send_AT_Command("AT+CIPMODE=0\r");
 80006c4:	4876      	ldr	r0, [pc, #472]	; (80008a0 <GSM_TCP_init+0x244>)
 80006c6:	f7ff ff9f 	bl	8000608 <GSM_Send_AT_Command>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a72      	ldr	r2, [pc, #456]	; (8000898 <GSM_TCP_init+0x23c>)
 80006ce:	6013      	str	r3, [r2, #0]
							if(strstr(str,"OK"))
 80006d0:	4b71      	ldr	r3, [pc, #452]	; (8000898 <GSM_TCP_init+0x23c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4973      	ldr	r1, [pc, #460]	; (80008a4 <GSM_TCP_init+0x248>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 f96c 	bl	80049b4 <strstr>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <GSM_TCP_init+0x90>
								state=1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
								substate=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
							break;
 80006ea:	e001      	b.n	80006f0 <GSM_TCP_init+0x94>
								substate=0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
							break;
 80006f0:	bf00      	nop
					break;
 80006f2:	e0c9      	b.n	8000888 <GSM_TCP_init+0x22c>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <GSM_TCP_init+0xa6>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d017      	beq.n	8000730 <GSM_TCP_init+0xd4>
							else
							{
									substate=0;
							}
					}
					break;
 8000700:	e0c2      	b.n	8000888 <GSM_TCP_init+0x22c>
							str=GSM_Send_AT_Command("AT+NETOPEN\r");
 8000702:	4869      	ldr	r0, [pc, #420]	; (80008a8 <GSM_TCP_init+0x24c>)
 8000704:	f7ff ff80 	bl	8000608 <GSM_Send_AT_Command>
 8000708:	4603      	mov	r3, r0
 800070a:	4a63      	ldr	r2, [pc, #396]	; (8000898 <GSM_TCP_init+0x23c>)
 800070c:	6013      	str	r3, [r2, #0]
							if(strstr(str,"NETOPEN"))
 800070e:	4b62      	ldr	r3, [pc, #392]	; (8000898 <GSM_TCP_init+0x23c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4966      	ldr	r1, [pc, #408]	; (80008ac <GSM_TCP_init+0x250>)
 8000714:	4618      	mov	r0, r3
 8000716:	f004 f94d 	bl	80049b4 <strstr>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <GSM_TCP_init+0xce>
								state=2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
								substate=0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
							break;
 8000728:	e019      	b.n	800075e <GSM_TCP_init+0x102>
								substate=1;
 800072a:	2301      	movs	r3, #1
 800072c:	603b      	str	r3, [r7, #0]
							break;
 800072e:	e016      	b.n	800075e <GSM_TCP_init+0x102>
							str=GSM_Send_AT_Command("AT+NETOPEN\r");
 8000730:	485d      	ldr	r0, [pc, #372]	; (80008a8 <GSM_TCP_init+0x24c>)
 8000732:	f7ff ff69 	bl	8000608 <GSM_Send_AT_Command>
 8000736:	4603      	mov	r3, r0
 8000738:	4a57      	ldr	r2, [pc, #348]	; (8000898 <GSM_TCP_init+0x23c>)
 800073a:	6013      	str	r3, [r2, #0]
							if(strstr(str,"opened"))
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <GSM_TCP_init+0x23c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	495b      	ldr	r1, [pc, #364]	; (80008b0 <GSM_TCP_init+0x254>)
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f936 	bl	80049b4 <strstr>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <GSM_TCP_init+0xfc>
									state=2;
 800074e:	2302      	movs	r3, #2
 8000750:	607b      	str	r3, [r7, #4]
									substate=0;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
					break;
 8000756:	e097      	b.n	8000888 <GSM_TCP_init+0x22c>
									substate=0;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
					break;
 800075c:	e094      	b.n	8000888 <GSM_TCP_init+0x22c>
 800075e:	e093      	b.n	8000888 <GSM_TCP_init+0x22c>
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <GSM_TCP_init+0x112>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d044      	beq.n	80007f6 <GSM_TCP_init+0x19a>
								substate=0;
							}
							break;

					}
					break;
 800076c:	e08c      	b.n	8000888 <GSM_TCP_init+0x22c>
							str=GSM_Send_AT_Command("AT+CIPOPEN?\r");
 800076e:	4851      	ldr	r0, [pc, #324]	; (80008b4 <GSM_TCP_init+0x258>)
 8000770:	f7ff ff4a 	bl	8000608 <GSM_Send_AT_Command>
 8000774:	4603      	mov	r3, r0
 8000776:	4a48      	ldr	r2, [pc, #288]	; (8000898 <GSM_TCP_init+0x23c>)
 8000778:	6013      	str	r3, [r2, #0]
														if(strstr(str,"139.59.78.252"))
 800077a:	4b47      	ldr	r3, [pc, #284]	; (8000898 <GSM_TCP_init+0x23c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	494e      	ldr	r1, [pc, #312]	; (80008b8 <GSM_TCP_init+0x25c>)
 8000780:	4618      	mov	r0, r3
 8000782:	f004 f917 	bl	80049b4 <strstr>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d031      	beq.n	80007f0 <GSM_TCP_init+0x194>
															state=2;
 800078c:	2302      	movs	r3, #2
 800078e:	607b      	str	r3, [r7, #4]
															substate=0;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
															printf("ip OPEN WORKED\n");
 8000794:	4849      	ldr	r0, [pc, #292]	; (80008bc <GSM_TCP_init+0x260>)
 8000796:	f004 f813 	bl	80047c0 <puts>
															memset(RxBuf,0,200);
 800079a:	22c8      	movs	r2, #200	; 0xc8
 800079c:	2100      	movs	r1, #0
 800079e:	4848      	ldr	r0, [pc, #288]	; (80008c0 <GSM_TCP_init+0x264>)
 80007a0:	f004 f8ee 	bl	8004980 <memset>
															HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=0,67\r", strlen("AT+CIPSEND=0,67\r"));
 80007a4:	2210      	movs	r2, #16
 80007a6:	4947      	ldr	r1, [pc, #284]	; (80008c4 <GSM_TCP_init+0x268>)
 80007a8:	4847      	ldr	r0, [pc, #284]	; (80008c8 <GSM_TCP_init+0x26c>)
 80007aa:	f002 fdb7 	bl	800331c <HAL_UART_Transmit_IT>
															HAL_UART_Receive(&huart4, RxBuf, 200,3000);
 80007ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007b2:	22c8      	movs	r2, #200	; 0xc8
 80007b4:	4942      	ldr	r1, [pc, #264]	; (80008c0 <GSM_TCP_init+0x264>)
 80007b6:	4844      	ldr	r0, [pc, #272]	; (80008c8 <GSM_TCP_init+0x26c>)
 80007b8:	f002 fce6 	bl	8003188 <HAL_UART_Receive>
															printf("Received data %s\n",RxBuf);
 80007bc:	4940      	ldr	r1, [pc, #256]	; (80008c0 <GSM_TCP_init+0x264>)
 80007be:	4843      	ldr	r0, [pc, #268]	; (80008cc <GSM_TCP_init+0x270>)
 80007c0:	f003 ff98 	bl	80046f4 <iprintf>
															memset(RxBuf,0,200);
 80007c4:	22c8      	movs	r2, #200	; 0xc8
 80007c6:	2100      	movs	r1, #0
 80007c8:	483d      	ldr	r0, [pc, #244]	; (80008c0 <GSM_TCP_init+0x264>)
 80007ca:	f004 f8d9 	bl	8004980 <memset>
															HAL_UART_Transmit_IT(&huart4,(uint8_t*)"$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77", strlen("$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77"));
 80007ce:	2244      	movs	r2, #68	; 0x44
 80007d0:	493f      	ldr	r1, [pc, #252]	; (80008d0 <GSM_TCP_init+0x274>)
 80007d2:	483d      	ldr	r0, [pc, #244]	; (80008c8 <GSM_TCP_init+0x26c>)
 80007d4:	f002 fda2 	bl	800331c <HAL_UART_Transmit_IT>
															HAL_UART_Receive(&huart4, RxBuf, 200,3000);
 80007d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007dc:	22c8      	movs	r2, #200	; 0xc8
 80007de:	4938      	ldr	r1, [pc, #224]	; (80008c0 <GSM_TCP_init+0x264>)
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <GSM_TCP_init+0x26c>)
 80007e2:	f002 fcd1 	bl	8003188 <HAL_UART_Receive>
															printf("Received data %s\n",RxBuf);
 80007e6:	4936      	ldr	r1, [pc, #216]	; (80008c0 <GSM_TCP_init+0x264>)
 80007e8:	4838      	ldr	r0, [pc, #224]	; (80008cc <GSM_TCP_init+0x270>)
 80007ea:	f003 ff83 	bl	80046f4 <iprintf>
							break;
 80007ee:	e046      	b.n	800087e <GSM_TCP_init+0x222>
								substate=1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
							break;
 80007f4:	e043      	b.n	800087e <GSM_TCP_init+0x222>
						    	str=GSM_Send_AT_Command("AT+CIPOPEN=0,\"TCP\",\"139.59.78.252\",49791\r");
 80007f6:	4837      	ldr	r0, [pc, #220]	; (80008d4 <GSM_TCP_init+0x278>)
 80007f8:	f7ff ff06 	bl	8000608 <GSM_Send_AT_Command>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <GSM_TCP_init+0x23c>)
 8000800:	6013      	str	r3, [r2, #0]
						    								if(strstr(str,"+CIPOPEN: 0,0"))
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <GSM_TCP_init+0x23c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4934      	ldr	r1, [pc, #208]	; (80008d8 <GSM_TCP_init+0x27c>)
 8000808:	4618      	mov	r0, r3
 800080a:	f004 f8d3 	bl	80049b4 <strstr>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d031      	beq.n	8000878 <GSM_TCP_init+0x21c>
						    									state=2;
 8000814:	2302      	movs	r3, #2
 8000816:	607b      	str	r3, [r7, #4]
						    									substate=0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
						    									printf("ip OPEN WORKED\n");
 800081c:	4827      	ldr	r0, [pc, #156]	; (80008bc <GSM_TCP_init+0x260>)
 800081e:	f003 ffcf 	bl	80047c0 <puts>
						    									memset(RxBuf,0,200);
 8000822:	22c8      	movs	r2, #200	; 0xc8
 8000824:	2100      	movs	r1, #0
 8000826:	4826      	ldr	r0, [pc, #152]	; (80008c0 <GSM_TCP_init+0x264>)
 8000828:	f004 f8aa 	bl	8004980 <memset>
						    									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=0,7\r", strlen("AT+CIPSEND=0,7\r"));
 800082c:	220f      	movs	r2, #15
 800082e:	492b      	ldr	r1, [pc, #172]	; (80008dc <GSM_TCP_init+0x280>)
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <GSM_TCP_init+0x26c>)
 8000832:	f002 fd73 	bl	800331c <HAL_UART_Transmit_IT>
						    									HAL_UART_Receive(&huart4, RxBuf, 200,3000);
 8000836:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800083a:	22c8      	movs	r2, #200	; 0xc8
 800083c:	4920      	ldr	r1, [pc, #128]	; (80008c0 <GSM_TCP_init+0x264>)
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <GSM_TCP_init+0x26c>)
 8000840:	f002 fca2 	bl	8003188 <HAL_UART_Receive>
						    									printf("Received data %s\n",RxBuf);
 8000844:	491e      	ldr	r1, [pc, #120]	; (80008c0 <GSM_TCP_init+0x264>)
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <GSM_TCP_init+0x270>)
 8000848:	f003 ff54 	bl	80046f4 <iprintf>
						    									memset(RxBuf,0,200);
 800084c:	22c8      	movs	r2, #200	; 0xc8
 800084e:	2100      	movs	r1, #0
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <GSM_TCP_init+0x264>)
 8000852:	f004 f895 	bl	8004980 <memset>
						    									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"Anburaj", strlen("Anburaj"));
 8000856:	2207      	movs	r2, #7
 8000858:	4921      	ldr	r1, [pc, #132]	; (80008e0 <GSM_TCP_init+0x284>)
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <GSM_TCP_init+0x26c>)
 800085c:	f002 fd5e 	bl	800331c <HAL_UART_Transmit_IT>
						    									HAL_UART_Receive(&huart4, RxBuf, 200,3000);
 8000860:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000864:	22c8      	movs	r2, #200	; 0xc8
 8000866:	4916      	ldr	r1, [pc, #88]	; (80008c0 <GSM_TCP_init+0x264>)
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <GSM_TCP_init+0x26c>)
 800086a:	f002 fc8d 	bl	8003188 <HAL_UART_Receive>
						    									printf("Received data %s\n",RxBuf);
 800086e:	4914      	ldr	r1, [pc, #80]	; (80008c0 <GSM_TCP_init+0x264>)
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <GSM_TCP_init+0x270>)
 8000872:	f003 ff3f 	bl	80046f4 <iprintf>
							break;
 8000876:	e001      	b.n	800087c <GSM_TCP_init+0x220>
								substate=0;
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
							break;
 800087c:	bf00      	nop
					break;
 800087e:	e003      	b.n	8000888 <GSM_TCP_init+0x22c>
			case 3:
					return 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e002      	b.n	800088a <GSM_TCP_init+0x22e>
					break;
			default:
					return 1;
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <GSM_TCP_init+0x22e>
		switch(state)
 8000888:	e6ef      	b.n	800066a <GSM_TCP_init+0xe>
		}
	}
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	0800550c 	.word	0x0800550c
 8000898:	200001d8 	.word	0x200001d8
 800089c:	0800551c 	.word	0x0800551c
 80008a0:	08005528 	.word	0x08005528
 80008a4:	08005538 	.word	0x08005538
 80008a8:	0800553c 	.word	0x0800553c
 80008ac:	08005548 	.word	0x08005548
 80008b0:	08005550 	.word	0x08005550
 80008b4:	08005558 	.word	0x08005558
 80008b8:	08005568 	.word	0x08005568
 80008bc:	08005578 	.word	0x08005578
 80008c0:	2000010c 	.word	0x2000010c
 80008c4:	08005588 	.word	0x08005588
 80008c8:	20000084 	.word	0x20000084
 80008cc:	080054f8 	.word	0x080054f8
 80008d0:	0800559c 	.word	0x0800559c
 80008d4:	080055e4 	.word	0x080055e4
 80008d8:	08005610 	.word	0x08005610
 80008dc:	08005620 	.word	0x08005620
 80008e0:	08005630 	.word	0x08005630

080008e4 <GSM_APN_SET>:
int GSM_APN_SET(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

uint8_t state=0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71bb      	strb	r3, [r7, #6]

 while (1)
  {
    /* USER CODE END WHILE */
	  switch(state)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	f000 8088 	beq.w	8000a0a <GSM_APN_SET+0x126>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dcf9      	bgt.n	80008f2 <GSM_APN_SET+0xe>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <GSM_APN_SET+0x24>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d04b      	beq.n	800099e <GSM_APN_SET+0xba>
 8000906:	e7f4      	b.n	80008f2 <GSM_APN_SET+0xe>
	 	  {
	 	case 0:
	 		  switch(substate)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d032      	beq.n	8000974 <GSM_APN_SET+0x90>
 800090e:	2b02      	cmp	r3, #2
 8000910:	dc43      	bgt.n	800099a <GSM_APN_SET+0xb6>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <GSM_APN_SET+0x38>
 8000916:	2b01      	cmp	r3, #1
 8000918:	d018      	beq.n	800094c <GSM_APN_SET+0x68>
	   			  	  substate=0;
	   			  }
	   			  break;

	   		  default:
	   			  break;
 800091a:	e03e      	b.n	800099a <GSM_APN_SET+0xb6>
	   			  Rx_string = GSM_Send_AT_Command("AT+COPS?\r");
 800091c:	4858      	ldr	r0, [pc, #352]	; (8000a80 <GSM_APN_SET+0x19c>)
 800091e:	f7ff fe73 	bl	8000608 <GSM_Send_AT_Command>
 8000922:	4603      	mov	r3, r0
 8000924:	4a57      	ldr	r2, [pc, #348]	; (8000a84 <GSM_APN_SET+0x1a0>)
 8000926:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"40449"))
 8000928:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <GSM_APN_SET+0x1a0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4956      	ldr	r1, [pc, #344]	; (8000a88 <GSM_APN_SET+0x1a4>)
 800092e:	4618      	mov	r0, r3
 8000930:	f004 f840 	bl	80049b4 <strstr>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <GSM_APN_SET+0x62>
	   				 state=1;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
	   				printf("match found\n");
 800093e:	4853      	ldr	r0, [pc, #332]	; (8000a8c <GSM_APN_SET+0x1a8>)
 8000940:	f003 ff3e 	bl	80047c0 <puts>
	   			  break;
 8000944:	e02a      	b.n	800099c <GSM_APN_SET+0xb8>
	   				  substate=1;
 8000946:	2301      	movs	r3, #1
 8000948:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800094a:	e027      	b.n	800099c <GSM_APN_SET+0xb8>
	   			  if(strstr(Rx_string,"405854"))
 800094c:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <GSM_APN_SET+0x1a0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	494f      	ldr	r1, [pc, #316]	; (8000a90 <GSM_APN_SET+0x1ac>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f82e 	bl	80049b4 <strstr>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <GSM_APN_SET+0x8a>
	   				  state=2;
 800095e:	2302      	movs	r3, #2
 8000960:	71fb      	strb	r3, [r7, #7]
	   				  substate=0;
 8000962:	2300      	movs	r3, #0
 8000964:	71bb      	strb	r3, [r7, #6]
	   			  	  printf("match found\n");
 8000966:	4849      	ldr	r0, [pc, #292]	; (8000a8c <GSM_APN_SET+0x1a8>)
 8000968:	f003 ff2a 	bl	80047c0 <puts>
	   			  break;
 800096c:	e016      	b.n	800099c <GSM_APN_SET+0xb8>
	   			  	  substate=0;
 800096e:	2300      	movs	r3, #0
 8000970:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000972:	e013      	b.n	800099c <GSM_APN_SET+0xb8>
				  if(strstr(Rx_string,"ERROR"))
 8000974:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <GSM_APN_SET+0x1a0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4946      	ldr	r1, [pc, #280]	; (8000a94 <GSM_APN_SET+0x1b0>)
 800097a:	4618      	mov	r0, r3
 800097c:	f004 f81a 	bl	80049b4 <strstr>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <GSM_APN_SET+0xac>
	   				  state=0;
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800098a:	2300      	movs	r3, #0
 800098c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800098e:	e005      	b.n	800099c <GSM_APN_SET+0xb8>
	   			  	  state=0;
 8000990:	2300      	movs	r3, #0
 8000992:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000994:	2300      	movs	r3, #0
 8000996:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000998:	e000      	b.n	800099c <GSM_APN_SET+0xb8>
	   			  break;
 800099a:	bf00      	nop
	   		  }
	 		  break;
 800099c:	e06b      	b.n	8000a76 <GSM_APN_SET+0x192>
	 	case 1:
	 		  switch(substate)
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <GSM_APN_SET+0xc6>
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d01b      	beq.n	80009e0 <GSM_APN_SET+0xfc>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 80009a8:	e02e      	b.n	8000a08 <GSM_APN_SET+0x124>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 80009aa:	483b      	ldr	r0, [pc, #236]	; (8000a98 <GSM_APN_SET+0x1b4>)
 80009ac:	f7ff fe2c 	bl	8000608 <GSM_Send_AT_Command>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <GSM_APN_SET+0x1a0>)
 80009b4:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <GSM_APN_SET+0x1a0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4938      	ldr	r1, [pc, #224]	; (8000a9c <GSM_APN_SET+0x1b8>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fff9 	bl	80049b4 <strstr>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d008      	beq.n	80009da <GSM_APN_SET+0xf6>
	   				 state=2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 80009d0:	482e      	ldr	r0, [pc, #184]	; (8000a8c <GSM_APN_SET+0x1a8>)
 80009d2:	f003 fef5 	bl	80047c0 <puts>
	   				return 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e04e      	b.n	8000a78 <GSM_APN_SET+0x194>
	   				  substate=1;
 80009da:	2301      	movs	r3, #1
 80009dc:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80009de:	e013      	b.n	8000a08 <GSM_APN_SET+0x124>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <GSM_APN_SET+0x1a0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2206      	movs	r2, #6
 80009e6:	492e      	ldr	r1, [pc, #184]	; (8000aa0 <GSM_APN_SET+0x1bc>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 ffd1 	bl	8004990 <strncmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <GSM_APN_SET+0x11a>
	   				  state=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80009fc:	e003      	b.n	8000a06 <GSM_APN_SET+0x122>
	   			  	  state=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000a06:	bf00      	nop
	   		  }
	 		  break;
 8000a08:	e035      	b.n	8000a76 <GSM_APN_SET+0x192>
	 	case 2:
	 		  switch(substate)
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <GSM_APN_SET+0x132>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d01b      	beq.n	8000a4c <GSM_APN_SET+0x168>
	   				  substate=0;
	   			  	  state=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000a14:	e02e      	b.n	8000a74 <GSM_APN_SET+0x190>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <GSM_APN_SET+0x1c0>)
 8000a18:	f7ff fdf6 	bl	8000608 <GSM_Send_AT_Command>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <GSM_APN_SET+0x1a0>)
 8000a20:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <GSM_APN_SET+0x1a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	491d      	ldr	r1, [pc, #116]	; (8000a9c <GSM_APN_SET+0x1b8>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 ffc3 	bl	80049b4 <strstr>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <GSM_APN_SET+0x162>
	   				 state=3;
 8000a34:	2303      	movs	r3, #3
 8000a36:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <GSM_APN_SET+0x1a8>)
 8000a3e:	f003 febf 	bl	80047c0 <puts>
					return 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e018      	b.n	8000a78 <GSM_APN_SET+0x194>
	   				  substate=1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000a4a:	e013      	b.n	8000a74 <GSM_APN_SET+0x190>
			          if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <GSM_APN_SET+0x1a0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2206      	movs	r2, #6
 8000a52:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <GSM_APN_SET+0x1bc>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 ff9b 	bl	8004990 <strncmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <GSM_APN_SET+0x186>
	   			  	  substate=0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8000a68:	e003      	b.n	8000a72 <GSM_APN_SET+0x18e>
	   				  substate=0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8000a72:	bf00      	nop
	   		  }
	 		  break;
 8000a74:	bf00      	nop
	  switch(state)
 8000a76:	e73c      	b.n	80008f2 <GSM_APN_SET+0xe>
	}
}
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08005638 	.word	0x08005638
 8000a84:	200001d4 	.word	0x200001d4
 8000a88:	08005644 	.word	0x08005644
 8000a8c:	0800564c 	.word	0x0800564c
 8000a90:	08005658 	.word	0x08005658
 8000a94:	08005660 	.word	0x08005660
 8000a98:	08005668 	.word	0x08005668
 8000a9c:	08005538 	.word	0x08005538
 8000aa0:	0800568c 	.word	0x0800568c
 8000aa4:	08005698 	.word	0x08005698

08000aa8 <GSM_SIM_INIT>:

int GSM_SIM_INIT(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

uint8_t state=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71bb      	strb	r3, [r7, #6]

 while (1)
  {
    /* USER CODE END WHILE */
	  switch(state)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	f200 81ca 	bhi.w	8000e52 <GSM_SIM_INIT+0x3aa>
 8000abe:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <GSM_SIM_INIT+0x1c>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000ae1 	.word	0x08000ae1
 8000ac8:	08000b49 	.word	0x08000b49
 8000acc:	08000bb3 	.word	0x08000bb3
 8000ad0:	08000c27 	.word	0x08000c27
 8000ad4:	08000c91 	.word	0x08000c91
 8000ad8:	08000d0d 	.word	0x08000d0d
 8000adc:	08000d93 	.word	0x08000d93
	 	  {
	 	case 0:
	 		  switch(substate)
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <GSM_SIM_INIT+0x44>
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d019      	beq.n	8000b1e <GSM_SIM_INIT+0x76>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000aea:	e02c      	b.n	8000b46 <GSM_SIM_INIT+0x9e>
	   			  Rx_string = GSM_Send_AT_Command("ATE0\r");
 8000aec:	48ac      	ldr	r0, [pc, #688]	; (8000da0 <GSM_SIM_INIT+0x2f8>)
 8000aee:	f7ff fd8b 	bl	8000608 <GSM_Send_AT_Command>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4aab      	ldr	r2, [pc, #684]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000af6:	6013      	str	r3, [r2, #0]
	   			  if(!(strncmp(Rx_string,"\r\nOK\r\n",6)))
 8000af8:	4baa      	ldr	r3, [pc, #680]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2206      	movs	r2, #6
 8000afe:	49aa      	ldr	r1, [pc, #680]	; (8000da8 <GSM_SIM_INIT+0x300>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 ff45 	bl	8004990 <strncmp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d105      	bne.n	8000b18 <GSM_SIM_INIT+0x70>
	   				 state=1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	71fb      	strb	r3, [r7, #7]
	   				printf("match found\n");
 8000b10:	48a6      	ldr	r0, [pc, #664]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000b12:	f003 fe55 	bl	80047c0 <puts>
	   			  break;
 8000b16:	e016      	b.n	8000b46 <GSM_SIM_INIT+0x9e>
	   				  substate=1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000b1c:	e013      	b.n	8000b46 <GSM_SIM_INIT+0x9e>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000b1e:	4ba1      	ldr	r3, [pc, #644]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2206      	movs	r2, #6
 8000b24:	49a2      	ldr	r1, [pc, #648]	; (8000db0 <GSM_SIM_INIT+0x308>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 ff32 	bl	8004990 <strncmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <GSM_SIM_INIT+0x94>
	   				  state=0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000b3a:	e003      	b.n	8000b44 <GSM_SIM_INIT+0x9c>
	   			  	  state=0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000b44:	bf00      	nop
	   		  }
	 		  break;
 8000b46:	e185      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
	 	case 1:
	 		  switch(substate)
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <GSM_SIM_INIT+0xac>
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d01a      	beq.n	8000b88 <GSM_SIM_INIT+0xe0>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000b52:	e02d      	b.n	8000bb0 <GSM_SIM_INIT+0x108>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPIN?\r");
 8000b54:	4897      	ldr	r0, [pc, #604]	; (8000db4 <GSM_SIM_INIT+0x30c>)
 8000b56:	f7ff fd57 	bl	8000608 <GSM_Send_AT_Command>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a91      	ldr	r2, [pc, #580]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000b5e:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"READY"))
 8000b60:	4b90      	ldr	r3, [pc, #576]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4994      	ldr	r1, [pc, #592]	; (8000db8 <GSM_SIM_INIT+0x310>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 ff24 	bl	80049b4 <strstr>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <GSM_SIM_INIT+0xda>
	   				 state=2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000b7a:	488c      	ldr	r0, [pc, #560]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000b7c:	f003 fe20 	bl	80047c0 <puts>
	   			  break;
 8000b80:	e016      	b.n	8000bb0 <GSM_SIM_INIT+0x108>
	   				  substate=1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000b86:	e013      	b.n	8000bb0 <GSM_SIM_INIT+0x108>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000b88:	4b86      	ldr	r3, [pc, #536]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	4988      	ldr	r1, [pc, #544]	; (8000db0 <GSM_SIM_INIT+0x308>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fefd 	bl	8004990 <strncmp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <GSM_SIM_INIT+0xfe>
	   				  state=0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000ba4:	e003      	b.n	8000bae <GSM_SIM_INIT+0x106>
	   			  	  state=0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000bae:	bf00      	nop
	   		  }
	 		  break;
 8000bb0:	e150      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
	 	case 2:
	 		  switch(substate)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <GSM_SIM_INIT+0x116>
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d01a      	beq.n	8000bf2 <GSM_SIM_INIT+0x14a>
	   				  substate=0;
	   			  	  state=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000bbc:	e032      	b.n	8000c24 <GSM_SIM_INIT+0x17c>
	   			  Rx_string = GSM_Send_AT_Command("AT+CSQ\r");
 8000bbe:	487f      	ldr	r0, [pc, #508]	; (8000dbc <GSM_SIM_INIT+0x314>)
 8000bc0:	f7ff fd22 	bl	8000608 <GSM_Send_AT_Command>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a77      	ldr	r2, [pc, #476]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000bc8:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"99"))
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	497c      	ldr	r1, [pc, #496]	; (8000dc0 <GSM_SIM_INIT+0x318>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 feef 	bl	80049b4 <strstr>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d007      	beq.n	8000bec <GSM_SIM_INIT+0x144>
	   				 state=3;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000be4:	4871      	ldr	r0, [pc, #452]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000be6:	f003 fdeb 	bl	80047c0 <puts>
	   			  break;
 8000bea:	e01b      	b.n	8000c24 <GSM_SIM_INIT+0x17c>
	   				  substate=1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000bf0:	e018      	b.n	8000c24 <GSM_SIM_INIT+0x17c>
			          Rx_string = GSM_Send_AT_Command("AT+CFUN=1\r");
 8000bf2:	4874      	ldr	r0, [pc, #464]	; (8000dc4 <GSM_SIM_INIT+0x31c>)
 8000bf4:	f7ff fd08 	bl	8000608 <GSM_Send_AT_Command>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a6a      	ldr	r2, [pc, #424]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000bfc:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"0,1"))
 8000bfe:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4971      	ldr	r1, [pc, #452]	; (8000dc8 <GSM_SIM_INIT+0x320>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fed5 	bl	80049b4 <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d004      	beq.n	8000c1a <GSM_SIM_INIT+0x172>
	   			  	  substate=0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8000c18:	e003      	b.n	8000c22 <GSM_SIM_INIT+0x17a>
	   				  substate=0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8000c22:	bf00      	nop
	   		  }
	 		  break;
 8000c24:	e116      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
	 case 3:
	 		  switch(substate)
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <GSM_SIM_INIT+0x18a>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d01a      	beq.n	8000c66 <GSM_SIM_INIT+0x1be>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000c30:	e02d      	b.n	8000c8e <GSM_SIM_INIT+0x1e6>
	   			  Rx_string = GSM_Send_AT_Command("AT+CMEE=2\r");
 8000c32:	4866      	ldr	r0, [pc, #408]	; (8000dcc <GSM_SIM_INIT+0x324>)
 8000c34:	f7ff fce8 	bl	8000608 <GSM_Send_AT_Command>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a5a      	ldr	r2, [pc, #360]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000c3c:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8000c3e:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4963      	ldr	r1, [pc, #396]	; (8000dd0 <GSM_SIM_INIT+0x328>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 feb5 	bl	80049b4 <strstr>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <GSM_SIM_INIT+0x1b8>
	   				 state=4;
 8000c50:	2304      	movs	r3, #4
 8000c52:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000c58:	4854      	ldr	r0, [pc, #336]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000c5a:	f003 fdb1 	bl	80047c0 <puts>
	   			  break;
 8000c5e:	e016      	b.n	8000c8e <GSM_SIM_INIT+0x1e6>
	   				  substate=1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000c64:	e013      	b.n	8000c8e <GSM_SIM_INIT+0x1e6>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	4950      	ldr	r1, [pc, #320]	; (8000db0 <GSM_SIM_INIT+0x308>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fe8e 	bl	8004990 <strncmp>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <GSM_SIM_INIT+0x1dc>
	   				  state=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000c82:	e003      	b.n	8000c8c <GSM_SIM_INIT+0x1e4>
	   			  	  state=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000c8c:	bf00      	nop
	   		  }
	 		  break;
 8000c8e:	e0e1      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
	 	case 4:
	 		  switch(substate)
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <GSM_SIM_INIT+0x1f4>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d023      	beq.n	8000ce2 <GSM_SIM_INIT+0x23a>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000c9a:	e036      	b.n	8000d0a <GSM_SIM_INIT+0x262>
	   			  Rx_string = GSM_Send_AT_Command("AT+CREG?\r");
 8000c9c:	484d      	ldr	r0, [pc, #308]	; (8000dd4 <GSM_SIM_INIT+0x32c>)
 8000c9e:	f7ff fcb3 	bl	8000608 <GSM_Send_AT_Command>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000ca6:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"0,6")))
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4946      	ldr	r1, [pc, #280]	; (8000dc8 <GSM_SIM_INIT+0x320>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fe80 	bl	80049b4 <strstr>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d108      	bne.n	8000ccc <GSM_SIM_INIT+0x224>
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4946      	ldr	r1, [pc, #280]	; (8000dd8 <GSM_SIM_INIT+0x330>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fe77 	bl	80049b4 <strstr>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <GSM_SIM_INIT+0x234>
	   				 state=5;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000cd6:	f003 fd73 	bl	80047c0 <puts>
	   			  break;
 8000cda:	e016      	b.n	8000d0a <GSM_SIM_INIT+0x262>
	   				  substate=1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000ce0:	e013      	b.n	8000d0a <GSM_SIM_INIT+0x262>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	4931      	ldr	r1, [pc, #196]	; (8000db0 <GSM_SIM_INIT+0x308>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fe50 	bl	8004990 <strncmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d104      	bne.n	8000d00 <GSM_SIM_INIT+0x258>
	   				  state=0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000cfe:	e003      	b.n	8000d08 <GSM_SIM_INIT+0x260>
	   			  	  state=0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000d08:	bf00      	nop
	   		  }
 			  break;
 8000d0a:	e0a3      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
		case 5:
	 		  switch(substate)
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <GSM_SIM_INIT+0x270>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d023      	beq.n	8000d5e <GSM_SIM_INIT+0x2b6>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000d16:	e03b      	b.n	8000d90 <GSM_SIM_INIT+0x2e8>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGREG?\r");
 8000d18:	4830      	ldr	r0, [pc, #192]	; (8000ddc <GSM_SIM_INIT+0x334>)
 8000d1a:	f7ff fc75 	bl	8000608 <GSM_Send_AT_Command>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000d22:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"1,1")))
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4927      	ldr	r1, [pc, #156]	; (8000dc8 <GSM_SIM_INIT+0x320>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fe42 	bl	80049b4 <strstr>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d108      	bne.n	8000d48 <GSM_SIM_INIT+0x2a0>
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4929      	ldr	r1, [pc, #164]	; (8000de0 <GSM_SIM_INIT+0x338>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fe39 	bl	80049b4 <strstr>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d007      	beq.n	8000d58 <GSM_SIM_INIT+0x2b0>
	   				 state=6;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <GSM_SIM_INIT+0x304>)
 8000d52:	f003 fd35 	bl	80047c0 <puts>
	   			  break;
 8000d56:	e01b      	b.n	8000d90 <GSM_SIM_INIT+0x2e8>
	   				  substate=1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000d5c:	e018      	b.n	8000d90 <GSM_SIM_INIT+0x2e8>
				  Rx_string = GSM_Send_AT_Command("AT+CGREG=0\r");
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <GSM_SIM_INIT+0x33c>)
 8000d60:	f7ff fc52 	bl	8000608 <GSM_Send_AT_Command>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000d68:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <GSM_SIM_INIT+0x2fc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4918      	ldr	r1, [pc, #96]	; (8000dd0 <GSM_SIM_INIT+0x328>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fe1f 	bl	80049b4 <strstr>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <GSM_SIM_INIT+0x2de>
	   				  state=5;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000d84:	e003      	b.n	8000d8e <GSM_SIM_INIT+0x2e6>
	   			  	  state=0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000d8e:	bf00      	nop
	   		  }
 			  break;
 8000d90:	e060      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>
		case 6:
	 		  switch(substate)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d027      	beq.n	8000de8 <GSM_SIM_INIT+0x340>
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d040      	beq.n	8000e1e <GSM_SIM_INIT+0x376>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000d9c:	e058      	b.n	8000e50 <GSM_SIM_INIT+0x3a8>
 8000d9e:	bf00      	nop
 8000da0:	080056b4 	.word	0x080056b4
 8000da4:	200001d4 	.word	0x200001d4
 8000da8:	080056bc 	.word	0x080056bc
 8000dac:	0800564c 	.word	0x0800564c
 8000db0:	0800568c 	.word	0x0800568c
 8000db4:	080056c4 	.word	0x080056c4
 8000db8:	080056d0 	.word	0x080056d0
 8000dbc:	080056d8 	.word	0x080056d8
 8000dc0:	080056e0 	.word	0x080056e0
 8000dc4:	080056e4 	.word	0x080056e4
 8000dc8:	080056f0 	.word	0x080056f0
 8000dcc:	080056f4 	.word	0x080056f4
 8000dd0:	08005538 	.word	0x08005538
 8000dd4:	08005700 	.word	0x08005700
 8000dd8:	0800570c 	.word	0x0800570c
 8000ddc:	08005710 	.word	0x08005710
 8000de0:	0800571c 	.word	0x0800571c
 8000de4:	08005720 	.word	0x08005720
	   			  Rx_string = GSM_Send_AT_Command("AT+CPSI?\r");
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <GSM_SIM_INIT+0x3b8>)
 8000dea:	f7ff fc0d 	bl	8000608 <GSM_Send_AT_Command>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <GSM_SIM_INIT+0x3bc>)
 8000df2:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"LTE,Online")))
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <GSM_SIM_INIT+0x3bc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	491b      	ldr	r1, [pc, #108]	; (8000e68 <GSM_SIM_INIT+0x3c0>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fdda 	bl	80049b4 <strstr>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <GSM_SIM_INIT+0x370>
	   				 state=0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8000e0e:	4817      	ldr	r0, [pc, #92]	; (8000e6c <GSM_SIM_INIT+0x3c4>)
 8000e10:	f003 fcd6 	bl	80047c0 <puts>
					return 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e01e      	b.n	8000e56 <GSM_SIM_INIT+0x3ae>
	   				  substate=1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000e1c:	e018      	b.n	8000e50 <GSM_SIM_INIT+0x3a8>
				  Rx_string = GSM_Send_AT_Command("AT+CGREG=1\r");
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <GSM_SIM_INIT+0x3c8>)
 8000e20:	f7ff fbf2 	bl	8000608 <GSM_Send_AT_Command>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <GSM_SIM_INIT+0x3bc>)
 8000e28:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <GSM_SIM_INIT+0x3bc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4911      	ldr	r1, [pc, #68]	; (8000e74 <GSM_SIM_INIT+0x3cc>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fdbf 	bl	80049b4 <strstr>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <GSM_SIM_INIT+0x39e>
	   				  state=5;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000e44:	e003      	b.n	8000e4e <GSM_SIM_INIT+0x3a6>
	   			  	  state=0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8000e4e:	bf00      	nop
	   		  }
 			  break;
 8000e50:	e000      	b.n	8000e54 <GSM_SIM_INIT+0x3ac>

	  default:
	 	 break;
 8000e52:	bf00      	nop
	  switch(state)
 8000e54:	e62f      	b.n	8000ab6 <GSM_SIM_INIT+0xe>
  	}
	}
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800572c 	.word	0x0800572c
 8000e64:	200001d4 	.word	0x200001d4
 8000e68:	08005738 	.word	0x08005738
 8000e6c:	0800564c 	.word	0x0800564c
 8000e70:	08005744 	.word	0x08005744
 8000e74:	08005538 	.word	0x08005538

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000e7e:	f000 fa5f 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f83d 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f8bd 	bl	8001004 <MX_GPIO_Init>
  MX_UART4_Init();
 8000e8a:	f000 f88b 	bl	8000fa4 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 ret= GSM_SIM_INIT();
 8000e8e:	f7ff fe0b 	bl	8000aa8 <GSM_SIM_INIT>
 8000e92:	6038      	str	r0, [r7, #0]
	 if (ret==0)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <main+0x2a>
	 {
		 printf("init worked\n");
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <main+0x70>)
 8000e9c:	f003 fc90 	bl	80047c0 <puts>
 8000ea0:	e002      	b.n	8000ea8 <main+0x30>
	 }
	 else
	 {
			 printf("init NOT worked\n");
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <main+0x74>)
 8000ea4:	f003 fc8c 	bl	80047c0 <puts>
	}
	 ret = GSM_APN_SET();
 8000ea8:	f7ff fd1c 	bl	80008e4 <GSM_APN_SET>
 8000eac:	6038      	str	r0, [r7, #0]
	 if (ret==0)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d106      	bne.n	8000ec2 <main+0x4a>
		 {
			 printf("APN SET worked\n");
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <main+0x78>)
 8000eb6:	f003 fc83 	bl	80047c0 <puts>
			ret1= GSM_TCP_init();
 8000eba:	f7ff fbcf 	bl	800065c <GSM_TCP_init>
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	e002      	b.n	8000ec8 <main+0x50>
		 }
		 else
		 {
				 printf("APN SET NOT worked\n");
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <main+0x7c>)
 8000ec4:	f003 fc7c 	bl	80047c0 <puts>
		}
	 if (ret1==0)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <main+0x5e>
	 	 {
	 		 printf("tcp worked\n");
 8000ece:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <main+0x80>)
 8000ed0:	f003 fc76 	bl	80047c0 <puts>
	 		 break;
 8000ed4:	e003      	b.n	8000ede <main+0x66>
	 	 }
	 	 else
	 	 {
	 			 printf("tcp NOT worked\n");
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <main+0x84>)
 8000ed8:	f003 fc72 	bl	80047c0 <puts>
	 ret= GSM_SIM_INIT();
 8000edc:	e7d7      	b.n	8000e8e <main+0x16>
 8000ede:	2300      	movs	r3, #0
	 	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08005750 	.word	0x08005750
 8000eec:	0800575c 	.word	0x0800575c
 8000ef0:	0800576c 	.word	0x0800576c
 8000ef4:	0800577c 	.word	0x0800577c
 8000ef8:	08005790 	.word	0x08005790
 8000efc:	0800579c 	.word	0x0800579c

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b096      	sub	sp, #88	; 0x58
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2244      	movs	r2, #68	; 0x44
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fd36 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f26:	f000 fdcf 	bl	8001ac8 <HAL_PWREx_ControlVoltageScaling>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f30:	f000 f880 	bl	8001034 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	2302      	movs	r3, #2
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f52:	2307      	movs	r3, #7
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fe06 	bl	8001b74 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f6e:	f000 f861 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2303      	movs	r3, #3
 8000f78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 f9ce 	bl	800232c <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f96:	f000 f84d 	bl	8001034 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3758      	adds	r7, #88	; 0x58
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_UART4_Init+0x58>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <MX_UART4_Init+0x5c>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_UART4_Init+0x58>)
 8000fe8:	f002 f880 	bl	80030ec <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ff2:	f000 f81f 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000084 	.word	0x20000084
 8001000:	40004c00 	.word	0x40004c00

08001004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_GPIO_Init+0x2c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <MX_GPIO_Init+0x2c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_GPIO_Init+0x2c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x44>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x44>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6593      	str	r3, [r2, #88]	; 0x58
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ac      	sub	sp, #176	; 0xb0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2288      	movs	r2, #136	; 0x88
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fc69 	bl	8004980 <memset>
  if(huart->Instance==UART4)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <HAL_UART_MspInit+0xc0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d143      	bne.n	8001140 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010b8:	2308      	movs	r3, #8
 80010ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fb55 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d0:	f7ff ffb0 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800111c:	2308      	movs	r3, #8
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fb14 	bl	8001758 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2034      	movs	r0, #52	; 0x34
 8001136:	f000 fa5a 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800113a:	2034      	movs	r0, #52	; 0x34
 800113c:	f000 fa73 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	37b0      	adds	r7, #176	; 0xb0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004c00 	.word	0x40004c00
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f92c 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <UART4_IRQHandler+0x10>)
 80011aa:	f002 f915 	bl	80033d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000084 	.word	0x20000084

080011b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00a      	b.n	80011e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ca:	f3af 8000 	nop.w
 80011ce:	4601      	mov	r1, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbf0      	blt.n	80011ca <_read+0x12>
  }

  return len;
 80011e8:	687b      	ldr	r3, [r7, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121a:	605a      	str	r2, [r3, #4]
  return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_isatty>:

int _isatty(int file)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 fbee 	bl	8004a6c <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20018000 	.word	0x20018000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	200001dc 	.word	0x200001dc
 80012c4:	20000330 	.word	0x20000330

080012c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff ffea 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopForever+0xe>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopForever+0x16>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f003 fbad 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131e:	f7ff fdab 	bl	8000e78 <main>

08001322 <LoopForever>:

LoopForever:
    b LoopForever
 8001322:	e7fe      	b.n	8001322 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001330:	08005838 	.word	0x08005838
  ldr r2, =_sbss
 8001334:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001338:	20000330 	.word	0x20000330

0800133c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_2_IRQHandler>
	...

08001340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_Init+0x3c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_Init+0x3c>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	2003      	movs	r0, #3
 8001358:	f000 f93e 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f80f 	bl	8001380 <HAL_InitTick>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	e001      	b.n	8001372 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136e:	f7ff fe67 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_InitTick+0x6c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d023      	beq.n	80013dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_InitTick+0x70>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_InitTick+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f949 	bl	8001642 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d809      	bhi.n	80013d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f913 	bl	80015ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e007      	b.n	80013e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e004      	b.n	80013e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e001      	b.n	80013e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	200001e0 	.word	0x200001e0

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200001e0 	.word	0x200001e0

08001438 <__NVIC_SetPriorityGrouping>:
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d008      	beq.n	8001684 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e022      	b.n	80016ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 020e 	bic.w	r2, r2, #14
 8001692:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f003 021c 	and.w	r2, r3, #28
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e029      	b.n	800174e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 021c 	and.w	r2, r3, #28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f202 	lsl.w	r2, r1, r2
 800172c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    }
  }
  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e17f      	b.n	8001a68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8171 	beq.w	8001a62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d005      	beq.n	8001798 <HAL_GPIO_Init+0x40>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d118      	bne.n	8001838 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80ac 	beq.w	8001a62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_GPIO_Init+0x330>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	4a5e      	ldr	r2, [pc, #376]	; (8001a88 <HAL_GPIO_Init+0x330>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6613      	str	r3, [r2, #96]	; 0x60
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_GPIO_Init+0x330>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001922:	4a5a      	ldr	r2, [pc, #360]	; (8001a8c <HAL_GPIO_Init+0x334>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800194c:	d025      	beq.n	800199a <HAL_GPIO_Init+0x242>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x338>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01f      	beq.n	8001996 <HAL_GPIO_Init+0x23e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4e      	ldr	r2, [pc, #312]	; (8001a94 <HAL_GPIO_Init+0x33c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x23a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4d      	ldr	r2, [pc, #308]	; (8001a98 <HAL_GPIO_Init+0x340>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x236>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x344>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x232>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_GPIO_Init+0x348>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x22e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_GPIO_Init+0x34c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x22a>
 800197e:	2306      	movs	r3, #6
 8001980:	e00c      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001982:	2307      	movs	r3, #7
 8001984:	e00a      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001986:	2305      	movs	r3, #5
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x244>
 800198a:	2304      	movs	r3, #4
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x244>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x244>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x244>
 800199a:	2300      	movs	r3, #0
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ac:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_GPIO_Init+0x334>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_GPIO_Init+0x350>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae78 	bne.w	8001768 <HAL_GPIO_Init+0x10>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48001000 	.word	0x48001000
 8001aa0:	48001400 	.word	0x48001400
 8001aa4:	48001800 	.word	0x48001800
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad6:	d130      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae4:	d038      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2232      	movs	r2, #50	; 0x32
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0c:	e002      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d102      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f2      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	d110      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e00f      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d007      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e3ca      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	4b97      	ldr	r3, [pc, #604]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e4 	beq.w	8001d70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4a>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	f040 808b 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f040 8087 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x62>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3a2      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x7c>
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_OscConfig+0x88>
 8001bf0:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d223      	bcs.n	8001c48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd55 	bl	80026b4 <RCC_SetFlashLatencyFromMSIRange>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e383      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	496d      	ldr	r1, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4968      	ldr	r1, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 8001c46:	e025      	b.n	8001c94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4960      	ldr	r1, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	495b      	ldr	r1, [pc, #364]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fd15 	bl	80026b4 <RCC_SetFlashLatencyFromMSIRange>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e343      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c94:	f000 fc4a 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	4950      	ldr	r1, [pc, #320]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <HAL_RCC_OscConfig+0x278>)
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb61 	bl	8001380 <HAL_InitTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d052      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	e327      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d032      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb9e 	bl	8001420 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb9a 	bl	8001420 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e310      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4931      	ldr	r1, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	492c      	ldr	r1, [pc, #176]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e01a      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb6b 	bl	8001420 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fb67 	bl	8001420 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2dd      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1da>
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d074      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x21a>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d10e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d064      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d160      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e2ba      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x24a>
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e026      	b.n	8001e0c <HAL_RCC_OscConfig+0x298>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc6:	d115      	bne.n	8001df4 <HAL_RCC_OscConfig+0x280>
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a02      	ldr	r2, [pc, #8]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x298>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080057ac 	.word	0x080057ac
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000004 	.word	0x20000004
 8001df4:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9f      	ldr	r2, [pc, #636]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a9c      	ldr	r2, [pc, #624]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fb04 	bl	8001420 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fb00 	bl	8001420 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e276      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2a8>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faf0 	bl	8001420 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff faec 	bl	8001420 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e262      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d060      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x310>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d116      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x328>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e23f      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4973      	ldr	r1, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	e040      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff faab 	bl	8001420 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff faa7 	bl	8001420 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e21d      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	495f      	ldr	r1, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
 8001f00:	e018      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fa87 	bl	8001420 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff fa83 	bl	8001420 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1f9      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fa62 	bl	8001420 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fa5e 	bl	8001420 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1d4      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fa45 	bl	8001420 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fa41 	bl	8001420 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1b7      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200c:	f7ff fa08 	bl	8001420 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7ff fa04 	bl	8001420 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e17a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x4d8>
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204a:	e029      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d115      	bne.n	8002080 <HAL_RCC_OscConfig+0x50c>
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	e014      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	4b9c      	ldr	r3, [pc, #624]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a9b      	ldr	r2, [pc, #620]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002090:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a97      	ldr	r2, [pc, #604]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f9ba 	bl	8001420 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7ff f9b6 	bl	8001420 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e12a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ed      	beq.n	80020b0 <HAL_RCC_OscConfig+0x53c>
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff f9a3 	bl	8001420 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff f99f 	bl	8001420 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e113      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ed      	bne.n	80020de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a79      	ldr	r2, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80fe 	beq.w	800231a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	2b02      	cmp	r3, #2
 8002124:	f040 80d0 	bne.w	80022c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002128:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	429a      	cmp	r2, r3
 800213a:	d130      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	3b01      	subs	r3, #1
 8002148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d127      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11f      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002168:	2a07      	cmp	r2, #7
 800216a:	bf14      	ite	ne
 800216c:	2201      	movne	r2, #1
 800216e:	2200      	moveq	r2, #0
 8002170:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	4293      	cmp	r3, r2
 8002174:	d113      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d109      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d06e      	beq.n	800227c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d069      	beq.n	8002278 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0ad      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4b      	ldr	r2, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021cc:	f7ff f928 	bl	8001420 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff f924 	bl	8001420 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e09a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x784>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002202:	3a01      	subs	r2, #1
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220c:	0212      	lsls	r2, r2, #8
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	0552      	lsls	r2, r2, #21
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002220:	0852      	lsrs	r2, r2, #1
 8002222:	3a01      	subs	r2, #1
 8002224:	0652      	lsls	r2, r2, #25
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222c:	0912      	lsrs	r2, r2, #4
 800222e:	0452      	lsls	r2, r2, #17
 8002230:	430a      	orrs	r2, r1
 8002232:	4930      	ldr	r1, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002250:	f7ff f8e6 	bl	8001420 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff f8e2 	bl	8001420 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e058      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002276:	e050      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e04f      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d148      	bne.n	800231a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a0:	f7ff f8be 	bl	8001420 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f8ba 	bl	8001420 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e030      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x734>
 80022c6:	e028      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d023      	beq.n	8002316 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff f8a1 	bl	8001420 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	e00c      	b.n	80022fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff f89d 	bl	8001420 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d905      	bls.n	80022fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
 80022f4:	40021000 	.word	0x40021000
 80022f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ec      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4905      	ldr	r1, [pc, #20]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x7b4>)
 8002310:	4013      	ands	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
 8002314:	e001      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	feeefffc 	.word	0xfeeefffc

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0e7      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b75      	ldr	r3, [pc, #468]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4970      	ldr	r1, [pc, #448]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0cf      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002388:	429a      	cmp	r2, r3
 800238a:	d908      	bls.n	800239e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4960      	ldr	r1, [pc, #384]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04c      	beq.n	8002444 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0a6      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e09a      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e08e      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e086      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4943      	ldr	r1, [pc, #268]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7ff f804 	bl	8001420 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7ff f800 	bl	8001420 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e06e      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	429a      	cmp	r2, r3
 800245e:	d208      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	492b      	ldr	r1, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d210      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 0207 	bic.w	r2, r3, #7
 8002488:	4923      	ldr	r1, [pc, #140]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e036      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4918      	ldr	r1, [pc, #96]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4910      	ldr	r1, [pc, #64]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e0:	f000 f824 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	490b      	ldr	r1, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1f4>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1fc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe ff3b 	bl	8001380 <HAL_InitTick>
 800250a:	4603      	mov	r3, r0
 800250c:	72fb      	strb	r3, [r7, #11]

  return status;
 800250e:	7afb      	ldrb	r3, [r7, #11]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	080057ac 	.word	0x080057ac
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d121      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d11e      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e005      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002588:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d102      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_GetSysClockFreq+0x110>)
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e004      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_RCC_GetSysClockFreq+0x114>)
 80025b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d134      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d003      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0xac>
 80025d0:	e005      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_GetSysClockFreq+0x110>)
 80025d4:	617b      	str	r3, [r7, #20]
      break;
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_GetSysClockFreq+0x114>)
 80025da:	617b      	str	r3, [r7, #20]
      break;
 80025dc:	e002      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	617b      	str	r3, [r7, #20]
      break;
 80025e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	3301      	adds	r3, #1
 80025f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	fb03 f202 	mul.w	r2, r3, r2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	0e5b      	lsrs	r3, r3, #25
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	3301      	adds	r3, #1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002624:	69bb      	ldr	r3, [r7, #24]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	080057c4 	.word	0x080057c4
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002660:	f7ff fff0 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	080057bc 	.word	0x080057bc

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800268c:	f7ff ffda 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080057bc 	.word	0x080057bc

080026b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026cc:	f7ff f9ee 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 80026d0:	6178      	str	r0, [r7, #20]
 80026d2:	e014      	b.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026ec:	f7ff f9de 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 80026f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d10b      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d919      	bls.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2ba0      	cmp	r3, #160	; 0xa0
 8002710:	d902      	bls.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002712:	2302      	movs	r3, #2
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e013      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002718:	2301      	movs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	e010      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d902      	bls.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002724:	2303      	movs	r3, #3
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e00a      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d102      	bne.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002730:	2302      	movs	r3, #2
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e004      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d101      	bne.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 0207 	bic.w	r2, r3, #7
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800277c:	2300      	movs	r3, #0
 800277e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002780:	2300      	movs	r3, #0
 8002782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278c:	2b00      	cmp	r3, #0
 800278e:	d041      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002794:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002798:	d02a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800279a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800279e:	d824      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027aa:	d81e      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d010      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b6:	e018      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b8:	4b86      	ldr	r3, [pc, #536]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a85      	ldr	r2, [pc, #532]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c4:	e015      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fabb 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3320      	adds	r3, #32
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fba6 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e8:	e003      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	74fb      	strb	r3, [r7, #19]
      break;
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f8:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002806:	4973      	ldr	r1, [pc, #460]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d041      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002828:	d02a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800282a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800282e:	d824      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800283a:	d81e      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002846:	e018      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002848:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a61      	ldr	r2, [pc, #388]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002854:	e015      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fa73 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002866:	e00c      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3320      	adds	r3, #32
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fb5e 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	74fb      	strb	r3, [r7, #19]
      break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002888:	4b52      	ldr	r3, [pc, #328]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002896:	494f      	ldr	r1, [pc, #316]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800289e:	e001      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a0 	beq.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6593      	str	r3, [r2, #88]	; 0x58
 80028d8:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fd94 	bl	8001420 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028fa:	e009      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fd90 	bl	8001420 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	74fb      	strb	r3, [r7, #19]
        break;
 800290e:	e005      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d15c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01f      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d019      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd4f 	bl	8001420 <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002984:	e00b      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fd4b 	bl	8001420 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d902      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	74fb      	strb	r3, [r7, #19]
            break;
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ec      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	4904      	ldr	r1, [pc, #16]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ca:	e009      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
 80029d0:	e006      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e0:	7c7b      	ldrb	r3, [r7, #17]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b9e      	ldr	r3, [pc, #632]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a9d      	ldr	r2, [pc, #628]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fe:	4b98      	ldr	r3, [pc, #608]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4994      	ldr	r1, [pc, #592]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a20:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 020c 	bic.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	498c      	ldr	r1, [pc, #560]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a42:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4983      	ldr	r1, [pc, #524]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	497b      	ldr	r1, [pc, #492]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	4972      	ldr	r1, [pc, #456]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa8:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	496a      	ldr	r1, [pc, #424]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	4961      	ldr	r1, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aec:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	4959      	ldr	r1, [pc, #356]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	4950      	ldr	r1, [pc, #320]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b30:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	4948      	ldr	r1, [pc, #288]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	493f      	ldr	r1, [pc, #252]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d028      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e011      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f8c8 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d028      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	491f      	ldr	r1, [pc, #124]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfc:	60d3      	str	r3, [r2, #12]
 8002bfe:	e011      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f899 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5a:	60d3      	str	r3, [r2, #12]
 8002c5c:	e014      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f867 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02f      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	4928      	ldr	r1, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f844 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	74bb      	strb	r3, [r7, #18]
 8002cce:	e011      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3320      	adds	r3, #32
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f925 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0e:	490d      	ldr	r1, [pc, #52]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d047      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e044      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d018      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x86>
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <RCCEx_PLLSAI1_Config+0x62>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d009      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x74>
 8002da8:	e020      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dba:	e01a      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e013      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dce:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dea:	e006      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e004      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	430b      	orrs	r3, r1
 8002e18:	4944      	ldr	r1, [pc, #272]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d17d      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe faf6 	bl	8001420 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fe faf2 	bl	8001420 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4c:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ef      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d160      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	0912      	lsrs	r2, r2, #4
 8002e7c:	0452      	lsls	r2, r2, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	492a      	ldr	r1, [pc, #168]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	610b      	str	r3, [r1, #16]
 8002e86:	e027      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d112      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	0211      	lsls	r1, r2, #8
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6912      	ldr	r2, [r2, #16]
 8002ea4:	0852      	lsrs	r2, r2, #1
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0552      	lsls	r2, r2, #21
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	491f      	ldr	r1, [pc, #124]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	610b      	str	r3, [r1, #16]
 8002eb2:	e011      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6952      	ldr	r2, [r2, #20]
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0652      	lsls	r2, r2, #25
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4916      	ldr	r1, [pc, #88]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fa9c 	bl	8001420 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eec:	f7fe fa98 	bl	8001420 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
          break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4904      	ldr	r1, [pc, #16]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10d      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
       ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d047      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	e044      	b.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d018      	beq.n	8002fb6 <RCCEx_PLLSAI2_Config+0x86>
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d825      	bhi.n	8002fd4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x62>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d009      	beq.n	8002fa4 <RCCEx_PLLSAI2_Config+0x74>
 8002f90:	e020      	b.n	8002fd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f92:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11d      	bne.n	8002fda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa2:	e01a      	b.n	8002fda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb4:	e013      	b.n	8002fde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fd2:	e006      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e004      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	430b      	orrs	r3, r1
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d167      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe fa02 	bl	8001420 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800301e:	e009      	b.n	8003034 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003020:	f7fe f9fe 	bl	8001420 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	73fb      	strb	r3, [r7, #15]
        break;
 8003032:	e005      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ef      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d14a      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6892      	ldr	r2, [r2, #8]
 800305c:	0211      	lsls	r1, r2, #8
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68d2      	ldr	r2, [r2, #12]
 8003062:	0912      	lsrs	r2, r2, #4
 8003064:	0452      	lsls	r2, r2, #17
 8003066:	430a      	orrs	r2, r1
 8003068:	491f      	ldr	r1, [pc, #124]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	614b      	str	r3, [r1, #20]
 800306e:	e011      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	0211      	lsls	r1, r2, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6912      	ldr	r2, [r2, #16]
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0652      	lsls	r2, r2, #25
 800308c:	430a      	orrs	r2, r1
 800308e:	4916      	ldr	r1, [pc, #88]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	4313      	orrs	r3, r2
 8003092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe f9be 	bl	8001420 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030a8:	f7fe f9ba 	bl	8001420 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ba:	e005      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e040      	b.n	8003180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd ffba 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 ff12 	bl	8003f5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fc57 	bl	80039ec <UART_SetConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01b      	b.n	8003180 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff91 	bl	80040a0 <UART_CheckIdleState>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 80b6 	bne.w	8003310 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Receive+0x28>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0ae      	b.n	8003312 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2222      	movs	r2, #34	; 0x22
 80031c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ca:	f7fe f929 	bl	8001420 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d10e      	bne.n	8003208 <HAL_UART_Receive+0x80>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_UART_Receive+0x76>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031fc:	e02d      	b.n	800325a <HAL_UART_Receive+0xd2>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003206:	e028      	b.n	800325a <HAL_UART_Receive+0xd2>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_UART_Receive+0xa4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_UART_Receive+0x9a>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	22ff      	movs	r2, #255	; 0xff
 800321c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003220:	e01b      	b.n	800325a <HAL_UART_Receive+0xd2>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	227f      	movs	r2, #127	; 0x7f
 8003226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800322a:	e016      	b.n	800325a <HAL_UART_Receive+0xd2>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003234:	d10d      	bne.n	8003252 <HAL_UART_Receive+0xca>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Receive+0xc0>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	227f      	movs	r2, #127	; 0x7f
 8003242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003246:	e008      	b.n	800325a <HAL_UART_Receive+0xd2>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	223f      	movs	r2, #63	; 0x3f
 800324c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003250:	e003      	b.n	800325a <HAL_UART_Receive+0xd2>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003260:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	d108      	bne.n	800327e <HAL_UART_Receive+0xf6>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e003      	b.n	8003286 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003286:	e037      	b.n	80032f8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	2120      	movs	r1, #32
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 ffac 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e033      	b.n	8003312 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10c      	bne.n	80032ca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	8a7b      	ldrh	r3, [r7, #18]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e00d      	b.n	80032e6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1c1      	bne.n	8003288 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800331c:	b480      	push	{r7}
 800331e:	b08b      	sub	sp, #44	; 0x2c
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	2b20      	cmp	r3, #32
 8003330:	d147      	bne.n	80033c2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_UART_Transmit_IT+0x22>
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e040      	b.n	80033c4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d107      	bne.n	8003386 <HAL_UART_Transmit_IT+0x6a>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_UART_Transmit_IT+0xb4>)
 8003382:	66da      	str	r2, [r3, #108]	; 0x6c
 8003384:	e002      	b.n	800338c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_UART_Transmit_IT+0xb8>)
 800338a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e6      	bne.n	800338c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	372c      	adds	r7, #44	; 0x2c
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	0800446b 	.word	0x0800446b
 80033d4:	080043b3 	.word	0x080043b3

080033d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b0ba      	sub	sp, #232	; 0xe8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003402:	f640 030f 	movw	r3, #2063	; 0x80f
 8003406:	4013      	ands	r3, r2
 8003408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800340c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d115      	bne.n	8003440 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00f      	beq.n	8003440 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 82ae 	beq.w	8003992 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
      }
      return;
 800343e:	e2a8      	b.n	8003992 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8117 	beq.w	8003678 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800345a:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_UART_IRQHandler+0x298>)
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 810a 	beq.w	8003678 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <HAL_UART_IRQHandler+0xbc>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d011      	beq.n	80034c4 <HAL_UART_IRQHandler+0xec>
 80034a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2202      	movs	r2, #2
 80034b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d011      	beq.n	80034f4 <HAL_UART_IRQHandler+0x11c>
 80034d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00b      	beq.n	80034f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2204      	movs	r2, #4
 80034e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800350c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003510:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003526:	f043 0208 	orr.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <HAL_UART_IRQHandler+0x18a>
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8214 	beq.w	8003996 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d005      	beq.n	80035ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d04f      	beq.n	800365a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fe7f 	bl	80042be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d141      	bne.n	8003652 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1d9      	bne.n	80035ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	2b00      	cmp	r3, #0
 8003620:	d013      	beq.n	800364a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_UART_IRQHandler+0x29c>)
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe f851 	bl	80016d6 <HAL_DMA_Abort_IT>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d017      	beq.n	800366a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003644:	4610      	mov	r0, r2
 8003646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	e00f      	b.n	800366a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9b8 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00b      	b.n	800366a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9b4 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e007      	b.n	800366a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9b0 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003668:	e195      	b.n	8003996 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366a:	bf00      	nop
    return;
 800366c:	e193      	b.n	8003996 <HAL_UART_IRQHandler+0x5be>
 800366e:	bf00      	nop
 8003670:	04000120 	.word	0x04000120
 8003674:	08004387 	.word	0x08004387

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 814e 	bne.w	800391e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8147 	beq.w	800391e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8140 	beq.w	800391e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2210      	movs	r2, #16
 80036a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	f040 80b8 	bne.w	8003826 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8167 	beq.w	800399a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036d6:	429a      	cmp	r2, r3
 80036d8:	f080 815f 	bcs.w	800399a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8086 	bne.w	8003804 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800370c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003726:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800372e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800373a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1da      	bne.n	80036f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800376e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e1      	bne.n	8003742 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d4:	f023 0310 	bic.w	r3, r3, #16
 80037d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80037e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e4      	bne.n	80037c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd ff2b 	bl	800165a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003816:	b29b      	uxth	r3, r3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8d8 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003824:	e0b9      	b.n	800399a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003832:	b29b      	uxth	r3, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80ab 	beq.w	800399e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a6 	beq.w	800399e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800387a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e4      	bne.n	8003852 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	623b      	str	r3, [r7, #32]
   return(result);
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038ac:	633a      	str	r2, [r7, #48]	; 0x30
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e3      	bne.n	8003888 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	617b      	str	r3, [r7, #20]
   return(result);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e4      	bne.n	80038d4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f85c 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800391c:	e03f      	b.n	800399e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <HAL_UART_IRQHandler+0x570>
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800393e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fe1c 	bl	800457e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003946:	e02d      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
    }
    return;
 8003970:	e017      	b.n	80039a2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d012      	beq.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fdcd 	bl	800452a <UART_EndTransmit_IT>
    return;
 8003990:	e008      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003992:	bf00      	nop
 8003994:	e006      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003996:	bf00      	nop
 8003998:	e004      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80039a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039a4:	37e8      	adds	r7, #232	; 0xe8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f0:	b08a      	sub	sp, #40	; 0x28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4ba4      	ldr	r3, [pc, #656]	; (8003cac <UART_SetConfig+0x2c0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a99      	ldr	r2, [pc, #612]	; (8003cb0 <UART_SetConfig+0x2c4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	4313      	orrs	r3, r2
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a90      	ldr	r2, [pc, #576]	; (8003cb4 <UART_SetConfig+0x2c8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d126      	bne.n	8003ac4 <UART_SetConfig+0xd8>
 8003a76:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d81b      	bhi.n	8003abc <UART_SetConfig+0xd0>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0xa0>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e116      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e112      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003aac:	2304      	movs	r3, #4
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e10e      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e10a      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003abc:	2310      	movs	r3, #16
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e106      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d138      	bne.n	8003b40 <UART_SetConfig+0x154>
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d82d      	bhi.n	8003b38 <UART_SetConfig+0x14c>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0xf8>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003b39 	.word	0x08003b39
 8003aec:	08003b39 	.word	0x08003b39
 8003af0:	08003b39 	.word	0x08003b39
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b39 	.word	0x08003b39
 8003afc:	08003b39 	.word	0x08003b39
 8003b00:	08003b39 	.word	0x08003b39
 8003b04:	08003b21 	.word	0x08003b21
 8003b08:	08003b39 	.word	0x08003b39
 8003b0c:	08003b39 	.word	0x08003b39
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e0d8      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e0d4      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e0d0      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b30:	2308      	movs	r3, #8
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e0cc      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e0c8      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5e      	ldr	r2, [pc, #376]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d125      	bne.n	8003b96 <UART_SetConfig+0x1aa>
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b54:	2b30      	cmp	r3, #48	; 0x30
 8003b56:	d016      	beq.n	8003b86 <UART_SetConfig+0x19a>
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d818      	bhi.n	8003b8e <UART_SetConfig+0x1a2>
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d00a      	beq.n	8003b76 <UART_SetConfig+0x18a>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d814      	bhi.n	8003b8e <UART_SetConfig+0x1a2>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <UART_SetConfig+0x182>
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d008      	beq.n	8003b7e <UART_SetConfig+0x192>
 8003b6c:	e00f      	b.n	8003b8e <UART_SetConfig+0x1a2>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b74:	e0ad      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b76:	2302      	movs	r3, #2
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7c:	e0a9      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b84:	e0a5      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b86:	2308      	movs	r3, #8
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8c:	e0a1      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b8e:	2310      	movs	r3, #16
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b94:	e09d      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <UART_SetConfig+0x2d8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d125      	bne.n	8003bec <UART_SetConfig+0x200>
 8003ba0:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003baa:	2bc0      	cmp	r3, #192	; 0xc0
 8003bac:	d016      	beq.n	8003bdc <UART_SetConfig+0x1f0>
 8003bae:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb0:	d818      	bhi.n	8003be4 <UART_SetConfig+0x1f8>
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d00a      	beq.n	8003bcc <UART_SetConfig+0x1e0>
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d814      	bhi.n	8003be4 <UART_SetConfig+0x1f8>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <UART_SetConfig+0x1d8>
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d008      	beq.n	8003bd4 <UART_SetConfig+0x1e8>
 8003bc2:	e00f      	b.n	8003be4 <UART_SetConfig+0x1f8>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bca:	e082      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd2:	e07e      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e07a      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e076      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e072      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <UART_SetConfig+0x2dc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d12a      	bne.n	8003c4c <UART_SetConfig+0x260>
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c04:	d01a      	beq.n	8003c3c <UART_SetConfig+0x250>
 8003c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0a:	d81b      	bhi.n	8003c44 <UART_SetConfig+0x258>
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c10:	d00c      	beq.n	8003c2c <UART_SetConfig+0x240>
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d815      	bhi.n	8003c44 <UART_SetConfig+0x258>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <UART_SetConfig+0x238>
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c20:	d008      	beq.n	8003c34 <UART_SetConfig+0x248>
 8003c22:	e00f      	b.n	8003c44 <UART_SetConfig+0x258>
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e052      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e04e      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c34:	2304      	movs	r3, #4
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e04a      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e046      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e042      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <UART_SetConfig+0x2c4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d13a      	bne.n	8003ccc <UART_SetConfig+0x2e0>
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c64:	d01a      	beq.n	8003c9c <UART_SetConfig+0x2b0>
 8003c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c6a:	d81b      	bhi.n	8003ca4 <UART_SetConfig+0x2b8>
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d00c      	beq.n	8003c8c <UART_SetConfig+0x2a0>
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c76:	d815      	bhi.n	8003ca4 <UART_SetConfig+0x2b8>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <UART_SetConfig+0x298>
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d008      	beq.n	8003c94 <UART_SetConfig+0x2a8>
 8003c82:	e00f      	b.n	8003ca4 <UART_SetConfig+0x2b8>
 8003c84:	2300      	movs	r3, #0
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e022      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c92:	e01e      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c94:	2304      	movs	r3, #4
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e01a      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e016      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003caa:	e012      	b.n	8003cd2 <UART_SetConfig+0x2e6>
 8003cac:	efff69f3 	.word	0xefff69f3
 8003cb0:	40008000 	.word	0x40008000
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40004400 	.word	0x40004400
 8003cc0:	40004800 	.word	0x40004800
 8003cc4:	40004c00 	.word	0x40004c00
 8003cc8:	40005000 	.word	0x40005000
 8003ccc:	2310      	movs	r3, #16
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a9f      	ldr	r2, [pc, #636]	; (8003f54 <UART_SetConfig+0x568>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d17a      	bne.n	8003dd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d824      	bhi.n	8003d2e <UART_SetConfig+0x342>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x300>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d1f 	.word	0x08003d1f
 8003d00:	08003d2f 	.word	0x08003d2f
 8003d04:	08003d2f 	.word	0x08003d2f
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe fca4 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003d14:	61f8      	str	r0, [r7, #28]
        break;
 8003d16:	e010      	b.n	8003d3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b8f      	ldr	r3, [pc, #572]	; (8003f58 <UART_SetConfig+0x56c>)
 8003d1a:	61fb      	str	r3, [r7, #28]
        break;
 8003d1c:	e00d      	b.n	8003d3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe fc05 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003d22:	61f8      	str	r0, [r7, #28]
        break;
 8003d24:	e009      	b.n	8003d3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	61fb      	str	r3, [r7, #28]
        break;
 8003d2c:	e005      	b.n	8003d3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80fb 	beq.w	8003f38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d305      	bcc.n	8003d5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d903      	bls.n	8003d66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d64:	e0e8      	b.n	8003f38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	461c      	mov	r4, r3
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	022b      	lsls	r3, r5, #8
 8003d78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d7c:	0222      	lsls	r2, r4, #8
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	6849      	ldr	r1, [r1, #4]
 8003d82:	0849      	lsrs	r1, r1, #1
 8003d84:	2000      	movs	r0, #0
 8003d86:	4688      	mov	r8, r1
 8003d88:	4681      	mov	r9, r0
 8003d8a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d8e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003da0:	4650      	mov	r0, sl
 8003da2:	4659      	mov	r1, fp
 8003da4:	f7fc fa6c 	bl	8000280 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db6:	d308      	bcc.n	8003dca <UART_SetConfig+0x3de>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d204      	bcs.n	8003dca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	e0b6      	b.n	8003f38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dd0:	e0b2      	b.n	8003f38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d15e      	bne.n	8003e9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d828      	bhi.n	8003e36 <UART_SetConfig+0x44a>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0x400>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e37 	.word	0x08003e37
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	08003e37 	.word	0x08003e37
 8003e04:	08003e37 	.word	0x08003e37
 8003e08:	08003e37 	.word	0x08003e37
 8003e0c:	08003e2f 	.word	0x08003e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e10:	f7fe fc24 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003e14:	61f8      	str	r0, [r7, #28]
        break;
 8003e16:	e014      	b.n	8003e42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e18:	f7fe fc36 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003e1c:	61f8      	str	r0, [r7, #28]
        break;
 8003e1e:	e010      	b.n	8003e42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e20:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <UART_SetConfig+0x56c>)
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e00d      	b.n	8003e42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fe fb81 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003e2a:	61f8      	str	r0, [r7, #28]
        break;
 8003e2c:	e009      	b.n	8003e42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	61fb      	str	r3, [r7, #28]
        break;
 8003e34:	e005      	b.n	8003e42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d077      	beq.n	8003f38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005a      	lsls	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b0f      	cmp	r3, #15
 8003e62:	d916      	bls.n	8003e92 <UART_SetConfig+0x4a6>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d212      	bcs.n	8003e92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f023 030f 	bic.w	r3, r3, #15
 8003e74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	8afa      	ldrh	r2, [r7, #22]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e052      	b.n	8003f38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e98:	e04e      	b.n	8003f38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d827      	bhi.n	8003ef2 <UART_SetConfig+0x506>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x4bc>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe fbc6 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61f8      	str	r0, [r7, #28]
        break;
 8003ed2:	e014      	b.n	8003efe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe fbd8 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	61f8      	str	r0, [r7, #28]
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <UART_SetConfig+0x56c>)
 8003ede:	61fb      	str	r3, [r7, #28]
        break;
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe fb23 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003ee6:	61f8      	str	r0, [r7, #28]
        break;
 8003ee8:	e009      	b.n	8003efe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	61fb      	str	r3, [r7, #28]
        break;
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003efc:	bf00      	nop
    }

    if (pclk != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d019      	beq.n	8003f38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085a      	lsrs	r2, r3, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d909      	bls.n	8003f32 <UART_SetConfig+0x546>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d205      	bcs.n	8003f32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	e002      	b.n	8003f38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3728      	adds	r7, #40	; 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	40008000 	.word	0x40008000
 8003f58:	00f42400 	.word	0x00f42400

08003f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01a      	beq.n	8004072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405a:	d10a      	bne.n	8004072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b098      	sub	sp, #96	; 0x60
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b0:	f7fd f9b6 	bl	8001420 <HAL_GetTick>
 80040b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d12e      	bne.n	8004122 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	2200      	movs	r2, #0
 80040ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f88c 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d021      	beq.n	8004122 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f2:	653b      	str	r3, [r7, #80]	; 0x50
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
 80040fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e062      	b.n	80041e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d149      	bne.n	80041c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f856 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d03c      	beq.n	80041c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	623b      	str	r3, [r7, #32]
   return(result);
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
 800416a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800416e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e6      	bne.n	800414a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	60fb      	str	r3, [r7, #12]
   return(result);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	64bb      	str	r3, [r7, #72]	; 0x48
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800419c:	61fa      	str	r2, [r7, #28]
 800419e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	617b      	str	r3, [r7, #20]
   return(result);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e011      	b.n	80041e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3758      	adds	r7, #88	; 0x58
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	e049      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d045      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fd f909 	bl	8001420 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <UART_WaitOnFlagUntilTimeout+0x30>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e048      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d031      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d110      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f838 	bl	80042be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e029      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d111      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f81e 	bl	80042be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d0a6      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042be:	b480      	push	{r7}
 80042c0:	b095      	sub	sp, #84	; 0x54
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e4:	643b      	str	r3, [r7, #64]	; 0x40
 80042e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	61fb      	str	r3, [r7, #28]
   return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	2b01      	cmp	r3, #1
 8004332:	d118      	bne.n	8004366 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60bb      	str	r3, [r7, #8]
   return(result);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	613b      	str	r3, [r7, #16]
   return(result);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	669a      	str	r2, [r3, #104]	; 0x68
}
 800437a:	bf00      	nop
 800437c:	3754      	adds	r7, #84	; 0x54
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff fb0b 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b08f      	sub	sp, #60	; 0x3c
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043be:	2b21      	cmp	r3, #33	; 0x21
 80043c0:	d14d      	bne.n	800445e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d132      	bne.n	8004434 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	61fb      	str	r3, [r7, #28]
   return(result);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	60bb      	str	r3, [r7, #8]
   return(result);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	613b      	str	r3, [r7, #16]
   return(result);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004432:	e014      	b.n	800445e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b292      	uxth	r2, r2
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800445e:	bf00      	nop
 8004460:	373c      	adds	r7, #60	; 0x3c
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b091      	sub	sp, #68	; 0x44
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004476:	2b21      	cmp	r3, #33	; 0x21
 8004478:	d151      	bne.n	800451e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d132      	bne.n	80044ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	623b      	str	r3, [r7, #32]
   return(result);
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449a:	63bb      	str	r3, [r7, #56]	; 0x38
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
 80044a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	617b      	str	r3, [r7, #20]
   return(result);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044ea:	e018      	b.n	800451e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fe:	b292      	uxth	r2, r2
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800451e:	bf00      	nop
 8004520:	3744      	adds	r7, #68	; 0x44
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b088      	sub	sp, #32
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fa1b 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <std>:
 8004594:	2300      	movs	r3, #0
 8004596:	b510      	push	{r4, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	e9c0 3300 	strd	r3, r3, [r0]
 800459e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045a2:	6083      	str	r3, [r0, #8]
 80045a4:	8181      	strh	r1, [r0, #12]
 80045a6:	6643      	str	r3, [r0, #100]	; 0x64
 80045a8:	81c2      	strh	r2, [r0, #14]
 80045aa:	6183      	str	r3, [r0, #24]
 80045ac:	4619      	mov	r1, r3
 80045ae:	2208      	movs	r2, #8
 80045b0:	305c      	adds	r0, #92	; 0x5c
 80045b2:	f000 f9e5 	bl	8004980 <memset>
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <std+0x38>)
 80045b8:	6263      	str	r3, [r4, #36]	; 0x24
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <std+0x3c>)
 80045bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <std+0x40>)
 80045c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <std+0x44>)
 80045c4:	6224      	str	r4, [r4, #32]
 80045c6:	6323      	str	r3, [r4, #48]	; 0x30
 80045c8:	bd10      	pop	{r4, pc}
 80045ca:	bf00      	nop
 80045cc:	080047d1 	.word	0x080047d1
 80045d0:	080047f3 	.word	0x080047f3
 80045d4:	0800482b 	.word	0x0800482b
 80045d8:	0800484f 	.word	0x0800484f

080045dc <stdio_exit_handler>:
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <stdio_exit_handler+0xc>)
 80045de:	4903      	ldr	r1, [pc, #12]	; (80045ec <stdio_exit_handler+0x10>)
 80045e0:	4803      	ldr	r0, [pc, #12]	; (80045f0 <stdio_exit_handler+0x14>)
 80045e2:	f000 b869 	b.w	80046b8 <_fwalk_sglue>
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	08005369 	.word	0x08005369
 80045f0:	20000018 	.word	0x20000018

080045f4 <cleanup_stdio>:
 80045f4:	6841      	ldr	r1, [r0, #4]
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <cleanup_stdio+0x34>)
 80045f8:	4299      	cmp	r1, r3
 80045fa:	b510      	push	{r4, lr}
 80045fc:	4604      	mov	r4, r0
 80045fe:	d001      	beq.n	8004604 <cleanup_stdio+0x10>
 8004600:	f000 feb2 	bl	8005368 <_fflush_r>
 8004604:	68a1      	ldr	r1, [r4, #8]
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <cleanup_stdio+0x38>)
 8004608:	4299      	cmp	r1, r3
 800460a:	d002      	beq.n	8004612 <cleanup_stdio+0x1e>
 800460c:	4620      	mov	r0, r4
 800460e:	f000 feab 	bl	8005368 <_fflush_r>
 8004612:	68e1      	ldr	r1, [r4, #12]
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <cleanup_stdio+0x3c>)
 8004616:	4299      	cmp	r1, r3
 8004618:	d004      	beq.n	8004624 <cleanup_stdio+0x30>
 800461a:	4620      	mov	r0, r4
 800461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004620:	f000 bea2 	b.w	8005368 <_fflush_r>
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	200001e4 	.word	0x200001e4
 800462c:	2000024c 	.word	0x2000024c
 8004630:	200002b4 	.word	0x200002b4

08004634 <global_stdio_init.part.0>:
 8004634:	b510      	push	{r4, lr}
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <global_stdio_init.part.0+0x30>)
 8004638:	4c0b      	ldr	r4, [pc, #44]	; (8004668 <global_stdio_init.part.0+0x34>)
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <global_stdio_init.part.0+0x38>)
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4620      	mov	r0, r4
 8004640:	2200      	movs	r2, #0
 8004642:	2104      	movs	r1, #4
 8004644:	f7ff ffa6 	bl	8004594 <std>
 8004648:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800464c:	2201      	movs	r2, #1
 800464e:	2109      	movs	r1, #9
 8004650:	f7ff ffa0 	bl	8004594 <std>
 8004654:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004658:	2202      	movs	r2, #2
 800465a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800465e:	2112      	movs	r1, #18
 8004660:	f7ff bf98 	b.w	8004594 <std>
 8004664:	2000031c 	.word	0x2000031c
 8004668:	200001e4 	.word	0x200001e4
 800466c:	080045dd 	.word	0x080045dd

08004670 <__sfp_lock_acquire>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__sfp_lock_acquire+0x8>)
 8004672:	f000 ba25 	b.w	8004ac0 <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	20000325 	.word	0x20000325

0800467c <__sfp_lock_release>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sfp_lock_release+0x8>)
 800467e:	f000 ba20 	b.w	8004ac2 <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	20000325 	.word	0x20000325

08004688 <__sinit>:
 8004688:	b510      	push	{r4, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	f7ff fff0 	bl	8004670 <__sfp_lock_acquire>
 8004690:	6a23      	ldr	r3, [r4, #32]
 8004692:	b11b      	cbz	r3, 800469c <__sinit+0x14>
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f7ff bff0 	b.w	800467c <__sfp_lock_release>
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <__sinit+0x28>)
 800469e:	6223      	str	r3, [r4, #32]
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <__sinit+0x2c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f5      	bne.n	8004694 <__sinit+0xc>
 80046a8:	f7ff ffc4 	bl	8004634 <global_stdio_init.part.0>
 80046ac:	e7f2      	b.n	8004694 <__sinit+0xc>
 80046ae:	bf00      	nop
 80046b0:	080045f5 	.word	0x080045f5
 80046b4:	2000031c 	.word	0x2000031c

080046b8 <_fwalk_sglue>:
 80046b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046bc:	4607      	mov	r7, r0
 80046be:	4688      	mov	r8, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	2600      	movs	r6, #0
 80046c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046c8:	f1b9 0901 	subs.w	r9, r9, #1
 80046cc:	d505      	bpl.n	80046da <_fwalk_sglue+0x22>
 80046ce:	6824      	ldr	r4, [r4, #0]
 80046d0:	2c00      	cmp	r4, #0
 80046d2:	d1f7      	bne.n	80046c4 <_fwalk_sglue+0xc>
 80046d4:	4630      	mov	r0, r6
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	89ab      	ldrh	r3, [r5, #12]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d907      	bls.n	80046f0 <_fwalk_sglue+0x38>
 80046e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046e4:	3301      	adds	r3, #1
 80046e6:	d003      	beq.n	80046f0 <_fwalk_sglue+0x38>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4638      	mov	r0, r7
 80046ec:	47c0      	blx	r8
 80046ee:	4306      	orrs	r6, r0
 80046f0:	3568      	adds	r5, #104	; 0x68
 80046f2:	e7e9      	b.n	80046c8 <_fwalk_sglue+0x10>

080046f4 <iprintf>:
 80046f4:	b40f      	push	{r0, r1, r2, r3}
 80046f6:	b507      	push	{r0, r1, r2, lr}
 80046f8:	4906      	ldr	r1, [pc, #24]	; (8004714 <iprintf+0x20>)
 80046fa:	ab04      	add	r3, sp, #16
 80046fc:	6808      	ldr	r0, [r1, #0]
 80046fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004702:	6881      	ldr	r1, [r0, #8]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	f000 faff 	bl	8004d08 <_vfiprintf_r>
 800470a:	b003      	add	sp, #12
 800470c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004710:	b004      	add	sp, #16
 8004712:	4770      	bx	lr
 8004714:	20000064 	.word	0x20000064

08004718 <_puts_r>:
 8004718:	6a03      	ldr	r3, [r0, #32]
 800471a:	b570      	push	{r4, r5, r6, lr}
 800471c:	6884      	ldr	r4, [r0, #8]
 800471e:	4605      	mov	r5, r0
 8004720:	460e      	mov	r6, r1
 8004722:	b90b      	cbnz	r3, 8004728 <_puts_r+0x10>
 8004724:	f7ff ffb0 	bl	8004688 <__sinit>
 8004728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800472a:	07db      	lsls	r3, r3, #31
 800472c:	d405      	bmi.n	800473a <_puts_r+0x22>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	0598      	lsls	r0, r3, #22
 8004732:	d402      	bmi.n	800473a <_puts_r+0x22>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f000 f9c3 	bl	8004ac0 <__retarget_lock_acquire_recursive>
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	0719      	lsls	r1, r3, #28
 800473e:	d513      	bpl.n	8004768 <_puts_r+0x50>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	b18b      	cbz	r3, 8004768 <_puts_r+0x50>
 8004744:	3e01      	subs	r6, #1
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800474c:	3b01      	subs	r3, #1
 800474e:	60a3      	str	r3, [r4, #8]
 8004750:	b9e9      	cbnz	r1, 800478e <_puts_r+0x76>
 8004752:	2b00      	cmp	r3, #0
 8004754:	da2e      	bge.n	80047b4 <_puts_r+0x9c>
 8004756:	4622      	mov	r2, r4
 8004758:	210a      	movs	r1, #10
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f87b 	bl	8004856 <__swbuf_r>
 8004760:	3001      	adds	r0, #1
 8004762:	d007      	beq.n	8004774 <_puts_r+0x5c>
 8004764:	250a      	movs	r5, #10
 8004766:	e007      	b.n	8004778 <_puts_r+0x60>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f8b0 	bl	80048d0 <__swsetup_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0e7      	beq.n	8004744 <_puts_r+0x2c>
 8004774:	f04f 35ff 	mov.w	r5, #4294967295
 8004778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477a:	07da      	lsls	r2, r3, #31
 800477c:	d405      	bmi.n	800478a <_puts_r+0x72>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	059b      	lsls	r3, r3, #22
 8004782:	d402      	bmi.n	800478a <_puts_r+0x72>
 8004784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004786:	f000 f99c 	bl	8004ac2 <__retarget_lock_release_recursive>
 800478a:	4628      	mov	r0, r5
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	2b00      	cmp	r3, #0
 8004790:	da04      	bge.n	800479c <_puts_r+0x84>
 8004792:	69a2      	ldr	r2, [r4, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	dc06      	bgt.n	80047a6 <_puts_r+0x8e>
 8004798:	290a      	cmp	r1, #10
 800479a:	d004      	beq.n	80047a6 <_puts_r+0x8e>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	7019      	strb	r1, [r3, #0]
 80047a4:	e7cf      	b.n	8004746 <_puts_r+0x2e>
 80047a6:	4622      	mov	r2, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f854 	bl	8004856 <__swbuf_r>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d1c9      	bne.n	8004746 <_puts_r+0x2e>
 80047b2:	e7df      	b.n	8004774 <_puts_r+0x5c>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	250a      	movs	r5, #10
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	701d      	strb	r5, [r3, #0]
 80047be:	e7db      	b.n	8004778 <_puts_r+0x60>

080047c0 <puts>:
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <puts+0xc>)
 80047c2:	4601      	mov	r1, r0
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f7ff bfa7 	b.w	8004718 <_puts_r>
 80047ca:	bf00      	nop
 80047cc:	20000064 	.word	0x20000064

080047d0 <__sread>:
 80047d0:	b510      	push	{r4, lr}
 80047d2:	460c      	mov	r4, r1
 80047d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d8:	f000 f924 	bl	8004a24 <_read_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	bfab      	itete	ge
 80047e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047e2:	89a3      	ldrhlt	r3, [r4, #12]
 80047e4:	181b      	addge	r3, r3, r0
 80047e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ea:	bfac      	ite	ge
 80047ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ee:	81a3      	strhlt	r3, [r4, #12]
 80047f0:	bd10      	pop	{r4, pc}

080047f2 <__swrite>:
 80047f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f6:	461f      	mov	r7, r3
 80047f8:	898b      	ldrh	r3, [r1, #12]
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	4605      	mov	r5, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	4616      	mov	r6, r2
 8004802:	d505      	bpl.n	8004810 <__swrite+0x1e>
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	2302      	movs	r3, #2
 800480a:	2200      	movs	r2, #0
 800480c:	f000 f8f8 	bl	8004a00 <_lseek_r>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	4632      	mov	r2, r6
 800481e:	463b      	mov	r3, r7
 8004820:	4628      	mov	r0, r5
 8004822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	f000 b90f 	b.w	8004a48 <_write_r>

0800482a <__sseek>:
 800482a:	b510      	push	{r4, lr}
 800482c:	460c      	mov	r4, r1
 800482e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004832:	f000 f8e5 	bl	8004a00 <_lseek_r>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	bf15      	itete	ne
 800483c:	6560      	strne	r0, [r4, #84]	; 0x54
 800483e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004846:	81a3      	strheq	r3, [r4, #12]
 8004848:	bf18      	it	ne
 800484a:	81a3      	strhne	r3, [r4, #12]
 800484c:	bd10      	pop	{r4, pc}

0800484e <__sclose>:
 800484e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004852:	f000 b8c5 	b.w	80049e0 <_close_r>

08004856 <__swbuf_r>:
 8004856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004858:	460e      	mov	r6, r1
 800485a:	4614      	mov	r4, r2
 800485c:	4605      	mov	r5, r0
 800485e:	b118      	cbz	r0, 8004868 <__swbuf_r+0x12>
 8004860:	6a03      	ldr	r3, [r0, #32]
 8004862:	b90b      	cbnz	r3, 8004868 <__swbuf_r+0x12>
 8004864:	f7ff ff10 	bl	8004688 <__sinit>
 8004868:	69a3      	ldr	r3, [r4, #24]
 800486a:	60a3      	str	r3, [r4, #8]
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	071a      	lsls	r2, r3, #28
 8004870:	d525      	bpl.n	80048be <__swbuf_r+0x68>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	b31b      	cbz	r3, 80048be <__swbuf_r+0x68>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	1a98      	subs	r0, r3, r2
 800487c:	6963      	ldr	r3, [r4, #20]
 800487e:	b2f6      	uxtb	r6, r6
 8004880:	4283      	cmp	r3, r0
 8004882:	4637      	mov	r7, r6
 8004884:	dc04      	bgt.n	8004890 <__swbuf_r+0x3a>
 8004886:	4621      	mov	r1, r4
 8004888:	4628      	mov	r0, r5
 800488a:	f000 fd6d 	bl	8005368 <_fflush_r>
 800488e:	b9e0      	cbnz	r0, 80048ca <__swbuf_r+0x74>
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	60a3      	str	r3, [r4, #8]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	701e      	strb	r6, [r3, #0]
 800489e:	6962      	ldr	r2, [r4, #20]
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d004      	beq.n	80048b0 <__swbuf_r+0x5a>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	07db      	lsls	r3, r3, #31
 80048aa:	d506      	bpl.n	80048ba <__swbuf_r+0x64>
 80048ac:	2e0a      	cmp	r6, #10
 80048ae:	d104      	bne.n	80048ba <__swbuf_r+0x64>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 fd58 	bl	8005368 <_fflush_r>
 80048b8:	b938      	cbnz	r0, 80048ca <__swbuf_r+0x74>
 80048ba:	4638      	mov	r0, r7
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 f805 	bl	80048d0 <__swsetup_r>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d0d5      	beq.n	8004876 <__swbuf_r+0x20>
 80048ca:	f04f 37ff 	mov.w	r7, #4294967295
 80048ce:	e7f4      	b.n	80048ba <__swbuf_r+0x64>

080048d0 <__swsetup_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <__swsetup_r+0xac>)
 80048d4:	4605      	mov	r5, r0
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	460c      	mov	r4, r1
 80048da:	b118      	cbz	r0, 80048e4 <__swsetup_r+0x14>
 80048dc:	6a03      	ldr	r3, [r0, #32]
 80048de:	b90b      	cbnz	r3, 80048e4 <__swsetup_r+0x14>
 80048e0:	f7ff fed2 	bl	8004688 <__sinit>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048ea:	0718      	lsls	r0, r3, #28
 80048ec:	d422      	bmi.n	8004934 <__swsetup_r+0x64>
 80048ee:	06d9      	lsls	r1, r3, #27
 80048f0:	d407      	bmi.n	8004902 <__swsetup_r+0x32>
 80048f2:	2309      	movs	r3, #9
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048fa:	81a3      	strh	r3, [r4, #12]
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	e034      	b.n	800496c <__swsetup_r+0x9c>
 8004902:	0758      	lsls	r0, r3, #29
 8004904:	d512      	bpl.n	800492c <__swsetup_r+0x5c>
 8004906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004908:	b141      	cbz	r1, 800491c <__swsetup_r+0x4c>
 800490a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800490e:	4299      	cmp	r1, r3
 8004910:	d002      	beq.n	8004918 <__swsetup_r+0x48>
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f8d6 	bl	8004ac4 <_free_r>
 8004918:	2300      	movs	r3, #0
 800491a:	6363      	str	r3, [r4, #52]	; 0x34
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	2300      	movs	r3, #0
 8004926:	6063      	str	r3, [r4, #4]
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f043 0308 	orr.w	r3, r3, #8
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b94b      	cbnz	r3, 800494c <__swsetup_r+0x7c>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800493e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004942:	d003      	beq.n	800494c <__swsetup_r+0x7c>
 8004944:	4621      	mov	r1, r4
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fd5c 	bl	8005404 <__smakebuf_r>
 800494c:	89a0      	ldrh	r0, [r4, #12]
 800494e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004952:	f010 0301 	ands.w	r3, r0, #1
 8004956:	d00a      	beq.n	800496e <__swsetup_r+0x9e>
 8004958:	2300      	movs	r3, #0
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	6963      	ldr	r3, [r4, #20]
 800495e:	425b      	negs	r3, r3
 8004960:	61a3      	str	r3, [r4, #24]
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	b943      	cbnz	r3, 8004978 <__swsetup_r+0xa8>
 8004966:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800496a:	d1c4      	bne.n	80048f6 <__swsetup_r+0x26>
 800496c:	bd38      	pop	{r3, r4, r5, pc}
 800496e:	0781      	lsls	r1, r0, #30
 8004970:	bf58      	it	pl
 8004972:	6963      	ldrpl	r3, [r4, #20]
 8004974:	60a3      	str	r3, [r4, #8]
 8004976:	e7f4      	b.n	8004962 <__swsetup_r+0x92>
 8004978:	2000      	movs	r0, #0
 800497a:	e7f7      	b.n	800496c <__swsetup_r+0x9c>
 800497c:	20000064 	.word	0x20000064

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <strncmp>:
 8004990:	b510      	push	{r4, lr}
 8004992:	b16a      	cbz	r2, 80049b0 <strncmp+0x20>
 8004994:	3901      	subs	r1, #1
 8004996:	1884      	adds	r4, r0, r2
 8004998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d103      	bne.n	80049ac <strncmp+0x1c>
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d001      	beq.n	80049ac <strncmp+0x1c>
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	d1f5      	bne.n	8004998 <strncmp+0x8>
 80049ac:	1ad0      	subs	r0, r2, r3
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	4610      	mov	r0, r2
 80049b2:	e7fc      	b.n	80049ae <strncmp+0x1e>

080049b4 <strstr>:
 80049b4:	780a      	ldrb	r2, [r1, #0]
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	b96a      	cbnz	r2, 80049d6 <strstr+0x22>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	429a      	cmp	r2, r3
 80049be:	d109      	bne.n	80049d4 <strstr+0x20>
 80049c0:	460c      	mov	r4, r1
 80049c2:	4605      	mov	r5, r0
 80049c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f6      	beq.n	80049ba <strstr+0x6>
 80049cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80049d0:	429e      	cmp	r6, r3
 80049d2:	d0f7      	beq.n	80049c4 <strstr+0x10>
 80049d4:	3001      	adds	r0, #1
 80049d6:	7803      	ldrb	r3, [r0, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ef      	bne.n	80049bc <strstr+0x8>
 80049dc:	4618      	mov	r0, r3
 80049de:	e7ec      	b.n	80049ba <strstr+0x6>

080049e0 <_close_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	; (80049fc <_close_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc fc01 	bl	80011f2 <_close>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_close_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_close_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000320 	.word	0x20000320

08004a00 <_lseek_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d07      	ldr	r5, [pc, #28]	; (8004a20 <_lseek_r+0x20>)
 8004a04:	4604      	mov	r4, r0
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fc fc16 	bl	8001240 <_lseek>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_lseek_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_lseek_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000320 	.word	0x20000320

08004a24 <_read_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d07      	ldr	r5, [pc, #28]	; (8004a44 <_read_r+0x20>)
 8004a28:	4604      	mov	r4, r0
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	602a      	str	r2, [r5, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f7fc fbc0 	bl	80011b8 <_read>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_read_r+0x1e>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_read_r+0x1e>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	20000320 	.word	0x20000320

08004a48 <_write_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d07      	ldr	r5, [pc, #28]	; (8004a68 <_write_r+0x20>)
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	4608      	mov	r0, r1
 8004a50:	4611      	mov	r1, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	602a      	str	r2, [r5, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fb fdb7 	bl	80005ca <_write>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_write_r+0x1e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_write_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000320 	.word	0x20000320

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000064 	.word	0x20000064

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 fd28 	bl	80054e0 <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005830 	.word	0x08005830
 8004ab4:	08005830 	.word	0x08005830
 8004ab8:	08005830 	.word	0x08005830
 8004abc:	08005834 	.word	0x08005834

08004ac0 <__retarget_lock_acquire_recursive>:
 8004ac0:	4770      	bx	lr

08004ac2 <__retarget_lock_release_recursive>:
 8004ac2:	4770      	bx	lr

08004ac4 <_free_r>:
 8004ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	d044      	beq.n	8004b54 <_free_r+0x90>
 8004aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ace:	9001      	str	r0, [sp, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ad6:	bfb8      	it	lt
 8004ad8:	18e4      	addlt	r4, r4, r3
 8004ada:	f000 f8df 	bl	8004c9c <__malloc_lock>
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <_free_r+0x94>)
 8004ae0:	9801      	ldr	r0, [sp, #4]
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	b933      	cbnz	r3, 8004af4 <_free_r+0x30>
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6014      	str	r4, [r2, #0]
 8004aea:	b003      	add	sp, #12
 8004aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af0:	f000 b8da 	b.w	8004ca8 <__malloc_unlock>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d908      	bls.n	8004b0a <_free_r+0x46>
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf01      	itttt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	1949      	addeq	r1, r1, r5
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	e7ed      	b.n	8004ae6 <_free_r+0x22>
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b10b      	cbz	r3, 8004b14 <_free_r+0x50>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d9fa      	bls.n	8004b0a <_free_r+0x46>
 8004b14:	6811      	ldr	r1, [r2, #0]
 8004b16:	1855      	adds	r5, r2, r1
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d10b      	bne.n	8004b34 <_free_r+0x70>
 8004b1c:	6824      	ldr	r4, [r4, #0]
 8004b1e:	4421      	add	r1, r4
 8004b20:	1854      	adds	r4, r2, r1
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	d1e0      	bne.n	8004aea <_free_r+0x26>
 8004b28:	681c      	ldr	r4, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	6053      	str	r3, [r2, #4]
 8004b2e:	440c      	add	r4, r1
 8004b30:	6014      	str	r4, [r2, #0]
 8004b32:	e7da      	b.n	8004aea <_free_r+0x26>
 8004b34:	d902      	bls.n	8004b3c <_free_r+0x78>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6003      	str	r3, [r0, #0]
 8004b3a:	e7d6      	b.n	8004aea <_free_r+0x26>
 8004b3c:	6825      	ldr	r5, [r4, #0]
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf04      	itt	eq
 8004b44:	6819      	ldreq	r1, [r3, #0]
 8004b46:	685b      	ldreq	r3, [r3, #4]
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	bf04      	itt	eq
 8004b4c:	1949      	addeq	r1, r1, r5
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	6054      	str	r4, [r2, #4]
 8004b52:	e7ca      	b.n	8004aea <_free_r+0x26>
 8004b54:	b003      	add	sp, #12
 8004b56:	bd30      	pop	{r4, r5, pc}
 8004b58:	20000328 	.word	0x20000328

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0e      	ldr	r6, [pc, #56]	; (8004b98 <sbrk_aligned+0x3c>)
 8004b60:	460c      	mov	r4, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	4605      	mov	r5, r0
 8004b66:	b911      	cbnz	r1, 8004b6e <sbrk_aligned+0x12>
 8004b68:	f000 fcaa 	bl	80054c0 <_sbrk_r>
 8004b6c:	6030      	str	r0, [r6, #0]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 fca5 	bl	80054c0 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d00a      	beq.n	8004b90 <sbrk_aligned+0x34>
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d007      	beq.n	8004b94 <sbrk_aligned+0x38>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 fc9a 	bl	80054c0 <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d101      	bne.n	8004b94 <sbrk_aligned+0x38>
 8004b90:	f04f 34ff 	mov.w	r4, #4294967295
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	2000032c 	.word	0x2000032c

08004b9c <_malloc_r>:
 8004b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d905      	bls.n	8004bc4 <_malloc_r+0x28>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c98 <_malloc_r+0xfc>
 8004bc8:	f000 f868 	bl	8004c9c <__malloc_lock>
 8004bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	bb5c      	cbnz	r4, 8004c2c <_malloc_r+0x90>
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7ff ffc0 	bl	8004b5c <sbrk_aligned>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	4604      	mov	r4, r0
 8004be0:	d155      	bne.n	8004c8e <_malloc_r+0xf2>
 8004be2:	f8d8 4000 	ldr.w	r4, [r8]
 8004be6:	4626      	mov	r6, r4
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	d145      	bne.n	8004c78 <_malloc_r+0xdc>
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	d048      	beq.n	8004c82 <_malloc_r+0xe6>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	eb04 0903 	add.w	r9, r4, r3
 8004bfa:	f000 fc61 	bl	80054c0 <_sbrk_r>
 8004bfe:	4581      	cmp	r9, r0
 8004c00:	d13f      	bne.n	8004c82 <_malloc_r+0xe6>
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	1a6d      	subs	r5, r5, r1
 8004c06:	4629      	mov	r1, r5
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f7ff ffa7 	bl	8004b5c <sbrk_aligned>
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d037      	beq.n	8004c82 <_malloc_r+0xe6>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	442b      	add	r3, r5
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d038      	beq.n	8004c92 <_malloc_r+0xf6>
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	42a2      	cmp	r2, r4
 8004c24:	d12b      	bne.n	8004c7e <_malloc_r+0xe2>
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e00f      	b.n	8004c4c <_malloc_r+0xb0>
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	1b52      	subs	r2, r2, r5
 8004c30:	d41f      	bmi.n	8004c72 <_malloc_r+0xd6>
 8004c32:	2a0b      	cmp	r2, #11
 8004c34:	d917      	bls.n	8004c66 <_malloc_r+0xca>
 8004c36:	1961      	adds	r1, r4, r5
 8004c38:	42a3      	cmp	r3, r4
 8004c3a:	6025      	str	r5, [r4, #0]
 8004c3c:	bf18      	it	ne
 8004c3e:	6059      	strne	r1, [r3, #4]
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	bf08      	it	eq
 8004c44:	f8c8 1000 	streq.w	r1, [r8]
 8004c48:	5162      	str	r2, [r4, r5]
 8004c4a:	604b      	str	r3, [r1, #4]
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f104 060b 	add.w	r6, r4, #11
 8004c52:	f000 f829 	bl	8004ca8 <__malloc_unlock>
 8004c56:	f026 0607 	bic.w	r6, r6, #7
 8004c5a:	1d23      	adds	r3, r4, #4
 8004c5c:	1af2      	subs	r2, r6, r3
 8004c5e:	d0ae      	beq.n	8004bbe <_malloc_r+0x22>
 8004c60:	1b9b      	subs	r3, r3, r6
 8004c62:	50a3      	str	r3, [r4, r2]
 8004c64:	e7ab      	b.n	8004bbe <_malloc_r+0x22>
 8004c66:	42a3      	cmp	r3, r4
 8004c68:	6862      	ldr	r2, [r4, #4]
 8004c6a:	d1dd      	bne.n	8004c28 <_malloc_r+0x8c>
 8004c6c:	f8c8 2000 	str.w	r2, [r8]
 8004c70:	e7ec      	b.n	8004c4c <_malloc_r+0xb0>
 8004c72:	4623      	mov	r3, r4
 8004c74:	6864      	ldr	r4, [r4, #4]
 8004c76:	e7ac      	b.n	8004bd2 <_malloc_r+0x36>
 8004c78:	4634      	mov	r4, r6
 8004c7a:	6876      	ldr	r6, [r6, #4]
 8004c7c:	e7b4      	b.n	8004be8 <_malloc_r+0x4c>
 8004c7e:	4613      	mov	r3, r2
 8004c80:	e7cc      	b.n	8004c1c <_malloc_r+0x80>
 8004c82:	230c      	movs	r3, #12
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4638      	mov	r0, r7
 8004c88:	f000 f80e 	bl	8004ca8 <__malloc_unlock>
 8004c8c:	e797      	b.n	8004bbe <_malloc_r+0x22>
 8004c8e:	6025      	str	r5, [r4, #0]
 8004c90:	e7dc      	b.n	8004c4c <_malloc_r+0xb0>
 8004c92:	605b      	str	r3, [r3, #4]
 8004c94:	deff      	udf	#255	; 0xff
 8004c96:	bf00      	nop
 8004c98:	20000328 	.word	0x20000328

08004c9c <__malloc_lock>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	; (8004ca4 <__malloc_lock+0x8>)
 8004c9e:	f7ff bf0f 	b.w	8004ac0 <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20000324 	.word	0x20000324

08004ca8 <__malloc_unlock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <__malloc_unlock+0x8>)
 8004caa:	f7ff bf0a 	b.w	8004ac2 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20000324 	.word	0x20000324

08004cb4 <__sfputc_r>:
 8004cb4:	6893      	ldr	r3, [r2, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	b410      	push	{r4}
 8004cbc:	6093      	str	r3, [r2, #8]
 8004cbe:	da08      	bge.n	8004cd2 <__sfputc_r+0x1e>
 8004cc0:	6994      	ldr	r4, [r2, #24]
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	db01      	blt.n	8004cca <__sfputc_r+0x16>
 8004cc6:	290a      	cmp	r1, #10
 8004cc8:	d103      	bne.n	8004cd2 <__sfputc_r+0x1e>
 8004cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cce:	f7ff bdc2 	b.w	8004856 <__swbuf_r>
 8004cd2:	6813      	ldr	r3, [r2, #0]
 8004cd4:	1c58      	adds	r0, r3, #1
 8004cd6:	6010      	str	r0, [r2, #0]
 8004cd8:	7019      	strb	r1, [r3, #0]
 8004cda:	4608      	mov	r0, r1
 8004cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <__sfputs_r>:
 8004ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460f      	mov	r7, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	18d5      	adds	r5, r2, r3
 8004cec:	42ac      	cmp	r4, r5
 8004cee:	d101      	bne.n	8004cf4 <__sfputs_r+0x12>
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e007      	b.n	8004d04 <__sfputs_r+0x22>
 8004cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff ffda 	bl	8004cb4 <__sfputc_r>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d1f3      	bne.n	8004cec <__sfputs_r+0xa>
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d08 <_vfiprintf_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	b09d      	sub	sp, #116	; 0x74
 8004d10:	4614      	mov	r4, r2
 8004d12:	4698      	mov	r8, r3
 8004d14:	4606      	mov	r6, r0
 8004d16:	b118      	cbz	r0, 8004d20 <_vfiprintf_r+0x18>
 8004d18:	6a03      	ldr	r3, [r0, #32]
 8004d1a:	b90b      	cbnz	r3, 8004d20 <_vfiprintf_r+0x18>
 8004d1c:	f7ff fcb4 	bl	8004688 <__sinit>
 8004d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d22:	07d9      	lsls	r1, r3, #31
 8004d24:	d405      	bmi.n	8004d32 <_vfiprintf_r+0x2a>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	059a      	lsls	r2, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_vfiprintf_r+0x2a>
 8004d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2e:	f7ff fec7 	bl	8004ac0 <__retarget_lock_acquire_recursive>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	071b      	lsls	r3, r3, #28
 8004d36:	d501      	bpl.n	8004d3c <_vfiprintf_r+0x34>
 8004d38:	692b      	ldr	r3, [r5, #16]
 8004d3a:	b99b      	cbnz	r3, 8004d64 <_vfiprintf_r+0x5c>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7ff fdc6 	bl	80048d0 <__swsetup_r>
 8004d44:	b170      	cbz	r0, 8004d64 <_vfiprintf_r+0x5c>
 8004d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d48:	07dc      	lsls	r4, r3, #31
 8004d4a:	d504      	bpl.n	8004d56 <_vfiprintf_r+0x4e>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b01d      	add	sp, #116	; 0x74
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	0598      	lsls	r0, r3, #22
 8004d5a:	d4f7      	bmi.n	8004d4c <_vfiprintf_r+0x44>
 8004d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d5e:	f7ff feb0 	bl	8004ac2 <__retarget_lock_release_recursive>
 8004d62:	e7f3      	b.n	8004d4c <_vfiprintf_r+0x44>
 8004d64:	2300      	movs	r3, #0
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d72:	2330      	movs	r3, #48	; 0x30
 8004d74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f28 <_vfiprintf_r+0x220>
 8004d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d7c:	f04f 0901 	mov.w	r9, #1
 8004d80:	4623      	mov	r3, r4
 8004d82:	469a      	mov	sl, r3
 8004d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d88:	b10a      	cbz	r2, 8004d8e <_vfiprintf_r+0x86>
 8004d8a:	2a25      	cmp	r2, #37	; 0x25
 8004d8c:	d1f9      	bne.n	8004d82 <_vfiprintf_r+0x7a>
 8004d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d92:	d00b      	beq.n	8004dac <_vfiprintf_r+0xa4>
 8004d94:	465b      	mov	r3, fp
 8004d96:	4622      	mov	r2, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffa1 	bl	8004ce2 <__sfputs_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	f000 80a9 	beq.w	8004ef8 <_vfiprintf_r+0x1f0>
 8004da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da8:	445a      	add	r2, fp
 8004daa:	9209      	str	r2, [sp, #36]	; 0x24
 8004dac:	f89a 3000 	ldrb.w	r3, [sl]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80a1 	beq.w	8004ef8 <_vfiprintf_r+0x1f0>
 8004db6:	2300      	movs	r3, #0
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc0:	f10a 0a01 	add.w	sl, sl, #1
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8004dce:	4654      	mov	r4, sl
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	4854      	ldr	r0, [pc, #336]	; (8004f28 <_vfiprintf_r+0x220>)
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	9a04      	ldr	r2, [sp, #16]
 8004dde:	b9d8      	cbnz	r0, 8004e18 <_vfiprintf_r+0x110>
 8004de0:	06d1      	lsls	r1, r2, #27
 8004de2:	bf44      	itt	mi
 8004de4:	2320      	movmi	r3, #32
 8004de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dea:	0713      	lsls	r3, r2, #28
 8004dec:	bf44      	itt	mi
 8004dee:	232b      	movmi	r3, #43	; 0x2b
 8004df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df4:	f89a 3000 	ldrb.w	r3, [sl]
 8004df8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dfa:	d015      	beq.n	8004e28 <_vfiprintf_r+0x120>
 8004dfc:	9a07      	ldr	r2, [sp, #28]
 8004dfe:	4654      	mov	r4, sl
 8004e00:	2000      	movs	r0, #0
 8004e02:	f04f 0c0a 	mov.w	ip, #10
 8004e06:	4621      	mov	r1, r4
 8004e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0c:	3b30      	subs	r3, #48	; 0x30
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d94d      	bls.n	8004eae <_vfiprintf_r+0x1a6>
 8004e12:	b1b0      	cbz	r0, 8004e42 <_vfiprintf_r+0x13a>
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	e014      	b.n	8004e42 <_vfiprintf_r+0x13a>
 8004e18:	eba0 0308 	sub.w	r3, r0, r8
 8004e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	46a2      	mov	sl, r4
 8004e26:	e7d2      	b.n	8004dce <_vfiprintf_r+0xc6>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	1d19      	adds	r1, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9103      	str	r1, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfbb      	ittet	lt
 8004e34:	425b      	neglt	r3, r3
 8004e36:	f042 0202 	orrlt.w	r2, r2, #2
 8004e3a:	9307      	strge	r3, [sp, #28]
 8004e3c:	9307      	strlt	r3, [sp, #28]
 8004e3e:	bfb8      	it	lt
 8004e40:	9204      	strlt	r2, [sp, #16]
 8004e42:	7823      	ldrb	r3, [r4, #0]
 8004e44:	2b2e      	cmp	r3, #46	; 0x2e
 8004e46:	d10c      	bne.n	8004e62 <_vfiprintf_r+0x15a>
 8004e48:	7863      	ldrb	r3, [r4, #1]
 8004e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4c:	d134      	bne.n	8004eb8 <_vfiprintf_r+0x1b0>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	9203      	str	r2, [sp, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfb8      	it	lt
 8004e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e5e:	3402      	adds	r4, #2
 8004e60:	9305      	str	r3, [sp, #20]
 8004e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f38 <_vfiprintf_r+0x230>
 8004e66:	7821      	ldrb	r1, [r4, #0]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f7fb f9b8 	bl	80001e0 <memchr>
 8004e70:	b138      	cbz	r0, 8004e82 <_vfiprintf_r+0x17a>
 8004e72:	9b04      	ldr	r3, [sp, #16]
 8004e74:	eba0 000a 	sub.w	r0, r0, sl
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	4082      	lsls	r2, r0
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	3401      	adds	r4, #1
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e86:	4829      	ldr	r0, [pc, #164]	; (8004f2c <_vfiprintf_r+0x224>)
 8004e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	f7fb f9a7 	bl	80001e0 <memchr>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d03f      	beq.n	8004f16 <_vfiprintf_r+0x20e>
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <_vfiprintf_r+0x228>)
 8004e98:	bb1b      	cbnz	r3, 8004ee2 <_vfiprintf_r+0x1da>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	443b      	add	r3, r7
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	e768      	b.n	8004d80 <_vfiprintf_r+0x78>
 8004eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7a6      	b.n	8004e06 <_vfiprintf_r+0xfe>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	3401      	adds	r4, #1
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eca:	3a30      	subs	r2, #48	; 0x30
 8004ecc:	2a09      	cmp	r2, #9
 8004ece:	d903      	bls.n	8004ed8 <_vfiprintf_r+0x1d0>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0c6      	beq.n	8004e62 <_vfiprintf_r+0x15a>
 8004ed4:	9105      	str	r1, [sp, #20]
 8004ed6:	e7c4      	b.n	8004e62 <_vfiprintf_r+0x15a>
 8004ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004edc:	4604      	mov	r4, r0
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e7f0      	b.n	8004ec4 <_vfiprintf_r+0x1bc>
 8004ee2:	ab03      	add	r3, sp, #12
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <_vfiprintf_r+0x22c>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	4630      	mov	r0, r6
 8004eee:	f3af 8000 	nop.w
 8004ef2:	4607      	mov	r7, r0
 8004ef4:	1c78      	adds	r0, r7, #1
 8004ef6:	d1d6      	bne.n	8004ea6 <_vfiprintf_r+0x19e>
 8004ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004efa:	07d9      	lsls	r1, r3, #31
 8004efc:	d405      	bmi.n	8004f0a <_vfiprintf_r+0x202>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	059a      	lsls	r2, r3, #22
 8004f02:	d402      	bmi.n	8004f0a <_vfiprintf_r+0x202>
 8004f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f06:	f7ff fddc 	bl	8004ac2 <__retarget_lock_release_recursive>
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	065b      	lsls	r3, r3, #25
 8004f0e:	f53f af1d 	bmi.w	8004d4c <_vfiprintf_r+0x44>
 8004f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f14:	e71c      	b.n	8004d50 <_vfiprintf_r+0x48>
 8004f16:	ab03      	add	r3, sp, #12
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	462a      	mov	r2, r5
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <_vfiprintf_r+0x22c>)
 8004f1e:	a904      	add	r1, sp, #16
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f879 	bl	8005018 <_printf_i>
 8004f26:	e7e4      	b.n	8004ef2 <_vfiprintf_r+0x1ea>
 8004f28:	080057f4 	.word	0x080057f4
 8004f2c:	080057fe 	.word	0x080057fe
 8004f30:	00000000 	.word	0x00000000
 8004f34:	08004ce3 	.word	0x08004ce3
 8004f38:	080057fa 	.word	0x080057fa

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc26      	bgt.n	8004fd2 <_printf_common+0x96>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42b      	bmi.n	8004fec <_printf_common+0xb0>
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d01e      	beq.n	8004fe0 <_printf_common+0xa4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	f003 0306 	and.w	r3, r3, #6
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	bf02      	ittt	eq
 8004fae:	68e5      	ldreq	r5, [r4, #12]
 8004fb0:	6833      	ldreq	r3, [r6, #0]
 8004fb2:	1aed      	subeq	r5, r5, r3
 8004fb4:	68a3      	ldr	r3, [r4, #8]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xa8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xac>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c6      	b.n	8004f7a <_printf_common+0x3e>
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff6:	4422      	add	r2, r4
 8004ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005000:	3302      	adds	r3, #2
 8005002:	e7c7      	b.n	8004f94 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa4>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x8e>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	7e0f      	ldrb	r7, [r1, #24]
 800501e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005020:	2f78      	cmp	r7, #120	; 0x78
 8005022:	4691      	mov	r9, r2
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	469a      	mov	sl, r3
 800502a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d4 	beq.w	80051e2 <_printf_i+0x1ca>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80c0 	beq.w	80051c0 <_printf_i+0x1a8>
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a101      	add	r1, pc, #4	; (adr r1, 8005058 <_printf_i+0x40>)
 8005054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051c9 	.word	0x080051c9
 8005088:	080050f1 	.word	0x080050f1
 800508c:	08005183 	.word	0x08005183
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051eb 	.word	0x080051eb
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	0800518b 	.word	0x0800518b
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e09f      	b.n	8005204 <_printf_i+0x1ec>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	0607      	lsls	r7, r0, #24
 80050ca:	f103 0104 	add.w	r1, r3, #4
 80050ce:	6029      	str	r1, [r5, #0]
 80050d0:	d501      	bpl.n	80050d6 <_printf_i+0xbe>
 80050d2:	681e      	ldr	r6, [r3, #0]
 80050d4:	e003      	b.n	80050de <_printf_i+0xc6>
 80050d6:	0646      	lsls	r6, r0, #25
 80050d8:	d5fb      	bpl.n	80050d2 <_printf_i+0xba>
 80050da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050de:	2e00      	cmp	r6, #0
 80050e0:	da03      	bge.n	80050ea <_printf_i+0xd2>
 80050e2:	232d      	movs	r3, #45	; 0x2d
 80050e4:	4276      	negs	r6, r6
 80050e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ea:	485a      	ldr	r0, [pc, #360]	; (8005254 <_printf_i+0x23c>)
 80050ec:	230a      	movs	r3, #10
 80050ee:	e012      	b.n	8005116 <_printf_i+0xfe>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	6029      	str	r1, [r5, #0]
 80050f8:	0605      	lsls	r5, r0, #24
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0xe8>
 80050fc:	681e      	ldr	r6, [r3, #0]
 80050fe:	e002      	b.n	8005106 <_printf_i+0xee>
 8005100:	0641      	lsls	r1, r0, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0xe4>
 8005104:	881e      	ldrh	r6, [r3, #0]
 8005106:	4853      	ldr	r0, [pc, #332]	; (8005254 <_printf_i+0x23c>)
 8005108:	2f6f      	cmp	r7, #111	; 0x6f
 800510a:	bf0c      	ite	eq
 800510c:	2308      	moveq	r3, #8
 800510e:	230a      	movne	r3, #10
 8005110:	2100      	movs	r1, #0
 8005112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005116:	6865      	ldr	r5, [r4, #4]
 8005118:	60a5      	str	r5, [r4, #8]
 800511a:	2d00      	cmp	r5, #0
 800511c:	bfa2      	ittt	ge
 800511e:	6821      	ldrge	r1, [r4, #0]
 8005120:	f021 0104 	bicge.w	r1, r1, #4
 8005124:	6021      	strge	r1, [r4, #0]
 8005126:	b90e      	cbnz	r6, 800512c <_printf_i+0x114>
 8005128:	2d00      	cmp	r5, #0
 800512a:	d04b      	beq.n	80051c4 <_printf_i+0x1ac>
 800512c:	4615      	mov	r5, r2
 800512e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005132:	fb03 6711 	mls	r7, r3, r1, r6
 8005136:	5dc7      	ldrb	r7, [r0, r7]
 8005138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800513c:	4637      	mov	r7, r6
 800513e:	42bb      	cmp	r3, r7
 8005140:	460e      	mov	r6, r1
 8005142:	d9f4      	bls.n	800512e <_printf_i+0x116>
 8005144:	2b08      	cmp	r3, #8
 8005146:	d10b      	bne.n	8005160 <_printf_i+0x148>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07de      	lsls	r6, r3, #31
 800514c:	d508      	bpl.n	8005160 <_printf_i+0x148>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	6861      	ldr	r1, [r4, #4]
 8005152:	4299      	cmp	r1, r3
 8005154:	bfde      	ittt	le
 8005156:	2330      	movle	r3, #48	; 0x30
 8005158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800515c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005160:	1b52      	subs	r2, r2, r5
 8005162:	6122      	str	r2, [r4, #16]
 8005164:	f8cd a000 	str.w	sl, [sp]
 8005168:	464b      	mov	r3, r9
 800516a:	aa03      	add	r2, sp, #12
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff fee4 	bl	8004f3c <_printf_common>
 8005174:	3001      	adds	r0, #1
 8005176:	d14a      	bne.n	800520e <_printf_i+0x1f6>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b004      	add	sp, #16
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	4833      	ldr	r0, [pc, #204]	; (8005258 <_printf_i+0x240>)
 800518c:	2778      	movs	r7, #120	; 0x78
 800518e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	6829      	ldr	r1, [r5, #0]
 8005196:	061f      	lsls	r7, r3, #24
 8005198:	f851 6b04 	ldr.w	r6, [r1], #4
 800519c:	d402      	bmi.n	80051a4 <_printf_i+0x18c>
 800519e:	065f      	lsls	r7, r3, #25
 80051a0:	bf48      	it	mi
 80051a2:	b2b6      	uxthmi	r6, r6
 80051a4:	07df      	lsls	r7, r3, #31
 80051a6:	bf48      	it	mi
 80051a8:	f043 0320 	orrmi.w	r3, r3, #32
 80051ac:	6029      	str	r1, [r5, #0]
 80051ae:	bf48      	it	mi
 80051b0:	6023      	strmi	r3, [r4, #0]
 80051b2:	b91e      	cbnz	r6, 80051bc <_printf_i+0x1a4>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	2310      	movs	r3, #16
 80051be:	e7a7      	b.n	8005110 <_printf_i+0xf8>
 80051c0:	4824      	ldr	r0, [pc, #144]	; (8005254 <_printf_i+0x23c>)
 80051c2:	e7e4      	b.n	800518e <_printf_i+0x176>
 80051c4:	4615      	mov	r5, r2
 80051c6:	e7bd      	b.n	8005144 <_printf_i+0x12c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	6826      	ldr	r6, [r4, #0]
 80051cc:	6961      	ldr	r1, [r4, #20]
 80051ce:	1d18      	adds	r0, r3, #4
 80051d0:	6028      	str	r0, [r5, #0]
 80051d2:	0635      	lsls	r5, r6, #24
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0x1c4>
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0x1ca>
 80051dc:	0670      	lsls	r0, r6, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0x1c0>
 80051e0:	8019      	strh	r1, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	4615      	mov	r5, r2
 80051e8:	e7bc      	b.n	8005164 <_printf_i+0x14c>
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	1d1a      	adds	r2, r3, #4
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	2100      	movs	r1, #0
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7fa fff2 	bl	80001e0 <memchr>
 80051fc:	b108      	cbz	r0, 8005202 <_printf_i+0x1ea>
 80051fe:	1b40      	subs	r0, r0, r5
 8005200:	6060      	str	r0, [r4, #4]
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	2300      	movs	r3, #0
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520c:	e7aa      	b.n	8005164 <_printf_i+0x14c>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	462a      	mov	r2, r5
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	47d0      	blx	sl
 8005218:	3001      	adds	r0, #1
 800521a:	d0ad      	beq.n	8005178 <_printf_i+0x160>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	d413      	bmi.n	800524a <_printf_i+0x232>
 8005222:	68e0      	ldr	r0, [r4, #12]
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	4298      	cmp	r0, r3
 8005228:	bfb8      	it	lt
 800522a:	4618      	movlt	r0, r3
 800522c:	e7a6      	b.n	800517c <_printf_i+0x164>
 800522e:	2301      	movs	r3, #1
 8005230:	4632      	mov	r2, r6
 8005232:	4649      	mov	r1, r9
 8005234:	4640      	mov	r0, r8
 8005236:	47d0      	blx	sl
 8005238:	3001      	adds	r0, #1
 800523a:	d09d      	beq.n	8005178 <_printf_i+0x160>
 800523c:	3501      	adds	r5, #1
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	9903      	ldr	r1, [sp, #12]
 8005242:	1a5b      	subs	r3, r3, r1
 8005244:	42ab      	cmp	r3, r5
 8005246:	dcf2      	bgt.n	800522e <_printf_i+0x216>
 8005248:	e7eb      	b.n	8005222 <_printf_i+0x20a>
 800524a:	2500      	movs	r5, #0
 800524c:	f104 0619 	add.w	r6, r4, #25
 8005250:	e7f5      	b.n	800523e <_printf_i+0x226>
 8005252:	bf00      	nop
 8005254:	08005805 	.word	0x08005805
 8005258:	08005816 	.word	0x08005816

0800525c <__sflush_r>:
 800525c:	898a      	ldrh	r2, [r1, #12]
 800525e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	0710      	lsls	r0, r2, #28
 8005266:	460c      	mov	r4, r1
 8005268:	d458      	bmi.n	800531c <__sflush_r+0xc0>
 800526a:	684b      	ldr	r3, [r1, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	dc05      	bgt.n	800527c <__sflush_r+0x20>
 8005270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	dc02      	bgt.n	800527c <__sflush_r+0x20>
 8005276:	2000      	movs	r0, #0
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527e:	2e00      	cmp	r6, #0
 8005280:	d0f9      	beq.n	8005276 <__sflush_r+0x1a>
 8005282:	2300      	movs	r3, #0
 8005284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005288:	682f      	ldr	r7, [r5, #0]
 800528a:	6a21      	ldr	r1, [r4, #32]
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	d032      	beq.n	80052f6 <__sflush_r+0x9a>
 8005290:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	075a      	lsls	r2, r3, #29
 8005296:	d505      	bpl.n	80052a4 <__sflush_r+0x48>
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	1ac0      	subs	r0, r0, r3
 800529c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800529e:	b10b      	cbz	r3, 80052a4 <__sflush_r+0x48>
 80052a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a2:	1ac0      	subs	r0, r0, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	4602      	mov	r2, r0
 80052a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052aa:	6a21      	ldr	r1, [r4, #32]
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b0      	blx	r6
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	d106      	bne.n	80052c4 <__sflush_r+0x68>
 80052b6:	6829      	ldr	r1, [r5, #0]
 80052b8:	291d      	cmp	r1, #29
 80052ba:	d82b      	bhi.n	8005314 <__sflush_r+0xb8>
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <__sflush_r+0x108>)
 80052be:	410a      	asrs	r2, r1
 80052c0:	07d6      	lsls	r6, r2, #31
 80052c2:	d427      	bmi.n	8005314 <__sflush_r+0xb8>
 80052c4:	2200      	movs	r2, #0
 80052c6:	6062      	str	r2, [r4, #4]
 80052c8:	04d9      	lsls	r1, r3, #19
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	d504      	bpl.n	80052da <__sflush_r+0x7e>
 80052d0:	1c42      	adds	r2, r0, #1
 80052d2:	d101      	bne.n	80052d8 <__sflush_r+0x7c>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b903      	cbnz	r3, 80052da <__sflush_r+0x7e>
 80052d8:	6560      	str	r0, [r4, #84]	; 0x54
 80052da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052dc:	602f      	str	r7, [r5, #0]
 80052de:	2900      	cmp	r1, #0
 80052e0:	d0c9      	beq.n	8005276 <__sflush_r+0x1a>
 80052e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e6:	4299      	cmp	r1, r3
 80052e8:	d002      	beq.n	80052f0 <__sflush_r+0x94>
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7ff fbea 	bl	8004ac4 <_free_r>
 80052f0:	2000      	movs	r0, #0
 80052f2:	6360      	str	r0, [r4, #52]	; 0x34
 80052f4:	e7c0      	b.n	8005278 <__sflush_r+0x1c>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b0      	blx	r6
 80052fc:	1c41      	adds	r1, r0, #1
 80052fe:	d1c8      	bne.n	8005292 <__sflush_r+0x36>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0c5      	beq.n	8005292 <__sflush_r+0x36>
 8005306:	2b1d      	cmp	r3, #29
 8005308:	d001      	beq.n	800530e <__sflush_r+0xb2>
 800530a:	2b16      	cmp	r3, #22
 800530c:	d101      	bne.n	8005312 <__sflush_r+0xb6>
 800530e:	602f      	str	r7, [r5, #0]
 8005310:	e7b1      	b.n	8005276 <__sflush_r+0x1a>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	e7ad      	b.n	8005278 <__sflush_r+0x1c>
 800531c:	690f      	ldr	r7, [r1, #16]
 800531e:	2f00      	cmp	r7, #0
 8005320:	d0a9      	beq.n	8005276 <__sflush_r+0x1a>
 8005322:	0793      	lsls	r3, r2, #30
 8005324:	680e      	ldr	r6, [r1, #0]
 8005326:	bf08      	it	eq
 8005328:	694b      	ldreq	r3, [r1, #20]
 800532a:	600f      	str	r7, [r1, #0]
 800532c:	bf18      	it	ne
 800532e:	2300      	movne	r3, #0
 8005330:	eba6 0807 	sub.w	r8, r6, r7
 8005334:	608b      	str	r3, [r1, #8]
 8005336:	f1b8 0f00 	cmp.w	r8, #0
 800533a:	dd9c      	ble.n	8005276 <__sflush_r+0x1a>
 800533c:	6a21      	ldr	r1, [r4, #32]
 800533e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005340:	4643      	mov	r3, r8
 8005342:	463a      	mov	r2, r7
 8005344:	4628      	mov	r0, r5
 8005346:	47b0      	blx	r6
 8005348:	2800      	cmp	r0, #0
 800534a:	dc06      	bgt.n	800535a <__sflush_r+0xfe>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	e78e      	b.n	8005278 <__sflush_r+0x1c>
 800535a:	4407      	add	r7, r0
 800535c:	eba8 0800 	sub.w	r8, r8, r0
 8005360:	e7e9      	b.n	8005336 <__sflush_r+0xda>
 8005362:	bf00      	nop
 8005364:	dfbffffe 	.word	0xdfbffffe

08005368 <_fflush_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	4605      	mov	r5, r0
 800536e:	460c      	mov	r4, r1
 8005370:	b913      	cbnz	r3, 8005378 <_fflush_r+0x10>
 8005372:	2500      	movs	r5, #0
 8005374:	4628      	mov	r0, r5
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	b118      	cbz	r0, 8005382 <_fflush_r+0x1a>
 800537a:	6a03      	ldr	r3, [r0, #32]
 800537c:	b90b      	cbnz	r3, 8005382 <_fflush_r+0x1a>
 800537e:	f7ff f983 	bl	8004688 <__sinit>
 8005382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f3      	beq.n	8005372 <_fflush_r+0xa>
 800538a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800538c:	07d0      	lsls	r0, r2, #31
 800538e:	d404      	bmi.n	800539a <_fflush_r+0x32>
 8005390:	0599      	lsls	r1, r3, #22
 8005392:	d402      	bmi.n	800539a <_fflush_r+0x32>
 8005394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005396:	f7ff fb93 	bl	8004ac0 <__retarget_lock_acquire_recursive>
 800539a:	4628      	mov	r0, r5
 800539c:	4621      	mov	r1, r4
 800539e:	f7ff ff5d 	bl	800525c <__sflush_r>
 80053a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053a4:	07da      	lsls	r2, r3, #31
 80053a6:	4605      	mov	r5, r0
 80053a8:	d4e4      	bmi.n	8005374 <_fflush_r+0xc>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	059b      	lsls	r3, r3, #22
 80053ae:	d4e1      	bmi.n	8005374 <_fflush_r+0xc>
 80053b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053b2:	f7ff fb86 	bl	8004ac2 <__retarget_lock_release_recursive>
 80053b6:	e7dd      	b.n	8005374 <_fflush_r+0xc>

080053b8 <__swhatbuf_r>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	460c      	mov	r4, r1
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	2900      	cmp	r1, #0
 80053c2:	b096      	sub	sp, #88	; 0x58
 80053c4:	4615      	mov	r5, r2
 80053c6:	461e      	mov	r6, r3
 80053c8:	da0d      	bge.n	80053e6 <__swhatbuf_r+0x2e>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	bf0c      	ite	eq
 80053d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053da:	2340      	movne	r3, #64	; 0x40
 80053dc:	2000      	movs	r0, #0
 80053de:	6031      	str	r1, [r6, #0]
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	b016      	add	sp, #88	; 0x58
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	466a      	mov	r2, sp
 80053e8:	f000 f848 	bl	800547c <_fstat_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	dbec      	blt.n	80053ca <__swhatbuf_r+0x12>
 80053f0:	9901      	ldr	r1, [sp, #4]
 80053f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053fa:	4259      	negs	r1, r3
 80053fc:	4159      	adcs	r1, r3
 80053fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005402:	e7eb      	b.n	80053dc <__swhatbuf_r+0x24>

08005404 <__smakebuf_r>:
 8005404:	898b      	ldrh	r3, [r1, #12]
 8005406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005408:	079d      	lsls	r5, r3, #30
 800540a:	4606      	mov	r6, r0
 800540c:	460c      	mov	r4, r1
 800540e:	d507      	bpl.n	8005420 <__smakebuf_r+0x1c>
 8005410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	2301      	movs	r3, #1
 800541a:	6163      	str	r3, [r4, #20]
 800541c:	b002      	add	sp, #8
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	ab01      	add	r3, sp, #4
 8005422:	466a      	mov	r2, sp
 8005424:	f7ff ffc8 	bl	80053b8 <__swhatbuf_r>
 8005428:	9900      	ldr	r1, [sp, #0]
 800542a:	4605      	mov	r5, r0
 800542c:	4630      	mov	r0, r6
 800542e:	f7ff fbb5 	bl	8004b9c <_malloc_r>
 8005432:	b948      	cbnz	r0, 8005448 <__smakebuf_r+0x44>
 8005434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005438:	059a      	lsls	r2, r3, #22
 800543a:	d4ef      	bmi.n	800541c <__smakebuf_r+0x18>
 800543c:	f023 0303 	bic.w	r3, r3, #3
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	e7e3      	b.n	8005410 <__smakebuf_r+0xc>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	9b00      	ldr	r3, [sp, #0]
 8005454:	6163      	str	r3, [r4, #20]
 8005456:	9b01      	ldr	r3, [sp, #4]
 8005458:	6120      	str	r0, [r4, #16]
 800545a:	b15b      	cbz	r3, 8005474 <__smakebuf_r+0x70>
 800545c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005460:	4630      	mov	r0, r6
 8005462:	f000 f81d 	bl	80054a0 <_isatty_r>
 8005466:	b128      	cbz	r0, 8005474 <__smakebuf_r+0x70>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	431d      	orrs	r5, r3
 8005478:	81a5      	strh	r5, [r4, #12]
 800547a:	e7cf      	b.n	800541c <__smakebuf_r+0x18>

0800547c <_fstat_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	; (800549c <_fstat_r+0x20>)
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	f7fb febe 	bl	800120a <_fstat>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d102      	bne.n	8005498 <_fstat_r+0x1c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	b103      	cbz	r3, 8005498 <_fstat_r+0x1c>
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	bd38      	pop	{r3, r4, r5, pc}
 800549a:	bf00      	nop
 800549c:	20000320 	.word	0x20000320

080054a0 <_isatty_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_isatty_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb febd 	bl	800122a <_isatty>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_isatty_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_isatty_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20000320 	.word	0x20000320

080054c0 <_sbrk_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d06      	ldr	r5, [pc, #24]	; (80054dc <_sbrk_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fb fec6 	bl	800125c <_sbrk>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_sbrk_r+0x1a>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_sbrk_r+0x1a>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000320 	.word	0x20000320

080054e0 <_init>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr

080054ec <_fini>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr
