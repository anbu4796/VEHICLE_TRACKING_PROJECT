
Veichle_tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c290  0800c290  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c290  0800c290  0001c290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c294  0800c294  0001c294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a34  200001d8  0800c470  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c0c  0800c470  00022c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010767  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f2  00000000  00000000  000309b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a98  00000000  00000000  00034188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002784d  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d64  00000000  00000000  0005c46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebfed  00000000  00000000  0006e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f70  00000000  00000000  0015a1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  0015f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b718 	.word	0x0800b718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b718 	.word	0x0800b718

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <W25Q_Delay>:
extern uint8_t * Read_From_Flash;

#define numBLOCK 64  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes

void W25Q_Delay(uint32_t time)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f001 fba5 	bl	8002748 <HAL_Delay>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <csLOW>:

void csLOW (void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f001 fef7 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <csHIGH>:

void csHIGH (void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 feed 	bl	8002e04 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	b29a      	uxth	r2, r3
 8001040:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <SPI_Write+0x24>)
 8001048:	f003 fab7 	bl	80045ba <HAL_SPI_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200009fc 	.word	0x200009fc

08001058 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b29a      	uxth	r2, r3
 8001066:	f241 3388 	movw	r3, #5000	; 0x1388
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <SPI_Read+0x24>)
 800106e:	f003 fc19 	bl	80048a4 <HAL_SPI_Receive>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200009fc 	.word	0x200009fc

08001080 <W25Q_ReadID>:
	csHIGH();
	W25Q_Delay(100);
}

uint32_t W25Q_ReadID (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t tData = 0x9F;  // Read JEDEC ID
 8001086:	239f      	movs	r3, #159	; 0x9f
 8001088:	71fb      	strb	r3, [r7, #7]
	uint8_t rData[3];
	csLOW();
 800108a:	f7ff ffbc 	bl	8001006 <csLOW>
	SPI_Write(&tData, 1);
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffcc 	bl	8001030 <SPI_Write>
	SPI_Read(rData, 3);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2103      	movs	r1, #3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffdb 	bl	8001058 <SPI_Read>
	csHIGH();
 80010a2:	f7ff ffba 	bl	800101a <csHIGH>
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	4313      	orrs	r3, r2
 80010b0:	79ba      	ldrb	r2, [r7, #6]
 80010b2:	4313      	orrs	r3, r2
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <W25Q_Read>:

#if 1

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	4413      	add	r3, r2
 80010d4:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 80010d6:	2303      	movs	r3, #3
 80010d8:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	0c1b      	lsrs	r3, r3, #16
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 80010f0:	f7ff ff89 	bl	8001006 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff98 	bl	8001030 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff ffa8 	bl	8001058 <SPI_Read>
	csHIGH();  // pull the CS High
 8001108:	f7ff ff87 	bl	800101a <csHIGH>
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <write_enable>:
	SPI_Read(rData, size);  // Read the data
	csHIGH();  // pull the CS High
}

void write_enable (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 800111a:	2306      	movs	r3, #6
 800111c:	71fb      	strb	r3, [r7, #7]
	csLOW();
 800111e:	f7ff ff72 	bl	8001006 <csLOW>
	SPI_Write(&tData, 1);
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff82 	bl	8001030 <SPI_Write>
	csHIGH();
 800112c:	f7ff ff75 	bl	800101a <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001130:	2005      	movs	r0, #5
 8001132:	f7ff ff5d 	bl	8000ff0 <W25Q_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <write_disable>:

void write_disable(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 8001144:	2304      	movs	r3, #4
 8001146:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001148:	f7ff ff5d 	bl	8001006 <csLOW>
	SPI_Write(&tData, 1);
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff6d 	bl	8001030 <SPI_Write>
	csHIGH();
 8001156:	f7ff ff60 	bl	800101a <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 800115a:	2005      	movs	r0, #5
 800115c:	f7ff ff48 	bl	8000ff0 <W25Q_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <W25Q_Read_Byte>:
		size = size-bytesRemaining;
	}
}

uint8_t W25Q_Read_Byte (uint32_t Addr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8001170:	2303      	movs	r3, #3
 8001172:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	b2db      	uxtb	r3, r3
 800117a:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0a1b      	lsrs	r3, r3, #8
 8001180:	b2db      	uxtb	r3, r3
 8001182:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	74fb      	strb	r3, [r7, #19]
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;
		tData[4] = (Addr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 800118a:	f7ff ff3c 	bl	8001006 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	2104      	movs	r1, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff4b 	bl	8001030 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(&rData, 1);  // Read the data
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff59 	bl	8001058 <SPI_Read>
	csHIGH();  // pull the CS High
 80011a6:	f7ff ff38 	bl	800101a <csHIGH>

	return rData;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <W25Q_Write_Byte>:

void W25Q_Write_Byte (uint32_t Addr, uint8_t data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
	uint8_t tData[6];
	uint8_t indx;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x02;  // page program
 80011c0:	2302      	movs	r3, #2
 80011c2:	723b      	strb	r3, [r7, #8]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	727b      	strb	r3, [r7, #9]
		tData[2] = (Addr>>8)&0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	72bb      	strb	r3, [r7, #10]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	72fb      	strb	r3, [r7, #11]
		tData[4] = data;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	733b      	strb	r3, [r7, #12]
		indx = 5;
 80011de:	2305      	movs	r3, #5
 80011e0:	73fb      	strb	r3, [r7, #15]
		tData[5] = data;
		indx = 6;
	}


	if (W25Q_Read_Byte(Addr) == 0xFF)
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffc0 	bl	8001168 <W25Q_Read_Byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d111      	bne.n	8001212 <W25Q_Write_Byte+0x5e>
	{
		write_enable();
 80011ee:	f7ff ff91 	bl	8001114 <write_enable>
		csLOW();
 80011f2:	f7ff ff08 	bl	8001006 <csLOW>
		SPI_Write(tData, indx);
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff16 	bl	8001030 <SPI_Write>
		csHIGH();
 8001204:	f7ff ff09 	bl	800101a <csHIGH>

		W25Q_Delay(5);
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fef1 	bl	8000ff0 <W25Q_Delay>
		write_disable();
 800120e:	f7ff ff96 	bl	800113e <write_disable>
	}
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <Storing_GPS_Data_Into_Flash>:




int  Storing_GPS_Data_Into_Flash(uint8_t * data)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint32_t index;

	//if(Current_Pos == 0xFF) {

	for(index=0;data[index];index++)
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e00d      	b.n	8001246 <Storing_GPS_Data_Into_Flash+0x2a>
	{
		W25Q_Write_Byte(Current_Pos+index,data[index]);
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <Storing_GPS_Data_Into_Flash+0x78>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	18d0      	adds	r0, r2, r3
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff ffba 	bl	80011b4 <W25Q_Write_Byte>
	for(index=0;data[index];index++)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1eb      	bne.n	800122a <Storing_GPS_Data_Into_Flash+0xe>


	}
	W25Q_Write_Byte(Current_Pos+index,'\0');
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <Storing_GPS_Data_Into_Flash+0x78>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffa9 	bl	80011b4 <W25Q_Write_Byte>
	index++;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3301      	adds	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
	if(index == (strlen(data)+1))
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff f801 	bl	8000270 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	3301      	adds	r3, #1
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <Storing_GPS_Data_Into_Flash+0x6c>
	{
		Current_Pos=Current_Pos+index;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <Storing_GPS_Data_Into_Flash+0x78>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <Storing_GPS_Data_Into_Flash+0x78>)
 8001282:	6013      	str	r3, [r2, #0]
		return 0;
 8001284:	2300      	movs	r3, #0
 8001286:	e000      	b.n	800128a <Storing_GPS_Data_Into_Flash+0x6e>
	}
	else
	{

		return 1;
 8001288:	2301      	movs	r3, #1

	}
	//}
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001f4 	.word	0x200001f4

08001298 <get_data_from_gps>:
float rmc_latitude, rmc_longitude;
int gps_fix;


void get_data_from_gps(char *UART_receive_data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0fa      	sub	sp, #488	; 0x1e8
 800129c:	af00      	add	r7, sp, #0
 800129e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80012a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80012a6:	6018      	str	r0, [r3, #0]
	char *ptrgga=NULL, *ptrrmc=NULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	char GGA_buffer[250],RMC_buffer[200];
	int index,gga_length,rmc_length;
	//printf("received data from UART %s\n",UART_receive_data);

	if( (ptrgga=strstr(UART_receive_data,"GNGGA")))
 80012b4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80012b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80012bc:	4953      	ldr	r1, [pc, #332]	; (800140c <get_data_from_gps+0x174>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	f007 fd1a 	bl	8008cf8 <strstr>
 80012c4:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 80012c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d04b      	beq.n	8001368 <get_data_from_gps+0xd0>
	{
		printf("ptrGGA string has %s\n", ptrgga);
 80012d0:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80012d4:	484e      	ldr	r0, [pc, #312]	; (8001410 <get_data_from_gps+0x178>)
 80012d6:	f007 fb13 	bl	8008900 <iprintf>
		strncpy(GGA_buffer,ptrgga,80);
 80012da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012de:	2250      	movs	r2, #80	; 0x50
 80012e0:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f007 fc98 	bl	8008c1a <strncpy>
		printf("ptrGGA 2 string has %s\n", ptrgga);
 80012ea:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 80012ee:	4849      	ldr	r0, [pc, #292]	; (8001414 <get_data_from_gps+0x17c>)
 80012f0:	f007 fb06 	bl	8008900 <iprintf>
		printf("GGA string is %s\n", GGA_buffer);
 80012f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4847      	ldr	r0, [pc, #284]	; (8001418 <get_data_from_gps+0x180>)
 80012fc:	f007 fb00 	bl	8008900 <iprintf>
		gga_length=strlen(GGA_buffer);
 8001300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffb3 	bl	8000270 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		if(GGA_buffer!=NULL)
	  	{
			for(int i=0;i<gga_length;i++)
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001316:	e021      	b.n	800135c <get_data_from_gps+0xc4>
			{

				if(GGA_buffer[i]=='M')
 8001318:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800131c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001320:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b4d      	cmp	r3, #77	; 0x4d
 800132a:	d112      	bne.n	8001352 <get_data_from_gps+0xba>
				{
					extract_data_for_GGA(GGA_buffer);
 800132c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f881 	bl	8001438 <extract_data_for_GGA>
					// Generating the JSON string
					if(gps_fix==1)
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <get_data_from_gps+0x184>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <get_data_from_gps+0xb4>
					{
						printf("GPS Valid Fix\n");
 800133e:	4838      	ldr	r0, [pc, #224]	; (8001420 <get_data_from_gps+0x188>)
 8001340:	f007 fb44 	bl	80089cc <puts>
						json_format_for_GGA(json_str);
 8001344:	4837      	ldr	r0, [pc, #220]	; (8001424 <get_data_from_gps+0x18c>)
 8001346:	f000 f993 	bl	8001670 <json_format_for_GGA>
 800134a:	e002      	b.n	8001352 <get_data_from_gps+0xba>
					}
					else
					{
						printf("Invalid GPS fix not getting proper location\n Reset the GPS Module\n");
 800134c:	4836      	ldr	r0, [pc, #216]	; (8001428 <get_data_from_gps+0x190>)
 800134e:	f007 fb3d 	bl	80089cc <puts>
			for(int i=0;i<gga_length;i++)
 8001352:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800135c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8001360:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001364:	429a      	cmp	r2, r3
 8001366:	dbd7      	blt.n	8001318 <get_data_from_gps+0x80>
		else
	  	{
	  	 	printf("GGA Buffer is empty\n");
	  	}
	}
	if((ptrrmc=strstr(UART_receive_data,"GNRMC")))
 8001368:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800136c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001370:	492e      	ldr	r1, [pc, #184]	; (800142c <get_data_from_gps+0x194>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f007 fcc0 	bl	8008cf8 <strstr>
 8001378:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
 800137c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02f      	beq.n	80013e4 <get_data_from_gps+0x14c>
					RMC_buffer[index]=*(ptrrmc+index);
	  	 			index++;
	  	 	 }
	  	 	 RMC_buffer[index]='\0';
	  	 }*/
		strncpy(RMC_buffer,ptrrmc,85);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2255      	movs	r2, #85	; 0x55
 800138a:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fc43 	bl	8008c1a <strncpy>
		printf("RMC string is %s\n", RMC_buffer);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4825      	ldr	r0, [pc, #148]	; (8001430 <get_data_from_gps+0x198>)
 800139c:	f007 fab0 	bl	8008900 <iprintf>
	 	 rmc_length=strlen(RMC_buffer);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff63 	bl	8000270 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	 	 if(RMC_buffer!=NULL)
	 	 {

	 		 char *ptr=NULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	 		 if((ptr=strchr(RMC_buffer,'*')))
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	212a      	movs	r1, #42	; 0x2a
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fc0d 	bl	8008bdc <strchr>
 80013c2:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
 80013c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <get_data_from_gps+0x140>
	 		 {

	 			extract_data_for_RMC(RMC_buffer);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f984 	bl	80016e0 <extract_data_for_RMC>
	 		 }
	 		if(date!='0')
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <get_data_from_gps+0x19c>)
 80013da:	2b30      	cmp	r3, #48	; 0x30
 80013dc:	d002      	beq.n	80013e4 <get_data_from_gps+0x14c>
	 		{
	 			 json_format_for_RMC(json_str);
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <get_data_from_gps+0x18c>)
 80013e0:	f000 fb0a 	bl	80019f8 <json_format_for_RMC>
	  	  }
	}



	memset(GGA_buffer,0,sizeof(GGA_buffer));
 80013e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e8:	22fa      	movs	r2, #250	; 0xfa
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 fbed 	bl	8008bcc <memset>
	memset(RMC_buffer,0,sizeof(RMC_buffer));
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	22c8      	movs	r2, #200	; 0xc8
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fbe6 	bl	8008bcc <memset>
	//memset(buf_to_extract,0,sizeof(buf_to_extract));
}
 8001400:	bf00      	nop
 8001402:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800b730 	.word	0x0800b730
 8001410:	0800b738 	.word	0x0800b738
 8001414:	0800b750 	.word	0x0800b750
 8001418:	0800b768 	.word	0x0800b768
 800141c:	2000092c 	.word	0x2000092c
 8001420:	0800b77c 	.word	0x0800b77c
 8001424:	200007d8 	.word	0x200007d8
 8001428:	0800b78c 	.word	0x0800b78c
 800142c:	0800b7d0 	.word	0x0800b7d0
 8001430:	0800b7d8 	.word	0x0800b7d8
 8001434:	20000910 	.word	0x20000910

08001438 <extract_data_for_GGA>:

void extract_data_for_GGA( char *GGA_buffer)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	; 0x58
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]

		int tokencnt = 0,minutes,degrees,wholeSeconds;
 8001440:	2300      	movs	r3, #0
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
		double lat,longi,seconds,temp,fractionalSeconds;
		int utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
		//printf("in gga fun %s\n",GGA_buffer);
		char utc_time[7];
		char latitude_str[10], longitude_str[11],gpsfix[2],latidir;
		char *token = strtok(GGA_buffer, ",");
 8001444:	497d      	ldr	r1, [pc, #500]	; (800163c <extract_data_for_GGA+0x204>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f007 fbfa 	bl	8008c40 <strtok>
 800144c:	63f8      	str	r0, [r7, #60]	; 0x3c
	while (token != NULL && tokencnt < 9)
 800144e:	e0e9      	b.n	8001624 <extract_data_for_GGA+0x1ec>
	{
		switch (tokencnt)
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001452:	3b01      	subs	r3, #1
 8001454:	2b05      	cmp	r3, #5
 8001456:	f200 80dd 	bhi.w	8001614 <extract_data_for_GGA+0x1dc>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <extract_data_for_GGA+0x28>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001479 	.word	0x08001479
 8001464:	0800157b 	.word	0x0800157b
 8001468:	080015ad 	.word	0x080015ad
 800146c:	080015b7 	.word	0x080015b7
 8001470:	080015e7 	.word	0x080015e7
 8001474:	080015f1 	.word	0x080015f1
		{

			case 1: // Time
						strncpy(utc_time, token, 6);
 8001478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147c:	2206      	movs	r2, #6
 800147e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001480:	4618      	mov	r0, r3
 8001482:	f007 fbca 	bl	8008c1a <strncpy>
						utc_time[6] = '\0';
 8001486:	2300      	movs	r3, #0
 8001488:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						// Extract hours, minutes, and seconds
						utc_hours = atoi(utc_time) / 10000;
 800148c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fc4c 	bl	8006d2e <atoi>
 8001496:	4603      	mov	r3, r0
 8001498:	4a69      	ldr	r2, [pc, #420]	; (8001640 <extract_data_for_GGA+0x208>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1312      	asrs	r2, r2, #12
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
						utc_minutes = (atoi(utc_time) % 10000) / 100;
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fc3f 	bl	8006d2e <atoi>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <extract_data_for_GGA+0x208>)
 80014b4:	fb83 1302 	smull	r1, r3, r3, r2
 80014b8:	1319      	asrs	r1, r3, #12
 80014ba:	17d3      	asrs	r3, r2, #31
 80014bc:	1acb      	subs	r3, r1, r3
 80014be:	f242 7110 	movw	r1, #10000	; 0x2710
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <extract_data_for_GGA+0x20c>)
 80014ca:	fb82 1203 	smull	r1, r2, r2, r3
 80014ce:	1152      	asrs	r2, r2, #5
 80014d0:	17db      	asrs	r3, r3, #31
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
						utc_seconds = atoi(utc_time) % 100;
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fc27 	bl	8006d2e <atoi>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a58      	ldr	r2, [pc, #352]	; (8001644 <extract_data_for_GGA+0x20c>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1151      	asrs	r1, r2, #5
 80014ea:	17da      	asrs	r2, r3, #31
 80014ec:	1a8a      	subs	r2, r1, r2
 80014ee:	2164      	movs	r1, #100	; 0x64
 80014f0:	fb01 f202 	mul.w	r2, r1, r2
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30

						// Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						ist_hours = (utc_hours + 5) % 24;
 80014f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fa:	1d5a      	adds	r2, r3, #5
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <extract_data_for_GGA+0x210>)
 80014fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001502:	1099      	asrs	r1, r3, #2
 8001504:	17d3      	asrs	r3, r2, #31
 8001506:	1ac9      	subs	r1, r1, r3
 8001508:	460b      	mov	r3, r1
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
						ist_minutes = (utc_minutes + 30) % 60;
 8001514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001516:	f103 021e 	add.w	r2, r3, #30
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <extract_data_for_GGA+0x214>)
 800151c:	fb83 1302 	smull	r1, r3, r3, r2
 8001520:	4413      	add	r3, r2
 8001522:	1159      	asrs	r1, r3, #5
 8001524:	17d3      	asrs	r3, r2, #31
 8001526:	1ac9      	subs	r1, r1, r3
 8001528:	460b      	mov	r3, r1
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a5b      	subs	r3, r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
						ist_seconds = utc_seconds;
 8001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001536:	643b      	str	r3, [r7, #64]	; 0x40

						if(ist_minutes==0)
 8001538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <extract_data_for_GGA+0x10c>
						 {
							 ist_hours+=1;
 800153e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001540:	3301      	adds	r3, #1
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
						 }
						 if(ist_hours>24)
 8001544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001546:	2b18      	cmp	r3, #24
 8001548:	dd02      	ble.n	8001550 <extract_data_for_GGA+0x118>
						{
							 ist_hours-=24;
 800154a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154c:	3b18      	subs	r3, #24
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
						}
						 if(ist_seconds==60)
 8001550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001552:	2b3c      	cmp	r3, #60	; 0x3c
 8001554:	d104      	bne.n	8001560 <extract_data_for_GGA+0x128>
						 {
							 	ist_minutes+=1;
 8001556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001558:	3301      	adds	r3, #1
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
							 ist_seconds=0;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
						 }

						// Print the result in the format "hrs:mins:secs"
						sprintf(time, "%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 8001560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001568:	4939      	ldr	r1, [pc, #228]	; (8001650 <extract_data_for_GGA+0x218>)
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <extract_data_for_GGA+0x21c>)
 800156c:	f007 fa36 	bl	80089dc <siprintf>

						// Print the IST time
						printf("IST time: %s", time);
 8001570:	4938      	ldr	r1, [pc, #224]	; (8001654 <extract_data_for_GGA+0x21c>)
 8001572:	4839      	ldr	r0, [pc, #228]	; (8001658 <extract_data_for_GGA+0x220>)
 8001574:	f007 f9c4 	bl	8008900 <iprintf>
						break;
 8001578:	e04c      	b.n	8001614 <extract_data_for_GGA+0x1dc>
			case 2: // Latitude
				strncpy(latitude_str, token, 9);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2209      	movs	r2, #9
 8001580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fb49 	bl	8008c1a <strncpy>
				latitude_str[9] = '\0';
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				gga_latitude = atof(latitude_str);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fbc8 	bl	8006d28 <atof>
 8001598:	ec53 2b10 	vmov	r2, r3, d0
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fb22 	bl	8000be8 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <extract_data_for_GGA+0x224>)
 80015a8:	6013      	str	r3, [r2, #0]
				//printf("latitude=%f\n",latitude);
				break;
 80015aa:	e033      	b.n	8001614 <extract_data_for_GGA+0x1dc>
			case 3: // latitude dir
				latitude_dir=token[0];
 80015ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <extract_data_for_GGA+0x228>)
 80015b2:	701a      	strb	r2, [r3, #0]
				//printf("latidir=%c\n",latitude_dir);
				break;
 80015b4:	e02e      	b.n	8001614 <extract_data_for_GGA+0x1dc>
			case 4: // Longitude
				strncpy(longitude_str, token, 10);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	220a      	movs	r2, #10
 80015bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fb2b 	bl	8008c1a <strncpy>
				longitude_str[10] = '\0';
 80015c4:	2300      	movs	r3, #0
 80015c6:	76bb      	strb	r3, [r7, #26]
				gga_longitude = atof(longitude_str);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fbab 	bl	8006d28 <atof>
 80015d2:	ec53 2b10 	vmov	r2, r3, d0
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fb05 	bl	8000be8 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <extract_data_for_GGA+0x22c>)
 80015e2:	6013      	str	r3, [r2, #0]
				//printf("longitude=%f\n",longitude);
				break;
 80015e4:	e016      	b.n	8001614 <extract_data_for_GGA+0x1dc>
			case 5: // longitude dir
				longitude_dir=token[0];
 80015e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <extract_data_for_GGA+0x230>)
 80015ec:	701a      	strb	r2, [r3, #0]
				//printf("longidir=%c\n",longitude_dir);
				break;
 80015ee:	e011      	b.n	8001614 <extract_data_for_GGA+0x1dc>
			case 6: // gps fix
				strncpy(gpsfix,token,1);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2201      	movs	r2, #1
 80015f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015f8:	4618      	mov	r0, r3
 80015fa:	f007 fb0e 	bl	8008c1a <strncpy>
				gpsfix[1]='\0';
 80015fe:	2300      	movs	r3, #0
 8001600:	737b      	strb	r3, [r7, #13]
				gps_fix =atoi(gpsfix);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fb91 	bl	8006d2e <atoi>
 800160c:	4603      	mov	r3, r0
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <extract_data_for_GGA+0x234>)
 8001610:	6013      	str	r3, [r2, #0]
				//printf("gpsfix=%d\n",gps_fix);
				break;
 8001612:	bf00      	nop
		}
		token = strtok(NULL, ",");
 8001614:	4909      	ldr	r1, [pc, #36]	; (800163c <extract_data_for_GGA+0x204>)
 8001616:	2000      	movs	r0, #0
 8001618:	f007 fb12 	bl	8008c40 <strtok>
 800161c:	63f8      	str	r0, [r7, #60]	; 0x3c
		tokencnt++;
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001620:	3301      	adds	r3, #1
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (token != NULL && tokencnt < 9)
 8001624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <extract_data_for_GGA+0x1fa>
 800162a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162c:	2b08      	cmp	r3, #8
 800162e:	f77f af0f 	ble.w	8001450 <extract_data_for_GGA+0x18>
	}
}
 8001632:	bf00      	nop
 8001634:	3750      	adds	r7, #80	; 0x50
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	0800b7ec 	.word	0x0800b7ec
 8001640:	68db8bad 	.word	0x68db8bad
 8001644:	51eb851f 	.word	0x51eb851f
 8001648:	2aaaaaab 	.word	0x2aaaaaab
 800164c:	88888889 	.word	0x88888889
 8001650:	0800b7f0 	.word	0x0800b7f0
 8001654:	20000904 	.word	0x20000904
 8001658:	0800b800 	.word	0x0800b800
 800165c:	2000091c 	.word	0x2000091c
 8001660:	20000919 	.word	0x20000919
 8001664:	20000920 	.word	0x20000920
 8001668:	2000091a 	.word	0x2000091a
 800166c:	2000092c 	.word	0x2000092c

08001670 <json_format_for_GGA>:


void json_format_for_GGA(char *json_str)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af08      	add	r7, sp, #32
 8001676:	6078      	str	r0, [r7, #4]

	// Creating the JSON string
	sprintf(json_str, "{\n Time : %s,\n Latitude : %f %c,\n Longitude : %f %c\n}\n", time, gga_latitude, latitude_dir, gga_longitude,longitude_dir);
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <json_format_for_GGA+0x54>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff63 	bl	8000548 <__aeabi_f2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <json_format_for_GGA+0x58>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461e      	mov	r6, r3
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <json_format_for_GGA+0x5c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff59 	bl	8000548 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <json_format_for_GGA+0x60>)
 800169c:	7809      	ldrb	r1, [r1, #0]
 800169e:	9106      	str	r1, [sp, #24]
 80016a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016a4:	9602      	str	r6, [sp, #8]
 80016a6:	e9cd 4500 	strd	r4, r5, [sp]
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <json_format_for_GGA+0x64>)
 80016ac:	490a      	ldr	r1, [pc, #40]	; (80016d8 <json_format_for_GGA+0x68>)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f007 f994 	bl	80089dc <siprintf>

	printf("JSON string format=%s\n",json_str);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <json_format_for_GGA+0x6c>)
 80016b8:	f007 f922 	bl	8008900 <iprintf>
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	2000091c 	.word	0x2000091c
 80016c8:	20000919 	.word	0x20000919
 80016cc:	20000920 	.word	0x20000920
 80016d0:	2000091a 	.word	0x2000091a
 80016d4:	20000904 	.word	0x20000904
 80016d8:	0800b810 	.word	0x0800b810
 80016dc:	0800b848 	.word	0x0800b848

080016e0 <extract_data_for_RMC>:


void extract_data_for_RMC(char *RMC_buffer)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	; 0x68
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
		int tokencnt = 0,minutes,degrees,dd,mm,yy;
 80016e8:	2300      	movs	r3, #0
 80016ea:	65fb      	str	r3, [r7, #92]	; 0x5c
		int utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
		double lat,longi,temp,seconds;
		char utc_time[7], latitude_str[10], longitude_str[11],Date_str[7];
		printf("rmc buffer in function = %s\n",RMC_buffer);
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	48ae      	ldr	r0, [pc, #696]	; (80019a8 <extract_data_for_RMC+0x2c8>)
 80016f0:	f007 f906 	bl	8008900 <iprintf>
		char *token = strtok(RMC_buffer, ",");
 80016f4:	49ad      	ldr	r1, [pc, #692]	; (80019ac <extract_data_for_RMC+0x2cc>)
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f007 faa2 	bl	8008c40 <strtok>
 80016fc:	64f8      	str	r0, [r7, #76]	; 0x4c
		printf("token in function = %s\n",token);
 80016fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001700:	48ab      	ldr	r0, [pc, #684]	; (80019b0 <extract_data_for_RMC+0x2d0>)
 8001702:	f007 f8fd 	bl	8008900 <iprintf>
	while (token != NULL && tokencnt < 12)
 8001706:	e143      	b.n	8001990 <extract_data_for_RMC+0x2b0>
	{
		printf("token count =%d\n",tokencnt);
 8001708:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800170a:	48aa      	ldr	r0, [pc, #680]	; (80019b4 <extract_data_for_RMC+0x2d4>)
 800170c:	f007 f8f8 	bl	8008900 <iprintf>
		switch (tokencnt)
 8001710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001712:	3b01      	subs	r3, #1
 8001714:	2b08      	cmp	r3, #8
 8001716:	f200 8133 	bhi.w	8001980 <extract_data_for_RMC+0x2a0>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <extract_data_for_RMC+0x40>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001745 	.word	0x08001745
 8001724:	08001981 	.word	0x08001981
 8001728:	08001847 	.word	0x08001847
 800172c:	08001879 	.word	0x08001879
 8001730:	0800188f 	.word	0x0800188f
 8001734:	080018d3 	.word	0x080018d3
 8001738:	08001981 	.word	0x08001981
 800173c:	08001981 	.word	0x08001981
 8001740:	080018e9 	.word	0x080018e9
		{
			case 1: // Time
						strncpy(utc_time, token, 6);
 8001744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001748:	2206      	movs	r2, #6
 800174a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f007 fa64 	bl	8008c1a <strncpy>
						utc_time[6] = '\0';
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						//time = atoi(utc_time);
						// Extract hours, minutes, and seconds
						 utc_hours = atoi(utc_time) / 10000;
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fae6 	bl	8006d2e <atoi>
 8001762:	4603      	mov	r3, r0
 8001764:	4a94      	ldr	r2, [pc, #592]	; (80019b8 <extract_data_for_RMC+0x2d8>)
 8001766:	fb82 1203 	smull	r1, r2, r2, r3
 800176a:	1312      	asrs	r2, r2, #12
 800176c:	17db      	asrs	r3, r3, #31
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
						 utc_minutes = (atoi(utc_time) % 10000) / 100;
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fad9 	bl	8006d2e <atoi>
 800177c:	4602      	mov	r2, r0
 800177e:	4b8e      	ldr	r3, [pc, #568]	; (80019b8 <extract_data_for_RMC+0x2d8>)
 8001780:	fb83 1302 	smull	r1, r3, r3, r2
 8001784:	1319      	asrs	r1, r3, #12
 8001786:	17d3      	asrs	r3, r2, #31
 8001788:	1acb      	subs	r3, r1, r3
 800178a:	f242 7110 	movw	r1, #10000	; 0x2710
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a89      	ldr	r2, [pc, #548]	; (80019bc <extract_data_for_RMC+0x2dc>)
 8001796:	fb82 1203 	smull	r1, r2, r2, r3
 800179a:	1152      	asrs	r2, r2, #5
 800179c:	17db      	asrs	r3, r3, #31
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
						 utc_seconds = atoi(utc_time) % 100;
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fac1 	bl	8006d2e <atoi>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a83      	ldr	r2, [pc, #524]	; (80019bc <extract_data_for_RMC+0x2dc>)
 80017b0:	fb82 1203 	smull	r1, r2, r2, r3
 80017b4:	1151      	asrs	r1, r2, #5
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1a8a      	subs	r2, r1, r2
 80017ba:	2164      	movs	r1, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34

						 // Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						 ist_hours = (utc_hours + 5) % 24 ;
 80017c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c6:	1d5a      	adds	r2, r3, #5
 80017c8:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <extract_data_for_RMC+0x2e0>)
 80017ca:	fb83 1302 	smull	r1, r3, r3, r2
 80017ce:	1099      	asrs	r1, r3, #2
 80017d0:	17d3      	asrs	r3, r2, #31
 80017d2:	1ac9      	subs	r1, r1, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	65bb      	str	r3, [r7, #88]	; 0x58
						 ist_minutes = (utc_minutes + 30) % 60;
 80017e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e2:	f103 021e 	add.w	r2, r3, #30
 80017e6:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <extract_data_for_RMC+0x2e4>)
 80017e8:	fb83 1302 	smull	r1, r3, r3, r2
 80017ec:	4413      	add	r3, r2
 80017ee:	1159      	asrs	r1, r3, #5
 80017f0:	17d3      	asrs	r3, r2, #31
 80017f2:	1ac9      	subs	r1, r1, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a5b      	subs	r3, r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	657b      	str	r3, [r7, #84]	; 0x54
						 ist_seconds = utc_seconds;
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	653b      	str	r3, [r7, #80]	; 0x50

						 if(ist_minutes==0)
 8001804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <extract_data_for_RMC+0x130>
						 {
							 	 ist_hours+=1;
 800180a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800180c:	3301      	adds	r3, #1
 800180e:	65bb      	str	r3, [r7, #88]	; 0x58
						 						 //ist_minutes=0;
						}
						 if(ist_hours>24)
 8001810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001812:	2b18      	cmp	r3, #24
 8001814:	dd02      	ble.n	800181c <extract_data_for_RMC+0x13c>
						{
						  ist_hours-=24;
 8001816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001818:	3b18      	subs	r3, #24
 800181a:	65bb      	str	r3, [r7, #88]	; 0x58
						}
						 if(ist_seconds==60)
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	2b3c      	cmp	r3, #60	; 0x3c
 8001820:	d104      	bne.n	800182c <extract_data_for_RMC+0x14c>
						 {
							 ist_minutes+=1;
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	3301      	adds	r3, #1
 8001826:	657b      	str	r3, [r7, #84]	; 0x54
							 ist_seconds=0;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
						 }
						 // Print the result in the format "hrs:mins:secs"
						 sprintf(time,"%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 800182c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001834:	4964      	ldr	r1, [pc, #400]	; (80019c8 <extract_data_for_RMC+0x2e8>)
 8001836:	4865      	ldr	r0, [pc, #404]	; (80019cc <extract_data_for_RMC+0x2ec>)
 8001838:	f007 f8d0 	bl	80089dc <siprintf>

						 // Print the IST time
						 printf("IST time: %s", time);
 800183c:	4963      	ldr	r1, [pc, #396]	; (80019cc <extract_data_for_RMC+0x2ec>)
 800183e:	4864      	ldr	r0, [pc, #400]	; (80019d0 <extract_data_for_RMC+0x2f0>)
 8001840:	f007 f85e 	bl	8008900 <iprintf>
						 break;
 8001844:	e09c      	b.n	8001980 <extract_data_for_RMC+0x2a0>
			case 3: // Latitude
				strncpy(latitude_str, token, 9);
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2209      	movs	r2, #9
 800184c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800184e:	4618      	mov	r0, r3
 8001850:	f007 f9e3 	bl	8008c1a <strncpy>
				latitude_str[9] = '\0';
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				rmc_latitude = atof(latitude_str);
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4618      	mov	r0, r3
 8001860:	f005 fa62 	bl	8006d28 <atof>
 8001864:	ec53 2b10 	vmov	r2, r3, d0
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f9bc 	bl	8000be8 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <extract_data_for_RMC+0x2f4>)
 8001874:	6013      	str	r3, [r2, #0]
				break;
 8001876:	e083      	b.n	8001980 <extract_data_for_RMC+0x2a0>
			case 4: // latitude dir
				latitude_dir=token[0];
 8001878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <extract_data_for_RMC+0x2f8>)
 800187e:	701a      	strb	r2, [r3, #0]
				printf("longidir=%c\n",latitude_dir);
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <extract_data_for_RMC+0x2f8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4855      	ldr	r0, [pc, #340]	; (80019dc <extract_data_for_RMC+0x2fc>)
 8001888:	f007 f83a 	bl	8008900 <iprintf>
				break;
 800188c:	e078      	b.n	8001980 <extract_data_for_RMC+0x2a0>
			case 5: // Longitude
				strncpy(longitude_str, token, 10);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	220a      	movs	r2, #10
 8001894:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001896:	4618      	mov	r0, r3
 8001898:	f007 f9bf 	bl	8008c1a <strncpy>
				longitude_str[10] = '\0';
 800189c:	2300      	movs	r3, #0
 800189e:	77bb      	strb	r3, [r7, #30]
				rmc_longitude = atof(longitude_str);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 fa3f 	bl	8006d28 <atof>
 80018aa:	ec53 2b10 	vmov	r2, r3, d0
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f999 	bl	8000be8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <extract_data_for_RMC+0x300>)
 80018ba:	6013      	str	r3, [r2, #0]
				printf("longitude in RMC =%f\n",rmc_longitude);
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <extract_data_for_RMC+0x300>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4846      	ldr	r0, [pc, #280]	; (80019e4 <extract_data_for_RMC+0x304>)
 80018cc:	f007 f818 	bl	8008900 <iprintf>
				break;
 80018d0:	e056      	b.n	8001980 <extract_data_for_RMC+0x2a0>
			case 6: // longitude dir
				longitude_dir=token[0];
 80018d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <extract_data_for_RMC+0x308>)
 80018d8:	701a      	strb	r2, [r3, #0]
				printf("longidir=%c\n",longitude_dir);
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <extract_data_for_RMC+0x308>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	483e      	ldr	r0, [pc, #248]	; (80019dc <extract_data_for_RMC+0x2fc>)
 80018e2:	f007 f80d 	bl	8008900 <iprintf>
				break;
 80018e6:	e04b      	b.n	8001980 <extract_data_for_RMC+0x2a0>
			case 9: // Date
				strncpy(Date_str, token, 7);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2207      	movs	r2, #7
 80018ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018f0:	4618      	mov	r0, r3
 80018f2:	f007 f992 	bl	8008c1a <strncpy>
			    // printf("date= %s\n",Date_str);
				Date_str[6] = '\0';
 80018f6:	2300      	movs	r3, #0
 80018f8:	74bb      	strb	r3, [r7, #18]
				//date = atoi(Date_str);
				dd = atoi(Date_str) / 10000;
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fa15 	bl	8006d2e <atoi>
 8001904:	4603      	mov	r3, r0
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <extract_data_for_RMC+0x2d8>)
 8001908:	fb82 1203 	smull	r1, r2, r2, r3
 800190c:	1312      	asrs	r2, r2, #12
 800190e:	17db      	asrs	r3, r3, #31
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
				mm = (atoi(Date_str) % 10000) / 100;
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fa08 	bl	8006d2e <atoi>
 800191e:	4602      	mov	r2, r0
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <extract_data_for_RMC+0x2d8>)
 8001922:	fb83 1302 	smull	r1, r3, r3, r2
 8001926:	1319      	asrs	r1, r3, #12
 8001928:	17d3      	asrs	r3, r2, #31
 800192a:	1acb      	subs	r3, r1, r3
 800192c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <extract_data_for_RMC+0x2dc>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1152      	asrs	r2, r2, #5
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
				yy = atoi(Date_str) % 100;
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4618      	mov	r0, r3
 800194a:	f005 f9f0 	bl	8006d2e <atoi>
 800194e:	4603      	mov	r3, r0
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <extract_data_for_RMC+0x2dc>)
 8001952:	fb82 1203 	smull	r1, r2, r2, r3
 8001956:	1151      	asrs	r1, r2, #5
 8001958:	17da      	asrs	r2, r3, #31
 800195a:	1a8a      	subs	r2, r1, r2
 800195c:	2164      	movs	r1, #100	; 0x64
 800195e:	fb01 f202 	mul.w	r2, r1, r2
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	643b      	str	r3, [r7, #64]	; 0x40
				sprintf(date,"%02d/%02d/%02d", dd, mm, yy);
 8001966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800196e:	491f      	ldr	r1, [pc, #124]	; (80019ec <extract_data_for_RMC+0x30c>)
 8001970:	481f      	ldr	r0, [pc, #124]	; (80019f0 <extract_data_for_RMC+0x310>)
 8001972:	f007 f833 	bl	80089dc <siprintf>
				printf("date=%s\n",date);
 8001976:	491e      	ldr	r1, [pc, #120]	; (80019f0 <extract_data_for_RMC+0x310>)
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <extract_data_for_RMC+0x314>)
 800197a:	f006 ffc1 	bl	8008900 <iprintf>
				break;
 800197e:	bf00      	nop

		}
		token = strtok(NULL, ",");
 8001980:	490a      	ldr	r1, [pc, #40]	; (80019ac <extract_data_for_RMC+0x2cc>)
 8001982:	2000      	movs	r0, #0
 8001984:	f007 f95c 	bl	8008c40 <strtok>
 8001988:	64f8      	str	r0, [r7, #76]	; 0x4c
		tokencnt++;
 800198a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198c:	3301      	adds	r3, #1
 800198e:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (token != NULL && tokencnt < 12)
 8001990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <extract_data_for_RMC+0x2be>
 8001996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001998:	2b0b      	cmp	r3, #11
 800199a:	f77f aeb5 	ble.w	8001708 <extract_data_for_RMC+0x28>
	}
}
 800199e:	bf00      	nop
 80019a0:	3760      	adds	r7, #96	; 0x60
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0800b860 	.word	0x0800b860
 80019ac:	0800b7ec 	.word	0x0800b7ec
 80019b0:	0800b880 	.word	0x0800b880
 80019b4:	0800b898 	.word	0x0800b898
 80019b8:	68db8bad 	.word	0x68db8bad
 80019bc:	51eb851f 	.word	0x51eb851f
 80019c0:	2aaaaaab 	.word	0x2aaaaaab
 80019c4:	88888889 	.word	0x88888889
 80019c8:	0800b7f0 	.word	0x0800b7f0
 80019cc:	20000904 	.word	0x20000904
 80019d0:	0800b800 	.word	0x0800b800
 80019d4:	20000924 	.word	0x20000924
 80019d8:	20000919 	.word	0x20000919
 80019dc:	0800b8ac 	.word	0x0800b8ac
 80019e0:	20000928 	.word	0x20000928
 80019e4:	0800b8bc 	.word	0x0800b8bc
 80019e8:	2000091a 	.word	0x2000091a
 80019ec:	0800b8d4 	.word	0x0800b8d4
 80019f0:	20000910 	.word	0x20000910
 80019f4:	0800b8e4 	.word	0x0800b8e4

080019f8 <json_format_for_RMC>:

void json_format_for_RMC(char *json_str)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	b08b      	sub	sp, #44	; 0x2c
 80019fc:	af08      	add	r7, sp, #32
 80019fe:	6078      	str	r0, [r7, #4]
	// Creating the JSON string
		//sprintf(json_str, "{\n\"Date\":%s,\n\"Time\": %s,\n\"Latitude\": %f %c,\n\"Longitude\": %f %c\n}\n", date, time, rmc_latitude, latitude_dir, rmc_longitude ,longitude_dir);

	sprintf(json_str, "{\n  Date :%s,\n  Time : %s,\n  Latitude : %0.3f %c,\n  Longitude : %0.3f %c\n}\n", date, time, rmc_latitude,latitude_dir, rmc_longitude,longitude_dir);
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <json_format_for_RMC+0x58>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9f 	bl	8000548 <__aeabi_f2d>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <json_format_for_RMC+0x5c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461e      	mov	r6, r3
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <json_format_for_RMC+0x60>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd95 	bl	8000548 <__aeabi_f2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <json_format_for_RMC+0x64>)
 8001a24:	7809      	ldrb	r1, [r1, #0]
 8001a26:	9106      	str	r1, [sp, #24]
 8001a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a2c:	9602      	str	r6, [sp, #8]
 8001a2e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <json_format_for_RMC+0x68>)
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <json_format_for_RMC+0x6c>)
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <json_format_for_RMC+0x70>)
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f006 ffcf 	bl	80089dc <siprintf>
	printf("JSON String:\n%s\n", json_str);
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	480a      	ldr	r0, [pc, #40]	; (8001a6c <json_format_for_RMC+0x74>)
 8001a42:	f006 ff5d 	bl	8008900 <iprintf>
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000924 	.word	0x20000924
 8001a54:	20000919 	.word	0x20000919
 8001a58:	20000928 	.word	0x20000928
 8001a5c:	2000091a 	.word	0x2000091a
 8001a60:	20000904 	.word	0x20000904
 8001a64:	20000910 	.word	0x20000910
 8001a68:	0800b8f0 	.word	0x0800b8f0
 8001a6c:	0800b93c 	.word	0x0800b93c

08001a70 <GSM_Send_AT_Command>:
	  	 			 printf("TCP INIT FAILED\n");
	  	 			 return 1;
	  	 	}
}
char* GSM_Send_AT_Command(char* AT_CMD)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,RXSIZE);
 8001a78:	22c8      	movs	r2, #200	; 0xc8
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <GSM_Send_AT_Command+0x50>)
 8001a7e:	f007 f8a5 	bl	8008bcc <memset>
	printf("Sent command %s\n",AT_CMD);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <GSM_Send_AT_Command+0x54>)
 8001a86:	f006 ff3b 	bl	8008900 <iprintf>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fbf0 	bl	8000270 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <GSM_Send_AT_Command+0x58>)
 8001a9a:	f003 fd31 	bl	8005500 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, RXSIZE,2000);
 8001a9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aa2:	22c8      	movs	r2, #200	; 0xc8
 8001aa4:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <GSM_Send_AT_Command+0x50>)
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <GSM_Send_AT_Command+0x58>)
 8001aa8:	f003 fc60 	bl	800536c <HAL_UART_Receive>
	printf("Received response %s\n",RxBuf);
 8001aac:	4904      	ldr	r1, [pc, #16]	; (8001ac0 <GSM_Send_AT_Command+0x50>)
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <GSM_Send_AT_Command+0x5c>)
 8001ab0:	f006 ff26 	bl	8008900 <iprintf>
	return (char *)RxBuf;
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <GSM_Send_AT_Command+0x50>)

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000930 	.word	0x20000930
 8001ac4:	0800b9b4 	.word	0x0800b9b4
 8001ac8:	20000a60 	.word	0x20000a60
 8001acc:	0800b9c8 	.word	0x0800b9c8

08001ad0 <GSM_Send_Data>:
	}
}


int GSM_Send_Data(uint8_t * data)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	int substate=0,counter=0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
	char CTRL_Z=26;
 8001ae0:	231a      	movs	r3, #26
 8001ae2:	73fb      	strb	r3, [r7, #15]


		while(1)
		{			switch(substate)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f000 80da 	beq.w	8001ca0 <GSM_Send_Data+0x1d0>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	dcf8      	bgt.n	8001ae4 <GSM_Send_Data+0x14>
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <GSM_Send_Data+0x30>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d060      	beq.n	8001bc0 <GSM_Send_Data+0xf0>
 8001afe:	e7f1      	b.n	8001ae4 <GSM_Send_Data+0x14>
					{
						case 0:
							Rx_string=GSM_Send_AT_Command("AT+CIPOPEN?\r");
 8001b00:	486b      	ldr	r0, [pc, #428]	; (8001cb0 <GSM_Send_Data+0x1e0>)
 8001b02:	f7ff ffb5 	bl	8001a70 <GSM_Send_AT_Command>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <GSM_Send_Data+0x1e4>)
 8001b0a:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"139.59.78.252"))
 8001b0c:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <GSM_Send_Data+0x1e4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4969      	ldr	r1, [pc, #420]	; (8001cb8 <GSM_Send_Data+0x1e8>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 f8f0 	bl	8008cf8 <strstr>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04d      	beq.n	8001bba <GSM_Send_Data+0xea>
							{
									printf("IP OPENED\n");
 8001b1e:	4867      	ldr	r0, [pc, #412]	; (8001cbc <GSM_Send_Data+0x1ec>)
 8001b20:	f006 ff54 	bl	80089cc <puts>
									memset(RxBuf,0,200);
 8001b24:	22c8      	movs	r2, #200	; 0xc8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4865      	ldr	r0, [pc, #404]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b2a:	f007 f84f 	bl	8008bcc <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 8001b2e:	220d      	movs	r2, #13
 8001b30:	4964      	ldr	r1, [pc, #400]	; (8001cc4 <GSM_Send_Data+0x1f4>)
 8001b32:	4865      	ldr	r0, [pc, #404]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001b34:	f003 fce4 	bl	8005500 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8001b38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b3c:	22c8      	movs	r2, #200	; 0xc8
 8001b3e:	4960      	ldr	r1, [pc, #384]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b40:	4861      	ldr	r0, [pc, #388]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001b42:	f003 fc13 	bl	800536c <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8001b46:	495e      	ldr	r1, [pc, #376]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b48:	4860      	ldr	r0, [pc, #384]	; (8001ccc <GSM_Send_Data+0x1fc>)
 8001b4a:	f006 fed9 	bl	8008900 <iprintf>
									if(strstr(RxBuf,">"))
 8001b4e:	213e      	movs	r1, #62	; 0x3e
 8001b50:	485b      	ldr	r0, [pc, #364]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b52:	f007 f843 	bl	8008bdc <strchr>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02b      	beq.n	8001bb4 <GSM_Send_Data+0xe4>
									{
									memset(RxBuf,0,200);
 8001b5c:	22c8      	movs	r2, #200	; 0xc8
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4857      	ldr	r0, [pc, #348]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b62:	f007 f833 	bl	8008bcc <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fb82 	bl	8000270 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4854      	ldr	r0, [pc, #336]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001b76:	f003 fcc3 	bl	8005500 <HAL_UART_Transmit_IT>
									HAL_Delay(2000);
 8001b7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b7e:	f000 fde3 	bl	8002748 <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 8001b82:	f107 030f 	add.w	r3, r7, #15
 8001b86:	2201      	movs	r2, #1
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001b8c:	f003 fcb8 	bl	8005500 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8001b90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b94:	22c8      	movs	r2, #200	; 0xc8
 8001b96:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001b98:	484b      	ldr	r0, [pc, #300]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001b9a:	f003 fbe7 	bl	800536c <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8001b9e:	4948      	ldr	r1, [pc, #288]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001ba0:	484a      	ldr	r0, [pc, #296]	; (8001ccc <GSM_Send_Data+0x1fc>)
 8001ba2:	f006 fead 	bl	8008900 <iprintf>
									memset(RxBuf,0,200);
 8001ba6:	22c8      	movs	r2, #200	; 0xc8
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4845      	ldr	r0, [pc, #276]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001bac:	f007 f80e 	bl	8008bcc <memset>
									return 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e079      	b.n	8001ca8 <GSM_Send_Data+0x1d8>
									}
									else
									{
										substate=0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
							}
							else
							{
								substate=1;
							}
							break;
 8001bb8:	e075      	b.n	8001ca6 <GSM_Send_Data+0x1d6>
								substate=1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
							break;
 8001bbe:	e072      	b.n	8001ca6 <GSM_Send_Data+0x1d6>
						    case 1:
						    	Rx_string=GSM_Send_AT_Command("AT+CIPOPEN=1,\"TCP\",\"139.59.78.252\",52101\r");
 8001bc0:	4843      	ldr	r0, [pc, #268]	; (8001cd0 <GSM_Send_Data+0x200>)
 8001bc2:	f7ff ff55 	bl	8001a70 <GSM_Send_AT_Command>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <GSM_Send_Data+0x1e4>)
 8001bca:	6013      	str	r3, [r2, #0]
						    	if(strstr(Rx_string,"+CIPOPEN: 1,0"))
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <GSM_Send_Data+0x1e4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <GSM_Send_Data+0x204>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f007 f890 	bl	8008cf8 <strstr>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d056      	beq.n	8001c8c <GSM_Send_Data+0x1bc>
						    	{
						    		printf("IP OPENED\n");
 8001bde:	4837      	ldr	r0, [pc, #220]	; (8001cbc <GSM_Send_Data+0x1ec>)
 8001be0:	f006 fef4 	bl	80089cc <puts>
						    		memset(RxBuf,0,200);
 8001be4:	22c8      	movs	r2, #200	; 0xc8
 8001be6:	2100      	movs	r1, #0
 8001be8:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001bea:	f006 ffef 	bl	8008bcc <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 8001bee:	220d      	movs	r2, #13
 8001bf0:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <GSM_Send_Data+0x1f4>)
 8001bf2:	4835      	ldr	r0, [pc, #212]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001bf4:	f003 fc84 	bl	8005500 <HAL_UART_Transmit_IT>
						    		HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8001bf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bfc:	22c8      	movs	r2, #200	; 0xc8
 8001bfe:	4930      	ldr	r1, [pc, #192]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c00:	4831      	ldr	r0, [pc, #196]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001c02:	f003 fbb3 	bl	800536c <HAL_UART_Receive>
						    		printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8001c06:	492e      	ldr	r1, [pc, #184]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c08:	4830      	ldr	r0, [pc, #192]	; (8001ccc <GSM_Send_Data+0x1fc>)
 8001c0a:	f006 fe79 	bl	8008900 <iprintf>
						    		if(strstr(RxBuf,">"))
 8001c0e:	213e      	movs	r1, #62	; 0x3e
 8001c10:	482b      	ldr	r0, [pc, #172]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c12:	f006 ffe3 	bl	8008bdc <strchr>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d034      	beq.n	8001c86 <GSM_Send_Data+0x1b6>
						    		{
						    		memset(RxBuf,0,200);
 8001c1c:	22c8      	movs	r2, #200	; 0xc8
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4827      	ldr	r0, [pc, #156]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c22:	f006 ffd3 	bl	8008bcc <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fb22 	bl	8000270 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001c36:	f003 fc63 	bl	8005500 <HAL_UART_Transmit_IT>
						    		HAL_Delay(2000);
 8001c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c3e:	f000 fd83 	bl	8002748 <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 8001c42:	f107 030f 	add.w	r3, r7, #15
 8001c46:	2201      	movs	r2, #1
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001c4c:	f003 fc58 	bl	8005500 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8001c50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c54:	22c8      	movs	r2, #200	; 0xc8
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c58:	481b      	ldr	r0, [pc, #108]	; (8001cc8 <GSM_Send_Data+0x1f8>)
 8001c5a:	f003 fb87 	bl	800536c <HAL_UART_Receive>
						    		printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8001c5e:	4918      	ldr	r1, [pc, #96]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c60:	481a      	ldr	r0, [pc, #104]	; (8001ccc <GSM_Send_Data+0x1fc>)
 8001c62:	f006 fe4d 	bl	8008900 <iprintf>
						    		 memset(RxBuf,0,200);
 8001c66:	22c8      	movs	r2, #200	; 0xc8
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c6c:	f006 ffae 	bl	8008bcc <memset>
						    		if(strstr(RxBuf,"IPERROR"))
 8001c70:	4919      	ldr	r1, [pc, #100]	; (8001cd8 <GSM_Send_Data+0x208>)
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <GSM_Send_Data+0x1f0>)
 8001c74:	f007 f840 	bl	8008cf8 <strstr>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <GSM_Send_Data+0x1b2>
						    			return 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e012      	b.n	8001ca8 <GSM_Send_Data+0x1d8>
						    		else
						    		    return 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e010      	b.n	8001ca8 <GSM_Send_Data+0x1d8>
						    		}
						    		else
						    		{
						    			substate=1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
								if(counter>5)
								{
									return 1;
								}
							}
							break;
 8001c8a:	e00b      	b.n	8001ca4 <GSM_Send_Data+0x1d4>
								substate=0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
								counter++;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
								if(counter>5)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	dd03      	ble.n	8001ca4 <GSM_Send_Data+0x1d4>
									return 1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e003      	b.n	8001ca8 <GSM_Send_Data+0x1d8>
						case 2:
								return 1;  // GSM SEND failed
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e001      	b.n	8001ca8 <GSM_Send_Data+0x1d8>
							break;
 8001ca4:	bf00      	nop
		{			switch(substate)
 8001ca6:	e71d      	b.n	8001ae4 <GSM_Send_Data+0x14>
					}

		}


}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0800bb58 	.word	0x0800bb58
 8001cb4:	200009f8 	.word	0x200009f8
 8001cb8:	0800bb68 	.word	0x0800bb68
 8001cbc:	0800bb78 	.word	0x0800bb78
 8001cc0:	20000930 	.word	0x20000930
 8001cc4:	0800bb84 	.word	0x0800bb84
 8001cc8:	20000a60 	.word	0x20000a60
 8001ccc:	0800bb94 	.word	0x0800bb94
 8001cd0:	0800bbb8 	.word	0x0800bbb8
 8001cd4:	0800bbe4 	.word	0x0800bbe4
 8001cd8:	0800bbf4 	.word	0x0800bbf4

08001cdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ce4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ce8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001cf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001cf8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001cfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d04:	e000      	b.n	8001d08 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f9      	beq.n	8001d06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d12:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_write>:
//#define FLASH_START_ADDRESS 0x08080000


int _write(int file,char *ptr,int len)

{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]

    int i=0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

    for(i=0;i<len;i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x2a>

      ITM_SendChar((*ptr++));
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffc7 	bl	8001cdc <ITM_SendChar>
    for(i=0;i<len;i++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x16>

    return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]

}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09a      	sub	sp, #104	; 0x68
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6e:	f000 fc6f 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d72:	f000 f90b 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d76:	f000 f9f9 	bl	800216c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d7a:	f000 f959 	bl	8002030 <MX_SPI1_Init>
  MX_UART4_Init();
 8001d7e:	f000 f995 	bl	80020ac <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001d82:	f000 f9c3 	bl	800210c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ID=W25Q_ReadID();
 8001d86:	f7ff f97b 	bl	8001080 <W25Q_ReadID>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <main+0x1d4>)
 8001d90:	701a      	strb	r2, [r3, #0]


int x=2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	667b      	str	r3, [r7, #100]	; 0x64
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //if(DATA_SEND_READY()!=0)
	  if(x==1)
 8001d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d15d      	bne.n	8001e58 <main+0xf0>
	   {
		  if(No_Of_Locations!=0)
 8001d9c:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <main+0x1d8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <main+0x70>
			  {
				  printf("Failed to allocate memory");
			  }
			  else
			  {
				  W25Q_Read(0, 0, No_Of_Locations*86, Read_From_Flash);
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <main+0x1d8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2256      	movs	r2, #86	; 0x56
 8001daa:	fb03 f202 	mul.w	r2, r3, r2
 8001dae:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <main+0x1dc>)
 8001db0:	2100      	movs	r1, #0
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff f982 	bl	80010bc <W25Q_Read>
				  ret=GSM_Send_Data(Read_From_Flash);
 8001db8:	4862      	ldr	r0, [pc, #392]	; (8001f44 <main+0x1dc>)
 8001dba:	f7ff fe89 	bl	8001ad0 <GSM_Send_Data>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a61      	ldr	r2, [pc, #388]	; (8001f48 <main+0x1e0>)
 8001dc2:	6013      	str	r3, [r2, #0]
				  if(ret==0)
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <main+0x1e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <main+0x70>
				  {
					  printf("Stored locations are sent to server successfully\n");
 8001dcc:	485f      	ldr	r0, [pc, #380]	; (8001f4c <main+0x1e4>)
 8001dce:	f006 fdfd 	bl	80089cc <puts>
					  No_Of_Locations=0;
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <main+0x1d8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]



	  	  	 		while(1)
	  	  	 		{
	  	  	 			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8001dd8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001ddc:	495c      	ldr	r1, [pc, #368]	; (8001f50 <main+0x1e8>)
 8001dde:	485d      	ldr	r0, [pc, #372]	; (8001f54 <main+0x1ec>)
 8001de0:	f003 fbec 	bl	80055bc <HAL_UART_Receive_IT>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f6      	bne.n	8001dd8 <main+0x70>
	  	  	 			{
	  	  	 			printf("Received NMEA %s\n",RxBuffer);
 8001dea:	4959      	ldr	r1, [pc, #356]	; (8001f50 <main+0x1e8>)
 8001dec:	485a      	ldr	r0, [pc, #360]	; (8001f58 <main+0x1f0>)
 8001dee:	f006 fd87 	bl	8008900 <iprintf>
	  	  	 			strcpy(buf_to_extract,RxBuffer);
 8001df2:	4957      	ldr	r1, [pc, #348]	; (8001f50 <main+0x1e8>)
 8001df4:	4859      	ldr	r0, [pc, #356]	; (8001f5c <main+0x1f4>)
 8001df6:	f007 f80c 	bl	8008e12 <strcpy>
	  	  	 			memset(RxBuffer,0,750);
 8001dfa:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4853      	ldr	r0, [pc, #332]	; (8001f50 <main+0x1e8>)
 8001e02:	f006 fee3 	bl	8008bcc <memset>
	  	  	 			get_data_from_gps(buf_to_extract);
 8001e06:	4855      	ldr	r0, [pc, #340]	; (8001f5c <main+0x1f4>)
 8001e08:	f7ff fa46 	bl	8001298 <get_data_from_gps>
	  	  	 			//memset(buf_to_extract,0,750);

	  	  	 		 if(*json_str)
 8001e0c:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <main+0x1f8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d011      	beq.n	8001e38 <main+0xd0>
	  	  	 		 {
	  	  	 			 printf("GPS Recieved %s \n",json_str);
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <main+0x1f8>)
 8001e16:	4853      	ldr	r0, [pc, #332]	; (8001f64 <main+0x1fc>)
 8001e18:	f006 fd72 	bl	8008900 <iprintf>
	  	  	 			if(GSM_Send_Data((uint8_t *)json_str)==0)
 8001e1c:	4850      	ldr	r0, [pc, #320]	; (8001f60 <main+0x1f8>)
 8001e1e:	f7ff fe57 	bl	8001ad0 <GSM_Send_Data>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d103      	bne.n	8001e30 <main+0xc8>
	  	  	 			{
	  	  	 			printf("Sending worked \n");
 8001e28:	484f      	ldr	r0, [pc, #316]	; (8001f68 <main+0x200>)
 8001e2a:	f006 fdcf 	bl	80089cc <puts>
 8001e2e:	e006      	b.n	8001e3e <main+0xd6>

	  	  	 			}
	  	  	 			else
	  	  	 			{
	  		  	 			printf("Sending  not worked \n");
 8001e30:	484e      	ldr	r0, [pc, #312]	; (8001f6c <main+0x204>)
 8001e32:	f006 fdcb 	bl	80089cc <puts>
 8001e36:	e002      	b.n	8001e3e <main+0xd6>

	  	  	 			}
	  	  	 		 }
	  	  	 		 else
	  	  	 		 {
	  	  	 			 printf("GPS Received No DATA\n");
 8001e38:	484d      	ldr	r0, [pc, #308]	; (8001f70 <main+0x208>)
 8001e3a:	f006 fdc7 	bl	80089cc <puts>
	  	  	 			 //
	  	  	 		 }
	  	  	 		 memset(json_str,0,256);
 8001e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e42:	2100      	movs	r1, #0
 8001e44:	4846      	ldr	r0, [pc, #280]	; (8001f60 <main+0x1f8>)
 8001e46:	f006 fec1 	bl	8008bcc <memset>
	  	  	 		 memset(json_str,0,256);
 8001e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4843      	ldr	r0, [pc, #268]	; (8001f60 <main+0x1f8>)
 8001e52:	f006 febb 	bl	8008bcc <memset>
	  	  	 			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8001e56:	e7bf      	b.n	8001dd8 <main+0x70>
	  	  	 		}
	  	  	 		}
	  	  	 }
	  	  	 else
	  	  	 {
	  	  		 printf("GSM Init Failed in Main\n Storing in Flash \n");
 8001e58:	4846      	ldr	r0, [pc, #280]	; (8001f74 <main+0x20c>)
 8001e5a:	f006 fdb7 	bl	80089cc <puts>

	  	  		while(1)
	  	  		{
	  	  			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8001e5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001e62:	493b      	ldr	r1, [pc, #236]	; (8001f50 <main+0x1e8>)
 8001e64:	483b      	ldr	r0, [pc, #236]	; (8001f54 <main+0x1ec>)
 8001e66:	f003 fba9 	bl	80055bc <HAL_UART_Receive_IT>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f6      	bne.n	8001e5e <main+0xf6>
	  	  			{

	  	  				printf("Received NMEA %s\n",RxBuffer);
 8001e70:	4937      	ldr	r1, [pc, #220]	; (8001f50 <main+0x1e8>)
 8001e72:	4839      	ldr	r0, [pc, #228]	; (8001f58 <main+0x1f0>)
 8001e74:	f006 fd44 	bl	8008900 <iprintf>
	  	  			  	strcpy(buf_to_extract,RxBuffer);
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <main+0x1e8>)
 8001e7a:	4838      	ldr	r0, [pc, #224]	; (8001f5c <main+0x1f4>)
 8001e7c:	f006 ffc9 	bl	8008e12 <strcpy>
	  	  			  	memset(RxBuffer,0,750);
 8001e80:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001e84:	2100      	movs	r1, #0
 8001e86:	4832      	ldr	r0, [pc, #200]	; (8001f50 <main+0x1e8>)
 8001e88:	f006 fea0 	bl	8008bcc <memset>
	  	  			  	get_data_from_gps(buf_to_extract);
 8001e8c:	4833      	ldr	r0, [pc, #204]	; (8001f5c <main+0x1f4>)
 8001e8e:	f7ff fa03 	bl	8001298 <get_data_from_gps>
	  	  			  	 //memset(buf_to_extract,0,750);

	  	  			  	  //if(*json_str)
	  	  			  	if(x==2)
 8001e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d146      	bne.n	8001f26 <main+0x1be>
	  	  			  	  {
	  	  			  	  	 printf("GPS Recieved %s \n",json_str);
 8001e98:	4931      	ldr	r1, [pc, #196]	; (8001f60 <main+0x1f8>)
 8001e9a:	4832      	ldr	r0, [pc, #200]	; (8001f64 <main+0x1fc>)
 8001e9c:	f006 fd30 	bl	8008900 <iprintf>
	  	  			  	  	 printf(" json string length %d",strlen(json_str));
 8001ea0:	482f      	ldr	r0, [pc, #188]	; (8001f60 <main+0x1f8>)
 8001ea2:	f7fe f9e5 	bl	8000270 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4833      	ldr	r0, [pc, #204]	; (8001f78 <main+0x210>)
 8001eac:	f006 fd28 	bl	8008900 <iprintf>
	  	  			  	  	// W25Q_Write(page, offset, size, data);
	  	  			  	  	 char str[100] = "latitude: 17.889933 N, longitude:18.112233 E, time: 17:01:02,date: 08/02/24";
 8001eb0:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <main+0x214>)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	224c      	movs	r2, #76	; 0x4c
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f006 ffb2 	bl	8008e22 <memcpy>
 8001ebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	615a      	str	r2, [r3, #20]

		  	Write_Again:      ret =Storing_GPS_Data_Into_Flash((uint8_t *)str);
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9a2 	bl	800121c <Storing_GPS_Data_Into_Flash>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <main+0x1e0>)
 8001edc:	6013      	str	r3, [r2, #0]

	  	  			  	  	if(ret==0)
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <main+0x1e0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11a      	bne.n	8001f1c <main+0x1b4>
	  	  			  	  	{
	  	  			  	  		No_Of_Locations++;
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <main+0x1d8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <main+0x1d8>)
 8001eee:	6013      	str	r3, [r2, #0]
	  	  			  	  		printf("Latest Location stored in Flash \n No of Locations Stored into the Flash are : %d\n",No_Of_Locations);
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <main+0x1d8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4822      	ldr	r0, [pc, #136]	; (8001f80 <main+0x218>)
 8001ef8:	f006 fd02 	bl	8008900 <iprintf>
	  	  			  	  		//HAL_Delay(5000);
	  	  			  	  		//Read_From_Flash=malloc(No_Of_Locations*13);
	  	  			  	  W25Q_Read(0, 0, 400, Read_From_Flash);
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <main+0x1dc>)
 8001efe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f02:	2100      	movs	r1, #0
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f8d9 	bl	80010bc <W25Q_Read>
	  	  			  	  HAL_Delay(500);
 8001f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f0e:	f000 fc1b 	bl	8002748 <HAL_Delay>

	  	  			  	 printf("Stored Data is %s \n",Read_From_Flash);
 8001f12:	490c      	ldr	r1, [pc, #48]	; (8001f44 <main+0x1dc>)
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <main+0x21c>)
 8001f16:	f006 fcf3 	bl	8008900 <iprintf>

	  	  			  	  		break;
 8001f1a:	e003      	b.n	8001f24 <main+0x1bc>
	  	  			  	  	}
	  	  			  	  	else
	  	  			  	  	{
	  	  			  	  		printf("Storing Failed \n");
 8001f1c:	481a      	ldr	r0, [pc, #104]	; (8001f88 <main+0x220>)
 8001f1e:	f006 fd55 	bl	80089cc <puts>
	  	  			  	  		goto Write_Again;
 8001f22:	e7d5      	b.n	8001ed0 <main+0x168>
	  if(x==1)
 8001f24:	e737      	b.n	8001d96 <main+0x2e>
	  	  			  	  	}

	  	  			  	  }
	  	  			  	  else
	  	  			  	  {
	  	  			  	  	  printf("GPS Received No DATA\n");
 8001f26:	4812      	ldr	r0, [pc, #72]	; (8001f70 <main+0x208>)
 8001f28:	f006 fd50 	bl	80089cc <puts>

	  	  			  	  }
	  	  			  	  	memset(json_str,0,256);
 8001f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f30:	2100      	movs	r1, #0
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <main+0x1f8>)
 8001f34:	f006 fe4a 	bl	8008bcc <memset>
	  	  			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8001f38:	e791      	b.n	8001e5e <main+0xf6>
 8001f3a:	bf00      	nop
 8001f3c:	20000b70 	.word	0x20000b70
 8001f40:	20000b74 	.word	0x20000b74
 8001f44:	20000b78 	.word	0x20000b78
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	0800bbfc 	.word	0x0800bbfc
 8001f50:	200001f8 	.word	0x200001f8
 8001f54:	20000ae8 	.word	0x20000ae8
 8001f58:	0800bc30 	.word	0x0800bc30
 8001f5c:	200004e8 	.word	0x200004e8
 8001f60:	200007d8 	.word	0x200007d8
 8001f64:	0800bc44 	.word	0x0800bc44
 8001f68:	0800bc58 	.word	0x0800bc58
 8001f6c:	0800bc68 	.word	0x0800bc68
 8001f70:	0800bc80 	.word	0x0800bc80
 8001f74:	0800bc98 	.word	0x0800bc98
 8001f78:	0800bcc4 	.word	0x0800bcc4
 8001f7c:	0800bd54 	.word	0x0800bd54
 8001f80:	0800bcdc 	.word	0x0800bcdc
 8001f84:	0800bd30 	.word	0x0800bd30
 8001f88:	0800bd44 	.word	0x0800bd44

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	; 0x58
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	2244      	movs	r2, #68	; 0x44
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f006 fe16 	bl	8008bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fb2:	f000 ff4d 	bl	8002e50 <HAL_PWREx_ControlVoltageScaling>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fbc:	f000 f906 	bl	80021cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fca:	2310      	movs	r3, #16
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 ff84 	bl	8002efc <HAL_RCC_OscConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ffa:	f000 f8e7 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffe:	230f      	movs	r3, #15
 8002000:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002002:	2303      	movs	r3, #3
 8002004:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	2104      	movs	r1, #4
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fb4c 	bl	80036b4 <HAL_RCC_ClockConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002022:	f000 f8d3 	bl	80021cc <Error_Handler>
  }
}
 8002026:	bf00      	nop
 8002028:	3758      	adds	r7, #88	; 0x58
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <MX_SPI1_Init+0x78>)
 8002038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_SPI1_Init+0x74>)
 800203c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI1_Init+0x74>)
 800204a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800204e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI1_Init+0x74>)
 800205e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002062:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002066:	2220      	movs	r2, #32
 8002068:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI1_Init+0x74>)
 800207e:	2207      	movs	r2, #7
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI1_Init+0x74>)
 800208a:	2208      	movs	r2, #8
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_SPI1_Init+0x74>)
 8002090:	f002 f9f0 	bl	8004474 <HAL_SPI_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800209a:	f000 f897 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200009fc 	.word	0x200009fc
 80020a8:	40013000 	.word	0x40013000

080020ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_UART4_Init+0x58>)
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <MX_UART4_Init+0x5c>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_UART4_Init+0x58>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_UART4_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_UART4_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_UART4_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_UART4_Init+0x58>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_UART4_Init+0x58>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_UART4_Init+0x58>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_UART4_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_UART4_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_UART4_Init+0x58>)
 80020f0:	f003 f8ee 	bl	80052d0 <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80020fa:	f000 f867 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000a60 	.word	0x20000a60
 8002108:	40004c00 	.word	0x40004c00

0800210c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <MX_USART1_UART_Init+0x5c>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002118:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART1_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART1_UART_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART1_UART_Init+0x58>)
 8002150:	f003 f8be 	bl	80052d0 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800215a:	f000 f837 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000ae8 	.word	0x20000ae8
 8002168:	40013800 	.word	0x40013800

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_GPIO_Init+0x5c>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <MX_GPIO_Init+0x5c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_GPIO_Init+0x5c>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2110      	movs	r1, #16
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f000 fe30 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021a4:	2310      	movs	r3, #16
 80021a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021bc:	f000 fc78 	bl	8002ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_MspInit+0x44>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_MspInit+0x44>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_MspInit+0x44>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_MspInit+0x44>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_MspInit+0x44>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_MspInit+0x44>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_SPI_MspInit+0x7c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d128      	bne.n	8002294 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 8002248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224c:	6613      	str	r3, [r2, #96]	; 0x60
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_SPI_MspInit+0x80>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002272:	23e0      	movs	r3, #224	; 0xe0
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f000 fc0e 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013000 	.word	0x40013000
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0ae      	sub	sp, #184	; 0xb8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	2288      	movs	r2, #136	; 0x88
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f006 fc81 	bl	8008bcc <memset>
  if(huart->Instance==UART4)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_UART_MspInit+0x158>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d144      	bne.n	800235e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022d4:	2308      	movs	r3, #8
 80022d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022d8:	2300      	movs	r3, #0
 80022da:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 fc0b 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022ec:	f7ff ff6e 	bl	80021cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022f0:	4b43      	ldr	r3, [pc, #268]	; (8002400 <HAL_UART_MspInit+0x15c>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	4a42      	ldr	r2, [pc, #264]	; (8002400 <HAL_UART_MspInit+0x15c>)
 80022f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022fa:	6593      	str	r3, [r2, #88]	; 0x58
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_UART_MspInit+0x15c>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_UART_MspInit+0x15c>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_UART_MspInit+0x15c>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <HAL_UART_MspInit+0x15c>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002338:	2308      	movs	r3, #8
 800233a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002342:	4619      	mov	r1, r3
 8002344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002348:	f000 fbb2 	bl	8002ab0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	2034      	movs	r0, #52	; 0x34
 8002352:	f000 faf8 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002356:	2034      	movs	r0, #52	; 0x34
 8002358:	f000 fb11 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800235c:	e049      	b.n	80023f2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_UART_MspInit+0x160>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d144      	bne.n	80023f2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002368:	2301      	movs	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800236c:	2300      	movs	r3, #0
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fbc1 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002380:	f7ff ff24 	bl	80021cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_UART_MspInit+0x15c>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_UART_MspInit+0x15c>)
 800238a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238e:	6613      	str	r3, [r2, #96]	; 0x60
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_UART_MspInit+0x15c>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_UART_MspInit+0x15c>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_UART_MspInit+0x15c>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0x15c>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ce:	2307      	movs	r3, #7
 80023d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023de:	f000 fb67 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2025      	movs	r0, #37	; 0x25
 80023e8:	f000 faad 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ec:	2025      	movs	r0, #37	; 0x25
 80023ee:	f000 fac6 	bl	800297e <HAL_NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	37b8      	adds	r7, #184	; 0xb8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40004c00 	.word	0x40004c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40013800 	.word	0x40013800

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f000 f958 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <USART1_IRQHandler+0x10>)
 8002462:	f003 f8f7 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000ae8 	.word	0x20000ae8

08002470 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <UART4_IRQHandler+0x10>)
 8002476:	f003 f8ed 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000a60 	.word	0x20000a60

08002484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return 1;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_kill>:

int _kill(int pid, int sig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800249e:	f006 fc8b 	bl	8008db8 <__errno>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2216      	movs	r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
  return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_exit>:

void _exit (int status)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffe7 	bl	8002494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c6:	e7fe      	b.n	80024c6 <_exit+0x12>

080024c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e00a      	b.n	80024f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024da:	f3af 8000 	nop.w
 80024de:	4601      	mov	r1, r0
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf0      	blt.n	80024da <_read+0x12>
  }

  return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
  return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f006 fc0c 	bl	8008db8 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20018000 	.word	0x20018000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20002ab8 	.word	0x20002ab8
 80025d4:	20002c10 	.word	0x20002c10

080025d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002600:	f7ff ffea 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262a:	f006 fbcb 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262e:	f7ff fb9b 	bl	8001d68 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002640:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8002644:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002648:	20002c0c 	.word	0x20002c0c

0800264c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_2_IRQHandler>
	...

08002650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_Init+0x3c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_Init+0x3c>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002666:	2003      	movs	r0, #3
 8002668:	f000 f962 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266c:	2000      	movs	r0, #0
 800266e:	f000 f80f 	bl	8002690 <HAL_InitTick>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e001      	b.n	8002682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267e:	f7ff fdab 	bl	80021d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002682:	79fb      	ldrb	r3, [r7, #7]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_InitTick+0x6c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_InitTick+0x70>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_InitTick+0x6c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f96d 	bl	800299a <HAL_SYSTICK_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d809      	bhi.n	80026e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f937 	bl	8002946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_InitTick+0x74>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e007      	b.n	80026f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e004      	b.n	80026f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e001      	b.n	80026f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	20000004 	.word	0x20000004
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c
 800272c:	20002abc 	.word	0x20002abc

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20002abc 	.word	0x20002abc

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c

08002790 <__NVIC_SetPriorityGrouping>:
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d008      	beq.n	80029dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e022      	b.n	8002a22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020e 	bic.w	r2, r2, #14
 80029ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f003 021c 	and.w	r2, r3, #28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d005      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e029      	b.n	8002aa6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020e 	bic.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 021c 	and.w	r2, r3, #28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
    }
  }
  return status;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	e17f      	b.n	8002dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8171 	beq.w	8002dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d005      	beq.n	8002af0 <HAL_GPIO_Init+0x40>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d130      	bne.n	8002b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b26:	2201      	movs	r2, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0201 	and.w	r2, r3, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d118      	bne.n	8002b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	6939      	ldr	r1, [r7, #16]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ac 	beq.w	8002dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7a:	4a5a      	ldr	r2, [pc, #360]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x242>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <HAL_GPIO_Init+0x338>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x23e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <HAL_GPIO_Init+0x33c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x23a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_GPIO_Init+0x340>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x236>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	; (8002df4 <HAL_GPIO_Init+0x344>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x232>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x348>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x22e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x34c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x22a>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d04:	4937      	ldr	r1, [pc, #220]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f ae78 	bne.w	8002ac0 <HAL_GPIO_Init+0x10>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40010000 	.word	0x40010000
 8002de8:	48000400 	.word	0x48000400
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000c00 	.word	0x48000c00
 8002df4:	48001000 	.word	0x48001000
 8002df8:	48001400 	.word	0x48001400
 8002dfc:	48001800 	.word	0x48001800
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40007000 	.word	0x40007000

08002e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5e:	d130      	bne.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e60:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6c:	d038      	beq.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2232      	movs	r2, #50	; 0x32
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e94:	e002      	b.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea8:	d102      	bne.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f2      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d110      	bne.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d007      	beq.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ede:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	431bde83 	.word	0x431bde83

08002efc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e3ca      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	4b97      	ldr	r3, [pc, #604]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	4b94      	ldr	r3, [pc, #592]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80e4 	beq.w	80030f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4a>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	f040 808b 	bne.w	8003054 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 8087 	bne.w	8003054 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e3a2      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <HAL_RCC_OscConfig+0x7c>
 8002f6e:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f76:	e005      	b.n	8002f84 <HAL_RCC_OscConfig+0x88>
 8002f78:	4b7c      	ldr	r3, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d223      	bcs.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fd55 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e383      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9c:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a72      	ldr	r2, [pc, #456]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	496d      	ldr	r1, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	4968      	ldr	r1, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
 8002fce:	e025      	b.n	800301c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd0:	4b66      	ldr	r3, [pc, #408]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a65      	ldr	r2, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4960      	ldr	r1, [pc, #384]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	495b      	ldr	r1, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fd15 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e343      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800301c:	f000 fc4a 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	4950      	ldr	r1, [pc, #320]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <HAL_RCC_OscConfig+0x278>)
 800303a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800303c:	4b4e      	ldr	r3, [pc, #312]	; (8003178 <HAL_RCC_OscConfig+0x27c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb25 	bl	8002690 <HAL_InitTick>
 8003046:	4603      	mov	r3, r0
 8003048:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d052      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	e327      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d032      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800305c:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a42      	ldr	r2, [pc, #264]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003068:	f7ff fb62 	bl	8002730 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003070:	f7ff fb5e 	bl	8002730 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e310      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a36      	ldr	r2, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4931      	ldr	r1, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	492c      	ldr	r1, [pc, #176]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
 80030c0:	e01a      	b.n	80030f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ce:	f7ff fb2f 	bl	8002730 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d6:	f7ff fb2b 	bl	8002730 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e2dd      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x1da>
 80030f4:	e000      	b.n	80030f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d074      	beq.n	80031ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b08      	cmp	r3, #8
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x21a>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d10e      	bne.n	800312e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d10b      	bne.n	800312e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d064      	beq.n	80031ec <HAL_RCC_OscConfig+0x2f0>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d160      	bne.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e2ba      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x24a>
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x270>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e026      	b.n	8003194 <HAL_RCC_OscConfig+0x298>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314e:	d115      	bne.n	800317c <HAL_RCC_OscConfig+0x280>
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x298>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	0800bdb8 	.word	0x0800bdb8
 8003174:	20000004 	.word	0x20000004
 8003178:	20000008 	.word	0x20000008
 800317c:	4ba0      	ldr	r3, [pc, #640]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a9f      	ldr	r2, [pc, #636]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b9d      	ldr	r3, [pc, #628]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a9c      	ldr	r2, [pc, #624]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7ff fac8 	bl	8002730 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff fac4 	bl	8002730 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e276      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b6:	4b92      	ldr	r3, [pc, #584]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x2a8>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7ff fab4 	bl	8002730 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7ff fab0 	bl	8002730 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e262      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x2d0>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d060      	beq.n	80032bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d005      	beq.n	800320c <HAL_RCC_OscConfig+0x310>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d119      	bne.n	800323a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d116      	bne.n	800323a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x328>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e23f      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	4973      	ldr	r1, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003238:	e040      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d023      	beq.n	800328a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003242:	4b6f      	ldr	r3, [pc, #444]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7ff fa6f 	bl	8002730 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7ff fa6b 	bl	8002730 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e21d      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003268:	4b65      	ldr	r3, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b62      	ldr	r3, [pc, #392]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	495f      	ldr	r1, [pc, #380]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	e018      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5c      	ldr	r2, [pc, #368]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7ff fa4b 	bl	8002730 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329e:	f7ff fa47 	bl	8002730 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1f9      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03c      	beq.n	8003342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01c      	beq.n	800330a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d0:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d6:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7ff fa26 	bl	8002730 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7ff fa22 	bl	8002730 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1d4      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ef      	beq.n	80032e8 <HAL_RCC_OscConfig+0x3ec>
 8003308:	e01b      	b.n	8003342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7ff fa09 	bl	8002730 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003322:	f7ff fa05 	bl	8002730 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1b7      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003334:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ef      	bne.n	8003322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80a6 	beq.w	800349c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	4a26      	ldr	r2, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	6593      	str	r3, [r2, #88]	; 0x58
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_OscConfig+0x508>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d118      	bne.n	80033ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x508>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x508>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003394:	f7ff f9cc 	bl	8002730 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7ff f9c8 	bl	8002730 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e17a      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x508>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d108      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4d8>
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d2:	e029      	b.n	8003428 <HAL_RCC_OscConfig+0x52c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d115      	bne.n	8003408 <HAL_RCC_OscConfig+0x50c>
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_RCC_OscConfig+0x504>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x52c>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
 8003408:	4b9c      	ldr	r3, [pc, #624]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a9b      	ldr	r2, [pc, #620]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003418:	4b98      	ldr	r3, [pc, #608]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	4a97      	ldr	r2, [pc, #604]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7ff f97e 	bl	8002730 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7ff f97a 	bl	8002730 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e12a      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ed      	beq.n	8003438 <HAL_RCC_OscConfig+0x53c>
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7ff f967 	bl	8002730 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7ff f963 	bl	8002730 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e113      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800347c:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ed      	bne.n	8003466 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b7a      	ldr	r3, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a79      	ldr	r2, [pc, #484]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80fe 	beq.w	80036a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f040 80d0 	bne.w	8003650 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034b0:	4b72      	ldr	r3, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d130      	bne.n	8003526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	3b01      	subs	r3, #1
 80034d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d127      	bne.n	8003526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11f      	bne.n	8003526 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f0:	2a07      	cmp	r2, #7
 80034f2:	bf14      	ite	ne
 80034f4:	2201      	movne	r2, #1
 80034f6:	2200      	moveq	r2, #0
 80034f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d113      	bne.n	8003526 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d109      	bne.n	8003526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d06e      	beq.n	8003604 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d069      	beq.n	8003600 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0ad      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003554:	f7ff f8ec 	bl	8002730 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7ff f8e8 	bl	8002730 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e09a      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b40      	ldr	r3, [pc, #256]	; (8003680 <HAL_RCC_OscConfig+0x784>)
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800358a:	3a01      	subs	r2, #1
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	4311      	orrs	r1, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003594:	0212      	lsls	r2, r2, #8
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800359c:	0852      	lsrs	r2, r2, #1
 800359e:	3a01      	subs	r2, #1
 80035a0:	0552      	lsls	r2, r2, #21
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0652      	lsls	r2, r2, #25
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b4:	0912      	lsrs	r2, r2, #4
 80035b6:	0452      	lsls	r2, r2, #17
 80035b8:	430a      	orrs	r2, r1
 80035ba:	4930      	ldr	r1, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035c0:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2d      	ldr	r2, [pc, #180]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035d8:	f7ff f8aa 	bl	8002730 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7ff f8a6 	bl	8002730 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e058      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_RCC_OscConfig+0x780>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035fe:	e050      	b.n	80036a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e04f      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d148      	bne.n	80036a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003628:	f7ff f882 	bl	8002730 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7ff f87e 	bl	8002730 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e030      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x734>
 800364e:	e028      	b.n	80036a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d023      	beq.n	800369e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_OscConfig+0x780>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <HAL_RCC_OscConfig+0x780>)
 800365c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7ff f865 	bl	8002730 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003668:	e00c      	b.n	8003684 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7ff f861 	bl	8002730 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d905      	bls.n	8003684 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e013      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
 800367c:	40021000 	.word	0x40021000
 8003680:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_OscConfig+0x7b0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ec      	bne.n	800366a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_OscConfig+0x7b0>)
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	4905      	ldr	r1, [pc, #20]	; (80036ac <HAL_RCC_OscConfig+0x7b0>)
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_OscConfig+0x7b4>)
 8003698:	4013      	ands	r3, r2
 800369a:	60cb      	str	r3, [r1, #12]
 800369c:	e001      	b.n	80036a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	feeefffc 	.word	0xfeeefffc

080036b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0e7      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 0207 	bic.w	r2, r3, #7
 80036de:	4970      	ldr	r1, [pc, #448]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0cf      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003710:	429a      	cmp	r2, r3
 8003712:	d908      	bls.n	8003726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4960      	ldr	r1, [pc, #384]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04c      	beq.n	80037cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0a6      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003752:	4b54      	ldr	r3, [pc, #336]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e09a      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376a:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e08e      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e086      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4943      	ldr	r1, [pc, #268]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fe ffc8 	bl	8002730 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fe ffc4 	bl	8002730 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e06e      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b3a      	ldr	r3, [pc, #232]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d208      	bcs.n	80037fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	492b      	ldr	r1, [pc, #172]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d210      	bcs.n	800382a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	4923      	ldr	r1, [pc, #140]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <HAL_RCC_ClockConfig+0x1ec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e036      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4918      	ldr	r1, [pc, #96]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4910      	ldr	r1, [pc, #64]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003868:	f000 f824 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	490b      	ldr	r1, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1f4>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1f8>)
 8003886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1fc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe feff 	bl	8002690 <HAL_InitTick>
 8003892:	4603      	mov	r3, r0
 8003894:	72fb      	strb	r3, [r7, #11]

  return status;
 8003896:	7afb      	ldrb	r3, [r7, #11]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	0800bdb8 	.word	0x0800bdb8
 80038ac:	20000004 	.word	0x20000004
 80038b0:	20000008 	.word	0x20000008

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x34>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11e      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e005      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003924:	e00a      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d102      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e004      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d101      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800393a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d134      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0xa6>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d003      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xac>
 8003958:	e005      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395c:	617b      	str	r3, [r7, #20]
      break;
 800395e:	e005      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003962:	617b      	str	r3, [r7, #20]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	617b      	str	r3, [r7, #20]
      break;
 800396a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	fb03 f202 	mul.w	r2, r3, r2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	0e5b      	lsrs	r3, r3, #25
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	3301      	adds	r3, #1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800bdd0 	.word	0x0800bdd0
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	0800bdc8 	.word	0x0800bdc8

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a14:	f7ff ffda 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0adb      	lsrs	r3, r3, #11
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800bdc8 	.word	0x0800bdc8

08003a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a54:	f7ff f9ee 	bl	8002e34 <HAL_PWREx_GetVoltageRange>
 8003a58:	6178      	str	r0, [r7, #20]
 8003a5a:	e014      	b.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a74:	f7ff f9de 	bl	8002e34 <HAL_PWREx_GetVoltageRange>
 8003a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d10b      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d919      	bls.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2ba0      	cmp	r3, #160	; 0xa0
 8003a98:	d902      	bls.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e013      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e010      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d902      	bls.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003aac:	2303      	movs	r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e00a      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d102      	bne.n	8003abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ab8:	2302      	movs	r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e004      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b70      	cmp	r3, #112	; 0x70
 8003ac2:	d101      	bne.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 0207 	bic.w	r2, r3, #7
 8003ad0:	4909      	ldr	r1, [pc, #36]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40022000 	.word	0x40022000

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b04:	2300      	movs	r3, #0
 8003b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d041      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b20:	d02a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b26:	d824      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b32:	d81e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b3e:	e018      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b40:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a85      	ldr	r2, [pc, #532]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b4c:	e015      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fabb 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3320      	adds	r3, #32
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fba6 	bl	80042b8 <RCCEx_PLLSAI2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	74fb      	strb	r3, [r7, #19]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b80:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8e:	4973      	ldr	r1, [pc, #460]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d041      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb0:	d02a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb6:	d824      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bc2:	d81e      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bce:	e018      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a61      	ldr	r2, [pc, #388]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bdc:	e015      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa73 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bee:	e00c      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb5e 	bl	80042b8 <RCCEx_PLLSAI2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	74fb      	strb	r3, [r7, #19]
      break;
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c10:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1e:	494f      	ldr	r1, [pc, #316]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c26:	e001      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a0 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7c:	f7fe fd58 	bl	8002730 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c82:	e009      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fe fd54 	bl	8002730 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	74fb      	strb	r3, [r7, #19]
        break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d15c      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cc8:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe fd13 	bl	8002730 <HAL_GetTick>
 8003d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fd0f 	bl	8002730 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d902      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	74fb      	strb	r3, [r7, #19]
            break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ec      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4a:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d52:	e009      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d68:	7c7b      	ldrb	r3, [r7, #17]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b9e      	ldr	r3, [pc, #632]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a9d      	ldr	r2, [pc, #628]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d86:	4b98      	ldr	r3, [pc, #608]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 0203 	bic.w	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	4994      	ldr	r1, [pc, #592]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da8:	4b8f      	ldr	r3, [pc, #572]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 020c 	bic.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	498c      	ldr	r1, [pc, #560]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dca:	4b87      	ldr	r3, [pc, #540]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4983      	ldr	r1, [pc, #524]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dec:	4b7e      	ldr	r3, [pc, #504]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	497b      	ldr	r1, [pc, #492]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	4972      	ldr	r1, [pc, #456]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e30:	4b6d      	ldr	r3, [pc, #436]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	496a      	ldr	r1, [pc, #424]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e52:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	4961      	ldr	r1, [pc, #388]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e74:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	4959      	ldr	r1, [pc, #356]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e96:	4b54      	ldr	r3, [pc, #336]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea4:	4950      	ldr	r1, [pc, #320]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	4948      	ldr	r1, [pc, #288]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	493f      	ldr	r1, [pc, #252]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d028      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efc:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0a:	4937      	ldr	r1, [pc, #220]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	60d3      	str	r3, [r2, #12]
 8003f28:	e011      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f32:	d10c      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8c8 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d028      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	491f      	ldr	r1, [pc, #124]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f84:	60d3      	str	r3, [r2, #12]
 8003f86:	e011      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f899 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a02      	ldr	r2, [pc, #8]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
 8003fe4:	e014      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f867 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402a:	4928      	ldr	r1, [pc, #160]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403a:	d10d      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f844 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d014      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	74bb      	strb	r3, [r7, #18]
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3320      	adds	r3, #32
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f925 	bl	80042b8 <RCCEx_PLLSAI2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004096:	490d      	ldr	r1, [pc, #52]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040de:	4b75      	ldr	r3, [pc, #468]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ea:	4b72      	ldr	r3, [pc, #456]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0203 	and.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d10d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
       ||
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004102:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
       ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d047      	beq.n	80041a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e044      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d018      	beq.n	8004156 <RCCEx_PLLSAI1_Config+0x86>
 8004124:	2b03      	cmp	r3, #3
 8004126:	d825      	bhi.n	8004174 <RCCEx_PLLSAI1_Config+0xa4>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d002      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x62>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d009      	beq.n	8004144 <RCCEx_PLLSAI1_Config+0x74>
 8004130:	e020      	b.n	8004174 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004132:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11d      	bne.n	800417a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004142:	e01a      	b.n	800417a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004144:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d116      	bne.n	800417e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e013      	b.n	800417e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004156:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004172:	e006      	b.n	8004182 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e004      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004182:	bf00      	nop
    }

    if(status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	3b01      	subs	r3, #1
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	430b      	orrs	r3, r1
 80041a0:	4944      	ldr	r1, [pc, #272]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d17d      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ac:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b8:	f7fe faba 	bl	8002730 <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041be:	e009      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c0:	f7fe fab6 	bl	8002730 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d902      	bls.n	80041d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	73fb      	strb	r3, [r7, #15]
        break;
 80041d2:	e005      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041d4:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ef      	bne.n	80041c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d111      	bne.n	8004210 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ec:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6892      	ldr	r2, [r2, #8]
 80041fc:	0211      	lsls	r1, r2, #8
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68d2      	ldr	r2, [r2, #12]
 8004202:	0912      	lsrs	r2, r2, #4
 8004204:	0452      	lsls	r2, r2, #17
 8004206:	430a      	orrs	r2, r1
 8004208:	492a      	ldr	r1, [pc, #168]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	610b      	str	r3, [r1, #16]
 800420e:	e027      	b.n	8004260 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d112      	bne.n	800423c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800421e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	0211      	lsls	r1, r2, #8
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6912      	ldr	r2, [r2, #16]
 800422c:	0852      	lsrs	r2, r2, #1
 800422e:	3a01      	subs	r2, #1
 8004230:	0552      	lsls	r2, r2, #21
 8004232:	430a      	orrs	r2, r1
 8004234:	491f      	ldr	r1, [pc, #124]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
 800423a:	e011      	b.n	8004260 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004244:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6892      	ldr	r2, [r2, #8]
 800424c:	0211      	lsls	r1, r2, #8
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6952      	ldr	r2, [r2, #20]
 8004252:	0852      	lsrs	r2, r2, #1
 8004254:	3a01      	subs	r2, #1
 8004256:	0652      	lsls	r2, r2, #25
 8004258:	430a      	orrs	r2, r1
 800425a:	4916      	ldr	r1, [pc, #88]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800426a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fe fa60 	bl	8002730 <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004272:	e009      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004274:	f7fe fa5c 	bl	8002730 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
          break;
 8004286:	e005      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	4904      	ldr	r1, [pc, #16]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000

080042b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0203 	and.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d10d      	bne.n	80042fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
       ||
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
       ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d047      	beq.n	800438e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e044      	b.n	800438e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d018      	beq.n	800433e <RCCEx_PLLSAI2_Config+0x86>
 800430c:	2b03      	cmp	r3, #3
 800430e:	d825      	bhi.n	800435c <RCCEx_PLLSAI2_Config+0xa4>
 8004310:	2b01      	cmp	r3, #1
 8004312:	d002      	beq.n	800431a <RCCEx_PLLSAI2_Config+0x62>
 8004314:	2b02      	cmp	r3, #2
 8004316:	d009      	beq.n	800432c <RCCEx_PLLSAI2_Config+0x74>
 8004318:	e020      	b.n	800435c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800431a:	4b55      	ldr	r3, [pc, #340]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11d      	bne.n	8004362 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800432a:	e01a      	b.n	8004362 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800432c:	4b50      	ldr	r3, [pc, #320]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433c:	e013      	b.n	8004366 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800433e:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800434a:	4b49      	ldr	r3, [pc, #292]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800435a:	e006      	b.n	800436a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      break;
 8004360:	e004      	b.n	800436c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800436a:	bf00      	nop
    }

    if(status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004372:	4b3f      	ldr	r3, [pc, #252]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	430b      	orrs	r3, r1
 8004388:	4939      	ldr	r1, [pc, #228]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d167      	bne.n	8004464 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a35      	ldr	r2, [pc, #212]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe f9c6 	bl	8002730 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043a6:	e009      	b.n	80043bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043a8:	f7fe f9c2 	bl	8002730 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d902      	bls.n	80043bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ba:	e005      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1ef      	bne.n	80043a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d14a      	bne.n	8004464 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043d4:	4b26      	ldr	r3, [pc, #152]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6892      	ldr	r2, [r2, #8]
 80043e4:	0211      	lsls	r1, r2, #8
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68d2      	ldr	r2, [r2, #12]
 80043ea:	0912      	lsrs	r2, r2, #4
 80043ec:	0452      	lsls	r2, r2, #17
 80043ee:	430a      	orrs	r2, r1
 80043f0:	491f      	ldr	r1, [pc, #124]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	614b      	str	r3, [r1, #20]
 80043f6:	e011      	b.n	800441c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004400:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6892      	ldr	r2, [r2, #8]
 8004408:	0211      	lsls	r1, r2, #8
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6912      	ldr	r2, [r2, #16]
 800440e:	0852      	lsrs	r2, r2, #1
 8004410:	3a01      	subs	r2, #1
 8004412:	0652      	lsls	r2, r2, #25
 8004414:	430a      	orrs	r2, r1
 8004416:	4916      	ldr	r1, [pc, #88]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe f982 	bl	8002730 <HAL_GetTick>
 800442c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800442e:	e009      	b.n	8004444 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004430:	f7fe f97e 	bl	8002730 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d902      	bls.n	8004444 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	73fb      	strb	r3, [r7, #15]
          break;
 8004442:	e005      	b.n	8004450 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004444:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ef      	beq.n	8004430 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4904      	ldr	r1, [pc, #16]	; (8004470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000

08004474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e095      	b.n	80045b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004496:	d009      	beq.n	80044ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
 800449e:	e005      	b.n	80044ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fd feaa 	bl	8002220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ec:	d902      	bls.n	80044f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e002      	b.n	80044fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004502:	d007      	beq.n	8004514 <HAL_SPI_Init+0xa0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800450c:	d002      	beq.n	8004514 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	ea42 0103 	orr.w	r1, r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 0204 	and.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b088      	sub	sp, #32
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_Transmit+0x22>
 80045d8:	2302      	movs	r3, #2
 80045da:	e15f      	b.n	800489c <HAL_SPI_Transmit+0x2e2>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7fe f8a4 	bl	8002730 <HAL_GetTick>
 80045e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045fe:	e148      	b.n	8004892 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_Transmit+0x52>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004610:	e13f      	b.n	8004892 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d10f      	bne.n	800467e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800467c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d007      	beq.n	800469c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046a4:	d94f      	bls.n	8004746 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_SPI_Transmit+0xfa>
 80046ae:	8afb      	ldrh	r3, [r7, #22]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d142      	bne.n	800473a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d8:	e02f      	b.n	800473a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d112      	bne.n	800470e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470c:	e015      	b.n	800473a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fe f80f 	bl	8002730 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Transmit+0x16c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Transmit+0x172>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004738:	e0ab      	b.n	8004892 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ca      	bne.n	80046da <HAL_SPI_Transmit+0x120>
 8004744:	e080      	b.n	8004848 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Transmit+0x19a>
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d174      	bne.n	800483e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d912      	bls.n	8004784 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b02      	subs	r3, #2
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004782:	e05c      	b.n	800483e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047aa:	e048      	b.n	800483e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d12b      	bne.n	8004812 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d912      	bls.n	80047ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	881a      	ldrh	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c9a      	adds	r2, r3, #2
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b02      	subs	r3, #2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047e8:	e029      	b.n	800483e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004810:	e015      	b.n	800483e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004812:	f7fd ff8d 	bl	8002730 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d803      	bhi.n	800482a <HAL_SPI_Transmit+0x270>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Transmit+0x276>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800483c:	e029      	b.n	8004892 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1b1      	bne.n	80047ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fcf9 	bl	8005244 <SPI_EndRxTxTransaction>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e003      	b.n	8004892 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800489a:	7ffb      	ldrb	r3, [r7, #31]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
 80048c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048c8:	e11a      	b.n	8004b00 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d2:	d112      	bne.n	80048fa <HAL_SPI_Receive+0x56>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10e      	bne.n	80048fa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2204      	movs	r2, #4
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f90e 	bl	8004b12 <HAL_SPI_TransmitReceive>
 80048f6:	4603      	mov	r3, r0
 80048f8:	e107      	b.n	8004b0a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_SPI_Receive+0x64>
 8004904:	2302      	movs	r3, #2
 8004906:	e100      	b.n	8004b0a <HAL_SPI_Receive+0x266>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004910:	f7fd ff0e 	bl	8002730 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_SPI_Receive+0x7e>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004926:	e0eb      	b.n	8004b00 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2204      	movs	r2, #4
 800492c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004972:	d908      	bls.n	8004986 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	e007      	b.n	8004996 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d10f      	bne.n	80049c0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d007      	beq.n	80049de <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e6:	d86f      	bhi.n	8004ac8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049e8:	e034      	b.n	8004a54 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d117      	bne.n	8004a28 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f103 020c 	add.w	r2, r3, #12
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a26:	e015      	b.n	8004a54 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a28:	f7fd fe82 	bl	8002730 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d803      	bhi.n	8004a40 <HAL_SPI_Receive+0x19c>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d102      	bne.n	8004a46 <HAL_SPI_Receive+0x1a2>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a52:	e055      	b.n	8004b00 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1c4      	bne.n	80049ea <HAL_SPI_Receive+0x146>
 8004a60:	e038      	b.n	8004ad4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	b292      	uxth	r2, r2
 8004a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	1c9a      	adds	r2, r3, #2
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a9a:	e015      	b.n	8004ac8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9c:	f7fd fe48 	bl	8002730 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d803      	bhi.n	8004ab4 <HAL_SPI_Receive+0x210>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Receive+0x216>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ac6:	e01b      	b.n	8004b00 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c6      	bne.n	8004a62 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fb5b 	bl	8005194 <SPI_EndRxTransaction>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
 8004af6:	e003      	b.n	8004b00 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	; 0x28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x26>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e20a      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x43c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b40:	f7fd fdf6 	bl	8002730 <HAL_GetTick>
 8004b44:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b4c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b5c:	7efb      	ldrb	r3, [r7, #27]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d00e      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x6e>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b68:	d106      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x66>
 8004b72:	7efb      	ldrb	r3, [r7, #27]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d003      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b7e:	e1e0      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x80>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x80>
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b98:	e1d3      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d003      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	887a      	ldrh	r2, [r7, #2]
 8004bbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	887a      	ldrh	r2, [r7, #2]
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	887a      	ldrh	r2, [r7, #2]
 8004bda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf0:	d802      	bhi.n	8004bf8 <HAL_SPI_TransmitReceive+0xe6>
 8004bf2:	8a3b      	ldrh	r3, [r7, #16]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d908      	bls.n	8004c0a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	e007      	b.n	8004c1a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d007      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c40:	f240 8081 	bls.w	8004d46 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_TransmitReceive+0x140>
 8004c4c:	8a7b      	ldrh	r3, [r7, #18]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d16d      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	1c9a      	adds	r2, r3, #2
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c76:	e05a      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d11b      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x1ac>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x1ac>
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d113      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d11c      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x1f4>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d02:	2301      	movs	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d06:	f7fd fd13 	bl	8002730 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d80b      	bhi.n	8004d2e <HAL_SPI_TransmitReceive+0x21c>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d007      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d2c:	e109      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d19f      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x166>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d199      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x166>
 8004d44:	e0e3      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x244>
 8004d4e:	8a7b      	ldrh	r3, [r7, #18]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 80cf 	bne.w	8004ef4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d912      	bls.n	8004d86 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	1c9a      	adds	r2, r3, #2
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d84:	e0b6      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dac:	e0a2      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d134      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x314>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02f      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x314>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d12c      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d912      	bls.n	8004dfc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	881a      	ldrh	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b02      	subs	r3, #2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dfa:	e012      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d148      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x3b4>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d042      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d923      	bls.n	8004e94 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	b292      	uxth	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b02      	subs	r3, #2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d81f      	bhi.n	8004ec2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e016      	b.n	8004ec2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f103 020c 	add.w	r2, r3, #12
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ec6:	f7fd fc33 	bl	8002730 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d803      	bhi.n	8004ede <HAL_SPI_TransmitReceive+0x3cc>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d102      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x3d2>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004ef2:	e026      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f af57 	bne.w	8004dae <HAL_SPI_TransmitReceive+0x29c>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f af50 	bne.w	8004dae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f996 	bl	8005244 <SPI_EndRxTxTransaction>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f38:	e003      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f68:	f7fd fbe2 	bl	8002730 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f78:	f7fd fbda 	bl	8002730 <HAL_GetTick>
 8004f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8e:	e054      	b.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d050      	beq.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f98:	f7fd fbca 	bl	8002730 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d902      	bls.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d13d      	bne.n	800502a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d111      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d004      	beq.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d107      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d10f      	bne.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e017      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3b01      	subs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d19b      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000004 	.word	0x20000004

08005068 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800507a:	f7fd fb59 	bl	8002730 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	4413      	add	r3, r2
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800508a:	f7fd fb51 	bl	8002730 <HAL_GetTick>
 800508e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005098:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	00da      	lsls	r2, r3, #3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	0d1b      	lsrs	r3, r3, #20
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050b0:	e060      	b.n	8005174 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050b8:	d107      	bne.n	80050ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d050      	beq.n	8005174 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d2:	f7fd fb2d 	bl	8002730 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	429a      	cmp	r2, r3
 80050e0:	d902      	bls.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d13d      	bne.n	8005164 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005100:	d111      	bne.n	8005126 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510a:	d004      	beq.n	8005116 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005114:	d107      	bne.n	8005126 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512e:	d10f      	bne.n	8005150 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e010      	b.n	8005186 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3b01      	subs	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d196      	bne.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3728      	adds	r7, #40	; 0x28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000004 	.word	0x20000004

08005194 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a8:	d111      	bne.n	80051ce <SPI_EndRxTransaction+0x3a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b2:	d004      	beq.n	80051be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	d107      	bne.n	80051ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff febd 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e023      	b.n	800523c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fc:	d11d      	bne.n	800523a <SPI_EndRxTransaction+0xa6>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005206:	d004      	beq.n	8005212 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005210:	d113      	bne.n	800523a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff22 	bl	8005068 <SPI_WaitFifoStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e000      	b.n	800523c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff03 	bl	8005068 <SPI_WaitFifoStateUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e027      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fe68 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e014      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff fedc 	bl	8005068 <SPI_WaitFifoStateUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e000      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e040      	b.n	8005364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc ffd6 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	; 0x24
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 ff68 	bl	80061ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fcad 	bl	8005c7c <UART_SetConfig>
 8005322:	4603      	mov	r3, r0
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e01b      	b.n	8005364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 ffe7 	bl	8006330 <UART_CheckIdleState>
 8005362:	4603      	mov	r3, r0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005382:	2b20      	cmp	r3, #32
 8005384:	f040 80b6 	bne.w	80054f4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Receive+0x28>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0ae      	b.n	80054f6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2222      	movs	r2, #34	; 0x22
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ae:	f7fd f9bf 	bl	8002730 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d10e      	bne.n	80053ec <HAL_UART_Receive+0x80>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <HAL_UART_Receive+0x76>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e0:	e02d      	b.n	800543e <HAL_UART_Receive+0xd2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ea:	e028      	b.n	800543e <HAL_UART_Receive+0xd2>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_UART_Receive+0xa4>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <HAL_UART_Receive+0x9a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005404:	e01b      	b.n	800543e <HAL_UART_Receive+0xd2>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	227f      	movs	r2, #127	; 0x7f
 800540a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800540e:	e016      	b.n	800543e <HAL_UART_Receive+0xd2>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005418:	d10d      	bne.n	8005436 <HAL_UART_Receive+0xca>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <HAL_UART_Receive+0xc0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	227f      	movs	r2, #127	; 0x7f
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e008      	b.n	800543e <HAL_UART_Receive+0xd2>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	223f      	movs	r2, #63	; 0x3f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e003      	b.n	800543e <HAL_UART_Receive+0xd2>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005444:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d108      	bne.n	8005462 <HAL_UART_Receive+0xf6>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e003      	b.n	800546a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800546a:	e037      	b.n	80054dc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	2120      	movs	r1, #32
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f001 f802 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e033      	b.n	80054f6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10c      	bne.n	80054ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800549a:	b29a      	uxth	r2, r3
 800549c:	8a7b      	ldrh	r3, [r7, #18]
 800549e:	4013      	ands	r3, r2
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	3302      	adds	r3, #2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e00d      	b.n	80054ca <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	8a7b      	ldrh	r3, [r7, #18]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4013      	ands	r3, r2
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1c1      	bne.n	800546c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b08b      	sub	sp, #44	; 0x2c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005512:	2b20      	cmp	r3, #32
 8005514:	d147      	bne.n	80055a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_UART_Transmit_IT+0x22>
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e040      	b.n	80055a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2221      	movs	r2, #33	; 0x21
 800554e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005558:	d107      	bne.n	800556a <HAL_UART_Transmit_IT+0x6a>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <HAL_UART_Transmit_IT+0xb4>)
 8005566:	66da      	str	r2, [r3, #108]	; 0x6c
 8005568:	e002      	b.n	8005570 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a12      	ldr	r2, [pc, #72]	; (80055b8 <HAL_UART_Transmit_IT+0xb8>)
 800556e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	613b      	str	r3, [r7, #16]
   return(result);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	69f9      	ldr	r1, [r7, #28]
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	61bb      	str	r3, [r7, #24]
   return(result);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e000      	b.n	80055a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	372c      	adds	r7, #44	; 0x2c
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	08006889 	.word	0x08006889
 80055b8:	080067d1 	.word	0x080067d1

080055bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d137      	bne.n	8005644 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Receive_IT+0x24>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e030      	b.n	8005646 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_UART_Receive_IT+0x94>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01f      	beq.n	8005634 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	613b      	str	r3, [r7, #16]
   return(result);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	69f9      	ldr	r1, [r7, #28]
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	61bb      	str	r3, [r7, #24]
   return(result);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e6      	bne.n	8005602 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	461a      	mov	r2, r3
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 ff88 	bl	8006550 <UART_Start_Receive_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	e000      	b.n	8005646 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40008000 	.word	0x40008000

08005654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0ba      	sub	sp, #232	; 0xe8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800567a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800567e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005682:	4013      	ands	r3, r2
 8005684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d115      	bne.n	80056bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 82ae 	beq.w	8005c0e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
      }
      return;
 80056ba:	e2a8      	b.n	8005c0e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80056bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8117 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056d6:	4b85      	ldr	r3, [pc, #532]	; (80058ec <HAL_UART_IRQHandler+0x298>)
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 810a 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d011      	beq.n	8005710 <HAL_UART_IRQHandler+0xbc>
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <HAL_UART_IRQHandler+0xec>
 800571c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2202      	movs	r2, #2
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d011      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
 800574c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2204      	movs	r2, #4
 800575e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2208      	movs	r2, #8
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a2:	f043 0208 	orr.w	r2, r3, #8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d012      	beq.n	80057de <HAL_UART_IRQHandler+0x18a>
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8214 	beq.w	8005c12 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ff50 	bl	80066dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d141      	bne.n	80058ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800587a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800588e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1d9      	bne.n	800584a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_UART_IRQHandler+0x29c>)
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd f8bf 	bl	8002a2e <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d017      	beq.n	80058e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00f      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9c2 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e00b      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9be 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e007      	b.n	80058e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9ba 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80058e4:	e195      	b.n	8005c12 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e6:	bf00      	nop
    return;
 80058e8:	e193      	b.n	8005c12 <HAL_UART_IRQHandler+0x5be>
 80058ea:	bf00      	nop
 80058ec:	04000120 	.word	0x04000120
 80058f0:	080067a5 	.word	0x080067a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 814e 	bne.w	8005b9a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8147 	beq.w	8005b9a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8140 	beq.w	8005b9a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2210      	movs	r2, #16
 8005920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	f040 80b8 	bne.w	8005aa2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800593e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8167 	beq.w	8005c16 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800594e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005952:	429a      	cmp	r2, r3
 8005954:	f080 815f 	bcs.w	8005c16 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 8086 	bne.w	8005a80 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800598c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800599e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1da      	bne.n	8005974 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e1      	bne.n	80059be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e3      	bne.n	80059fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e4      	bne.n	8005a40 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fc ff99 	bl	80029b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f8e2 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa0:	e0b9      	b.n	8005c16 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80ab 	beq.w	8005c1a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80a6 	beq.w	8005c1a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44
 8005af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e4      	bne.n	8005ace <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	623b      	str	r3, [r7, #32]
   return(result);
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b28:	633a      	str	r2, [r7, #48]	; 0x30
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e3      	bne.n	8005b04 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0310 	bic.w	r3, r3, #16
 8005b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	69b9      	ldr	r1, [r7, #24]
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e4      	bne.n	8005b50 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f866 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b98:	e03f      	b.n	8005c1a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x570>
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 f8a9 	bl	8006d14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bc2:	e02d      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00e      	beq.n	8005bee <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01c      	beq.n	8005c1e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
    }
    return;
 8005bec:	e017      	b.n	8005c1e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d012      	beq.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fe9e 	bl	8006948 <UART_EndTransmit_IT>
    return;
 8005c0c:	e008      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c0e:	bf00      	nop
 8005c10:	e006      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005c12:	bf00      	nop
 8005c14:	e004      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c16:	bf00      	nop
 8005c18:	e002      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005c1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c20:	37e8      	adds	r7, #232	; 0xe8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop

08005c28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c80:	b08a      	sub	sp, #40	; 0x28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4ba4      	ldr	r3, [pc, #656]	; (8005f3c <UART_SetConfig+0x2c0>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a99      	ldr	r2, [pc, #612]	; (8005f40 <UART_SetConfig+0x2c4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a90      	ldr	r2, [pc, #576]	; (8005f44 <UART_SetConfig+0x2c8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d126      	bne.n	8005d54 <UART_SetConfig+0xd8>
 8005d06:	4b90      	ldr	r3, [pc, #576]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d81b      	bhi.n	8005d4c <UART_SetConfig+0xd0>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <UART_SetConfig+0xa0>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d3d 	.word	0x08005d3d
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d32:	e116      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3a:	e112      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d42:	e10e      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4a:	e10a      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e106      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7c      	ldr	r2, [pc, #496]	; (8005f4c <UART_SetConfig+0x2d0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d138      	bne.n	8005dd0 <UART_SetConfig+0x154>
 8005d5e:	4b7a      	ldr	r3, [pc, #488]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d82d      	bhi.n	8005dc8 <UART_SetConfig+0x14c>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0xf8>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005da9 	.word	0x08005da9
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005dc9 	.word	0x08005dc9
 8005d80:	08005dc9 	.word	0x08005dc9
 8005d84:	08005db9 	.word	0x08005db9
 8005d88:	08005dc9 	.word	0x08005dc9
 8005d8c:	08005dc9 	.word	0x08005dc9
 8005d90:	08005dc9 	.word	0x08005dc9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005dc9 	.word	0x08005dc9
 8005d9c:	08005dc9 	.word	0x08005dc9
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dae:	e0d8      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005db0:	2302      	movs	r3, #2
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db6:	e0d4      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005db8:	2304      	movs	r3, #4
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbe:	e0d0      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc6:	e0cc      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	e0c8      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5e      	ldr	r2, [pc, #376]	; (8005f50 <UART_SetConfig+0x2d4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d125      	bne.n	8005e26 <UART_SetConfig+0x1aa>
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005de4:	2b30      	cmp	r3, #48	; 0x30
 8005de6:	d016      	beq.n	8005e16 <UART_SetConfig+0x19a>
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d818      	bhi.n	8005e1e <UART_SetConfig+0x1a2>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d00a      	beq.n	8005e06 <UART_SetConfig+0x18a>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d814      	bhi.n	8005e1e <UART_SetConfig+0x1a2>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <UART_SetConfig+0x182>
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d008      	beq.n	8005e0e <UART_SetConfig+0x192>
 8005dfc:	e00f      	b.n	8005e1e <UART_SetConfig+0x1a2>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e04:	e0ad      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e06:	2302      	movs	r3, #2
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0c:	e0a9      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e0e:	2304      	movs	r3, #4
 8005e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e14:	e0a5      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e16:	2308      	movs	r3, #8
 8005e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1c:	e0a1      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e1e:	2310      	movs	r3, #16
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e24:	e09d      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a4a      	ldr	r2, [pc, #296]	; (8005f54 <UART_SetConfig+0x2d8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d125      	bne.n	8005e7c <UART_SetConfig+0x200>
 8005e30:	4b45      	ldr	r3, [pc, #276]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e3c:	d016      	beq.n	8005e6c <UART_SetConfig+0x1f0>
 8005e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e40:	d818      	bhi.n	8005e74 <UART_SetConfig+0x1f8>
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d00a      	beq.n	8005e5c <UART_SetConfig+0x1e0>
 8005e46:	2b80      	cmp	r3, #128	; 0x80
 8005e48:	d814      	bhi.n	8005e74 <UART_SetConfig+0x1f8>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <UART_SetConfig+0x1d8>
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d008      	beq.n	8005e64 <UART_SetConfig+0x1e8>
 8005e52:	e00f      	b.n	8005e74 <UART_SetConfig+0x1f8>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e082      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e07e      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e07a      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e076      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e072      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a35      	ldr	r2, [pc, #212]	; (8005f58 <UART_SetConfig+0x2dc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d12a      	bne.n	8005edc <UART_SetConfig+0x260>
 8005e86:	4b30      	ldr	r3, [pc, #192]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e94:	d01a      	beq.n	8005ecc <UART_SetConfig+0x250>
 8005e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9a:	d81b      	bhi.n	8005ed4 <UART_SetConfig+0x258>
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d00c      	beq.n	8005ebc <UART_SetConfig+0x240>
 8005ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea6:	d815      	bhi.n	8005ed4 <UART_SetConfig+0x258>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <UART_SetConfig+0x238>
 8005eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb0:	d008      	beq.n	8005ec4 <UART_SetConfig+0x248>
 8005eb2:	e00f      	b.n	8005ed4 <UART_SetConfig+0x258>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e052      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e04e      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e04a      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e046      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e042      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <UART_SetConfig+0x2c4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d13a      	bne.n	8005f5c <UART_SetConfig+0x2e0>
 8005ee6:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <UART_SetConfig+0x2cc>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef4:	d01a      	beq.n	8005f2c <UART_SetConfig+0x2b0>
 8005ef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005efa:	d81b      	bhi.n	8005f34 <UART_SetConfig+0x2b8>
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	d00c      	beq.n	8005f1c <UART_SetConfig+0x2a0>
 8005f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f06:	d815      	bhi.n	8005f34 <UART_SetConfig+0x2b8>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <UART_SetConfig+0x298>
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f10:	d008      	beq.n	8005f24 <UART_SetConfig+0x2a8>
 8005f12:	e00f      	b.n	8005f34 <UART_SetConfig+0x2b8>
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1a:	e022      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f22:	e01e      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2a:	e01a      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f32:	e016      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3a:	e012      	b.n	8005f62 <UART_SetConfig+0x2e6>
 8005f3c:	efff69f3 	.word	0xefff69f3
 8005f40:	40008000 	.word	0x40008000
 8005f44:	40013800 	.word	0x40013800
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	40004400 	.word	0x40004400
 8005f50:	40004800 	.word	0x40004800
 8005f54:	40004c00 	.word	0x40004c00
 8005f58:	40005000 	.word	0x40005000
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a9f      	ldr	r2, [pc, #636]	; (80061e4 <UART_SetConfig+0x568>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d17a      	bne.n	8006062 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d824      	bhi.n	8005fbe <UART_SetConfig+0x342>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x300>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fbf 	.word	0x08005fbf
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fbf 	.word	0x08005fbf
 8005f8c:	08005faf 	.word	0x08005faf
 8005f90:	08005fbf 	.word	0x08005fbf
 8005f94:	08005fbf 	.word	0x08005fbf
 8005f98:	08005fbf 	.word	0x08005fbf
 8005f9c:	08005fb7 	.word	0x08005fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fd fd20 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61f8      	str	r0, [r7, #28]
        break;
 8005fa6:	e010      	b.n	8005fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa8:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <UART_SetConfig+0x56c>)
 8005faa:	61fb      	str	r3, [r7, #28]
        break;
 8005fac:	e00d      	b.n	8005fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fae:	f7fd fc81 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8005fb2:	61f8      	str	r0, [r7, #28]
        break;
 8005fb4:	e009      	b.n	8005fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fba:	61fb      	str	r3, [r7, #28]
        break;
 8005fbc:	e005      	b.n	8005fca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80fb 	beq.w	80061c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d305      	bcc.n	8005fee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ff4:	e0e8      	b.n	80061c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	461c      	mov	r4, r3
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	022b      	lsls	r3, r5, #8
 8006008:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800600c:	0222      	lsls	r2, r4, #8
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	6849      	ldr	r1, [r1, #4]
 8006012:	0849      	lsrs	r1, r1, #1
 8006014:	2000      	movs	r0, #0
 8006016:	4688      	mov	r8, r1
 8006018:	4681      	mov	r9, r0
 800601a:	eb12 0a08 	adds.w	sl, r2, r8
 800601e:	eb43 0b09 	adc.w	fp, r3, r9
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	603b      	str	r3, [r7, #0]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006030:	4650      	mov	r0, sl
 8006032:	4659      	mov	r1, fp
 8006034:	f7fa fe28 	bl	8000c88 <__aeabi_uldivmod>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4613      	mov	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006046:	d308      	bcc.n	800605a <UART_SetConfig+0x3de>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604e:	d204      	bcs.n	800605a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	60da      	str	r2, [r3, #12]
 8006058:	e0b6      	b.n	80061c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006060:	e0b2      	b.n	80061c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606a:	d15e      	bne.n	800612a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800606c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006070:	2b08      	cmp	r3, #8
 8006072:	d828      	bhi.n	80060c6 <UART_SetConfig+0x44a>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x400>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060c7 	.word	0x080060c7
 800608c:	080060b7 	.word	0x080060b7
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060c7 	.word	0x080060c7
 800609c:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fd fca0 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61f8      	str	r0, [r7, #28]
        break;
 80060a6:	e014      	b.n	80060d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fd fcb2 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
        break;
 80060ae:	e010      	b.n	80060d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b4d      	ldr	r3, [pc, #308]	; (80061e8 <UART_SetConfig+0x56c>)
 80060b2:	61fb      	str	r3, [r7, #28]
        break;
 80060b4:	e00d      	b.n	80060d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fd fbfd 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80060ba:	61f8      	str	r0, [r7, #28]
        break;
 80060bc:	e009      	b.n	80060d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	61fb      	str	r3, [r7, #28]
        break;
 80060c4:	e005      	b.n	80060d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d077      	beq.n	80061c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	005a      	lsls	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d916      	bls.n	8006122 <UART_SetConfig+0x4a6>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fa:	d212      	bcs.n	8006122 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	b29b      	uxth	r3, r3
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	b29a      	uxth	r2, r3
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	4313      	orrs	r3, r2
 8006116:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	8afa      	ldrh	r2, [r7, #22]
 800611e:	60da      	str	r2, [r3, #12]
 8006120:	e052      	b.n	80061c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006128:	e04e      	b.n	80061c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800612a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800612e:	2b08      	cmp	r3, #8
 8006130:	d827      	bhi.n	8006182 <UART_SetConfig+0x506>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x4bc>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800615d 	.word	0x0800615d
 800613c:	08006165 	.word	0x08006165
 8006140:	0800616d 	.word	0x0800616d
 8006144:	08006183 	.word	0x08006183
 8006148:	08006173 	.word	0x08006173
 800614c:	08006183 	.word	0x08006183
 8006150:	08006183 	.word	0x08006183
 8006154:	08006183 	.word	0x08006183
 8006158:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fd fc42 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8006160:	61f8      	str	r0, [r7, #28]
        break;
 8006162:	e014      	b.n	800618e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fd fc54 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8006168:	61f8      	str	r0, [r7, #28]
        break;
 800616a:	e010      	b.n	800618e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <UART_SetConfig+0x56c>)
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e00d      	b.n	800618e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fd fb9f 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8006176:	61f8      	str	r0, [r7, #28]
        break;
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e005      	b.n	800618e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800618c:	bf00      	nop
    }

    if (pclk != 0U)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d019      	beq.n	80061c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	085a      	lsrs	r2, r3, #1
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b0f      	cmp	r3, #15
 80061ac:	d909      	bls.n	80061c2 <UART_SetConfig+0x546>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b4:	d205      	bcs.n	80061c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	e002      	b.n	80061c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e2:	bf00      	nop
 80061e4:	40008000 	.word	0x40008000
 80061e8:	00f42400 	.word	0x00f42400

080061ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ea:	d10a      	bne.n	8006302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b098      	sub	sp, #96	; 0x60
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006340:	f7fc f9f6 	bl	8002730 <HAL_GetTick>
 8006344:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d12e      	bne.n	80063b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f88c 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d021      	beq.n	80063b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006382:	653b      	str	r3, [r7, #80]	; 0x50
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
 800638e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e062      	b.n	8006478 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d149      	bne.n	8006454 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c8:	2200      	movs	r2, #0
 80063ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f856 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03c      	beq.n	8006454 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	623b      	str	r3, [r7, #32]
   return(result);
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
 80063fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60fb      	str	r3, [r7, #12]
   return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	64bb      	str	r3, [r7, #72]	; 0x48
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	69b9      	ldr	r1, [r7, #24]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	617b      	str	r3, [r7, #20]
   return(result);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e011      	b.n	8006478 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3758      	adds	r7, #88	; 0x58
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006490:	e049      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d045      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649a:	f7fc f949 	bl	8002730 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d302      	bcc.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e048      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d031      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d110      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2208      	movs	r2, #8
 80064d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f8ff 	bl	80066dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2208      	movs	r2, #8
 80064e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e029      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d111      	bne.n	8006526 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f8e5 	bl	80066dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00f      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	429a      	cmp	r2, r3
 8006542:	d0a6      	beq.n	8006492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b097      	sub	sp, #92	; 0x5c
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d10e      	bne.n	80065a2 <UART_Start_Receive_IT+0x52>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <UART_Start_Receive_IT+0x48>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006596:	e02d      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ff      	movs	r2, #255	; 0xff
 800659c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065a0:	e028      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10d      	bne.n	80065c6 <UART_Start_Receive_IT+0x76>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <UART_Start_Receive_IT+0x6c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ba:	e01b      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	227f      	movs	r2, #127	; 0x7f
 80065c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065c4:	e016      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ce:	d10d      	bne.n	80065ec <UART_Start_Receive_IT+0x9c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <UART_Start_Receive_IT+0x92>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	227f      	movs	r2, #127	; 0x7f
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e0:	e008      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ea:	e003      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2222      	movs	r2, #34	; 0x22
 8006600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	657b      	str	r3, [r7, #84]	; 0x54
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006624:	64ba      	str	r2, [r7, #72]	; 0x48
 8006626:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800662a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e5      	bne.n	8006604 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006640:	d107      	bne.n	8006652 <UART_Start_Receive_IT+0x102>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <UART_Start_Receive_IT+0x184>)
 800664e:	669a      	str	r2, [r3, #104]	; 0x68
 8006650:	e002      	b.n	8006658 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <UART_Start_Receive_IT+0x188>)
 8006656:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_Start_Receive_IT+0x110>
 8006692:	e018      	b.n	80066c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	613b      	str	r3, [r7, #16]
   return(result);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f043 0320 	orr.w	r3, r3, #32
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	375c      	adds	r7, #92	; 0x5c
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	08006b59 	.word	0x08006b59
 80066d8:	0800699d 	.word	0x0800699d

080066dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b095      	sub	sp, #84	; 0x54
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	643b      	str	r3, [r7, #64]	; 0x40
 8006704:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	61fb      	str	r3, [r7, #28]
   return(result);
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	2b01      	cmp	r3, #1
 8006750:	d118      	bne.n	8006784 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	647b      	str	r3, [r7, #68]	; 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006798:	bf00      	nop
 800679a:	3754      	adds	r7, #84	; 0x54
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fa44 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b08f      	sub	sp, #60	; 0x3c
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067dc:	2b21      	cmp	r3, #33	; 0x21
 80067de:	d14d      	bne.n	800687c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d132      	bne.n	8006852 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e6      	bne.n	80067ec <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	60bb      	str	r3, [r7, #8]
   return(result);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6979      	ldr	r1, [r7, #20]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	613b      	str	r3, [r7, #16]
   return(result);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e6      	bne.n	800681e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006850:	e014      	b.n	800687c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	b292      	uxth	r2, r2
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800687c:	bf00      	nop
 800687e:	373c      	adds	r7, #60	; 0x3c
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b091      	sub	sp, #68	; 0x44
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006894:	2b21      	cmp	r3, #33	; 0x21
 8006896:	d151      	bne.n	800693c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d132      	bne.n	800690a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	623b      	str	r3, [r7, #32]
   return(result);
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
 80068c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e6      	bne.n	80068a4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	69b9      	ldr	r1, [r7, #24]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	617b      	str	r3, [r7, #20]
   return(result);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e6      	bne.n	80068d6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006908:	e018      	b.n	800693c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006912:	881a      	ldrh	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800691c:	b292      	uxth	r2, r2
 800691e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800693c:	bf00      	nop
 800693e:	3744      	adds	r7, #68	; 0x44
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	60bb      	str	r3, [r7, #8]
   return(result);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6979      	ldr	r1, [r7, #20]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	613b      	str	r3, [r7, #16]
   return(result);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e6      	bne.n	8006950 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff f94a 	bl	8005c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006994:	bf00      	nop
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b09c      	sub	sp, #112	; 0x70
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b4:	2b22      	cmp	r3, #34	; 0x22
 80069b6:	f040 80be 	bne.w	8006b36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80069c8:	b2d9      	uxtb	r1, r3
 80069ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	400a      	ands	r2, r1
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 80a3 	bne.w	8006b4a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a56:	647a      	str	r2, [r7, #68]	; 0x44
 8006a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a34      	ldr	r2, [pc, #208]	; (8006b54 <UART_RxISR_8BIT+0x1b8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01f      	beq.n	8006ac8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d018      	beq.n	8006ac8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d12e      	bne.n	8006b2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69b9      	ldr	r1, [r7, #24]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	617b      	str	r3, [r7, #20]
   return(result);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d103      	bne.n	8006b1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff f89c 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b2c:	e00d      	b.n	8006b4a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff f884 	bl	8005c3c <HAL_UART_RxCpltCallback>
}
 8006b34:	e009      	b.n	8006b4a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	8b1b      	ldrh	r3, [r3, #24]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0208 	orr.w	r2, r2, #8
 8006b46:	b292      	uxth	r2, r2
 8006b48:	831a      	strh	r2, [r3, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	3770      	adds	r7, #112	; 0x70
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40008000 	.word	0x40008000

08006b58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b09c      	sub	sp, #112	; 0x70
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b70:	2b22      	cmp	r3, #34	; 0x22
 8006b72:	f040 80be 	bne.w	8006cf2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b8e:	4013      	ands	r3, r2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 80a3 	bne.w	8006d06 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	657b      	str	r3, [r7, #84]	; 0x54
 8006be0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006be4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e6      	bne.n	8006bc0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c12:	643a      	str	r2, [r7, #64]	; 0x40
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a34      	ldr	r2, [pc, #208]	; (8006d10 <UART_RxISR_16BIT+0x1b8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d01f      	beq.n	8006c84 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d12e      	bne.n	8006cea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6979      	ldr	r1, [r7, #20]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b10      	cmp	r3, #16
 8006cd0:	d103      	bne.n	8006cda <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fe ffbe 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce8:	e00d      	b.n	8006d06 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fe ffa6 	bl	8005c3c <HAL_UART_RxCpltCallback>
}
 8006cf0:	e009      	b.n	8006d06 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	8b1b      	ldrh	r3, [r3, #24]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	b292      	uxth	r2, r2
 8006d04:	831a      	strh	r2, [r3, #24]
}
 8006d06:	bf00      	nop
 8006d08:	3770      	adds	r7, #112	; 0x70
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40008000 	.word	0x40008000

08006d14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <atof>:
 8006d28:	2100      	movs	r1, #0
 8006d2a:	f000 be17 	b.w	800795c <strtod>

08006d2e <atoi>:
 8006d2e:	220a      	movs	r2, #10
 8006d30:	2100      	movs	r1, #0
 8006d32:	f000 bea3 	b.w	8007a7c <strtol>

08006d36 <sulp>:
 8006d36:	b570      	push	{r4, r5, r6, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	ec45 4b10 	vmov	d0, r4, r5
 8006d40:	4616      	mov	r6, r2
 8006d42:	f003 fef9 	bl	800ab38 <__ulp>
 8006d46:	ec51 0b10 	vmov	r0, r1, d0
 8006d4a:	b17e      	cbz	r6, 8006d6c <sulp+0x36>
 8006d4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd09      	ble.n	8006d6c <sulp+0x36>
 8006d58:	051b      	lsls	r3, r3, #20
 8006d5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d5e:	2400      	movs	r4, #0
 8006d60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	f7f9 fc46 	bl	80005f8 <__aeabi_dmul>
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d70 <_strtod_l>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	ed2d 8b02 	vpush	{d8}
 8006d78:	b09b      	sub	sp, #108	; 0x6c
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d7e:	2200      	movs	r2, #0
 8006d80:	9216      	str	r2, [sp, #88]	; 0x58
 8006d82:	460d      	mov	r5, r1
 8006d84:	f04f 0800 	mov.w	r8, #0
 8006d88:	f04f 0900 	mov.w	r9, #0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	9215      	str	r2, [sp, #84]	; 0x54
 8006d90:	7811      	ldrb	r1, [r2, #0]
 8006d92:	292b      	cmp	r1, #43	; 0x2b
 8006d94:	d04c      	beq.n	8006e30 <_strtod_l+0xc0>
 8006d96:	d83a      	bhi.n	8006e0e <_strtod_l+0x9e>
 8006d98:	290d      	cmp	r1, #13
 8006d9a:	d834      	bhi.n	8006e06 <_strtod_l+0x96>
 8006d9c:	2908      	cmp	r1, #8
 8006d9e:	d834      	bhi.n	8006e0a <_strtod_l+0x9a>
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d03d      	beq.n	8006e20 <_strtod_l+0xb0>
 8006da4:	2200      	movs	r2, #0
 8006da6:	920a      	str	r2, [sp, #40]	; 0x28
 8006da8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006daa:	7832      	ldrb	r2, [r6, #0]
 8006dac:	2a30      	cmp	r2, #48	; 0x30
 8006dae:	f040 80b4 	bne.w	8006f1a <_strtod_l+0x1aa>
 8006db2:	7872      	ldrb	r2, [r6, #1]
 8006db4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006db8:	2a58      	cmp	r2, #88	; 0x58
 8006dba:	d170      	bne.n	8006e9e <_strtod_l+0x12e>
 8006dbc:	9302      	str	r3, [sp, #8]
 8006dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	ab16      	add	r3, sp, #88	; 0x58
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4a8e      	ldr	r2, [pc, #568]	; (8007000 <_strtod_l+0x290>)
 8006dc8:	ab17      	add	r3, sp, #92	; 0x5c
 8006dca:	a915      	add	r1, sp, #84	; 0x54
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f002 ff91 	bl	8009cf4 <__gethex>
 8006dd2:	f010 070f 	ands.w	r7, r0, #15
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	d005      	beq.n	8006de6 <_strtod_l+0x76>
 8006dda:	2f06      	cmp	r7, #6
 8006ddc:	d12a      	bne.n	8006e34 <_strtod_l+0xc4>
 8006dde:	3601      	adds	r6, #1
 8006de0:	2300      	movs	r3, #0
 8006de2:	9615      	str	r6, [sp, #84]	; 0x54
 8006de4:	930a      	str	r3, [sp, #40]	; 0x28
 8006de6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 857f 	bne.w	80078ec <_strtod_l+0xb7c>
 8006dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df0:	b1db      	cbz	r3, 8006e2a <_strtod_l+0xba>
 8006df2:	4642      	mov	r2, r8
 8006df4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006df8:	ec43 2b10 	vmov	d0, r2, r3
 8006dfc:	b01b      	add	sp, #108	; 0x6c
 8006dfe:	ecbd 8b02 	vpop	{d8}
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	2920      	cmp	r1, #32
 8006e08:	d1cc      	bne.n	8006da4 <_strtod_l+0x34>
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	e7bf      	b.n	8006d8e <_strtod_l+0x1e>
 8006e0e:	292d      	cmp	r1, #45	; 0x2d
 8006e10:	d1c8      	bne.n	8006da4 <_strtod_l+0x34>
 8006e12:	2101      	movs	r1, #1
 8006e14:	910a      	str	r1, [sp, #40]	; 0x28
 8006e16:	1c51      	adds	r1, r2, #1
 8006e18:	9115      	str	r1, [sp, #84]	; 0x54
 8006e1a:	7852      	ldrb	r2, [r2, #1]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	d1c3      	bne.n	8006da8 <_strtod_l+0x38>
 8006e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e22:	9515      	str	r5, [sp, #84]	; 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 855f 	bne.w	80078e8 <_strtod_l+0xb78>
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	e7e3      	b.n	8006df8 <_strtod_l+0x88>
 8006e30:	2100      	movs	r1, #0
 8006e32:	e7ef      	b.n	8006e14 <_strtod_l+0xa4>
 8006e34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e36:	b13a      	cbz	r2, 8006e48 <_strtod_l+0xd8>
 8006e38:	2135      	movs	r1, #53	; 0x35
 8006e3a:	a818      	add	r0, sp, #96	; 0x60
 8006e3c:	f003 ff79 	bl	800ad32 <__copybits>
 8006e40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006e42:	4620      	mov	r0, r4
 8006e44:	f003 fb4c 	bl	800a4e0 <_Bfree>
 8006e48:	3f01      	subs	r7, #1
 8006e4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e4c:	2f04      	cmp	r7, #4
 8006e4e:	d806      	bhi.n	8006e5e <_strtod_l+0xee>
 8006e50:	e8df f007 	tbb	[pc, r7]
 8006e54:	201d0314 	.word	0x201d0314
 8006e58:	14          	.byte	0x14
 8006e59:	00          	.byte	0x00
 8006e5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006e5e:	05e9      	lsls	r1, r5, #23
 8006e60:	bf48      	it	mi
 8006e62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e6a:	0d1b      	lsrs	r3, r3, #20
 8006e6c:	051b      	lsls	r3, r3, #20
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1b9      	bne.n	8006de6 <_strtod_l+0x76>
 8006e72:	f001 ffa1 	bl	8008db8 <__errno>
 8006e76:	2322      	movs	r3, #34	; 0x22
 8006e78:	6003      	str	r3, [r0, #0]
 8006e7a:	e7b4      	b.n	8006de6 <_strtod_l+0x76>
 8006e7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006e80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e8c:	e7e7      	b.n	8006e5e <_strtod_l+0xee>
 8006e8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007008 <_strtod_l+0x298>
 8006e92:	e7e4      	b.n	8006e5e <_strtod_l+0xee>
 8006e94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e98:	f04f 38ff 	mov.w	r8, #4294967295
 8006e9c:	e7df      	b.n	8006e5e <_strtod_l+0xee>
 8006e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	9215      	str	r2, [sp, #84]	; 0x54
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b30      	cmp	r3, #48	; 0x30
 8006ea8:	d0f9      	beq.n	8006e9e <_strtod_l+0x12e>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d09b      	beq.n	8006de6 <_strtod_l+0x76>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006ebe:	46d3      	mov	fp, sl
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006ec4:	7806      	ldrb	r6, [r0, #0]
 8006ec6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006eca:	b2d9      	uxtb	r1, r3
 8006ecc:	2909      	cmp	r1, #9
 8006ece:	d926      	bls.n	8006f1e <_strtod_l+0x1ae>
 8006ed0:	494c      	ldr	r1, [pc, #304]	; (8007004 <_strtod_l+0x294>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f001 fe8f 	bl	8008bf6 <strncmp>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d030      	beq.n	8006f3e <_strtod_l+0x1ce>
 8006edc:	2000      	movs	r0, #0
 8006ede:	4632      	mov	r2, r6
 8006ee0:	9005      	str	r0, [sp, #20]
 8006ee2:	465e      	mov	r6, fp
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2a65      	cmp	r2, #101	; 0x65
 8006ee8:	d001      	beq.n	8006eee <_strtod_l+0x17e>
 8006eea:	2a45      	cmp	r2, #69	; 0x45
 8006eec:	d113      	bne.n	8006f16 <_strtod_l+0x1a6>
 8006eee:	b91e      	cbnz	r6, 8006ef8 <_strtod_l+0x188>
 8006ef0:	9a04      	ldr	r2, [sp, #16]
 8006ef2:	4302      	orrs	r2, r0
 8006ef4:	d094      	beq.n	8006e20 <_strtod_l+0xb0>
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006efa:	1c6a      	adds	r2, r5, #1
 8006efc:	9215      	str	r2, [sp, #84]	; 0x54
 8006efe:	786a      	ldrb	r2, [r5, #1]
 8006f00:	2a2b      	cmp	r2, #43	; 0x2b
 8006f02:	d074      	beq.n	8006fee <_strtod_l+0x27e>
 8006f04:	2a2d      	cmp	r2, #45	; 0x2d
 8006f06:	d078      	beq.n	8006ffa <_strtod_l+0x28a>
 8006f08:	f04f 0c00 	mov.w	ip, #0
 8006f0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f10:	2909      	cmp	r1, #9
 8006f12:	d97f      	bls.n	8007014 <_strtod_l+0x2a4>
 8006f14:	9515      	str	r5, [sp, #84]	; 0x54
 8006f16:	2700      	movs	r7, #0
 8006f18:	e09e      	b.n	8007058 <_strtod_l+0x2e8>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e7c8      	b.n	8006eb0 <_strtod_l+0x140>
 8006f1e:	f1bb 0f08 	cmp.w	fp, #8
 8006f22:	bfd8      	it	le
 8006f24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006f26:	f100 0001 	add.w	r0, r0, #1
 8006f2a:	bfda      	itte	le
 8006f2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f30:	9309      	strle	r3, [sp, #36]	; 0x24
 8006f32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006f36:	f10b 0b01 	add.w	fp, fp, #1
 8006f3a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f3c:	e7c1      	b.n	8006ec2 <_strtod_l+0x152>
 8006f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	9215      	str	r2, [sp, #84]	; 0x54
 8006f44:	785a      	ldrb	r2, [r3, #1]
 8006f46:	f1bb 0f00 	cmp.w	fp, #0
 8006f4a:	d037      	beq.n	8006fbc <_strtod_l+0x24c>
 8006f4c:	9005      	str	r0, [sp, #20]
 8006f4e:	465e      	mov	r6, fp
 8006f50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d912      	bls.n	8006f7e <_strtod_l+0x20e>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e7c4      	b.n	8006ee6 <_strtod_l+0x176>
 8006f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	9215      	str	r2, [sp, #84]	; 0x54
 8006f62:	785a      	ldrb	r2, [r3, #1]
 8006f64:	3001      	adds	r0, #1
 8006f66:	2a30      	cmp	r2, #48	; 0x30
 8006f68:	d0f8      	beq.n	8006f5c <_strtod_l+0x1ec>
 8006f6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	f200 84c1 	bhi.w	80078f6 <_strtod_l+0xb86>
 8006f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f76:	9005      	str	r0, [sp, #20]
 8006f78:	2000      	movs	r0, #0
 8006f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	3a30      	subs	r2, #48	; 0x30
 8006f80:	f100 0301 	add.w	r3, r0, #1
 8006f84:	d014      	beq.n	8006fb0 <_strtod_l+0x240>
 8006f86:	9905      	ldr	r1, [sp, #20]
 8006f88:	4419      	add	r1, r3
 8006f8a:	9105      	str	r1, [sp, #20]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	eb00 0c06 	add.w	ip, r0, r6
 8006f92:	210a      	movs	r1, #10
 8006f94:	4563      	cmp	r3, ip
 8006f96:	d113      	bne.n	8006fc0 <_strtod_l+0x250>
 8006f98:	1833      	adds	r3, r6, r0
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	f106 0601 	add.w	r6, r6, #1
 8006fa0:	4406      	add	r6, r0
 8006fa2:	dc1a      	bgt.n	8006fda <_strtod_l+0x26a>
 8006fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	fb03 2301 	mla	r3, r3, r1, r2
 8006fac:	9309      	str	r3, [sp, #36]	; 0x24
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fb2:	1c51      	adds	r1, r2, #1
 8006fb4:	9115      	str	r1, [sp, #84]	; 0x54
 8006fb6:	7852      	ldrb	r2, [r2, #1]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	e7c9      	b.n	8006f50 <_strtod_l+0x1e0>
 8006fbc:	4658      	mov	r0, fp
 8006fbe:	e7d2      	b.n	8006f66 <_strtod_l+0x1f6>
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	f103 0301 	add.w	r3, r3, #1
 8006fc6:	dc03      	bgt.n	8006fd0 <_strtod_l+0x260>
 8006fc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fca:	434f      	muls	r7, r1
 8006fcc:	9709      	str	r7, [sp, #36]	; 0x24
 8006fce:	e7e1      	b.n	8006f94 <_strtod_l+0x224>
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	bfd8      	it	le
 8006fd4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006fd8:	e7dc      	b.n	8006f94 <_strtod_l+0x224>
 8006fda:	2e10      	cmp	r6, #16
 8006fdc:	bfdc      	itt	le
 8006fde:	230a      	movle	r3, #10
 8006fe0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006fe4:	e7e3      	b.n	8006fae <_strtod_l+0x23e>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	2301      	movs	r3, #1
 8006fec:	e780      	b.n	8006ef0 <_strtod_l+0x180>
 8006fee:	f04f 0c00 	mov.w	ip, #0
 8006ff2:	1caa      	adds	r2, r5, #2
 8006ff4:	9215      	str	r2, [sp, #84]	; 0x54
 8006ff6:	78aa      	ldrb	r2, [r5, #2]
 8006ff8:	e788      	b.n	8006f0c <_strtod_l+0x19c>
 8006ffa:	f04f 0c01 	mov.w	ip, #1
 8006ffe:	e7f8      	b.n	8006ff2 <_strtod_l+0x282>
 8007000:	0800be04 	.word	0x0800be04
 8007004:	0800be00 	.word	0x0800be00
 8007008:	7ff00000 	.word	0x7ff00000
 800700c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800700e:	1c51      	adds	r1, r2, #1
 8007010:	9115      	str	r1, [sp, #84]	; 0x54
 8007012:	7852      	ldrb	r2, [r2, #1]
 8007014:	2a30      	cmp	r2, #48	; 0x30
 8007016:	d0f9      	beq.n	800700c <_strtod_l+0x29c>
 8007018:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800701c:	2908      	cmp	r1, #8
 800701e:	f63f af7a 	bhi.w	8006f16 <_strtod_l+0x1a6>
 8007022:	3a30      	subs	r2, #48	; 0x30
 8007024:	9208      	str	r2, [sp, #32]
 8007026:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007028:	920c      	str	r2, [sp, #48]	; 0x30
 800702a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800702c:	1c57      	adds	r7, r2, #1
 800702e:	9715      	str	r7, [sp, #84]	; 0x54
 8007030:	7852      	ldrb	r2, [r2, #1]
 8007032:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007036:	f1be 0f09 	cmp.w	lr, #9
 800703a:	d938      	bls.n	80070ae <_strtod_l+0x33e>
 800703c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800703e:	1a7f      	subs	r7, r7, r1
 8007040:	2f08      	cmp	r7, #8
 8007042:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007046:	dc03      	bgt.n	8007050 <_strtod_l+0x2e0>
 8007048:	9908      	ldr	r1, [sp, #32]
 800704a:	428f      	cmp	r7, r1
 800704c:	bfa8      	it	ge
 800704e:	460f      	movge	r7, r1
 8007050:	f1bc 0f00 	cmp.w	ip, #0
 8007054:	d000      	beq.n	8007058 <_strtod_l+0x2e8>
 8007056:	427f      	negs	r7, r7
 8007058:	2e00      	cmp	r6, #0
 800705a:	d14f      	bne.n	80070fc <_strtod_l+0x38c>
 800705c:	9904      	ldr	r1, [sp, #16]
 800705e:	4301      	orrs	r1, r0
 8007060:	f47f aec1 	bne.w	8006de6 <_strtod_l+0x76>
 8007064:	2b00      	cmp	r3, #0
 8007066:	f47f aedb 	bne.w	8006e20 <_strtod_l+0xb0>
 800706a:	2a69      	cmp	r2, #105	; 0x69
 800706c:	d029      	beq.n	80070c2 <_strtod_l+0x352>
 800706e:	dc26      	bgt.n	80070be <_strtod_l+0x34e>
 8007070:	2a49      	cmp	r2, #73	; 0x49
 8007072:	d026      	beq.n	80070c2 <_strtod_l+0x352>
 8007074:	2a4e      	cmp	r2, #78	; 0x4e
 8007076:	f47f aed3 	bne.w	8006e20 <_strtod_l+0xb0>
 800707a:	499b      	ldr	r1, [pc, #620]	; (80072e8 <_strtod_l+0x578>)
 800707c:	a815      	add	r0, sp, #84	; 0x54
 800707e:	f003 f879 	bl	800a174 <__match>
 8007082:	2800      	cmp	r0, #0
 8007084:	f43f aecc 	beq.w	8006e20 <_strtod_l+0xb0>
 8007088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b28      	cmp	r3, #40	; 0x28
 800708e:	d12f      	bne.n	80070f0 <_strtod_l+0x380>
 8007090:	4996      	ldr	r1, [pc, #600]	; (80072ec <_strtod_l+0x57c>)
 8007092:	aa18      	add	r2, sp, #96	; 0x60
 8007094:	a815      	add	r0, sp, #84	; 0x54
 8007096:	f003 f881 	bl	800a19c <__hexnan>
 800709a:	2805      	cmp	r0, #5
 800709c:	d128      	bne.n	80070f0 <_strtod_l+0x380>
 800709e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070ac:	e69b      	b.n	8006de6 <_strtod_l+0x76>
 80070ae:	9f08      	ldr	r7, [sp, #32]
 80070b0:	210a      	movs	r1, #10
 80070b2:	fb01 2107 	mla	r1, r1, r7, r2
 80070b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80070ba:	9208      	str	r2, [sp, #32]
 80070bc:	e7b5      	b.n	800702a <_strtod_l+0x2ba>
 80070be:	2a6e      	cmp	r2, #110	; 0x6e
 80070c0:	e7d9      	b.n	8007076 <_strtod_l+0x306>
 80070c2:	498b      	ldr	r1, [pc, #556]	; (80072f0 <_strtod_l+0x580>)
 80070c4:	a815      	add	r0, sp, #84	; 0x54
 80070c6:	f003 f855 	bl	800a174 <__match>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f43f aea8 	beq.w	8006e20 <_strtod_l+0xb0>
 80070d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d2:	4988      	ldr	r1, [pc, #544]	; (80072f4 <_strtod_l+0x584>)
 80070d4:	3b01      	subs	r3, #1
 80070d6:	a815      	add	r0, sp, #84	; 0x54
 80070d8:	9315      	str	r3, [sp, #84]	; 0x54
 80070da:	f003 f84b 	bl	800a174 <__match>
 80070de:	b910      	cbnz	r0, 80070e6 <_strtod_l+0x376>
 80070e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070e2:	3301      	adds	r3, #1
 80070e4:	9315      	str	r3, [sp, #84]	; 0x54
 80070e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007304 <_strtod_l+0x594>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	e67a      	b.n	8006de6 <_strtod_l+0x76>
 80070f0:	4881      	ldr	r0, [pc, #516]	; (80072f8 <_strtod_l+0x588>)
 80070f2:	f001 fea5 	bl	8008e40 <nan>
 80070f6:	ec59 8b10 	vmov	r8, r9, d0
 80070fa:	e674      	b.n	8006de6 <_strtod_l+0x76>
 80070fc:	9b05      	ldr	r3, [sp, #20]
 80070fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007100:	1afb      	subs	r3, r7, r3
 8007102:	f1bb 0f00 	cmp.w	fp, #0
 8007106:	bf08      	it	eq
 8007108:	46b3      	moveq	fp, r6
 800710a:	2e10      	cmp	r6, #16
 800710c:	9308      	str	r3, [sp, #32]
 800710e:	4635      	mov	r5, r6
 8007110:	bfa8      	it	ge
 8007112:	2510      	movge	r5, #16
 8007114:	f7f9 f9f6 	bl	8000504 <__aeabi_ui2d>
 8007118:	2e09      	cmp	r6, #9
 800711a:	4680      	mov	r8, r0
 800711c:	4689      	mov	r9, r1
 800711e:	dd13      	ble.n	8007148 <_strtod_l+0x3d8>
 8007120:	4b76      	ldr	r3, [pc, #472]	; (80072fc <_strtod_l+0x58c>)
 8007122:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007126:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800712a:	f7f9 fa65 	bl	80005f8 <__aeabi_dmul>
 800712e:	4680      	mov	r8, r0
 8007130:	4650      	mov	r0, sl
 8007132:	4689      	mov	r9, r1
 8007134:	f7f9 f9e6 	bl	8000504 <__aeabi_ui2d>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4640      	mov	r0, r8
 800713e:	4649      	mov	r1, r9
 8007140:	f7f9 f8a4 	bl	800028c <__adddf3>
 8007144:	4680      	mov	r8, r0
 8007146:	4689      	mov	r9, r1
 8007148:	2e0f      	cmp	r6, #15
 800714a:	dc38      	bgt.n	80071be <_strtod_l+0x44e>
 800714c:	9b08      	ldr	r3, [sp, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f43f ae49 	beq.w	8006de6 <_strtod_l+0x76>
 8007154:	dd24      	ble.n	80071a0 <_strtod_l+0x430>
 8007156:	2b16      	cmp	r3, #22
 8007158:	dc0b      	bgt.n	8007172 <_strtod_l+0x402>
 800715a:	4968      	ldr	r1, [pc, #416]	; (80072fc <_strtod_l+0x58c>)
 800715c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	e639      	b.n	8006de6 <_strtod_l+0x76>
 8007172:	9a08      	ldr	r2, [sp, #32]
 8007174:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007178:	4293      	cmp	r3, r2
 800717a:	db20      	blt.n	80071be <_strtod_l+0x44e>
 800717c:	4c5f      	ldr	r4, [pc, #380]	; (80072fc <_strtod_l+0x58c>)
 800717e:	f1c6 060f 	rsb	r6, r6, #15
 8007182:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007186:	4642      	mov	r2, r8
 8007188:	464b      	mov	r3, r9
 800718a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	9b08      	ldr	r3, [sp, #32]
 8007194:	1b9e      	subs	r6, r3, r6
 8007196:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800719a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800719e:	e7e3      	b.n	8007168 <_strtod_l+0x3f8>
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	3316      	adds	r3, #22
 80071a4:	db0b      	blt.n	80071be <_strtod_l+0x44e>
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	1bdf      	subs	r7, r3, r7
 80071aa:	4b54      	ldr	r3, [pc, #336]	; (80072fc <_strtod_l+0x58c>)
 80071ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	f7f9 fb48 	bl	800084c <__aeabi_ddiv>
 80071bc:	e7d6      	b.n	800716c <_strtod_l+0x3fc>
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	1b75      	subs	r5, r6, r5
 80071c2:	441d      	add	r5, r3
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	dd70      	ble.n	80072aa <_strtod_l+0x53a>
 80071c8:	f015 030f 	ands.w	r3, r5, #15
 80071cc:	d00a      	beq.n	80071e4 <_strtod_l+0x474>
 80071ce:	494b      	ldr	r1, [pc, #300]	; (80072fc <_strtod_l+0x58c>)
 80071d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071d4:	4642      	mov	r2, r8
 80071d6:	464b      	mov	r3, r9
 80071d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	f035 050f 	bics.w	r5, r5, #15
 80071e8:	d04d      	beq.n	8007286 <_strtod_l+0x516>
 80071ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80071ee:	dd22      	ble.n	8007236 <_strtod_l+0x4c6>
 80071f0:	2500      	movs	r5, #0
 80071f2:	46ab      	mov	fp, r5
 80071f4:	9509      	str	r5, [sp, #36]	; 0x24
 80071f6:	9505      	str	r5, [sp, #20]
 80071f8:	2322      	movs	r3, #34	; 0x22
 80071fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007304 <_strtod_l+0x594>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f04f 0800 	mov.w	r8, #0
 8007204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007206:	2b00      	cmp	r3, #0
 8007208:	f43f aded 	beq.w	8006de6 <_strtod_l+0x76>
 800720c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800720e:	4620      	mov	r0, r4
 8007210:	f003 f966 	bl	800a4e0 <_Bfree>
 8007214:	9905      	ldr	r1, [sp, #20]
 8007216:	4620      	mov	r0, r4
 8007218:	f003 f962 	bl	800a4e0 <_Bfree>
 800721c:	4659      	mov	r1, fp
 800721e:	4620      	mov	r0, r4
 8007220:	f003 f95e 	bl	800a4e0 <_Bfree>
 8007224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007226:	4620      	mov	r0, r4
 8007228:	f003 f95a 	bl	800a4e0 <_Bfree>
 800722c:	4629      	mov	r1, r5
 800722e:	4620      	mov	r0, r4
 8007230:	f003 f956 	bl	800a4e0 <_Bfree>
 8007234:	e5d7      	b.n	8006de6 <_strtod_l+0x76>
 8007236:	4b32      	ldr	r3, [pc, #200]	; (8007300 <_strtod_l+0x590>)
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	2300      	movs	r3, #0
 800723c:	112d      	asrs	r5, r5, #4
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	469a      	mov	sl, r3
 8007244:	2d01      	cmp	r5, #1
 8007246:	dc21      	bgt.n	800728c <_strtod_l+0x51c>
 8007248:	b10b      	cbz	r3, 800724e <_strtod_l+0x4de>
 800724a:	4680      	mov	r8, r0
 800724c:	4689      	mov	r9, r1
 800724e:	492c      	ldr	r1, [pc, #176]	; (8007300 <_strtod_l+0x590>)
 8007250:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007254:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	4b27      	ldr	r3, [pc, #156]	; (8007304 <_strtod_l+0x594>)
 8007266:	460a      	mov	r2, r1
 8007268:	400b      	ands	r3, r1
 800726a:	4927      	ldr	r1, [pc, #156]	; (8007308 <_strtod_l+0x598>)
 800726c:	428b      	cmp	r3, r1
 800726e:	4680      	mov	r8, r0
 8007270:	d8be      	bhi.n	80071f0 <_strtod_l+0x480>
 8007272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007276:	428b      	cmp	r3, r1
 8007278:	bf86      	itte	hi
 800727a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800730c <_strtod_l+0x59c>
 800727e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007282:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007286:	2300      	movs	r3, #0
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	e07b      	b.n	8007384 <_strtod_l+0x614>
 800728c:	07ea      	lsls	r2, r5, #31
 800728e:	d505      	bpl.n	800729c <_strtod_l+0x52c>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f9 f9af 	bl	80005f8 <__aeabi_dmul>
 800729a:	2301      	movs	r3, #1
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	3208      	adds	r2, #8
 80072a0:	f10a 0a01 	add.w	sl, sl, #1
 80072a4:	106d      	asrs	r5, r5, #1
 80072a6:	9204      	str	r2, [sp, #16]
 80072a8:	e7cc      	b.n	8007244 <_strtod_l+0x4d4>
 80072aa:	d0ec      	beq.n	8007286 <_strtod_l+0x516>
 80072ac:	426d      	negs	r5, r5
 80072ae:	f015 020f 	ands.w	r2, r5, #15
 80072b2:	d00a      	beq.n	80072ca <_strtod_l+0x55a>
 80072b4:	4b11      	ldr	r3, [pc, #68]	; (80072fc <_strtod_l+0x58c>)
 80072b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f9 fac3 	bl	800084c <__aeabi_ddiv>
 80072c6:	4680      	mov	r8, r0
 80072c8:	4689      	mov	r9, r1
 80072ca:	112d      	asrs	r5, r5, #4
 80072cc:	d0db      	beq.n	8007286 <_strtod_l+0x516>
 80072ce:	2d1f      	cmp	r5, #31
 80072d0:	dd1e      	ble.n	8007310 <_strtod_l+0x5a0>
 80072d2:	2500      	movs	r5, #0
 80072d4:	46ab      	mov	fp, r5
 80072d6:	9509      	str	r5, [sp, #36]	; 0x24
 80072d8:	9505      	str	r5, [sp, #20]
 80072da:	2322      	movs	r3, #34	; 0x22
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	e78d      	b.n	8007204 <_strtod_l+0x494>
 80072e8:	0800bf66 	.word	0x0800bf66
 80072ec:	0800be18 	.word	0x0800be18
 80072f0:	0800bf5e 	.word	0x0800bf5e
 80072f4:	0800c04a 	.word	0x0800c04a
 80072f8:	0800c046 	.word	0x0800c046
 80072fc:	0800c1a0 	.word	0x0800c1a0
 8007300:	0800c178 	.word	0x0800c178
 8007304:	7ff00000 	.word	0x7ff00000
 8007308:	7ca00000 	.word	0x7ca00000
 800730c:	7fefffff 	.word	0x7fefffff
 8007310:	f015 0310 	ands.w	r3, r5, #16
 8007314:	bf18      	it	ne
 8007316:	236a      	movne	r3, #106	; 0x6a
 8007318:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80076bc <_strtod_l+0x94c>
 800731c:	9304      	str	r3, [sp, #16]
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	2300      	movs	r3, #0
 8007324:	07ea      	lsls	r2, r5, #31
 8007326:	d504      	bpl.n	8007332 <_strtod_l+0x5c2>
 8007328:	e9da 2300 	ldrd	r2, r3, [sl]
 800732c:	f7f9 f964 	bl	80005f8 <__aeabi_dmul>
 8007330:	2301      	movs	r3, #1
 8007332:	106d      	asrs	r5, r5, #1
 8007334:	f10a 0a08 	add.w	sl, sl, #8
 8007338:	d1f4      	bne.n	8007324 <_strtod_l+0x5b4>
 800733a:	b10b      	cbz	r3, 8007340 <_strtod_l+0x5d0>
 800733c:	4680      	mov	r8, r0
 800733e:	4689      	mov	r9, r1
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	b1bb      	cbz	r3, 8007374 <_strtod_l+0x604>
 8007344:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007348:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800734c:	2b00      	cmp	r3, #0
 800734e:	4649      	mov	r1, r9
 8007350:	dd10      	ble.n	8007374 <_strtod_l+0x604>
 8007352:	2b1f      	cmp	r3, #31
 8007354:	f340 811e 	ble.w	8007594 <_strtod_l+0x824>
 8007358:	2b34      	cmp	r3, #52	; 0x34
 800735a:	bfde      	ittt	le
 800735c:	f04f 33ff 	movle.w	r3, #4294967295
 8007360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007364:	4093      	lslle	r3, r2
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	bfcc      	ite	gt
 800736c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007370:	ea03 0901 	andle.w	r9, r3, r1
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	f7f9 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007380:	2800      	cmp	r0, #0
 8007382:	d1a6      	bne.n	80072d2 <_strtod_l+0x562>
 8007384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800738a:	4633      	mov	r3, r6
 800738c:	465a      	mov	r2, fp
 800738e:	4620      	mov	r0, r4
 8007390:	f003 f90e 	bl	800a5b0 <__s2b>
 8007394:	9009      	str	r0, [sp, #36]	; 0x24
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f af2a 	beq.w	80071f0 <_strtod_l+0x480>
 800739c:	9a08      	ldr	r2, [sp, #32]
 800739e:	9b05      	ldr	r3, [sp, #20]
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	eba3 0307 	sub.w	r3, r3, r7
 80073a6:	bfa8      	it	ge
 80073a8:	2300      	movge	r3, #0
 80073aa:	930c      	str	r3, [sp, #48]	; 0x30
 80073ac:	2500      	movs	r5, #0
 80073ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073b2:	9312      	str	r3, [sp, #72]	; 0x48
 80073b4:	46ab      	mov	fp, r5
 80073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b8:	4620      	mov	r0, r4
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	f003 f850 	bl	800a460 <_Balloc>
 80073c0:	9005      	str	r0, [sp, #20]
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f43f af18 	beq.w	80071f8 <_strtod_l+0x488>
 80073c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	3202      	adds	r2, #2
 80073ce:	f103 010c 	add.w	r1, r3, #12
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	300c      	adds	r0, #12
 80073d6:	f001 fd24 	bl	8008e22 <memcpy>
 80073da:	ec49 8b10 	vmov	d0, r8, r9
 80073de:	aa18      	add	r2, sp, #96	; 0x60
 80073e0:	a917      	add	r1, sp, #92	; 0x5c
 80073e2:	4620      	mov	r0, r4
 80073e4:	f003 fc18 	bl	800ac18 <__d2b>
 80073e8:	ec49 8b18 	vmov	d8, r8, r9
 80073ec:	9016      	str	r0, [sp, #88]	; 0x58
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f af02 	beq.w	80071f8 <_strtod_l+0x488>
 80073f4:	2101      	movs	r1, #1
 80073f6:	4620      	mov	r0, r4
 80073f8:	f003 f972 	bl	800a6e0 <__i2b>
 80073fc:	4683      	mov	fp, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aefa 	beq.w	80071f8 <_strtod_l+0x488>
 8007404:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007408:	2e00      	cmp	r6, #0
 800740a:	bfab      	itete	ge
 800740c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800740e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007410:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007412:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007416:	bfac      	ite	ge
 8007418:	eb06 0a03 	addge.w	sl, r6, r3
 800741c:	1b9f      	sublt	r7, r3, r6
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	1af6      	subs	r6, r6, r3
 8007422:	4416      	add	r6, r2
 8007424:	4ba0      	ldr	r3, [pc, #640]	; (80076a8 <_strtod_l+0x938>)
 8007426:	3e01      	subs	r6, #1
 8007428:	429e      	cmp	r6, r3
 800742a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800742e:	f280 80c4 	bge.w	80075ba <_strtod_l+0x84a>
 8007432:	1b9b      	subs	r3, r3, r6
 8007434:	2b1f      	cmp	r3, #31
 8007436:	eba2 0203 	sub.w	r2, r2, r3
 800743a:	f04f 0101 	mov.w	r1, #1
 800743e:	f300 80b0 	bgt.w	80075a2 <_strtod_l+0x832>
 8007442:	fa01 f303 	lsl.w	r3, r1, r3
 8007446:	930e      	str	r3, [sp, #56]	; 0x38
 8007448:	2300      	movs	r3, #0
 800744a:	930d      	str	r3, [sp, #52]	; 0x34
 800744c:	eb0a 0602 	add.w	r6, sl, r2
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	45b2      	cmp	sl, r6
 8007454:	4417      	add	r7, r2
 8007456:	441f      	add	r7, r3
 8007458:	4653      	mov	r3, sl
 800745a:	bfa8      	it	ge
 800745c:	4633      	movge	r3, r6
 800745e:	42bb      	cmp	r3, r7
 8007460:	bfa8      	it	ge
 8007462:	463b      	movge	r3, r7
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfc2      	ittt	gt
 8007468:	1af6      	subgt	r6, r6, r3
 800746a:	1aff      	subgt	r7, r7, r3
 800746c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	dd17      	ble.n	80074a6 <_strtod_l+0x736>
 8007476:	4659      	mov	r1, fp
 8007478:	461a      	mov	r2, r3
 800747a:	4620      	mov	r0, r4
 800747c:	f003 f9f0 	bl	800a860 <__pow5mult>
 8007480:	4683      	mov	fp, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	f43f aeb8 	beq.w	80071f8 <_strtod_l+0x488>
 8007488:	4601      	mov	r1, r0
 800748a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800748c:	4620      	mov	r0, r4
 800748e:	f003 f93d 	bl	800a70c <__multiply>
 8007492:	900b      	str	r0, [sp, #44]	; 0x2c
 8007494:	2800      	cmp	r0, #0
 8007496:	f43f aeaf 	beq.w	80071f8 <_strtod_l+0x488>
 800749a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800749c:	4620      	mov	r0, r4
 800749e:	f003 f81f 	bl	800a4e0 <_Bfree>
 80074a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a4:	9316      	str	r3, [sp, #88]	; 0x58
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	f300 808c 	bgt.w	80075c4 <_strtod_l+0x854>
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dd08      	ble.n	80074c4 <_strtod_l+0x754>
 80074b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074b4:	9905      	ldr	r1, [sp, #20]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f003 f9d2 	bl	800a860 <__pow5mult>
 80074bc:	9005      	str	r0, [sp, #20]
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f ae9a 	beq.w	80071f8 <_strtod_l+0x488>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	dd08      	ble.n	80074da <_strtod_l+0x76a>
 80074c8:	9905      	ldr	r1, [sp, #20]
 80074ca:	463a      	mov	r2, r7
 80074cc:	4620      	mov	r0, r4
 80074ce:	f003 fa21 	bl	800a914 <__lshift>
 80074d2:	9005      	str	r0, [sp, #20]
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f43f ae8f 	beq.w	80071f8 <_strtod_l+0x488>
 80074da:	f1ba 0f00 	cmp.w	sl, #0
 80074de:	dd08      	ble.n	80074f2 <_strtod_l+0x782>
 80074e0:	4659      	mov	r1, fp
 80074e2:	4652      	mov	r2, sl
 80074e4:	4620      	mov	r0, r4
 80074e6:	f003 fa15 	bl	800a914 <__lshift>
 80074ea:	4683      	mov	fp, r0
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f43f ae83 	beq.w	80071f8 <_strtod_l+0x488>
 80074f2:	9a05      	ldr	r2, [sp, #20]
 80074f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074f6:	4620      	mov	r0, r4
 80074f8:	f003 fa94 	bl	800aa24 <__mdiff>
 80074fc:	4605      	mov	r5, r0
 80074fe:	2800      	cmp	r0, #0
 8007500:	f43f ae7a 	beq.w	80071f8 <_strtod_l+0x488>
 8007504:	68c3      	ldr	r3, [r0, #12]
 8007506:	930b      	str	r3, [sp, #44]	; 0x2c
 8007508:	2300      	movs	r3, #0
 800750a:	60c3      	str	r3, [r0, #12]
 800750c:	4659      	mov	r1, fp
 800750e:	f003 fa6d 	bl	800a9ec <__mcmp>
 8007512:	2800      	cmp	r0, #0
 8007514:	da60      	bge.n	80075d8 <_strtod_l+0x868>
 8007516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007518:	ea53 0308 	orrs.w	r3, r3, r8
 800751c:	f040 8084 	bne.w	8007628 <_strtod_l+0x8b8>
 8007520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007524:	2b00      	cmp	r3, #0
 8007526:	d17f      	bne.n	8007628 <_strtod_l+0x8b8>
 8007528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800752c:	0d1b      	lsrs	r3, r3, #20
 800752e:	051b      	lsls	r3, r3, #20
 8007530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007534:	d978      	bls.n	8007628 <_strtod_l+0x8b8>
 8007536:	696b      	ldr	r3, [r5, #20]
 8007538:	b913      	cbnz	r3, 8007540 <_strtod_l+0x7d0>
 800753a:	692b      	ldr	r3, [r5, #16]
 800753c:	2b01      	cmp	r3, #1
 800753e:	dd73      	ble.n	8007628 <_strtod_l+0x8b8>
 8007540:	4629      	mov	r1, r5
 8007542:	2201      	movs	r2, #1
 8007544:	4620      	mov	r0, r4
 8007546:	f003 f9e5 	bl	800a914 <__lshift>
 800754a:	4659      	mov	r1, fp
 800754c:	4605      	mov	r5, r0
 800754e:	f003 fa4d 	bl	800a9ec <__mcmp>
 8007552:	2800      	cmp	r0, #0
 8007554:	dd68      	ble.n	8007628 <_strtod_l+0x8b8>
 8007556:	9904      	ldr	r1, [sp, #16]
 8007558:	4a54      	ldr	r2, [pc, #336]	; (80076ac <_strtod_l+0x93c>)
 800755a:	464b      	mov	r3, r9
 800755c:	2900      	cmp	r1, #0
 800755e:	f000 8084 	beq.w	800766a <_strtod_l+0x8fa>
 8007562:	ea02 0109 	and.w	r1, r2, r9
 8007566:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800756a:	dc7e      	bgt.n	800766a <_strtod_l+0x8fa>
 800756c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007570:	f77f aeb3 	ble.w	80072da <_strtod_l+0x56a>
 8007574:	4b4e      	ldr	r3, [pc, #312]	; (80076b0 <_strtod_l+0x940>)
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	2200      	movs	r2, #0
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	4b4a      	ldr	r3, [pc, #296]	; (80076ac <_strtod_l+0x93c>)
 8007582:	400b      	ands	r3, r1
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f ae3f 	bne.w	800720c <_strtod_l+0x49c>
 800758e:	2322      	movs	r3, #34	; 0x22
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	e63b      	b.n	800720c <_strtod_l+0x49c>
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	ea03 0808 	and.w	r8, r3, r8
 80075a0:	e6e8      	b.n	8007374 <_strtod_l+0x604>
 80075a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80075a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80075aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80075ae:	36e2      	adds	r6, #226	; 0xe2
 80075b0:	fa01 f306 	lsl.w	r3, r1, r6
 80075b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80075b8:	e748      	b.n	800744c <_strtod_l+0x6dc>
 80075ba:	2100      	movs	r1, #0
 80075bc:	2301      	movs	r3, #1
 80075be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80075c2:	e743      	b.n	800744c <_strtod_l+0x6dc>
 80075c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075c6:	4632      	mov	r2, r6
 80075c8:	4620      	mov	r0, r4
 80075ca:	f003 f9a3 	bl	800a914 <__lshift>
 80075ce:	9016      	str	r0, [sp, #88]	; 0x58
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f47f af6b 	bne.w	80074ac <_strtod_l+0x73c>
 80075d6:	e60f      	b.n	80071f8 <_strtod_l+0x488>
 80075d8:	46ca      	mov	sl, r9
 80075da:	d171      	bne.n	80076c0 <_strtod_l+0x950>
 80075dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075e2:	b352      	cbz	r2, 800763a <_strtod_l+0x8ca>
 80075e4:	4a33      	ldr	r2, [pc, #204]	; (80076b4 <_strtod_l+0x944>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d12a      	bne.n	8007640 <_strtod_l+0x8d0>
 80075ea:	9b04      	ldr	r3, [sp, #16]
 80075ec:	4641      	mov	r1, r8
 80075ee:	b1fb      	cbz	r3, 8007630 <_strtod_l+0x8c0>
 80075f0:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <_strtod_l+0x93c>)
 80075f2:	ea09 0303 	and.w	r3, r9, r3
 80075f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	d81a      	bhi.n	8007636 <_strtod_l+0x8c6>
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	4299      	cmp	r1, r3
 800760c:	d118      	bne.n	8007640 <_strtod_l+0x8d0>
 800760e:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <_strtod_l+0x948>)
 8007610:	459a      	cmp	sl, r3
 8007612:	d102      	bne.n	800761a <_strtod_l+0x8aa>
 8007614:	3101      	adds	r1, #1
 8007616:	f43f adef 	beq.w	80071f8 <_strtod_l+0x488>
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <_strtod_l+0x93c>)
 800761c:	ea0a 0303 	and.w	r3, sl, r3
 8007620:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007624:	f04f 0800 	mov.w	r8, #0
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1a2      	bne.n	8007574 <_strtod_l+0x804>
 800762e:	e5ed      	b.n	800720c <_strtod_l+0x49c>
 8007630:	f04f 33ff 	mov.w	r3, #4294967295
 8007634:	e7e9      	b.n	800760a <_strtod_l+0x89a>
 8007636:	4613      	mov	r3, r2
 8007638:	e7e7      	b.n	800760a <_strtod_l+0x89a>
 800763a:	ea53 0308 	orrs.w	r3, r3, r8
 800763e:	d08a      	beq.n	8007556 <_strtod_l+0x7e6>
 8007640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007642:	b1e3      	cbz	r3, 800767e <_strtod_l+0x90e>
 8007644:	ea13 0f0a 	tst.w	r3, sl
 8007648:	d0ee      	beq.n	8007628 <_strtod_l+0x8b8>
 800764a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	b1c3      	cbz	r3, 8007686 <_strtod_l+0x916>
 8007654:	f7ff fb6f 	bl	8006d36 <sulp>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	ec51 0b18 	vmov	r0, r1, d8
 8007660:	f7f8 fe14 	bl	800028c <__adddf3>
 8007664:	4680      	mov	r8, r0
 8007666:	4689      	mov	r9, r1
 8007668:	e7de      	b.n	8007628 <_strtod_l+0x8b8>
 800766a:	4013      	ands	r3, r2
 800766c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007670:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007674:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007678:	f04f 38ff 	mov.w	r8, #4294967295
 800767c:	e7d4      	b.n	8007628 <_strtod_l+0x8b8>
 800767e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007680:	ea13 0f08 	tst.w	r3, r8
 8007684:	e7e0      	b.n	8007648 <_strtod_l+0x8d8>
 8007686:	f7ff fb56 	bl	8006d36 <sulp>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	ec51 0b18 	vmov	r0, r1, d8
 8007692:	f7f8 fdf9 	bl	8000288 <__aeabi_dsub>
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	4680      	mov	r8, r0
 800769c:	4689      	mov	r9, r1
 800769e:	f7f9 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d0c0      	beq.n	8007628 <_strtod_l+0x8b8>
 80076a6:	e618      	b.n	80072da <_strtod_l+0x56a>
 80076a8:	fffffc02 	.word	0xfffffc02
 80076ac:	7ff00000 	.word	0x7ff00000
 80076b0:	39500000 	.word	0x39500000
 80076b4:	000fffff 	.word	0x000fffff
 80076b8:	7fefffff 	.word	0x7fefffff
 80076bc:	0800be30 	.word	0x0800be30
 80076c0:	4659      	mov	r1, fp
 80076c2:	4628      	mov	r0, r5
 80076c4:	f003 fb02 	bl	800accc <__ratio>
 80076c8:	ec57 6b10 	vmov	r6, r7, d0
 80076cc:	ee10 0a10 	vmov	r0, s0
 80076d0:	2200      	movs	r2, #0
 80076d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 fa0a 	bl	8000af0 <__aeabi_dcmple>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d071      	beq.n	80077c4 <_strtod_l+0xa54>
 80076e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d17c      	bne.n	80077e0 <_strtod_l+0xa70>
 80076e6:	f1b8 0f00 	cmp.w	r8, #0
 80076ea:	d15a      	bne.n	80077a2 <_strtod_l+0xa32>
 80076ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d15d      	bne.n	80077b0 <_strtod_l+0xa40>
 80076f4:	4b90      	ldr	r3, [pc, #576]	; (8007938 <_strtod_l+0xbc8>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f9 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8007700:	2800      	cmp	r0, #0
 8007702:	d15c      	bne.n	80077be <_strtod_l+0xa4e>
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	4b8c      	ldr	r3, [pc, #560]	; (800793c <_strtod_l+0xbcc>)
 800770a:	2200      	movs	r2, #0
 800770c:	f7f8 ff74 	bl	80005f8 <__aeabi_dmul>
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007718:	9606      	str	r6, [sp, #24]
 800771a:	9307      	str	r3, [sp, #28]
 800771c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007720:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007724:	4b86      	ldr	r3, [pc, #536]	; (8007940 <_strtod_l+0xbd0>)
 8007726:	ea0a 0303 	and.w	r3, sl, r3
 800772a:	930d      	str	r3, [sp, #52]	; 0x34
 800772c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800772e:	4b85      	ldr	r3, [pc, #532]	; (8007944 <_strtod_l+0xbd4>)
 8007730:	429a      	cmp	r2, r3
 8007732:	f040 8090 	bne.w	8007856 <_strtod_l+0xae6>
 8007736:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800773a:	ec49 8b10 	vmov	d0, r8, r9
 800773e:	f003 f9fb 	bl	800ab38 <__ulp>
 8007742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007746:	ec51 0b10 	vmov	r0, r1, d0
 800774a:	f7f8 ff55 	bl	80005f8 <__aeabi_dmul>
 800774e:	4642      	mov	r2, r8
 8007750:	464b      	mov	r3, r9
 8007752:	f7f8 fd9b 	bl	800028c <__adddf3>
 8007756:	460b      	mov	r3, r1
 8007758:	4979      	ldr	r1, [pc, #484]	; (8007940 <_strtod_l+0xbd0>)
 800775a:	4a7b      	ldr	r2, [pc, #492]	; (8007948 <_strtod_l+0xbd8>)
 800775c:	4019      	ands	r1, r3
 800775e:	4291      	cmp	r1, r2
 8007760:	4680      	mov	r8, r0
 8007762:	d944      	bls.n	80077ee <_strtod_l+0xa7e>
 8007764:	ee18 2a90 	vmov	r2, s17
 8007768:	4b78      	ldr	r3, [pc, #480]	; (800794c <_strtod_l+0xbdc>)
 800776a:	429a      	cmp	r2, r3
 800776c:	d104      	bne.n	8007778 <_strtod_l+0xa08>
 800776e:	ee18 3a10 	vmov	r3, s16
 8007772:	3301      	adds	r3, #1
 8007774:	f43f ad40 	beq.w	80071f8 <_strtod_l+0x488>
 8007778:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800794c <_strtod_l+0xbdc>
 800777c:	f04f 38ff 	mov.w	r8, #4294967295
 8007780:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007782:	4620      	mov	r0, r4
 8007784:	f002 feac 	bl	800a4e0 <_Bfree>
 8007788:	9905      	ldr	r1, [sp, #20]
 800778a:	4620      	mov	r0, r4
 800778c:	f002 fea8 	bl	800a4e0 <_Bfree>
 8007790:	4659      	mov	r1, fp
 8007792:	4620      	mov	r0, r4
 8007794:	f002 fea4 	bl	800a4e0 <_Bfree>
 8007798:	4629      	mov	r1, r5
 800779a:	4620      	mov	r0, r4
 800779c:	f002 fea0 	bl	800a4e0 <_Bfree>
 80077a0:	e609      	b.n	80073b6 <_strtod_l+0x646>
 80077a2:	f1b8 0f01 	cmp.w	r8, #1
 80077a6:	d103      	bne.n	80077b0 <_strtod_l+0xa40>
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	f43f ad95 	beq.w	80072da <_strtod_l+0x56a>
 80077b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007908 <_strtod_l+0xb98>
 80077b4:	4f60      	ldr	r7, [pc, #384]	; (8007938 <_strtod_l+0xbc8>)
 80077b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077ba:	2600      	movs	r6, #0
 80077bc:	e7ae      	b.n	800771c <_strtod_l+0x9ac>
 80077be:	4f5f      	ldr	r7, [pc, #380]	; (800793c <_strtod_l+0xbcc>)
 80077c0:	2600      	movs	r6, #0
 80077c2:	e7a7      	b.n	8007714 <_strtod_l+0x9a4>
 80077c4:	4b5d      	ldr	r3, [pc, #372]	; (800793c <_strtod_l+0xbcc>)
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	2200      	movs	r2, #0
 80077cc:	f7f8 ff14 	bl	80005f8 <__aeabi_dmul>
 80077d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d2:	4606      	mov	r6, r0
 80077d4:	460f      	mov	r7, r1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d09c      	beq.n	8007714 <_strtod_l+0x9a4>
 80077da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077de:	e79d      	b.n	800771c <_strtod_l+0x9ac>
 80077e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007910 <_strtod_l+0xba0>
 80077e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077e8:	ec57 6b17 	vmov	r6, r7, d7
 80077ec:	e796      	b.n	800771c <_strtod_l+0x9ac>
 80077ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80077f2:	9b04      	ldr	r3, [sp, #16]
 80077f4:	46ca      	mov	sl, r9
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1c2      	bne.n	8007780 <_strtod_l+0xa10>
 80077fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007800:	0d1b      	lsrs	r3, r3, #20
 8007802:	051b      	lsls	r3, r3, #20
 8007804:	429a      	cmp	r2, r3
 8007806:	d1bb      	bne.n	8007780 <_strtod_l+0xa10>
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f9 fa54 	bl	8000cb8 <__aeabi_d2lz>
 8007810:	f7f8 fec4 	bl	800059c <__aeabi_l2d>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fd34 	bl	8000288 <__aeabi_dsub>
 8007820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007822:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007826:	ea43 0308 	orr.w	r3, r3, r8
 800782a:	4313      	orrs	r3, r2
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	d054      	beq.n	80078dc <_strtod_l+0xb6c>
 8007832:	a339      	add	r3, pc, #228	; (adr r3, 8007918 <_strtod_l+0xba8>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f9 f950 	bl	8000adc <__aeabi_dcmplt>
 800783c:	2800      	cmp	r0, #0
 800783e:	f47f ace5 	bne.w	800720c <_strtod_l+0x49c>
 8007842:	a337      	add	r3, pc, #220	; (adr r3, 8007920 <_strtod_l+0xbb0>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	f7f9 f964 	bl	8000b18 <__aeabi_dcmpgt>
 8007850:	2800      	cmp	r0, #0
 8007852:	d095      	beq.n	8007780 <_strtod_l+0xa10>
 8007854:	e4da      	b.n	800720c <_strtod_l+0x49c>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	b333      	cbz	r3, 80078a8 <_strtod_l+0xb38>
 800785a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800785c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007860:	d822      	bhi.n	80078a8 <_strtod_l+0xb38>
 8007862:	a331      	add	r3, pc, #196	; (adr r3, 8007928 <_strtod_l+0xbb8>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f9 f940 	bl	8000af0 <__aeabi_dcmple>
 8007870:	b1a0      	cbz	r0, 800789c <_strtod_l+0xb2c>
 8007872:	4639      	mov	r1, r7
 8007874:	4630      	mov	r0, r6
 8007876:	f7f9 f997 	bl	8000ba8 <__aeabi_d2uiz>
 800787a:	2801      	cmp	r0, #1
 800787c:	bf38      	it	cc
 800787e:	2001      	movcc	r0, #1
 8007880:	f7f8 fe40 	bl	8000504 <__aeabi_ui2d>
 8007884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	bb23      	cbnz	r3, 80078d6 <_strtod_l+0xb66>
 800788c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007890:	9010      	str	r0, [sp, #64]	; 0x40
 8007892:	9311      	str	r3, [sp, #68]	; 0x44
 8007894:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007898:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078ac:	eeb0 0a48 	vmov.f32	s0, s16
 80078b0:	eef0 0a68 	vmov.f32	s1, s17
 80078b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80078b8:	f003 f93e 	bl	800ab38 <__ulp>
 80078bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078c0:	ec53 2b10 	vmov	r2, r3, d0
 80078c4:	f7f8 fe98 	bl	80005f8 <__aeabi_dmul>
 80078c8:	ec53 2b18 	vmov	r2, r3, d8
 80078cc:	f7f8 fcde 	bl	800028c <__adddf3>
 80078d0:	4680      	mov	r8, r0
 80078d2:	4689      	mov	r9, r1
 80078d4:	e78d      	b.n	80077f2 <_strtod_l+0xa82>
 80078d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80078da:	e7db      	b.n	8007894 <_strtod_l+0xb24>
 80078dc:	a314      	add	r3, pc, #80	; (adr r3, 8007930 <_strtod_l+0xbc0>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f9 f8fb 	bl	8000adc <__aeabi_dcmplt>
 80078e6:	e7b3      	b.n	8007850 <_strtod_l+0xae0>
 80078e8:	2300      	movs	r3, #0
 80078ea:	930a      	str	r3, [sp, #40]	; 0x28
 80078ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	f7ff ba7c 	b.w	8006dee <_strtod_l+0x7e>
 80078f6:	2a65      	cmp	r2, #101	; 0x65
 80078f8:	f43f ab75 	beq.w	8006fe6 <_strtod_l+0x276>
 80078fc:	2a45      	cmp	r2, #69	; 0x45
 80078fe:	f43f ab72 	beq.w	8006fe6 <_strtod_l+0x276>
 8007902:	2301      	movs	r3, #1
 8007904:	f7ff bbaa 	b.w	800705c <_strtod_l+0x2ec>
 8007908:	00000000 	.word	0x00000000
 800790c:	bff00000 	.word	0xbff00000
 8007910:	00000000 	.word	0x00000000
 8007914:	3ff00000 	.word	0x3ff00000
 8007918:	94a03595 	.word	0x94a03595
 800791c:	3fdfffff 	.word	0x3fdfffff
 8007920:	35afe535 	.word	0x35afe535
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	ffc00000 	.word	0xffc00000
 800792c:	41dfffff 	.word	0x41dfffff
 8007930:	94a03595 	.word	0x94a03595
 8007934:	3fcfffff 	.word	0x3fcfffff
 8007938:	3ff00000 	.word	0x3ff00000
 800793c:	3fe00000 	.word	0x3fe00000
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	7fe00000 	.word	0x7fe00000
 8007948:	7c9fffff 	.word	0x7c9fffff
 800794c:	7fefffff 	.word	0x7fefffff

08007950 <_strtod_r>:
 8007950:	4b01      	ldr	r3, [pc, #4]	; (8007958 <_strtod_r+0x8>)
 8007952:	f7ff ba0d 	b.w	8006d70 <_strtod_l>
 8007956:	bf00      	nop
 8007958:	2000001c 	.word	0x2000001c

0800795c <strtod>:
 800795c:	460a      	mov	r2, r1
 800795e:	4601      	mov	r1, r0
 8007960:	4802      	ldr	r0, [pc, #8]	; (800796c <strtod+0x10>)
 8007962:	4b03      	ldr	r3, [pc, #12]	; (8007970 <strtod+0x14>)
 8007964:	6800      	ldr	r0, [r0, #0]
 8007966:	f7ff ba03 	b.w	8006d70 <_strtod_l>
 800796a:	bf00      	nop
 800796c:	200001d4 	.word	0x200001d4
 8007970:	2000001c 	.word	0x2000001c

08007974 <_strtol_l.constprop.0>:
 8007974:	2b01      	cmp	r3, #1
 8007976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797a:	d001      	beq.n	8007980 <_strtol_l.constprop.0+0xc>
 800797c:	2b24      	cmp	r3, #36	; 0x24
 800797e:	d906      	bls.n	800798e <_strtol_l.constprop.0+0x1a>
 8007980:	f001 fa1a 	bl	8008db8 <__errno>
 8007984:	2316      	movs	r3, #22
 8007986:	6003      	str	r3, [r0, #0]
 8007988:	2000      	movs	r0, #0
 800798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a74 <_strtol_l.constprop.0+0x100>
 8007992:	460d      	mov	r5, r1
 8007994:	462e      	mov	r6, r5
 8007996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800799a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800799e:	f017 0708 	ands.w	r7, r7, #8
 80079a2:	d1f7      	bne.n	8007994 <_strtol_l.constprop.0+0x20>
 80079a4:	2c2d      	cmp	r4, #45	; 0x2d
 80079a6:	d132      	bne.n	8007a0e <_strtol_l.constprop.0+0x9a>
 80079a8:	782c      	ldrb	r4, [r5, #0]
 80079aa:	2701      	movs	r7, #1
 80079ac:	1cb5      	adds	r5, r6, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d05b      	beq.n	8007a6a <_strtol_l.constprop.0+0xf6>
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d109      	bne.n	80079ca <_strtol_l.constprop.0+0x56>
 80079b6:	2c30      	cmp	r4, #48	; 0x30
 80079b8:	d107      	bne.n	80079ca <_strtol_l.constprop.0+0x56>
 80079ba:	782c      	ldrb	r4, [r5, #0]
 80079bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079c0:	2c58      	cmp	r4, #88	; 0x58
 80079c2:	d14d      	bne.n	8007a60 <_strtol_l.constprop.0+0xec>
 80079c4:	786c      	ldrb	r4, [r5, #1]
 80079c6:	2310      	movs	r3, #16
 80079c8:	3502      	adds	r5, #2
 80079ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80079d2:	f04f 0e00 	mov.w	lr, #0
 80079d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80079da:	4676      	mov	r6, lr
 80079dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80079e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079e4:	f1bc 0f09 	cmp.w	ip, #9
 80079e8:	d816      	bhi.n	8007a18 <_strtol_l.constprop.0+0xa4>
 80079ea:	4664      	mov	r4, ip
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	dd24      	ble.n	8007a3a <_strtol_l.constprop.0+0xc6>
 80079f0:	f1be 3fff 	cmp.w	lr, #4294967295
 80079f4:	d008      	beq.n	8007a08 <_strtol_l.constprop.0+0x94>
 80079f6:	45b1      	cmp	r9, r6
 80079f8:	d31c      	bcc.n	8007a34 <_strtol_l.constprop.0+0xc0>
 80079fa:	d101      	bne.n	8007a00 <_strtol_l.constprop.0+0x8c>
 80079fc:	45a2      	cmp	sl, r4
 80079fe:	db19      	blt.n	8007a34 <_strtol_l.constprop.0+0xc0>
 8007a00:	fb06 4603 	mla	r6, r6, r3, r4
 8007a04:	f04f 0e01 	mov.w	lr, #1
 8007a08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a0c:	e7e8      	b.n	80079e0 <_strtol_l.constprop.0+0x6c>
 8007a0e:	2c2b      	cmp	r4, #43	; 0x2b
 8007a10:	bf04      	itt	eq
 8007a12:	782c      	ldrbeq	r4, [r5, #0]
 8007a14:	1cb5      	addeq	r5, r6, #2
 8007a16:	e7ca      	b.n	80079ae <_strtol_l.constprop.0+0x3a>
 8007a18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a1c:	f1bc 0f19 	cmp.w	ip, #25
 8007a20:	d801      	bhi.n	8007a26 <_strtol_l.constprop.0+0xb2>
 8007a22:	3c37      	subs	r4, #55	; 0x37
 8007a24:	e7e2      	b.n	80079ec <_strtol_l.constprop.0+0x78>
 8007a26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a2a:	f1bc 0f19 	cmp.w	ip, #25
 8007a2e:	d804      	bhi.n	8007a3a <_strtol_l.constprop.0+0xc6>
 8007a30:	3c57      	subs	r4, #87	; 0x57
 8007a32:	e7db      	b.n	80079ec <_strtol_l.constprop.0+0x78>
 8007a34:	f04f 3eff 	mov.w	lr, #4294967295
 8007a38:	e7e6      	b.n	8007a08 <_strtol_l.constprop.0+0x94>
 8007a3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007a3e:	d105      	bne.n	8007a4c <_strtol_l.constprop.0+0xd8>
 8007a40:	2322      	movs	r3, #34	; 0x22
 8007a42:	6003      	str	r3, [r0, #0]
 8007a44:	4646      	mov	r6, r8
 8007a46:	b942      	cbnz	r2, 8007a5a <_strtol_l.constprop.0+0xe6>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	e79e      	b.n	800798a <_strtol_l.constprop.0+0x16>
 8007a4c:	b107      	cbz	r7, 8007a50 <_strtol_l.constprop.0+0xdc>
 8007a4e:	4276      	negs	r6, r6
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	d0f9      	beq.n	8007a48 <_strtol_l.constprop.0+0xd4>
 8007a54:	f1be 0f00 	cmp.w	lr, #0
 8007a58:	d000      	beq.n	8007a5c <_strtol_l.constprop.0+0xe8>
 8007a5a:	1e69      	subs	r1, r5, #1
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	e7f3      	b.n	8007a48 <_strtol_l.constprop.0+0xd4>
 8007a60:	2430      	movs	r4, #48	; 0x30
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1b1      	bne.n	80079ca <_strtol_l.constprop.0+0x56>
 8007a66:	2308      	movs	r3, #8
 8007a68:	e7af      	b.n	80079ca <_strtol_l.constprop.0+0x56>
 8007a6a:	2c30      	cmp	r4, #48	; 0x30
 8007a6c:	d0a5      	beq.n	80079ba <_strtol_l.constprop.0+0x46>
 8007a6e:	230a      	movs	r3, #10
 8007a70:	e7ab      	b.n	80079ca <_strtol_l.constprop.0+0x56>
 8007a72:	bf00      	nop
 8007a74:	0800be59 	.word	0x0800be59

08007a78 <_strtol_r>:
 8007a78:	f7ff bf7c 	b.w	8007974 <_strtol_l.constprop.0>

08007a7c <strtol>:
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	460a      	mov	r2, r1
 8007a80:	4601      	mov	r1, r0
 8007a82:	4802      	ldr	r0, [pc, #8]	; (8007a8c <strtol+0x10>)
 8007a84:	6800      	ldr	r0, [r0, #0]
 8007a86:	f7ff bf75 	b.w	8007974 <_strtol_l.constprop.0>
 8007a8a:	bf00      	nop
 8007a8c:	200001d4 	.word	0x200001d4

08007a90 <__cvt>:
 8007a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	ec55 4b10 	vmov	r4, r5, d0
 8007a98:	2d00      	cmp	r5, #0
 8007a9a:	460e      	mov	r6, r1
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	462b      	mov	r3, r5
 8007aa0:	bfbb      	ittet	lt
 8007aa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007aa6:	461d      	movlt	r5, r3
 8007aa8:	2300      	movge	r3, #0
 8007aaa:	232d      	movlt	r3, #45	; 0x2d
 8007aac:	700b      	strb	r3, [r1, #0]
 8007aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ab4:	4691      	mov	r9, r2
 8007ab6:	f023 0820 	bic.w	r8, r3, #32
 8007aba:	bfbc      	itt	lt
 8007abc:	4622      	movlt	r2, r4
 8007abe:	4614      	movlt	r4, r2
 8007ac0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ac4:	d005      	beq.n	8007ad2 <__cvt+0x42>
 8007ac6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007aca:	d100      	bne.n	8007ace <__cvt+0x3e>
 8007acc:	3601      	adds	r6, #1
 8007ace:	2102      	movs	r1, #2
 8007ad0:	e000      	b.n	8007ad4 <__cvt+0x44>
 8007ad2:	2103      	movs	r1, #3
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	ab02      	add	r3, sp, #8
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	ec45 4b10 	vmov	d0, r4, r5
 8007ae0:	4653      	mov	r3, sl
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	f001 fa60 	bl	8008fa8 <_dtoa_r>
 8007ae8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aec:	4607      	mov	r7, r0
 8007aee:	d102      	bne.n	8007af6 <__cvt+0x66>
 8007af0:	f019 0f01 	tst.w	r9, #1
 8007af4:	d022      	beq.n	8007b3c <__cvt+0xac>
 8007af6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007afa:	eb07 0906 	add.w	r9, r7, r6
 8007afe:	d110      	bne.n	8007b22 <__cvt+0x92>
 8007b00:	783b      	ldrb	r3, [r7, #0]
 8007b02:	2b30      	cmp	r3, #48	; 0x30
 8007b04:	d10a      	bne.n	8007b1c <__cvt+0x8c>
 8007b06:	2200      	movs	r2, #0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7f8 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b12:	b918      	cbnz	r0, 8007b1c <__cvt+0x8c>
 8007b14:	f1c6 0601 	rsb	r6, r6, #1
 8007b18:	f8ca 6000 	str.w	r6, [sl]
 8007b1c:	f8da 3000 	ldr.w	r3, [sl]
 8007b20:	4499      	add	r9, r3
 8007b22:	2200      	movs	r2, #0
 8007b24:	2300      	movs	r3, #0
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2e:	b108      	cbz	r0, 8007b34 <__cvt+0xa4>
 8007b30:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b34:	2230      	movs	r2, #48	; 0x30
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	454b      	cmp	r3, r9
 8007b3a:	d307      	bcc.n	8007b4c <__cvt+0xbc>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b40:	1bdb      	subs	r3, r3, r7
 8007b42:	4638      	mov	r0, r7
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	b004      	add	sp, #16
 8007b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4c:	1c59      	adds	r1, r3, #1
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e7f0      	b.n	8007b36 <__cvt+0xa6>

08007b54 <__exponent>:
 8007b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b56:	4603      	mov	r3, r0
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	bfb8      	it	lt
 8007b5c:	4249      	neglt	r1, r1
 8007b5e:	f803 2b02 	strb.w	r2, [r3], #2
 8007b62:	bfb4      	ite	lt
 8007b64:	222d      	movlt	r2, #45	; 0x2d
 8007b66:	222b      	movge	r2, #43	; 0x2b
 8007b68:	2909      	cmp	r1, #9
 8007b6a:	7042      	strb	r2, [r0, #1]
 8007b6c:	dd2a      	ble.n	8007bc4 <__exponent+0x70>
 8007b6e:	f10d 0207 	add.w	r2, sp, #7
 8007b72:	4617      	mov	r7, r2
 8007b74:	260a      	movs	r6, #10
 8007b76:	4694      	mov	ip, r2
 8007b78:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b7c:	fb06 1415 	mls	r4, r6, r5, r1
 8007b80:	3430      	adds	r4, #48	; 0x30
 8007b82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b86:	460c      	mov	r4, r1
 8007b88:	2c63      	cmp	r4, #99	; 0x63
 8007b8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b8e:	4629      	mov	r1, r5
 8007b90:	dcf1      	bgt.n	8007b76 <__exponent+0x22>
 8007b92:	3130      	adds	r1, #48	; 0x30
 8007b94:	f1ac 0402 	sub.w	r4, ip, #2
 8007b98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b9c:	1c41      	adds	r1, r0, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	42ba      	cmp	r2, r7
 8007ba2:	d30a      	bcc.n	8007bba <__exponent+0x66>
 8007ba4:	f10d 0209 	add.w	r2, sp, #9
 8007ba8:	eba2 020c 	sub.w	r2, r2, ip
 8007bac:	42bc      	cmp	r4, r7
 8007bae:	bf88      	it	hi
 8007bb0:	2200      	movhi	r2, #0
 8007bb2:	4413      	add	r3, r2
 8007bb4:	1a18      	subs	r0, r3, r0
 8007bb6:	b003      	add	sp, #12
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007bbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007bc2:	e7ed      	b.n	8007ba0 <__exponent+0x4c>
 8007bc4:	2330      	movs	r3, #48	; 0x30
 8007bc6:	3130      	adds	r1, #48	; 0x30
 8007bc8:	7083      	strb	r3, [r0, #2]
 8007bca:	70c1      	strb	r1, [r0, #3]
 8007bcc:	1d03      	adds	r3, r0, #4
 8007bce:	e7f1      	b.n	8007bb4 <__exponent+0x60>

08007bd0 <_printf_float>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	ed2d 8b02 	vpush	{d8}
 8007bd8:	b08d      	sub	sp, #52	; 0x34
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007be0:	4616      	mov	r6, r2
 8007be2:	461f      	mov	r7, r3
 8007be4:	4605      	mov	r5, r0
 8007be6:	f001 f89d 	bl	8008d24 <_localeconv_r>
 8007bea:	f8d0 a000 	ldr.w	sl, [r0]
 8007bee:	4650      	mov	r0, sl
 8007bf0:	f7f8 fb3e 	bl	8000270 <strlen>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8007c00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c04:	3307      	adds	r3, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	f103 0208 	add.w	r2, r3, #8
 8007c0e:	f8c8 2000 	str.w	r2, [r8]
 8007c12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c20:	ee08 0a10 	vmov	s16, r0
 8007c24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c2c:	4b9e      	ldr	r3, [pc, #632]	; (8007ea8 <_printf_float+0x2d8>)
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	f7f8 ff7b 	bl	8000b2c <__aeabi_dcmpun>
 8007c36:	bb88      	cbnz	r0, 8007c9c <_printf_float+0xcc>
 8007c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c3c:	4b9a      	ldr	r3, [pc, #616]	; (8007ea8 <_printf_float+0x2d8>)
 8007c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c42:	f7f8 ff55 	bl	8000af0 <__aeabi_dcmple>
 8007c46:	bb48      	cbnz	r0, 8007c9c <_printf_float+0xcc>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 ff44 	bl	8000adc <__aeabi_dcmplt>
 8007c54:	b110      	cbz	r0, 8007c5c <_printf_float+0x8c>
 8007c56:	232d      	movs	r3, #45	; 0x2d
 8007c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5c:	4a93      	ldr	r2, [pc, #588]	; (8007eac <_printf_float+0x2dc>)
 8007c5e:	4b94      	ldr	r3, [pc, #592]	; (8007eb0 <_printf_float+0x2e0>)
 8007c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c64:	bf94      	ite	ls
 8007c66:	4690      	movls	r8, r2
 8007c68:	4698      	movhi	r8, r3
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	9b05      	ldr	r3, [sp, #20]
 8007c70:	f023 0304 	bic.w	r3, r3, #4
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	f04f 0900 	mov.w	r9, #0
 8007c7a:	9700      	str	r7, [sp, #0]
 8007c7c:	4633      	mov	r3, r6
 8007c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c80:	4621      	mov	r1, r4
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f9da 	bl	800803c <_printf_common>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f040 8090 	bne.w	8007dae <_printf_float+0x1de>
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	b00d      	add	sp, #52	; 0x34
 8007c94:	ecbd 8b02 	vpop	{d8}
 8007c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 ff42 	bl	8000b2c <__aeabi_dcmpun>
 8007ca8:	b140      	cbz	r0, 8007cbc <_printf_float+0xec>
 8007caa:	464b      	mov	r3, r9
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bfbc      	itt	lt
 8007cb0:	232d      	movlt	r3, #45	; 0x2d
 8007cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cb6:	4a7f      	ldr	r2, [pc, #508]	; (8007eb4 <_printf_float+0x2e4>)
 8007cb8:	4b7f      	ldr	r3, [pc, #508]	; (8007eb8 <_printf_float+0x2e8>)
 8007cba:	e7d1      	b.n	8007c60 <_printf_float+0x90>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cc2:	9206      	str	r2, [sp, #24]
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	d13f      	bne.n	8007d48 <_printf_float+0x178>
 8007cc8:	2306      	movs	r3, #6
 8007cca:	6063      	str	r3, [r4, #4]
 8007ccc:	9b05      	ldr	r3, [sp, #20]
 8007cce:	6861      	ldr	r1, [r4, #4]
 8007cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8007cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cde:	ab09      	add	r3, sp, #36	; 0x24
 8007ce0:	ec49 8b10 	vmov	d0, r8, r9
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6022      	str	r2, [r4, #0]
 8007ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff fecf 	bl	8007a90 <__cvt>
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf6:	2b47      	cmp	r3, #71	; 0x47
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	d108      	bne.n	8007d0e <_printf_float+0x13e>
 8007cfc:	1cc8      	adds	r0, r1, #3
 8007cfe:	db02      	blt.n	8007d06 <_printf_float+0x136>
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	4299      	cmp	r1, r3
 8007d04:	dd41      	ble.n	8007d8a <_printf_float+0x1ba>
 8007d06:	f1ab 0302 	sub.w	r3, fp, #2
 8007d0a:	fa5f fb83 	uxtb.w	fp, r3
 8007d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d12:	d820      	bhi.n	8007d56 <_printf_float+0x186>
 8007d14:	3901      	subs	r1, #1
 8007d16:	465a      	mov	r2, fp
 8007d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d1e:	f7ff ff19 	bl	8007b54 <__exponent>
 8007d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d24:	1813      	adds	r3, r2, r0
 8007d26:	2a01      	cmp	r2, #1
 8007d28:	4681      	mov	r9, r0
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	dc02      	bgt.n	8007d34 <_printf_float+0x164>
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	07d2      	lsls	r2, r2, #31
 8007d32:	d501      	bpl.n	8007d38 <_printf_float+0x168>
 8007d34:	3301      	adds	r3, #1
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d09c      	beq.n	8007c7a <_printf_float+0xaa>
 8007d40:	232d      	movs	r3, #45	; 0x2d
 8007d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d46:	e798      	b.n	8007c7a <_printf_float+0xaa>
 8007d48:	9a06      	ldr	r2, [sp, #24]
 8007d4a:	2a47      	cmp	r2, #71	; 0x47
 8007d4c:	d1be      	bne.n	8007ccc <_printf_float+0xfc>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1bc      	bne.n	8007ccc <_printf_float+0xfc>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7b9      	b.n	8007cca <_printf_float+0xfa>
 8007d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d5a:	d118      	bne.n	8007d8e <_printf_float+0x1be>
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	6863      	ldr	r3, [r4, #4]
 8007d60:	dd0b      	ble.n	8007d7a <_printf_float+0x1aa>
 8007d62:	6121      	str	r1, [r4, #16]
 8007d64:	b913      	cbnz	r3, 8007d6c <_printf_float+0x19c>
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	07d0      	lsls	r0, r2, #31
 8007d6a:	d502      	bpl.n	8007d72 <_printf_float+0x1a2>
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	440b      	add	r3, r1
 8007d70:	6123      	str	r3, [r4, #16]
 8007d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d74:	f04f 0900 	mov.w	r9, #0
 8007d78:	e7de      	b.n	8007d38 <_printf_float+0x168>
 8007d7a:	b913      	cbnz	r3, 8007d82 <_printf_float+0x1b2>
 8007d7c:	6822      	ldr	r2, [r4, #0]
 8007d7e:	07d2      	lsls	r2, r2, #31
 8007d80:	d501      	bpl.n	8007d86 <_printf_float+0x1b6>
 8007d82:	3302      	adds	r3, #2
 8007d84:	e7f4      	b.n	8007d70 <_printf_float+0x1a0>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7f2      	b.n	8007d70 <_printf_float+0x1a0>
 8007d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	4299      	cmp	r1, r3
 8007d92:	db05      	blt.n	8007da0 <_printf_float+0x1d0>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	6121      	str	r1, [r4, #16]
 8007d98:	07d8      	lsls	r0, r3, #31
 8007d9a:	d5ea      	bpl.n	8007d72 <_printf_float+0x1a2>
 8007d9c:	1c4b      	adds	r3, r1, #1
 8007d9e:	e7e7      	b.n	8007d70 <_printf_float+0x1a0>
 8007da0:	2900      	cmp	r1, #0
 8007da2:	bfd4      	ite	le
 8007da4:	f1c1 0202 	rsble	r2, r1, #2
 8007da8:	2201      	movgt	r2, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	e7e0      	b.n	8007d70 <_printf_float+0x1a0>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	055a      	lsls	r2, r3, #21
 8007db2:	d407      	bmi.n	8007dc4 <_printf_float+0x1f4>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	4642      	mov	r2, r8
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d12c      	bne.n	8007e1c <_printf_float+0x24c>
 8007dc2:	e764      	b.n	8007c8e <_printf_float+0xbe>
 8007dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc8:	f240 80e0 	bls.w	8007f8c <_printf_float+0x3bc>
 8007dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f7f8 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d034      	beq.n	8007e46 <_printf_float+0x276>
 8007ddc:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <_printf_float+0x2ec>)
 8007dde:	2301      	movs	r3, #1
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af51 	beq.w	8007c8e <_printf_float+0xbe>
 8007dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007df0:	429a      	cmp	r2, r3
 8007df2:	db02      	blt.n	8007dfa <_printf_float+0x22a>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	07d8      	lsls	r0, r3, #31
 8007df8:	d510      	bpl.n	8007e1c <_printf_float+0x24c>
 8007dfa:	ee18 3a10 	vmov	r3, s16
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af41 	beq.w	8007c8e <_printf_float+0xbe>
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	f104 091a 	add.w	r9, r4, #26
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4543      	cmp	r3, r8
 8007e1a:	dc09      	bgt.n	8007e30 <_printf_float+0x260>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	079b      	lsls	r3, r3, #30
 8007e20:	f100 8107 	bmi.w	8008032 <_printf_float+0x462>
 8007e24:	68e0      	ldr	r0, [r4, #12]
 8007e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e28:	4298      	cmp	r0, r3
 8007e2a:	bfb8      	it	lt
 8007e2c:	4618      	movlt	r0, r3
 8007e2e:	e730      	b.n	8007c92 <_printf_float+0xc2>
 8007e30:	2301      	movs	r3, #1
 8007e32:	464a      	mov	r2, r9
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f af27 	beq.w	8007c8e <_printf_float+0xbe>
 8007e40:	f108 0801 	add.w	r8, r8, #1
 8007e44:	e7e6      	b.n	8007e14 <_printf_float+0x244>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc39      	bgt.n	8007ec0 <_printf_float+0x2f0>
 8007e4c:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <_printf_float+0x2ec>)
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	f43f af19 	beq.w	8007c8e <_printf_float+0xbe>
 8007e5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d102      	bne.n	8007e6a <_printf_float+0x29a>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	07d9      	lsls	r1, r3, #31
 8007e68:	d5d8      	bpl.n	8007e1c <_printf_float+0x24c>
 8007e6a:	ee18 3a10 	vmov	r3, s16
 8007e6e:	4652      	mov	r2, sl
 8007e70:	4631      	mov	r1, r6
 8007e72:	4628      	mov	r0, r5
 8007e74:	47b8      	blx	r7
 8007e76:	3001      	adds	r0, #1
 8007e78:	f43f af09 	beq.w	8007c8e <_printf_float+0xbe>
 8007e7c:	f04f 0900 	mov.w	r9, #0
 8007e80:	f104 0a1a 	add.w	sl, r4, #26
 8007e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e86:	425b      	negs	r3, r3
 8007e88:	454b      	cmp	r3, r9
 8007e8a:	dc01      	bgt.n	8007e90 <_printf_float+0x2c0>
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8e:	e792      	b.n	8007db6 <_printf_float+0x1e6>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4652      	mov	r2, sl
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f aef7 	beq.w	8007c8e <_printf_float+0xbe>
 8007ea0:	f109 0901 	add.w	r9, r9, #1
 8007ea4:	e7ee      	b.n	8007e84 <_printf_float+0x2b4>
 8007ea6:	bf00      	nop
 8007ea8:	7fefffff 	.word	0x7fefffff
 8007eac:	0800bf59 	.word	0x0800bf59
 8007eb0:	0800bf5d 	.word	0x0800bf5d
 8007eb4:	0800bf61 	.word	0x0800bf61
 8007eb8:	0800bf65 	.word	0x0800bf65
 8007ebc:	0800bf69 	.word	0x0800bf69
 8007ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	bfa8      	it	ge
 8007ec8:	461a      	movge	r2, r3
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	4691      	mov	r9, r2
 8007ece:	dc37      	bgt.n	8007f40 <_printf_float+0x370>
 8007ed0:	f04f 0b00 	mov.w	fp, #0
 8007ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed8:	f104 021a 	add.w	r2, r4, #26
 8007edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ede:	9305      	str	r3, [sp, #20]
 8007ee0:	eba3 0309 	sub.w	r3, r3, r9
 8007ee4:	455b      	cmp	r3, fp
 8007ee6:	dc33      	bgt.n	8007f50 <_printf_float+0x380>
 8007ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eec:	429a      	cmp	r2, r3
 8007eee:	db3b      	blt.n	8007f68 <_printf_float+0x398>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	07da      	lsls	r2, r3, #31
 8007ef4:	d438      	bmi.n	8007f68 <_printf_float+0x398>
 8007ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007efa:	eba2 0903 	sub.w	r9, r2, r3
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	1ad2      	subs	r2, r2, r3
 8007f02:	4591      	cmp	r9, r2
 8007f04:	bfa8      	it	ge
 8007f06:	4691      	movge	r9, r2
 8007f08:	f1b9 0f00 	cmp.w	r9, #0
 8007f0c:	dc35      	bgt.n	8007f7a <_printf_float+0x3aa>
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f16:	f104 0a1a 	add.w	sl, r4, #26
 8007f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1e:	1a9b      	subs	r3, r3, r2
 8007f20:	eba3 0309 	sub.w	r3, r3, r9
 8007f24:	4543      	cmp	r3, r8
 8007f26:	f77f af79 	ble.w	8007e1c <_printf_float+0x24c>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f aeaa 	beq.w	8007c8e <_printf_float+0xbe>
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	e7ec      	b.n	8007f1a <_printf_float+0x34a>
 8007f40:	4613      	mov	r3, r2
 8007f42:	4631      	mov	r1, r6
 8007f44:	4642      	mov	r2, r8
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d1c0      	bne.n	8007ed0 <_printf_float+0x300>
 8007f4e:	e69e      	b.n	8007c8e <_printf_float+0xbe>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f ae97 	beq.w	8007c8e <_printf_float+0xbe>
 8007f60:	9a05      	ldr	r2, [sp, #20]
 8007f62:	f10b 0b01 	add.w	fp, fp, #1
 8007f66:	e7b9      	b.n	8007edc <_printf_float+0x30c>
 8007f68:	ee18 3a10 	vmov	r3, s16
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1be      	bne.n	8007ef6 <_printf_float+0x326>
 8007f78:	e689      	b.n	8007c8e <_printf_float+0xbe>
 8007f7a:	9a05      	ldr	r2, [sp, #20]
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	4442      	add	r2, r8
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	d1c1      	bne.n	8007f0e <_printf_float+0x33e>
 8007f8a:	e680      	b.n	8007c8e <_printf_float+0xbe>
 8007f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f8e:	2a01      	cmp	r2, #1
 8007f90:	dc01      	bgt.n	8007f96 <_printf_float+0x3c6>
 8007f92:	07db      	lsls	r3, r3, #31
 8007f94:	d53a      	bpl.n	800800c <_printf_float+0x43c>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4642      	mov	r2, r8
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f ae74 	beq.w	8007c8e <_printf_float+0xbe>
 8007fa6:	ee18 3a10 	vmov	r3, s16
 8007faa:	4652      	mov	r2, sl
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae6b 	beq.w	8007c8e <_printf_float+0xbe>
 8007fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007fc4:	f7f8 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc8:	b9d8      	cbnz	r0, 8008002 <_printf_float+0x432>
 8007fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fce:	f108 0201 	add.w	r2, r8, #1
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d10e      	bne.n	8007ffa <_printf_float+0x42a>
 8007fdc:	e657      	b.n	8007c8e <_printf_float+0xbe>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f ae50 	beq.w	8007c8e <_printf_float+0xbe>
 8007fee:	f108 0801 	add.w	r8, r8, #1
 8007ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	4543      	cmp	r3, r8
 8007ff8:	dcf1      	bgt.n	8007fde <_printf_float+0x40e>
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008000:	e6da      	b.n	8007db8 <_printf_float+0x1e8>
 8008002:	f04f 0800 	mov.w	r8, #0
 8008006:	f104 0a1a 	add.w	sl, r4, #26
 800800a:	e7f2      	b.n	8007ff2 <_printf_float+0x422>
 800800c:	2301      	movs	r3, #1
 800800e:	4642      	mov	r2, r8
 8008010:	e7df      	b.n	8007fd2 <_printf_float+0x402>
 8008012:	2301      	movs	r3, #1
 8008014:	464a      	mov	r2, r9
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae36 	beq.w	8007c8e <_printf_float+0xbe>
 8008022:	f108 0801 	add.w	r8, r8, #1
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800802a:	1a5b      	subs	r3, r3, r1
 800802c:	4543      	cmp	r3, r8
 800802e:	dcf0      	bgt.n	8008012 <_printf_float+0x442>
 8008030:	e6f8      	b.n	8007e24 <_printf_float+0x254>
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	f104 0919 	add.w	r9, r4, #25
 800803a:	e7f4      	b.n	8008026 <_printf_float+0x456>

0800803c <_printf_common>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	4616      	mov	r6, r2
 8008042:	4699      	mov	r9, r3
 8008044:	688a      	ldr	r2, [r1, #8]
 8008046:	690b      	ldr	r3, [r1, #16]
 8008048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800804c:	4293      	cmp	r3, r2
 800804e:	bfb8      	it	lt
 8008050:	4613      	movlt	r3, r2
 8008052:	6033      	str	r3, [r6, #0]
 8008054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008058:	4607      	mov	r7, r0
 800805a:	460c      	mov	r4, r1
 800805c:	b10a      	cbz	r2, 8008062 <_printf_common+0x26>
 800805e:	3301      	adds	r3, #1
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	0699      	lsls	r1, r3, #26
 8008066:	bf42      	ittt	mi
 8008068:	6833      	ldrmi	r3, [r6, #0]
 800806a:	3302      	addmi	r3, #2
 800806c:	6033      	strmi	r3, [r6, #0]
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	f015 0506 	ands.w	r5, r5, #6
 8008074:	d106      	bne.n	8008084 <_printf_common+0x48>
 8008076:	f104 0a19 	add.w	sl, r4, #25
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	6832      	ldr	r2, [r6, #0]
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	42ab      	cmp	r3, r5
 8008082:	dc26      	bgt.n	80080d2 <_printf_common+0x96>
 8008084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008088:	1e13      	subs	r3, r2, #0
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	bf18      	it	ne
 800808e:	2301      	movne	r3, #1
 8008090:	0692      	lsls	r2, r2, #26
 8008092:	d42b      	bmi.n	80080ec <_printf_common+0xb0>
 8008094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008098:	4649      	mov	r1, r9
 800809a:	4638      	mov	r0, r7
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d01e      	beq.n	80080e0 <_printf_common+0xa4>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	6922      	ldr	r2, [r4, #16]
 80080a6:	f003 0306 	and.w	r3, r3, #6
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	bf02      	ittt	eq
 80080ae:	68e5      	ldreq	r5, [r4, #12]
 80080b0:	6833      	ldreq	r3, [r6, #0]
 80080b2:	1aed      	subeq	r5, r5, r3
 80080b4:	68a3      	ldr	r3, [r4, #8]
 80080b6:	bf0c      	ite	eq
 80080b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080bc:	2500      	movne	r5, #0
 80080be:	4293      	cmp	r3, r2
 80080c0:	bfc4      	itt	gt
 80080c2:	1a9b      	subgt	r3, r3, r2
 80080c4:	18ed      	addgt	r5, r5, r3
 80080c6:	2600      	movs	r6, #0
 80080c8:	341a      	adds	r4, #26
 80080ca:	42b5      	cmp	r5, r6
 80080cc:	d11a      	bne.n	8008104 <_printf_common+0xc8>
 80080ce:	2000      	movs	r0, #0
 80080d0:	e008      	b.n	80080e4 <_printf_common+0xa8>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4652      	mov	r2, sl
 80080d6:	4649      	mov	r1, r9
 80080d8:	4638      	mov	r0, r7
 80080da:	47c0      	blx	r8
 80080dc:	3001      	adds	r0, #1
 80080de:	d103      	bne.n	80080e8 <_printf_common+0xac>
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e8:	3501      	adds	r5, #1
 80080ea:	e7c6      	b.n	800807a <_printf_common+0x3e>
 80080ec:	18e1      	adds	r1, r4, r3
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	2030      	movs	r0, #48	; 0x30
 80080f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080f6:	4422      	add	r2, r4
 80080f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008100:	3302      	adds	r3, #2
 8008102:	e7c7      	b.n	8008094 <_printf_common+0x58>
 8008104:	2301      	movs	r3, #1
 8008106:	4622      	mov	r2, r4
 8008108:	4649      	mov	r1, r9
 800810a:	4638      	mov	r0, r7
 800810c:	47c0      	blx	r8
 800810e:	3001      	adds	r0, #1
 8008110:	d0e6      	beq.n	80080e0 <_printf_common+0xa4>
 8008112:	3601      	adds	r6, #1
 8008114:	e7d9      	b.n	80080ca <_printf_common+0x8e>
	...

08008118 <_printf_i>:
 8008118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800811c:	7e0f      	ldrb	r7, [r1, #24]
 800811e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008120:	2f78      	cmp	r7, #120	; 0x78
 8008122:	4691      	mov	r9, r2
 8008124:	4680      	mov	r8, r0
 8008126:	460c      	mov	r4, r1
 8008128:	469a      	mov	sl, r3
 800812a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800812e:	d807      	bhi.n	8008140 <_printf_i+0x28>
 8008130:	2f62      	cmp	r7, #98	; 0x62
 8008132:	d80a      	bhi.n	800814a <_printf_i+0x32>
 8008134:	2f00      	cmp	r7, #0
 8008136:	f000 80d4 	beq.w	80082e2 <_printf_i+0x1ca>
 800813a:	2f58      	cmp	r7, #88	; 0x58
 800813c:	f000 80c0 	beq.w	80082c0 <_printf_i+0x1a8>
 8008140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008148:	e03a      	b.n	80081c0 <_printf_i+0xa8>
 800814a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800814e:	2b15      	cmp	r3, #21
 8008150:	d8f6      	bhi.n	8008140 <_printf_i+0x28>
 8008152:	a101      	add	r1, pc, #4	; (adr r1, 8008158 <_printf_i+0x40>)
 8008154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008158:	080081b1 	.word	0x080081b1
 800815c:	080081c5 	.word	0x080081c5
 8008160:	08008141 	.word	0x08008141
 8008164:	08008141 	.word	0x08008141
 8008168:	08008141 	.word	0x08008141
 800816c:	08008141 	.word	0x08008141
 8008170:	080081c5 	.word	0x080081c5
 8008174:	08008141 	.word	0x08008141
 8008178:	08008141 	.word	0x08008141
 800817c:	08008141 	.word	0x08008141
 8008180:	08008141 	.word	0x08008141
 8008184:	080082c9 	.word	0x080082c9
 8008188:	080081f1 	.word	0x080081f1
 800818c:	08008283 	.word	0x08008283
 8008190:	08008141 	.word	0x08008141
 8008194:	08008141 	.word	0x08008141
 8008198:	080082eb 	.word	0x080082eb
 800819c:	08008141 	.word	0x08008141
 80081a0:	080081f1 	.word	0x080081f1
 80081a4:	08008141 	.word	0x08008141
 80081a8:	08008141 	.word	0x08008141
 80081ac:	0800828b 	.word	0x0800828b
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	1d1a      	adds	r2, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	602a      	str	r2, [r5, #0]
 80081b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081c0:	2301      	movs	r3, #1
 80081c2:	e09f      	b.n	8008304 <_printf_i+0x1ec>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	682b      	ldr	r3, [r5, #0]
 80081c8:	0607      	lsls	r7, r0, #24
 80081ca:	f103 0104 	add.w	r1, r3, #4
 80081ce:	6029      	str	r1, [r5, #0]
 80081d0:	d501      	bpl.n	80081d6 <_printf_i+0xbe>
 80081d2:	681e      	ldr	r6, [r3, #0]
 80081d4:	e003      	b.n	80081de <_printf_i+0xc6>
 80081d6:	0646      	lsls	r6, r0, #25
 80081d8:	d5fb      	bpl.n	80081d2 <_printf_i+0xba>
 80081da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80081de:	2e00      	cmp	r6, #0
 80081e0:	da03      	bge.n	80081ea <_printf_i+0xd2>
 80081e2:	232d      	movs	r3, #45	; 0x2d
 80081e4:	4276      	negs	r6, r6
 80081e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ea:	485a      	ldr	r0, [pc, #360]	; (8008354 <_printf_i+0x23c>)
 80081ec:	230a      	movs	r3, #10
 80081ee:	e012      	b.n	8008216 <_printf_i+0xfe>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6820      	ldr	r0, [r4, #0]
 80081f4:	1d19      	adds	r1, r3, #4
 80081f6:	6029      	str	r1, [r5, #0]
 80081f8:	0605      	lsls	r5, r0, #24
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0xe8>
 80081fc:	681e      	ldr	r6, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0xee>
 8008200:	0641      	lsls	r1, r0, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0xe4>
 8008204:	881e      	ldrh	r6, [r3, #0]
 8008206:	4853      	ldr	r0, [pc, #332]	; (8008354 <_printf_i+0x23c>)
 8008208:	2f6f      	cmp	r7, #111	; 0x6f
 800820a:	bf0c      	ite	eq
 800820c:	2308      	moveq	r3, #8
 800820e:	230a      	movne	r3, #10
 8008210:	2100      	movs	r1, #0
 8008212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008216:	6865      	ldr	r5, [r4, #4]
 8008218:	60a5      	str	r5, [r4, #8]
 800821a:	2d00      	cmp	r5, #0
 800821c:	bfa2      	ittt	ge
 800821e:	6821      	ldrge	r1, [r4, #0]
 8008220:	f021 0104 	bicge.w	r1, r1, #4
 8008224:	6021      	strge	r1, [r4, #0]
 8008226:	b90e      	cbnz	r6, 800822c <_printf_i+0x114>
 8008228:	2d00      	cmp	r5, #0
 800822a:	d04b      	beq.n	80082c4 <_printf_i+0x1ac>
 800822c:	4615      	mov	r5, r2
 800822e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008232:	fb03 6711 	mls	r7, r3, r1, r6
 8008236:	5dc7      	ldrb	r7, [r0, r7]
 8008238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800823c:	4637      	mov	r7, r6
 800823e:	42bb      	cmp	r3, r7
 8008240:	460e      	mov	r6, r1
 8008242:	d9f4      	bls.n	800822e <_printf_i+0x116>
 8008244:	2b08      	cmp	r3, #8
 8008246:	d10b      	bne.n	8008260 <_printf_i+0x148>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07de      	lsls	r6, r3, #31
 800824c:	d508      	bpl.n	8008260 <_printf_i+0x148>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	4299      	cmp	r1, r3
 8008254:	bfde      	ittt	le
 8008256:	2330      	movle	r3, #48	; 0x30
 8008258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800825c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008260:	1b52      	subs	r2, r2, r5
 8008262:	6122      	str	r2, [r4, #16]
 8008264:	f8cd a000 	str.w	sl, [sp]
 8008268:	464b      	mov	r3, r9
 800826a:	aa03      	add	r2, sp, #12
 800826c:	4621      	mov	r1, r4
 800826e:	4640      	mov	r0, r8
 8008270:	f7ff fee4 	bl	800803c <_printf_common>
 8008274:	3001      	adds	r0, #1
 8008276:	d14a      	bne.n	800830e <_printf_i+0x1f6>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	b004      	add	sp, #16
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	f043 0320 	orr.w	r3, r3, #32
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	4833      	ldr	r0, [pc, #204]	; (8008358 <_printf_i+0x240>)
 800828c:	2778      	movs	r7, #120	; 0x78
 800828e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	6829      	ldr	r1, [r5, #0]
 8008296:	061f      	lsls	r7, r3, #24
 8008298:	f851 6b04 	ldr.w	r6, [r1], #4
 800829c:	d402      	bmi.n	80082a4 <_printf_i+0x18c>
 800829e:	065f      	lsls	r7, r3, #25
 80082a0:	bf48      	it	mi
 80082a2:	b2b6      	uxthmi	r6, r6
 80082a4:	07df      	lsls	r7, r3, #31
 80082a6:	bf48      	it	mi
 80082a8:	f043 0320 	orrmi.w	r3, r3, #32
 80082ac:	6029      	str	r1, [r5, #0]
 80082ae:	bf48      	it	mi
 80082b0:	6023      	strmi	r3, [r4, #0]
 80082b2:	b91e      	cbnz	r6, 80082bc <_printf_i+0x1a4>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	f023 0320 	bic.w	r3, r3, #32
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	2310      	movs	r3, #16
 80082be:	e7a7      	b.n	8008210 <_printf_i+0xf8>
 80082c0:	4824      	ldr	r0, [pc, #144]	; (8008354 <_printf_i+0x23c>)
 80082c2:	e7e4      	b.n	800828e <_printf_i+0x176>
 80082c4:	4615      	mov	r5, r2
 80082c6:	e7bd      	b.n	8008244 <_printf_i+0x12c>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	6826      	ldr	r6, [r4, #0]
 80082cc:	6961      	ldr	r1, [r4, #20]
 80082ce:	1d18      	adds	r0, r3, #4
 80082d0:	6028      	str	r0, [r5, #0]
 80082d2:	0635      	lsls	r5, r6, #24
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	d501      	bpl.n	80082dc <_printf_i+0x1c4>
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	e002      	b.n	80082e2 <_printf_i+0x1ca>
 80082dc:	0670      	lsls	r0, r6, #25
 80082de:	d5fb      	bpl.n	80082d8 <_printf_i+0x1c0>
 80082e0:	8019      	strh	r1, [r3, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	4615      	mov	r5, r2
 80082e8:	e7bc      	b.n	8008264 <_printf_i+0x14c>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	1d1a      	adds	r2, r3, #4
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7f7 ff6a 	bl	80001d0 <memchr>
 80082fc:	b108      	cbz	r0, 8008302 <_printf_i+0x1ea>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	6060      	str	r0, [r4, #4]
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	2300      	movs	r3, #0
 8008308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800830c:	e7aa      	b.n	8008264 <_printf_i+0x14c>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	462a      	mov	r2, r5
 8008312:	4649      	mov	r1, r9
 8008314:	4640      	mov	r0, r8
 8008316:	47d0      	blx	sl
 8008318:	3001      	adds	r0, #1
 800831a:	d0ad      	beq.n	8008278 <_printf_i+0x160>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	079b      	lsls	r3, r3, #30
 8008320:	d413      	bmi.n	800834a <_printf_i+0x232>
 8008322:	68e0      	ldr	r0, [r4, #12]
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	4298      	cmp	r0, r3
 8008328:	bfb8      	it	lt
 800832a:	4618      	movlt	r0, r3
 800832c:	e7a6      	b.n	800827c <_printf_i+0x164>
 800832e:	2301      	movs	r3, #1
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d09d      	beq.n	8008278 <_printf_i+0x160>
 800833c:	3501      	adds	r5, #1
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	9903      	ldr	r1, [sp, #12]
 8008342:	1a5b      	subs	r3, r3, r1
 8008344:	42ab      	cmp	r3, r5
 8008346:	dcf2      	bgt.n	800832e <_printf_i+0x216>
 8008348:	e7eb      	b.n	8008322 <_printf_i+0x20a>
 800834a:	2500      	movs	r5, #0
 800834c:	f104 0619 	add.w	r6, r4, #25
 8008350:	e7f5      	b.n	800833e <_printf_i+0x226>
 8008352:	bf00      	nop
 8008354:	0800bf6b 	.word	0x0800bf6b
 8008358:	0800bf7c 	.word	0x0800bf7c

0800835c <_scanf_float>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	b087      	sub	sp, #28
 8008362:	4617      	mov	r7, r2
 8008364:	9303      	str	r3, [sp, #12]
 8008366:	688b      	ldr	r3, [r1, #8]
 8008368:	1e5a      	subs	r2, r3, #1
 800836a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800836e:	bf83      	ittte	hi
 8008370:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008374:	195b      	addhi	r3, r3, r5
 8008376:	9302      	strhi	r3, [sp, #8]
 8008378:	2300      	movls	r3, #0
 800837a:	bf86      	itte	hi
 800837c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008380:	608b      	strhi	r3, [r1, #8]
 8008382:	9302      	strls	r3, [sp, #8]
 8008384:	680b      	ldr	r3, [r1, #0]
 8008386:	468b      	mov	fp, r1
 8008388:	2500      	movs	r5, #0
 800838a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800838e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008392:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008396:	4680      	mov	r8, r0
 8008398:	460c      	mov	r4, r1
 800839a:	465e      	mov	r6, fp
 800839c:	46aa      	mov	sl, r5
 800839e:	46a9      	mov	r9, r5
 80083a0:	9501      	str	r5, [sp, #4]
 80083a2:	68a2      	ldr	r2, [r4, #8]
 80083a4:	b152      	cbz	r2, 80083bc <_scanf_float+0x60>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b4e      	cmp	r3, #78	; 0x4e
 80083ac:	d864      	bhi.n	8008478 <_scanf_float+0x11c>
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	d83c      	bhi.n	800842c <_scanf_float+0xd0>
 80083b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80083b6:	b2c8      	uxtb	r0, r1
 80083b8:	280e      	cmp	r0, #14
 80083ba:	d93a      	bls.n	8008432 <_scanf_float+0xd6>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	d003      	beq.n	80083ca <_scanf_float+0x6e>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ce:	f1ba 0f01 	cmp.w	sl, #1
 80083d2:	f200 8113 	bhi.w	80085fc <_scanf_float+0x2a0>
 80083d6:	455e      	cmp	r6, fp
 80083d8:	f200 8105 	bhi.w	80085e6 <_scanf_float+0x28a>
 80083dc:	2501      	movs	r5, #1
 80083de:	4628      	mov	r0, r5
 80083e0:	b007      	add	sp, #28
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80083ea:	2a0d      	cmp	r2, #13
 80083ec:	d8e6      	bhi.n	80083bc <_scanf_float+0x60>
 80083ee:	a101      	add	r1, pc, #4	; (adr r1, 80083f4 <_scanf_float+0x98>)
 80083f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083f4:	08008533 	.word	0x08008533
 80083f8:	080083bd 	.word	0x080083bd
 80083fc:	080083bd 	.word	0x080083bd
 8008400:	080083bd 	.word	0x080083bd
 8008404:	08008593 	.word	0x08008593
 8008408:	0800856b 	.word	0x0800856b
 800840c:	080083bd 	.word	0x080083bd
 8008410:	080083bd 	.word	0x080083bd
 8008414:	08008541 	.word	0x08008541
 8008418:	080083bd 	.word	0x080083bd
 800841c:	080083bd 	.word	0x080083bd
 8008420:	080083bd 	.word	0x080083bd
 8008424:	080083bd 	.word	0x080083bd
 8008428:	080084f9 	.word	0x080084f9
 800842c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008430:	e7db      	b.n	80083ea <_scanf_float+0x8e>
 8008432:	290e      	cmp	r1, #14
 8008434:	d8c2      	bhi.n	80083bc <_scanf_float+0x60>
 8008436:	a001      	add	r0, pc, #4	; (adr r0, 800843c <_scanf_float+0xe0>)
 8008438:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800843c:	080084eb 	.word	0x080084eb
 8008440:	080083bd 	.word	0x080083bd
 8008444:	080084eb 	.word	0x080084eb
 8008448:	0800857f 	.word	0x0800857f
 800844c:	080083bd 	.word	0x080083bd
 8008450:	08008499 	.word	0x08008499
 8008454:	080084d5 	.word	0x080084d5
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084d5 	.word	0x080084d5
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	2b6e      	cmp	r3, #110	; 0x6e
 800847a:	d809      	bhi.n	8008490 <_scanf_float+0x134>
 800847c:	2b60      	cmp	r3, #96	; 0x60
 800847e:	d8b2      	bhi.n	80083e6 <_scanf_float+0x8a>
 8008480:	2b54      	cmp	r3, #84	; 0x54
 8008482:	d077      	beq.n	8008574 <_scanf_float+0x218>
 8008484:	2b59      	cmp	r3, #89	; 0x59
 8008486:	d199      	bne.n	80083bc <_scanf_float+0x60>
 8008488:	2d07      	cmp	r5, #7
 800848a:	d197      	bne.n	80083bc <_scanf_float+0x60>
 800848c:	2508      	movs	r5, #8
 800848e:	e029      	b.n	80084e4 <_scanf_float+0x188>
 8008490:	2b74      	cmp	r3, #116	; 0x74
 8008492:	d06f      	beq.n	8008574 <_scanf_float+0x218>
 8008494:	2b79      	cmp	r3, #121	; 0x79
 8008496:	e7f6      	b.n	8008486 <_scanf_float+0x12a>
 8008498:	6821      	ldr	r1, [r4, #0]
 800849a:	05c8      	lsls	r0, r1, #23
 800849c:	d51a      	bpl.n	80084d4 <_scanf_float+0x178>
 800849e:	9b02      	ldr	r3, [sp, #8]
 80084a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084a4:	6021      	str	r1, [r4, #0]
 80084a6:	f109 0901 	add.w	r9, r9, #1
 80084aa:	b11b      	cbz	r3, 80084b4 <_scanf_float+0x158>
 80084ac:	3b01      	subs	r3, #1
 80084ae:	3201      	adds	r2, #1
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	60a2      	str	r2, [r4, #8]
 80084b4:	68a3      	ldr	r3, [r4, #8]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	3301      	adds	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	607b      	str	r3, [r7, #4]
 80084c8:	f340 8084 	ble.w	80085d4 <_scanf_float+0x278>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	603b      	str	r3, [r7, #0]
 80084d2:	e766      	b.n	80083a2 <_scanf_float+0x46>
 80084d4:	eb1a 0f05 	cmn.w	sl, r5
 80084d8:	f47f af70 	bne.w	80083bc <_scanf_float+0x60>
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80084e2:	6022      	str	r2, [r4, #0]
 80084e4:	f806 3b01 	strb.w	r3, [r6], #1
 80084e8:	e7e4      	b.n	80084b4 <_scanf_float+0x158>
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	0610      	lsls	r0, r2, #24
 80084ee:	f57f af65 	bpl.w	80083bc <_scanf_float+0x60>
 80084f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f6:	e7f4      	b.n	80084e2 <_scanf_float+0x186>
 80084f8:	f1ba 0f00 	cmp.w	sl, #0
 80084fc:	d10e      	bne.n	800851c <_scanf_float+0x1c0>
 80084fe:	f1b9 0f00 	cmp.w	r9, #0
 8008502:	d10e      	bne.n	8008522 <_scanf_float+0x1c6>
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800850a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800850e:	d108      	bne.n	8008522 <_scanf_float+0x1c6>
 8008510:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	f04f 0a01 	mov.w	sl, #1
 800851a:	e7e3      	b.n	80084e4 <_scanf_float+0x188>
 800851c:	f1ba 0f02 	cmp.w	sl, #2
 8008520:	d055      	beq.n	80085ce <_scanf_float+0x272>
 8008522:	2d01      	cmp	r5, #1
 8008524:	d002      	beq.n	800852c <_scanf_float+0x1d0>
 8008526:	2d04      	cmp	r5, #4
 8008528:	f47f af48 	bne.w	80083bc <_scanf_float+0x60>
 800852c:	3501      	adds	r5, #1
 800852e:	b2ed      	uxtb	r5, r5
 8008530:	e7d8      	b.n	80084e4 <_scanf_float+0x188>
 8008532:	f1ba 0f01 	cmp.w	sl, #1
 8008536:	f47f af41 	bne.w	80083bc <_scanf_float+0x60>
 800853a:	f04f 0a02 	mov.w	sl, #2
 800853e:	e7d1      	b.n	80084e4 <_scanf_float+0x188>
 8008540:	b97d      	cbnz	r5, 8008562 <_scanf_float+0x206>
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	f47f af3c 	bne.w	80083c2 <_scanf_float+0x66>
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008550:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008554:	f47f af39 	bne.w	80083ca <_scanf_float+0x6e>
 8008558:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	2501      	movs	r5, #1
 8008560:	e7c0      	b.n	80084e4 <_scanf_float+0x188>
 8008562:	2d03      	cmp	r5, #3
 8008564:	d0e2      	beq.n	800852c <_scanf_float+0x1d0>
 8008566:	2d05      	cmp	r5, #5
 8008568:	e7de      	b.n	8008528 <_scanf_float+0x1cc>
 800856a:	2d02      	cmp	r5, #2
 800856c:	f47f af26 	bne.w	80083bc <_scanf_float+0x60>
 8008570:	2503      	movs	r5, #3
 8008572:	e7b7      	b.n	80084e4 <_scanf_float+0x188>
 8008574:	2d06      	cmp	r5, #6
 8008576:	f47f af21 	bne.w	80083bc <_scanf_float+0x60>
 800857a:	2507      	movs	r5, #7
 800857c:	e7b2      	b.n	80084e4 <_scanf_float+0x188>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	0591      	lsls	r1, r2, #22
 8008582:	f57f af1b 	bpl.w	80083bc <_scanf_float+0x60>
 8008586:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008590:	e7a8      	b.n	80084e4 <_scanf_float+0x188>
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008598:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800859c:	d006      	beq.n	80085ac <_scanf_float+0x250>
 800859e:	0550      	lsls	r0, r2, #21
 80085a0:	f57f af0c 	bpl.w	80083bc <_scanf_float+0x60>
 80085a4:	f1b9 0f00 	cmp.w	r9, #0
 80085a8:	f43f af0f 	beq.w	80083ca <_scanf_float+0x6e>
 80085ac:	0591      	lsls	r1, r2, #22
 80085ae:	bf58      	it	pl
 80085b0:	9901      	ldrpl	r1, [sp, #4]
 80085b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085b6:	bf58      	it	pl
 80085b8:	eba9 0101 	subpl.w	r1, r9, r1
 80085bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80085c0:	bf58      	it	pl
 80085c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085c6:	6022      	str	r2, [r4, #0]
 80085c8:	f04f 0900 	mov.w	r9, #0
 80085cc:	e78a      	b.n	80084e4 <_scanf_float+0x188>
 80085ce:	f04f 0a03 	mov.w	sl, #3
 80085d2:	e787      	b.n	80084e4 <_scanf_float+0x188>
 80085d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085d8:	4639      	mov	r1, r7
 80085da:	4640      	mov	r0, r8
 80085dc:	4798      	blx	r3
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f aedf 	beq.w	80083a2 <_scanf_float+0x46>
 80085e4:	e6ea      	b.n	80083bc <_scanf_float+0x60>
 80085e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ee:	463a      	mov	r2, r7
 80085f0:	4640      	mov	r0, r8
 80085f2:	4798      	blx	r3
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	6123      	str	r3, [r4, #16]
 80085fa:	e6ec      	b.n	80083d6 <_scanf_float+0x7a>
 80085fc:	1e6b      	subs	r3, r5, #1
 80085fe:	2b06      	cmp	r3, #6
 8008600:	d825      	bhi.n	800864e <_scanf_float+0x2f2>
 8008602:	2d02      	cmp	r5, #2
 8008604:	d836      	bhi.n	8008674 <_scanf_float+0x318>
 8008606:	455e      	cmp	r6, fp
 8008608:	f67f aee8 	bls.w	80083dc <_scanf_float+0x80>
 800860c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008610:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008614:	463a      	mov	r2, r7
 8008616:	4640      	mov	r0, r8
 8008618:	4798      	blx	r3
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	e7f1      	b.n	8008606 <_scanf_float+0x2aa>
 8008622:	9802      	ldr	r0, [sp, #8]
 8008624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008628:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	463a      	mov	r2, r7
 8008630:	4640      	mov	r0, r8
 8008632:	4798      	blx	r3
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	3b01      	subs	r3, #1
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863e:	fa5f fa8a 	uxtb.w	sl, sl
 8008642:	f1ba 0f02 	cmp.w	sl, #2
 8008646:	d1ec      	bne.n	8008622 <_scanf_float+0x2c6>
 8008648:	3d03      	subs	r5, #3
 800864a:	b2ed      	uxtb	r5, r5
 800864c:	1b76      	subs	r6, r6, r5
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	05da      	lsls	r2, r3, #23
 8008652:	d52f      	bpl.n	80086b4 <_scanf_float+0x358>
 8008654:	055b      	lsls	r3, r3, #21
 8008656:	d510      	bpl.n	800867a <_scanf_float+0x31e>
 8008658:	455e      	cmp	r6, fp
 800865a:	f67f aebf 	bls.w	80083dc <_scanf_float+0x80>
 800865e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008662:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008666:	463a      	mov	r2, r7
 8008668:	4640      	mov	r0, r8
 800866a:	4798      	blx	r3
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	3b01      	subs	r3, #1
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	e7f1      	b.n	8008658 <_scanf_float+0x2fc>
 8008674:	46aa      	mov	sl, r5
 8008676:	9602      	str	r6, [sp, #8]
 8008678:	e7df      	b.n	800863a <_scanf_float+0x2de>
 800867a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	2965      	cmp	r1, #101	; 0x65
 8008682:	f103 33ff 	add.w	r3, r3, #4294967295
 8008686:	f106 35ff 	add.w	r5, r6, #4294967295
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	d00c      	beq.n	80086a8 <_scanf_float+0x34c>
 800868e:	2945      	cmp	r1, #69	; 0x45
 8008690:	d00a      	beq.n	80086a8 <_scanf_float+0x34c>
 8008692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008696:	463a      	mov	r2, r7
 8008698:	4640      	mov	r0, r8
 800869a:	4798      	blx	r3
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	1eb5      	subs	r5, r6, #2
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ac:	463a      	mov	r2, r7
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	462e      	mov	r6, r5
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	f015 0510 	ands.w	r5, r5, #16
 80086ba:	d158      	bne.n	800876e <_scanf_float+0x412>
 80086bc:	7035      	strb	r5, [r6, #0]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c8:	d11c      	bne.n	8008704 <_scanf_float+0x3a8>
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	454b      	cmp	r3, r9
 80086ce:	eba3 0209 	sub.w	r2, r3, r9
 80086d2:	d124      	bne.n	800871e <_scanf_float+0x3c2>
 80086d4:	2200      	movs	r2, #0
 80086d6:	4659      	mov	r1, fp
 80086d8:	4640      	mov	r0, r8
 80086da:	f7ff f939 	bl	8007950 <_strtod_r>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	6821      	ldr	r1, [r4, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f011 0f02 	tst.w	r1, #2
 80086e8:	ec57 6b10 	vmov	r6, r7, d0
 80086ec:	f103 0204 	add.w	r2, r3, #4
 80086f0:	d020      	beq.n	8008734 <_scanf_float+0x3d8>
 80086f2:	9903      	ldr	r1, [sp, #12]
 80086f4:	600a      	str	r2, [r1, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	e9c3 6700 	strd	r6, r7, [r3]
 80086fc:	68e3      	ldr	r3, [r4, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	60e3      	str	r3, [r4, #12]
 8008702:	e66c      	b.n	80083de <_scanf_float+0x82>
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0e4      	beq.n	80086d4 <_scanf_float+0x378>
 800870a:	9905      	ldr	r1, [sp, #20]
 800870c:	230a      	movs	r3, #10
 800870e:	462a      	mov	r2, r5
 8008710:	3101      	adds	r1, #1
 8008712:	4640      	mov	r0, r8
 8008714:	f7ff f9b0 	bl	8007a78 <_strtol_r>
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	9e05      	ldr	r6, [sp, #20]
 800871c:	1ac2      	subs	r2, r0, r3
 800871e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008722:	429e      	cmp	r6, r3
 8008724:	bf28      	it	cs
 8008726:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800872a:	4912      	ldr	r1, [pc, #72]	; (8008774 <_scanf_float+0x418>)
 800872c:	4630      	mov	r0, r6
 800872e:	f000 f955 	bl	80089dc <siprintf>
 8008732:	e7cf      	b.n	80086d4 <_scanf_float+0x378>
 8008734:	f011 0f04 	tst.w	r1, #4
 8008738:	9903      	ldr	r1, [sp, #12]
 800873a:	600a      	str	r2, [r1, #0]
 800873c:	d1db      	bne.n	80086f6 <_scanf_float+0x39a>
 800873e:	f8d3 8000 	ldr.w	r8, [r3]
 8008742:	ee10 2a10 	vmov	r2, s0
 8008746:	ee10 0a10 	vmov	r0, s0
 800874a:	463b      	mov	r3, r7
 800874c:	4639      	mov	r1, r7
 800874e:	f7f8 f9ed 	bl	8000b2c <__aeabi_dcmpun>
 8008752:	b128      	cbz	r0, 8008760 <_scanf_float+0x404>
 8008754:	4808      	ldr	r0, [pc, #32]	; (8008778 <_scanf_float+0x41c>)
 8008756:	f000 fb7b 	bl	8008e50 <nanf>
 800875a:	ed88 0a00 	vstr	s0, [r8]
 800875e:	e7cd      	b.n	80086fc <_scanf_float+0x3a0>
 8008760:	4630      	mov	r0, r6
 8008762:	4639      	mov	r1, r7
 8008764:	f7f8 fa40 	bl	8000be8 <__aeabi_d2f>
 8008768:	f8c8 0000 	str.w	r0, [r8]
 800876c:	e7c6      	b.n	80086fc <_scanf_float+0x3a0>
 800876e:	2500      	movs	r5, #0
 8008770:	e635      	b.n	80083de <_scanf_float+0x82>
 8008772:	bf00      	nop
 8008774:	0800bf8d 	.word	0x0800bf8d
 8008778:	0800c046 	.word	0x0800c046

0800877c <std>:
 800877c:	2300      	movs	r3, #0
 800877e:	b510      	push	{r4, lr}
 8008780:	4604      	mov	r4, r0
 8008782:	e9c0 3300 	strd	r3, r3, [r0]
 8008786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878a:	6083      	str	r3, [r0, #8]
 800878c:	8181      	strh	r1, [r0, #12]
 800878e:	6643      	str	r3, [r0, #100]	; 0x64
 8008790:	81c2      	strh	r2, [r0, #14]
 8008792:	6183      	str	r3, [r0, #24]
 8008794:	4619      	mov	r1, r3
 8008796:	2208      	movs	r2, #8
 8008798:	305c      	adds	r0, #92	; 0x5c
 800879a:	f000 fa17 	bl	8008bcc <memset>
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <std+0x58>)
 80087a0:	6263      	str	r3, [r4, #36]	; 0x24
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <std+0x5c>)
 80087a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <std+0x60>)
 80087a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087aa:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <std+0x64>)
 80087ac:	6323      	str	r3, [r4, #48]	; 0x30
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <std+0x68>)
 80087b0:	6224      	str	r4, [r4, #32]
 80087b2:	429c      	cmp	r4, r3
 80087b4:	d006      	beq.n	80087c4 <std+0x48>
 80087b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80087ba:	4294      	cmp	r4, r2
 80087bc:	d002      	beq.n	80087c4 <std+0x48>
 80087be:	33d0      	adds	r3, #208	; 0xd0
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d105      	bne.n	80087d0 <std+0x54>
 80087c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f000 bb1e 	b.w	8008e0c <__retarget_lock_init_recursive>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	08008a1d 	.word	0x08008a1d
 80087d8:	08008a3f 	.word	0x08008a3f
 80087dc:	08008a77 	.word	0x08008a77
 80087e0:	08008a9b 	.word	0x08008a9b
 80087e4:	20002ac0 	.word	0x20002ac0

080087e8 <stdio_exit_handler>:
 80087e8:	4a02      	ldr	r2, [pc, #8]	; (80087f4 <stdio_exit_handler+0xc>)
 80087ea:	4903      	ldr	r1, [pc, #12]	; (80087f8 <stdio_exit_handler+0x10>)
 80087ec:	4803      	ldr	r0, [pc, #12]	; (80087fc <stdio_exit_handler+0x14>)
 80087ee:	f000 b869 	b.w	80088c4 <_fwalk_sglue>
 80087f2:	bf00      	nop
 80087f4:	20000010 	.word	0x20000010
 80087f8:	0800b419 	.word	0x0800b419
 80087fc:	20000188 	.word	0x20000188

08008800 <cleanup_stdio>:
 8008800:	6841      	ldr	r1, [r0, #4]
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <cleanup_stdio+0x34>)
 8008804:	4299      	cmp	r1, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	d001      	beq.n	8008810 <cleanup_stdio+0x10>
 800880c:	f002 fe04 	bl	800b418 <_fflush_r>
 8008810:	68a1      	ldr	r1, [r4, #8]
 8008812:	4b09      	ldr	r3, [pc, #36]	; (8008838 <cleanup_stdio+0x38>)
 8008814:	4299      	cmp	r1, r3
 8008816:	d002      	beq.n	800881e <cleanup_stdio+0x1e>
 8008818:	4620      	mov	r0, r4
 800881a:	f002 fdfd 	bl	800b418 <_fflush_r>
 800881e:	68e1      	ldr	r1, [r4, #12]
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <cleanup_stdio+0x3c>)
 8008822:	4299      	cmp	r1, r3
 8008824:	d004      	beq.n	8008830 <cleanup_stdio+0x30>
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882c:	f002 bdf4 	b.w	800b418 <_fflush_r>
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	20002ac0 	.word	0x20002ac0
 8008838:	20002b28 	.word	0x20002b28
 800883c:	20002b90 	.word	0x20002b90

08008840 <global_stdio_init.part.0>:
 8008840:	b510      	push	{r4, lr}
 8008842:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <global_stdio_init.part.0+0x30>)
 8008844:	4c0b      	ldr	r4, [pc, #44]	; (8008874 <global_stdio_init.part.0+0x34>)
 8008846:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <global_stdio_init.part.0+0x38>)
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	4620      	mov	r0, r4
 800884c:	2200      	movs	r2, #0
 800884e:	2104      	movs	r1, #4
 8008850:	f7ff ff94 	bl	800877c <std>
 8008854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008858:	2201      	movs	r2, #1
 800885a:	2109      	movs	r1, #9
 800885c:	f7ff ff8e 	bl	800877c <std>
 8008860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008864:	2202      	movs	r2, #2
 8008866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886a:	2112      	movs	r1, #18
 800886c:	f7ff bf86 	b.w	800877c <std>
 8008870:	20002bf8 	.word	0x20002bf8
 8008874:	20002ac0 	.word	0x20002ac0
 8008878:	080087e9 	.word	0x080087e9

0800887c <__sfp_lock_acquire>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__sfp_lock_acquire+0x8>)
 800887e:	f000 bac6 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	20002c01 	.word	0x20002c01

08008888 <__sfp_lock_release>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_release+0x8>)
 800888a:	f000 bac1 	b.w	8008e10 <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	20002c01 	.word	0x20002c01

08008894 <__sinit>:
 8008894:	b510      	push	{r4, lr}
 8008896:	4604      	mov	r4, r0
 8008898:	f7ff fff0 	bl	800887c <__sfp_lock_acquire>
 800889c:	6a23      	ldr	r3, [r4, #32]
 800889e:	b11b      	cbz	r3, 80088a8 <__sinit+0x14>
 80088a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a4:	f7ff bff0 	b.w	8008888 <__sfp_lock_release>
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <__sinit+0x28>)
 80088aa:	6223      	str	r3, [r4, #32]
 80088ac:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <__sinit+0x2c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f5      	bne.n	80088a0 <__sinit+0xc>
 80088b4:	f7ff ffc4 	bl	8008840 <global_stdio_init.part.0>
 80088b8:	e7f2      	b.n	80088a0 <__sinit+0xc>
 80088ba:	bf00      	nop
 80088bc:	08008801 	.word	0x08008801
 80088c0:	20002bf8 	.word	0x20002bf8

080088c4 <_fwalk_sglue>:
 80088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4607      	mov	r7, r0
 80088ca:	4688      	mov	r8, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	2600      	movs	r6, #0
 80088d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d4:	f1b9 0901 	subs.w	r9, r9, #1
 80088d8:	d505      	bpl.n	80088e6 <_fwalk_sglue+0x22>
 80088da:	6824      	ldr	r4, [r4, #0]
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d1f7      	bne.n	80088d0 <_fwalk_sglue+0xc>
 80088e0:	4630      	mov	r0, r6
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d907      	bls.n	80088fc <_fwalk_sglue+0x38>
 80088ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f0:	3301      	adds	r3, #1
 80088f2:	d003      	beq.n	80088fc <_fwalk_sglue+0x38>
 80088f4:	4629      	mov	r1, r5
 80088f6:	4638      	mov	r0, r7
 80088f8:	47c0      	blx	r8
 80088fa:	4306      	orrs	r6, r0
 80088fc:	3568      	adds	r5, #104	; 0x68
 80088fe:	e7e9      	b.n	80088d4 <_fwalk_sglue+0x10>

08008900 <iprintf>:
 8008900:	b40f      	push	{r0, r1, r2, r3}
 8008902:	b507      	push	{r0, r1, r2, lr}
 8008904:	4906      	ldr	r1, [pc, #24]	; (8008920 <iprintf+0x20>)
 8008906:	ab04      	add	r3, sp, #16
 8008908:	6808      	ldr	r0, [r1, #0]
 800890a:	f853 2b04 	ldr.w	r2, [r3], #4
 800890e:	6881      	ldr	r1, [r0, #8]
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	f002 fbe1 	bl	800b0d8 <_vfiprintf_r>
 8008916:	b003      	add	sp, #12
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b004      	add	sp, #16
 800891e:	4770      	bx	lr
 8008920:	200001d4 	.word	0x200001d4

08008924 <_puts_r>:
 8008924:	6a03      	ldr	r3, [r0, #32]
 8008926:	b570      	push	{r4, r5, r6, lr}
 8008928:	6884      	ldr	r4, [r0, #8]
 800892a:	4605      	mov	r5, r0
 800892c:	460e      	mov	r6, r1
 800892e:	b90b      	cbnz	r3, 8008934 <_puts_r+0x10>
 8008930:	f7ff ffb0 	bl	8008894 <__sinit>
 8008934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d405      	bmi.n	8008946 <_puts_r+0x22>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	0598      	lsls	r0, r3, #22
 800893e:	d402      	bmi.n	8008946 <_puts_r+0x22>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f000 fa64 	bl	8008e0e <__retarget_lock_acquire_recursive>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	0719      	lsls	r1, r3, #28
 800894a:	d513      	bpl.n	8008974 <_puts_r+0x50>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b18b      	cbz	r3, 8008974 <_puts_r+0x50>
 8008950:	3e01      	subs	r6, #1
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008958:	3b01      	subs	r3, #1
 800895a:	60a3      	str	r3, [r4, #8]
 800895c:	b9e9      	cbnz	r1, 800899a <_puts_r+0x76>
 800895e:	2b00      	cmp	r3, #0
 8008960:	da2e      	bge.n	80089c0 <_puts_r+0x9c>
 8008962:	4622      	mov	r2, r4
 8008964:	210a      	movs	r1, #10
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f89b 	bl	8008aa2 <__swbuf_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d007      	beq.n	8008980 <_puts_r+0x5c>
 8008970:	250a      	movs	r5, #10
 8008972:	e007      	b.n	8008984 <_puts_r+0x60>
 8008974:	4621      	mov	r1, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f8d0 	bl	8008b1c <__swsetup_r>
 800897c:	2800      	cmp	r0, #0
 800897e:	d0e7      	beq.n	8008950 <_puts_r+0x2c>
 8008980:	f04f 35ff 	mov.w	r5, #4294967295
 8008984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008986:	07da      	lsls	r2, r3, #31
 8008988:	d405      	bmi.n	8008996 <_puts_r+0x72>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	059b      	lsls	r3, r3, #22
 800898e:	d402      	bmi.n	8008996 <_puts_r+0x72>
 8008990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008992:	f000 fa3d 	bl	8008e10 <__retarget_lock_release_recursive>
 8008996:	4628      	mov	r0, r5
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	2b00      	cmp	r3, #0
 800899c:	da04      	bge.n	80089a8 <_puts_r+0x84>
 800899e:	69a2      	ldr	r2, [r4, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dc06      	bgt.n	80089b2 <_puts_r+0x8e>
 80089a4:	290a      	cmp	r1, #10
 80089a6:	d004      	beq.n	80089b2 <_puts_r+0x8e>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	7019      	strb	r1, [r3, #0]
 80089b0:	e7cf      	b.n	8008952 <_puts_r+0x2e>
 80089b2:	4622      	mov	r2, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 f874 	bl	8008aa2 <__swbuf_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1c9      	bne.n	8008952 <_puts_r+0x2e>
 80089be:	e7df      	b.n	8008980 <_puts_r+0x5c>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	250a      	movs	r5, #10
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	701d      	strb	r5, [r3, #0]
 80089ca:	e7db      	b.n	8008984 <_puts_r+0x60>

080089cc <puts>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <puts+0xc>)
 80089ce:	4601      	mov	r1, r0
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f7ff bfa7 	b.w	8008924 <_puts_r>
 80089d6:	bf00      	nop
 80089d8:	200001d4 	.word	0x200001d4

080089dc <siprintf>:
 80089dc:	b40e      	push	{r1, r2, r3}
 80089de:	b500      	push	{lr}
 80089e0:	b09c      	sub	sp, #112	; 0x70
 80089e2:	ab1d      	add	r3, sp, #116	; 0x74
 80089e4:	9002      	str	r0, [sp, #8]
 80089e6:	9006      	str	r0, [sp, #24]
 80089e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089ec:	4809      	ldr	r0, [pc, #36]	; (8008a14 <siprintf+0x38>)
 80089ee:	9107      	str	r1, [sp, #28]
 80089f0:	9104      	str	r1, [sp, #16]
 80089f2:	4909      	ldr	r1, [pc, #36]	; (8008a18 <siprintf+0x3c>)
 80089f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f8:	9105      	str	r1, [sp, #20]
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	a902      	add	r1, sp, #8
 8008a00:	f002 fa42 	bl	800ae88 <_svfiprintf_r>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	b01c      	add	sp, #112	; 0x70
 8008a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a10:	b003      	add	sp, #12
 8008a12:	4770      	bx	lr
 8008a14:	200001d4 	.word	0x200001d4
 8008a18:	ffff0208 	.word	0xffff0208

08008a1c <__sread>:
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	460c      	mov	r4, r1
 8008a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a24:	f000 f9a4 	bl	8008d70 <_read_r>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	bfab      	itete	ge
 8008a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a30:	181b      	addge	r3, r3, r0
 8008a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a36:	bfac      	ite	ge
 8008a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a3a:	81a3      	strhlt	r3, [r4, #12]
 8008a3c:	bd10      	pop	{r4, pc}

08008a3e <__swrite>:
 8008a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a42:	461f      	mov	r7, r3
 8008a44:	898b      	ldrh	r3, [r1, #12]
 8008a46:	05db      	lsls	r3, r3, #23
 8008a48:	4605      	mov	r5, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	d505      	bpl.n	8008a5c <__swrite+0x1e>
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	2302      	movs	r3, #2
 8008a56:	2200      	movs	r2, #0
 8008a58:	f000 f978 	bl	8008d4c <_lseek_r>
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	f000 b98f 	b.w	8008d94 <_write_r>

08008a76 <__sseek>:
 8008a76:	b510      	push	{r4, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7e:	f000 f965 	bl	8008d4c <_lseek_r>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	bf15      	itete	ne
 8008a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a92:	81a3      	strheq	r3, [r4, #12]
 8008a94:	bf18      	it	ne
 8008a96:	81a3      	strhne	r3, [r4, #12]
 8008a98:	bd10      	pop	{r4, pc}

08008a9a <__sclose>:
 8008a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9e:	f000 b945 	b.w	8008d2c <_close_r>

08008aa2 <__swbuf_r>:
 8008aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	4614      	mov	r4, r2
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	b118      	cbz	r0, 8008ab4 <__swbuf_r+0x12>
 8008aac:	6a03      	ldr	r3, [r0, #32]
 8008aae:	b90b      	cbnz	r3, 8008ab4 <__swbuf_r+0x12>
 8008ab0:	f7ff fef0 	bl	8008894 <__sinit>
 8008ab4:	69a3      	ldr	r3, [r4, #24]
 8008ab6:	60a3      	str	r3, [r4, #8]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	071a      	lsls	r2, r3, #28
 8008abc:	d525      	bpl.n	8008b0a <__swbuf_r+0x68>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	b31b      	cbz	r3, 8008b0a <__swbuf_r+0x68>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	1a98      	subs	r0, r3, r2
 8008ac8:	6963      	ldr	r3, [r4, #20]
 8008aca:	b2f6      	uxtb	r6, r6
 8008acc:	4283      	cmp	r3, r0
 8008ace:	4637      	mov	r7, r6
 8008ad0:	dc04      	bgt.n	8008adc <__swbuf_r+0x3a>
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f002 fc9f 	bl	800b418 <_fflush_r>
 8008ada:	b9e0      	cbnz	r0, 8008b16 <__swbuf_r+0x74>
 8008adc:	68a3      	ldr	r3, [r4, #8]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	6022      	str	r2, [r4, #0]
 8008ae8:	701e      	strb	r6, [r3, #0]
 8008aea:	6962      	ldr	r2, [r4, #20]
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d004      	beq.n	8008afc <__swbuf_r+0x5a>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	07db      	lsls	r3, r3, #31
 8008af6:	d506      	bpl.n	8008b06 <__swbuf_r+0x64>
 8008af8:	2e0a      	cmp	r6, #10
 8008afa:	d104      	bne.n	8008b06 <__swbuf_r+0x64>
 8008afc:	4621      	mov	r1, r4
 8008afe:	4628      	mov	r0, r5
 8008b00:	f002 fc8a 	bl	800b418 <_fflush_r>
 8008b04:	b938      	cbnz	r0, 8008b16 <__swbuf_r+0x74>
 8008b06:	4638      	mov	r0, r7
 8008b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f805 	bl	8008b1c <__swsetup_r>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0d5      	beq.n	8008ac2 <__swbuf_r+0x20>
 8008b16:	f04f 37ff 	mov.w	r7, #4294967295
 8008b1a:	e7f4      	b.n	8008b06 <__swbuf_r+0x64>

08008b1c <__swsetup_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4b2a      	ldr	r3, [pc, #168]	; (8008bc8 <__swsetup_r+0xac>)
 8008b20:	4605      	mov	r5, r0
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	460c      	mov	r4, r1
 8008b26:	b118      	cbz	r0, 8008b30 <__swsetup_r+0x14>
 8008b28:	6a03      	ldr	r3, [r0, #32]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <__swsetup_r+0x14>
 8008b2c:	f7ff feb2 	bl	8008894 <__sinit>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b36:	0718      	lsls	r0, r3, #28
 8008b38:	d422      	bmi.n	8008b80 <__swsetup_r+0x64>
 8008b3a:	06d9      	lsls	r1, r3, #27
 8008b3c:	d407      	bmi.n	8008b4e <__swsetup_r+0x32>
 8008b3e:	2309      	movs	r3, #9
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e034      	b.n	8008bb8 <__swsetup_r+0x9c>
 8008b4e:	0758      	lsls	r0, r3, #29
 8008b50:	d512      	bpl.n	8008b78 <__swsetup_r+0x5c>
 8008b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b54:	b141      	cbz	r1, 8008b68 <__swsetup_r+0x4c>
 8008b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d002      	beq.n	8008b64 <__swsetup_r+0x48>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f001 f814 	bl	8009b8c <_free_r>
 8008b64:	2300      	movs	r3, #0
 8008b66:	6363      	str	r3, [r4, #52]	; 0x34
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	2300      	movs	r3, #0
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	f043 0308 	orr.w	r3, r3, #8
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	b94b      	cbnz	r3, 8008b98 <__swsetup_r+0x7c>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8e:	d003      	beq.n	8008b98 <__swsetup_r+0x7c>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4628      	mov	r0, r5
 8008b94:	f002 fca0 	bl	800b4d8 <__smakebuf_r>
 8008b98:	89a0      	ldrh	r0, [r4, #12]
 8008b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9e:	f010 0301 	ands.w	r3, r0, #1
 8008ba2:	d00a      	beq.n	8008bba <__swsetup_r+0x9e>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60a3      	str	r3, [r4, #8]
 8008ba8:	6963      	ldr	r3, [r4, #20]
 8008baa:	425b      	negs	r3, r3
 8008bac:	61a3      	str	r3, [r4, #24]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	b943      	cbnz	r3, 8008bc4 <__swsetup_r+0xa8>
 8008bb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bb6:	d1c4      	bne.n	8008b42 <__swsetup_r+0x26>
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
 8008bba:	0781      	lsls	r1, r0, #30
 8008bbc:	bf58      	it	pl
 8008bbe:	6963      	ldrpl	r3, [r4, #20]
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	e7f4      	b.n	8008bae <__swsetup_r+0x92>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e7f7      	b.n	8008bb8 <__swsetup_r+0x9c>
 8008bc8:	200001d4 	.word	0x200001d4

08008bcc <memset>:
 8008bcc:	4402      	add	r2, r0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d100      	bne.n	8008bd6 <memset+0xa>
 8008bd4:	4770      	bx	lr
 8008bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bda:	e7f9      	b.n	8008bd0 <memset+0x4>

08008bdc <strchr>:
 8008bdc:	b2c9      	uxtb	r1, r1
 8008bde:	4603      	mov	r3, r0
 8008be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be4:	b11a      	cbz	r2, 8008bee <strchr+0x12>
 8008be6:	428a      	cmp	r2, r1
 8008be8:	d1f9      	bne.n	8008bde <strchr+0x2>
 8008bea:	4618      	mov	r0, r3
 8008bec:	4770      	bx	lr
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	bf18      	it	ne
 8008bf2:	2300      	movne	r3, #0
 8008bf4:	e7f9      	b.n	8008bea <strchr+0xe>

08008bf6 <strncmp>:
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	b16a      	cbz	r2, 8008c16 <strncmp+0x20>
 8008bfa:	3901      	subs	r1, #1
 8008bfc:	1884      	adds	r4, r0, r2
 8008bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d103      	bne.n	8008c12 <strncmp+0x1c>
 8008c0a:	42a0      	cmp	r0, r4
 8008c0c:	d001      	beq.n	8008c12 <strncmp+0x1c>
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d1f5      	bne.n	8008bfe <strncmp+0x8>
 8008c12:	1ad0      	subs	r0, r2, r3
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	4610      	mov	r0, r2
 8008c18:	e7fc      	b.n	8008c14 <strncmp+0x1e>

08008c1a <strncpy>:
 8008c1a:	b510      	push	{r4, lr}
 8008c1c:	3901      	subs	r1, #1
 8008c1e:	4603      	mov	r3, r0
 8008c20:	b132      	cbz	r2, 8008c30 <strncpy+0x16>
 8008c22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c26:	f803 4b01 	strb.w	r4, [r3], #1
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d1f7      	bne.n	8008c20 <strncpy+0x6>
 8008c30:	441a      	add	r2, r3
 8008c32:	2100      	movs	r1, #0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <strncpy+0x20>
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <strncpy+0x1a>

08008c40 <strtok>:
 8008c40:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <strtok+0x5c>)
 8008c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c44:	681e      	ldr	r6, [r3, #0]
 8008c46:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008c48:	4605      	mov	r5, r0
 8008c4a:	b9fc      	cbnz	r4, 8008c8c <strtok+0x4c>
 8008c4c:	2050      	movs	r0, #80	; 0x50
 8008c4e:	9101      	str	r1, [sp, #4]
 8008c50:	f001 fb40 	bl	800a2d4 <malloc>
 8008c54:	9901      	ldr	r1, [sp, #4]
 8008c56:	6470      	str	r0, [r6, #68]	; 0x44
 8008c58:	4602      	mov	r2, r0
 8008c5a:	b920      	cbnz	r0, 8008c66 <strtok+0x26>
 8008c5c:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <strtok+0x60>)
 8008c5e:	4811      	ldr	r0, [pc, #68]	; (8008ca4 <strtok+0x64>)
 8008c60:	215b      	movs	r1, #91	; 0x5b
 8008c62:	f000 f8fb 	bl	8008e5c <__assert_func>
 8008c66:	e9c0 4400 	strd	r4, r4, [r0]
 8008c6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008c6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008c76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008c7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008c7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008c82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008c86:	6184      	str	r4, [r0, #24]
 8008c88:	7704      	strb	r4, [r0, #28]
 8008c8a:	6244      	str	r4, [r0, #36]	; 0x24
 8008c8c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4628      	mov	r0, r5
 8008c92:	b002      	add	sp, #8
 8008c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c98:	f000 b806 	b.w	8008ca8 <__strtok_r>
 8008c9c:	200001d4 	.word	0x200001d4
 8008ca0:	0800bf92 	.word	0x0800bf92
 8008ca4:	0800bfa9 	.word	0x0800bfa9

08008ca8 <__strtok_r>:
 8008ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008caa:	b908      	cbnz	r0, 8008cb0 <__strtok_r+0x8>
 8008cac:	6810      	ldr	r0, [r2, #0]
 8008cae:	b188      	cbz	r0, 8008cd4 <__strtok_r+0x2c>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008cb8:	460f      	mov	r7, r1
 8008cba:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008cbe:	b91e      	cbnz	r6, 8008cc8 <__strtok_r+0x20>
 8008cc0:	b965      	cbnz	r5, 8008cdc <__strtok_r+0x34>
 8008cc2:	6015      	str	r5, [r2, #0]
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	e005      	b.n	8008cd4 <__strtok_r+0x2c>
 8008cc8:	42b5      	cmp	r5, r6
 8008cca:	d1f6      	bne.n	8008cba <__strtok_r+0x12>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f0      	bne.n	8008cb2 <__strtok_r+0xa>
 8008cd0:	6014      	str	r4, [r2, #0]
 8008cd2:	7003      	strb	r3, [r0, #0]
 8008cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd6:	461c      	mov	r4, r3
 8008cd8:	e00c      	b.n	8008cf4 <__strtok_r+0x4c>
 8008cda:	b915      	cbnz	r5, 8008ce2 <__strtok_r+0x3a>
 8008cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008ce6:	42ab      	cmp	r3, r5
 8008ce8:	d1f7      	bne.n	8008cda <__strtok_r+0x32>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f3      	beq.n	8008cd6 <__strtok_r+0x2e>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008cf4:	6014      	str	r4, [r2, #0]
 8008cf6:	e7ed      	b.n	8008cd4 <__strtok_r+0x2c>

08008cf8 <strstr>:
 8008cf8:	780a      	ldrb	r2, [r1, #0]
 8008cfa:	b570      	push	{r4, r5, r6, lr}
 8008cfc:	b96a      	cbnz	r2, 8008d1a <strstr+0x22>
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d109      	bne.n	8008d18 <strstr+0x20>
 8008d04:	460c      	mov	r4, r1
 8008d06:	4605      	mov	r5, r0
 8008d08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f6      	beq.n	8008cfe <strstr+0x6>
 8008d10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008d14:	429e      	cmp	r6, r3
 8008d16:	d0f7      	beq.n	8008d08 <strstr+0x10>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	7803      	ldrb	r3, [r0, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1ef      	bne.n	8008d00 <strstr+0x8>
 8008d20:	4618      	mov	r0, r3
 8008d22:	e7ec      	b.n	8008cfe <strstr+0x6>

08008d24 <_localeconv_r>:
 8008d24:	4800      	ldr	r0, [pc, #0]	; (8008d28 <_localeconv_r+0x4>)
 8008d26:	4770      	bx	lr
 8008d28:	2000010c 	.word	0x2000010c

08008d2c <_close_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_close_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f9 fbe3 	bl	8002502 <_close>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_close_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_close_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20002bfc 	.word	0x20002bfc

08008d4c <_lseek_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	; (8008d6c <_lseek_r+0x20>)
 8008d50:	4604      	mov	r4, r0
 8008d52:	4608      	mov	r0, r1
 8008d54:	4611      	mov	r1, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7f9 fbf8 	bl	8002550 <_lseek>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_lseek_r+0x1e>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_lseek_r+0x1e>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20002bfc 	.word	0x20002bfc

08008d70 <_read_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	; (8008d90 <_read_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f9 fba2 	bl	80024c8 <_read>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_read_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_read_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20002bfc 	.word	0x20002bfc

08008d94 <_write_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	; (8008db4 <_write_r+0x20>)
 8008d98:	4604      	mov	r4, r0
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7f8 ffc1 	bl	8001d2a <_write>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_write_r+0x1e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_write_r+0x1e>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	20002bfc 	.word	0x20002bfc

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	200001d4 	.word	0x200001d4

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	; (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f002 fc9e 	bl	800b718 <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	0800c290 	.word	0x0800c290
 8008e00:	0800c290 	.word	0x0800c290
 8008e04:	0800c290 	.word	0x0800c290
 8008e08:	0800c294 	.word	0x0800c294

08008e0c <__retarget_lock_init_recursive>:
 8008e0c:	4770      	bx	lr

08008e0e <__retarget_lock_acquire_recursive>:
 8008e0e:	4770      	bx	lr

08008e10 <__retarget_lock_release_recursive>:
 8008e10:	4770      	bx	lr

08008e12 <strcpy>:
 8008e12:	4603      	mov	r3, r0
 8008e14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e18:	f803 2b01 	strb.w	r2, [r3], #1
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	d1f9      	bne.n	8008e14 <strcpy+0x2>
 8008e20:	4770      	bx	lr

08008e22 <memcpy>:
 8008e22:	440a      	add	r2, r1
 8008e24:	4291      	cmp	r1, r2
 8008e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e2a:	d100      	bne.n	8008e2e <memcpy+0xc>
 8008e2c:	4770      	bx	lr
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e38:	4291      	cmp	r1, r2
 8008e3a:	d1f9      	bne.n	8008e30 <memcpy+0xe>
 8008e3c:	bd10      	pop	{r4, pc}
	...

08008e40 <nan>:
 8008e40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e48 <nan+0x8>
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	7ff80000 	.word	0x7ff80000

08008e50 <nanf>:
 8008e50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e58 <nanf+0x8>
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	7fc00000 	.word	0x7fc00000

08008e5c <__assert_func>:
 8008e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e5e:	4614      	mov	r4, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <__assert_func+0x2c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4605      	mov	r5, r0
 8008e68:	68d8      	ldr	r0, [r3, #12]
 8008e6a:	b14c      	cbz	r4, 8008e80 <__assert_func+0x24>
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <__assert_func+0x30>)
 8008e6e:	9100      	str	r1, [sp, #0]
 8008e70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e74:	4906      	ldr	r1, [pc, #24]	; (8008e90 <__assert_func+0x34>)
 8008e76:	462b      	mov	r3, r5
 8008e78:	f002 faf6 	bl	800b468 <fiprintf>
 8008e7c:	f002 fbb4 	bl	800b5e8 <abort>
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <__assert_func+0x38>)
 8008e82:	461c      	mov	r4, r3
 8008e84:	e7f3      	b.n	8008e6e <__assert_func+0x12>
 8008e86:	bf00      	nop
 8008e88:	200001d4 	.word	0x200001d4
 8008e8c:	0800c00b 	.word	0x0800c00b
 8008e90:	0800c018 	.word	0x0800c018
 8008e94:	0800c046 	.word	0x0800c046

08008e98 <quorem>:
 8008e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	6903      	ldr	r3, [r0, #16]
 8008e9e:	690c      	ldr	r4, [r1, #16]
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	db7e      	blt.n	8008fa4 <quorem+0x10c>
 8008ea6:	3c01      	subs	r4, #1
 8008ea8:	f101 0814 	add.w	r8, r1, #20
 8008eac:	f100 0514 	add.w	r5, r0, #20
 8008eb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ec6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eca:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ece:	d331      	bcc.n	8008f34 <quorem+0x9c>
 8008ed0:	f04f 0e00 	mov.w	lr, #0
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	46ac      	mov	ip, r5
 8008ed8:	46f2      	mov	sl, lr
 8008eda:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ede:	b293      	uxth	r3, r2
 8008ee0:	fb06 e303 	mla	r3, r6, r3, lr
 8008ee4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ee8:	0c1a      	lsrs	r2, r3, #16
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	ebaa 0303 	sub.w	r3, sl, r3
 8008ef0:	f8dc a000 	ldr.w	sl, [ip]
 8008ef4:	fa13 f38a 	uxtah	r3, r3, sl
 8008ef8:	fb06 220e 	mla	r2, r6, lr, r2
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f04:	b292      	uxth	r2, r2
 8008f06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f12:	4581      	cmp	r9, r0
 8008f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f18:	f84c 3b04 	str.w	r3, [ip], #4
 8008f1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f20:	d2db      	bcs.n	8008eda <quorem+0x42>
 8008f22:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f26:	b92b      	cbnz	r3, 8008f34 <quorem+0x9c>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	3b04      	subs	r3, #4
 8008f2c:	429d      	cmp	r5, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	d32c      	bcc.n	8008f8c <quorem+0xf4>
 8008f32:	613c      	str	r4, [r7, #16]
 8008f34:	4638      	mov	r0, r7
 8008f36:	f001 fd59 	bl	800a9ec <__mcmp>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	db22      	blt.n	8008f84 <quorem+0xec>
 8008f3e:	3601      	adds	r6, #1
 8008f40:	4629      	mov	r1, r5
 8008f42:	2000      	movs	r0, #0
 8008f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f48:	f8d1 c000 	ldr.w	ip, [r1]
 8008f4c:	b293      	uxth	r3, r2
 8008f4e:	1ac3      	subs	r3, r0, r3
 8008f50:	0c12      	lsrs	r2, r2, #16
 8008f52:	fa13 f38c 	uxtah	r3, r3, ip
 8008f56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f64:	45c1      	cmp	r9, r8
 8008f66:	f841 3b04 	str.w	r3, [r1], #4
 8008f6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f6e:	d2e9      	bcs.n	8008f44 <quorem+0xac>
 8008f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f78:	b922      	cbnz	r2, 8008f84 <quorem+0xec>
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	d30a      	bcc.n	8008f98 <quorem+0x100>
 8008f82:	613c      	str	r4, [r7, #16]
 8008f84:	4630      	mov	r0, r6
 8008f86:	b003      	add	sp, #12
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	3b04      	subs	r3, #4
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d1ce      	bne.n	8008f32 <quorem+0x9a>
 8008f94:	3c01      	subs	r4, #1
 8008f96:	e7c9      	b.n	8008f2c <quorem+0x94>
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d1f0      	bne.n	8008f82 <quorem+0xea>
 8008fa0:	3c01      	subs	r4, #1
 8008fa2:	e7eb      	b.n	8008f7c <quorem+0xe4>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7ee      	b.n	8008f86 <quorem+0xee>

08008fa8 <_dtoa_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	ed2d 8b04 	vpush	{d8-d9}
 8008fb0:	69c5      	ldr	r5, [r0, #28]
 8008fb2:	b093      	sub	sp, #76	; 0x4c
 8008fb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fb8:	ec57 6b10 	vmov	r6, r7, d0
 8008fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fc0:	9107      	str	r1, [sp, #28]
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8008fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8008fc8:	b975      	cbnz	r5, 8008fe8 <_dtoa_r+0x40>
 8008fca:	2010      	movs	r0, #16
 8008fcc:	f001 f982 	bl	800a2d4 <malloc>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	61e0      	str	r0, [r4, #28]
 8008fd4:	b920      	cbnz	r0, 8008fe0 <_dtoa_r+0x38>
 8008fd6:	4bae      	ldr	r3, [pc, #696]	; (8009290 <_dtoa_r+0x2e8>)
 8008fd8:	21ef      	movs	r1, #239	; 0xef
 8008fda:	48ae      	ldr	r0, [pc, #696]	; (8009294 <_dtoa_r+0x2ec>)
 8008fdc:	f7ff ff3e 	bl	8008e5c <__assert_func>
 8008fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fe4:	6005      	str	r5, [r0, #0]
 8008fe6:	60c5      	str	r5, [r0, #12]
 8008fe8:	69e3      	ldr	r3, [r4, #28]
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	b151      	cbz	r1, 8009004 <_dtoa_r+0x5c>
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	604a      	str	r2, [r1, #4]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4093      	lsls	r3, r2
 8008ff6:	608b      	str	r3, [r1, #8]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f001 fa71 	bl	800a4e0 <_Bfree>
 8008ffe:	69e3      	ldr	r3, [r4, #28]
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	1e3b      	subs	r3, r7, #0
 8009006:	bfbb      	ittet	lt
 8009008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800900c:	9303      	strlt	r3, [sp, #12]
 800900e:	2300      	movge	r3, #0
 8009010:	2201      	movlt	r2, #1
 8009012:	bfac      	ite	ge
 8009014:	f8c8 3000 	strge.w	r3, [r8]
 8009018:	f8c8 2000 	strlt.w	r2, [r8]
 800901c:	4b9e      	ldr	r3, [pc, #632]	; (8009298 <_dtoa_r+0x2f0>)
 800901e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009022:	ea33 0308 	bics.w	r3, r3, r8
 8009026:	d11b      	bne.n	8009060 <_dtoa_r+0xb8>
 8009028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800902a:	f242 730f 	movw	r3, #9999	; 0x270f
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009034:	4333      	orrs	r3, r6
 8009036:	f000 8593 	beq.w	8009b60 <_dtoa_r+0xbb8>
 800903a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800903c:	b963      	cbnz	r3, 8009058 <_dtoa_r+0xb0>
 800903e:	4b97      	ldr	r3, [pc, #604]	; (800929c <_dtoa_r+0x2f4>)
 8009040:	e027      	b.n	8009092 <_dtoa_r+0xea>
 8009042:	4b97      	ldr	r3, [pc, #604]	; (80092a0 <_dtoa_r+0x2f8>)
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	3308      	adds	r3, #8
 8009048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	9800      	ldr	r0, [sp, #0]
 800904e:	b013      	add	sp, #76	; 0x4c
 8009050:	ecbd 8b04 	vpop	{d8-d9}
 8009054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009058:	4b90      	ldr	r3, [pc, #576]	; (800929c <_dtoa_r+0x2f4>)
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	3303      	adds	r3, #3
 800905e:	e7f3      	b.n	8009048 <_dtoa_r+0xa0>
 8009060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	ec51 0b17 	vmov	r0, r1, d7
 800906a:	eeb0 8a47 	vmov.f32	s16, s14
 800906e:	eef0 8a67 	vmov.f32	s17, s15
 8009072:	2300      	movs	r3, #0
 8009074:	f7f7 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009078:	4681      	mov	r9, r0
 800907a:	b160      	cbz	r0, 8009096 <_dtoa_r+0xee>
 800907c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800907e:	2301      	movs	r3, #1
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8568 	beq.w	8009b5a <_dtoa_r+0xbb2>
 800908a:	4b86      	ldr	r3, [pc, #536]	; (80092a4 <_dtoa_r+0x2fc>)
 800908c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	3b01      	subs	r3, #1
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	e7da      	b.n	800904c <_dtoa_r+0xa4>
 8009096:	aa10      	add	r2, sp, #64	; 0x40
 8009098:	a911      	add	r1, sp, #68	; 0x44
 800909a:	4620      	mov	r0, r4
 800909c:	eeb0 0a48 	vmov.f32	s0, s16
 80090a0:	eef0 0a68 	vmov.f32	s1, s17
 80090a4:	f001 fdb8 	bl	800ac18 <__d2b>
 80090a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80090ac:	4682      	mov	sl, r0
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	d07f      	beq.n	80091b2 <_dtoa_r+0x20a>
 80090b2:	ee18 3a90 	vmov	r3, s17
 80090b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80090be:	ec51 0b18 	vmov	r0, r1, d8
 80090c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80090ce:	4619      	mov	r1, r3
 80090d0:	2200      	movs	r2, #0
 80090d2:	4b75      	ldr	r3, [pc, #468]	; (80092a8 <_dtoa_r+0x300>)
 80090d4:	f7f7 f8d8 	bl	8000288 <__aeabi_dsub>
 80090d8:	a367      	add	r3, pc, #412	; (adr r3, 8009278 <_dtoa_r+0x2d0>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80090e2:	a367      	add	r3, pc, #412	; (adr r3, 8009280 <_dtoa_r+0x2d8>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f8d0 	bl	800028c <__adddf3>
 80090ec:	4606      	mov	r6, r0
 80090ee:	4628      	mov	r0, r5
 80090f0:	460f      	mov	r7, r1
 80090f2:	f7f7 fa17 	bl	8000524 <__aeabi_i2d>
 80090f6:	a364      	add	r3, pc, #400	; (adr r3, 8009288 <_dtoa_r+0x2e0>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 f8c0 	bl	800028c <__adddf3>
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	f7f7 fd22 	bl	8000b58 <__aeabi_d2iz>
 8009114:	2200      	movs	r2, #0
 8009116:	4683      	mov	fp, r0
 8009118:	2300      	movs	r3, #0
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 fcdd 	bl	8000adc <__aeabi_dcmplt>
 8009122:	b148      	cbz	r0, 8009138 <_dtoa_r+0x190>
 8009124:	4658      	mov	r0, fp
 8009126:	f7f7 f9fd 	bl	8000524 <__aeabi_i2d>
 800912a:	4632      	mov	r2, r6
 800912c:	463b      	mov	r3, r7
 800912e:	f7f7 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009132:	b908      	cbnz	r0, 8009138 <_dtoa_r+0x190>
 8009134:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009138:	f1bb 0f16 	cmp.w	fp, #22
 800913c:	d857      	bhi.n	80091ee <_dtoa_r+0x246>
 800913e:	4b5b      	ldr	r3, [pc, #364]	; (80092ac <_dtoa_r+0x304>)
 8009140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	ec51 0b18 	vmov	r0, r1, d8
 800914c:	f7f7 fcc6 	bl	8000adc <__aeabi_dcmplt>
 8009150:	2800      	cmp	r0, #0
 8009152:	d04e      	beq.n	80091f2 <_dtoa_r+0x24a>
 8009154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009158:	2300      	movs	r3, #0
 800915a:	930c      	str	r3, [sp, #48]	; 0x30
 800915c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800915e:	1b5b      	subs	r3, r3, r5
 8009160:	1e5a      	subs	r2, r3, #1
 8009162:	bf45      	ittet	mi
 8009164:	f1c3 0301 	rsbmi	r3, r3, #1
 8009168:	9305      	strmi	r3, [sp, #20]
 800916a:	2300      	movpl	r3, #0
 800916c:	2300      	movmi	r3, #0
 800916e:	9206      	str	r2, [sp, #24]
 8009170:	bf54      	ite	pl
 8009172:	9305      	strpl	r3, [sp, #20]
 8009174:	9306      	strmi	r3, [sp, #24]
 8009176:	f1bb 0f00 	cmp.w	fp, #0
 800917a:	db3c      	blt.n	80091f6 <_dtoa_r+0x24e>
 800917c:	9b06      	ldr	r3, [sp, #24]
 800917e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009182:	445b      	add	r3, fp
 8009184:	9306      	str	r3, [sp, #24]
 8009186:	2300      	movs	r3, #0
 8009188:	9308      	str	r3, [sp, #32]
 800918a:	9b07      	ldr	r3, [sp, #28]
 800918c:	2b09      	cmp	r3, #9
 800918e:	d868      	bhi.n	8009262 <_dtoa_r+0x2ba>
 8009190:	2b05      	cmp	r3, #5
 8009192:	bfc4      	itt	gt
 8009194:	3b04      	subgt	r3, #4
 8009196:	9307      	strgt	r3, [sp, #28]
 8009198:	9b07      	ldr	r3, [sp, #28]
 800919a:	f1a3 0302 	sub.w	r3, r3, #2
 800919e:	bfcc      	ite	gt
 80091a0:	2500      	movgt	r5, #0
 80091a2:	2501      	movle	r5, #1
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	f200 8085 	bhi.w	80092b4 <_dtoa_r+0x30c>
 80091aa:	e8df f003 	tbb	[pc, r3]
 80091ae:	3b2e      	.short	0x3b2e
 80091b0:	5839      	.short	0x5839
 80091b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091b6:	441d      	add	r5, r3
 80091b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091bc:	2b20      	cmp	r3, #32
 80091be:	bfc1      	itttt	gt
 80091c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80091c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80091cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80091d0:	bfd6      	itet	le
 80091d2:	f1c3 0320 	rsble	r3, r3, #32
 80091d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80091da:	fa06 f003 	lslle.w	r0, r6, r3
 80091de:	f7f7 f991 	bl	8000504 <__aeabi_ui2d>
 80091e2:	2201      	movs	r2, #1
 80091e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80091e8:	3d01      	subs	r5, #1
 80091ea:	920e      	str	r2, [sp, #56]	; 0x38
 80091ec:	e76f      	b.n	80090ce <_dtoa_r+0x126>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7b3      	b.n	800915a <_dtoa_r+0x1b2>
 80091f2:	900c      	str	r0, [sp, #48]	; 0x30
 80091f4:	e7b2      	b.n	800915c <_dtoa_r+0x1b4>
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	eba3 030b 	sub.w	r3, r3, fp
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	f1cb 0300 	rsb	r3, fp, #0
 8009202:	9308      	str	r3, [sp, #32]
 8009204:	2300      	movs	r3, #0
 8009206:	930b      	str	r3, [sp, #44]	; 0x2c
 8009208:	e7bf      	b.n	800918a <_dtoa_r+0x1e2>
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	; 0x24
 800920e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc52      	bgt.n	80092ba <_dtoa_r+0x312>
 8009214:	2301      	movs	r3, #1
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	461a      	mov	r2, r3
 800921c:	920a      	str	r2, [sp, #40]	; 0x28
 800921e:	e00b      	b.n	8009238 <_dtoa_r+0x290>
 8009220:	2301      	movs	r3, #1
 8009222:	e7f3      	b.n	800920c <_dtoa_r+0x264>
 8009224:	2300      	movs	r3, #0
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922a:	445b      	add	r3, fp
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	3301      	adds	r3, #1
 8009230:	2b01      	cmp	r3, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	bfb8      	it	lt
 8009236:	2301      	movlt	r3, #1
 8009238:	69e0      	ldr	r0, [r4, #28]
 800923a:	2100      	movs	r1, #0
 800923c:	2204      	movs	r2, #4
 800923e:	f102 0614 	add.w	r6, r2, #20
 8009242:	429e      	cmp	r6, r3
 8009244:	d93d      	bls.n	80092c2 <_dtoa_r+0x31a>
 8009246:	6041      	str	r1, [r0, #4]
 8009248:	4620      	mov	r0, r4
 800924a:	f001 f909 	bl	800a460 <_Balloc>
 800924e:	9000      	str	r0, [sp, #0]
 8009250:	2800      	cmp	r0, #0
 8009252:	d139      	bne.n	80092c8 <_dtoa_r+0x320>
 8009254:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <_dtoa_r+0x308>)
 8009256:	4602      	mov	r2, r0
 8009258:	f240 11af 	movw	r1, #431	; 0x1af
 800925c:	e6bd      	b.n	8008fda <_dtoa_r+0x32>
 800925e:	2301      	movs	r3, #1
 8009260:	e7e1      	b.n	8009226 <_dtoa_r+0x27e>
 8009262:	2501      	movs	r5, #1
 8009264:	2300      	movs	r3, #0
 8009266:	9307      	str	r3, [sp, #28]
 8009268:	9509      	str	r5, [sp, #36]	; 0x24
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	2200      	movs	r2, #0
 8009274:	2312      	movs	r3, #18
 8009276:	e7d1      	b.n	800921c <_dtoa_r+0x274>
 8009278:	636f4361 	.word	0x636f4361
 800927c:	3fd287a7 	.word	0x3fd287a7
 8009280:	8b60c8b3 	.word	0x8b60c8b3
 8009284:	3fc68a28 	.word	0x3fc68a28
 8009288:	509f79fb 	.word	0x509f79fb
 800928c:	3fd34413 	.word	0x3fd34413
 8009290:	0800bf92 	.word	0x0800bf92
 8009294:	0800c054 	.word	0x0800c054
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	0800c050 	.word	0x0800c050
 80092a0:	0800c047 	.word	0x0800c047
 80092a4:	0800bf6a 	.word	0x0800bf6a
 80092a8:	3ff80000 	.word	0x3ff80000
 80092ac:	0800c1a0 	.word	0x0800c1a0
 80092b0:	0800c0ac 	.word	0x0800c0ac
 80092b4:	2301      	movs	r3, #1
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	e7d7      	b.n	800926a <_dtoa_r+0x2c2>
 80092ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	e7ba      	b.n	8009238 <_dtoa_r+0x290>
 80092c2:	3101      	adds	r1, #1
 80092c4:	0052      	lsls	r2, r2, #1
 80092c6:	e7ba      	b.n	800923e <_dtoa_r+0x296>
 80092c8:	69e3      	ldr	r3, [r4, #28]
 80092ca:	9a00      	ldr	r2, [sp, #0]
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	2b0e      	cmp	r3, #14
 80092d2:	f200 80a8 	bhi.w	8009426 <_dtoa_r+0x47e>
 80092d6:	2d00      	cmp	r5, #0
 80092d8:	f000 80a5 	beq.w	8009426 <_dtoa_r+0x47e>
 80092dc:	f1bb 0f00 	cmp.w	fp, #0
 80092e0:	dd38      	ble.n	8009354 <_dtoa_r+0x3ac>
 80092e2:	4bc0      	ldr	r3, [pc, #768]	; (80095e4 <_dtoa_r+0x63c>)
 80092e4:	f00b 020f 	and.w	r2, fp, #15
 80092e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80092f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80092f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80092f8:	d019      	beq.n	800932e <_dtoa_r+0x386>
 80092fa:	4bbb      	ldr	r3, [pc, #748]	; (80095e8 <_dtoa_r+0x640>)
 80092fc:	ec51 0b18 	vmov	r0, r1, d8
 8009300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009304:	f7f7 faa2 	bl	800084c <__aeabi_ddiv>
 8009308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800930c:	f008 080f 	and.w	r8, r8, #15
 8009310:	2503      	movs	r5, #3
 8009312:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80095e8 <_dtoa_r+0x640>
 8009316:	f1b8 0f00 	cmp.w	r8, #0
 800931a:	d10a      	bne.n	8009332 <_dtoa_r+0x38a>
 800931c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	f7f7 fa92 	bl	800084c <__aeabi_ddiv>
 8009328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800932c:	e02b      	b.n	8009386 <_dtoa_r+0x3de>
 800932e:	2502      	movs	r5, #2
 8009330:	e7ef      	b.n	8009312 <_dtoa_r+0x36a>
 8009332:	f018 0f01 	tst.w	r8, #1
 8009336:	d008      	beq.n	800934a <_dtoa_r+0x3a2>
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	3501      	adds	r5, #1
 8009346:	4606      	mov	r6, r0
 8009348:	460f      	mov	r7, r1
 800934a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800934e:	f109 0908 	add.w	r9, r9, #8
 8009352:	e7e0      	b.n	8009316 <_dtoa_r+0x36e>
 8009354:	f000 809f 	beq.w	8009496 <_dtoa_r+0x4ee>
 8009358:	f1cb 0600 	rsb	r6, fp, #0
 800935c:	4ba1      	ldr	r3, [pc, #644]	; (80095e4 <_dtoa_r+0x63c>)
 800935e:	4fa2      	ldr	r7, [pc, #648]	; (80095e8 <_dtoa_r+0x640>)
 8009360:	f006 020f 	and.w	r2, r6, #15
 8009364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	ec51 0b18 	vmov	r0, r1, d8
 8009370:	f7f7 f942 	bl	80005f8 <__aeabi_dmul>
 8009374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009378:	1136      	asrs	r6, r6, #4
 800937a:	2300      	movs	r3, #0
 800937c:	2502      	movs	r5, #2
 800937e:	2e00      	cmp	r6, #0
 8009380:	d17e      	bne.n	8009480 <_dtoa_r+0x4d8>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1d0      	bne.n	8009328 <_dtoa_r+0x380>
 8009386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009388:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8084 	beq.w	800949a <_dtoa_r+0x4f2>
 8009392:	4b96      	ldr	r3, [pc, #600]	; (80095ec <_dtoa_r+0x644>)
 8009394:	2200      	movs	r2, #0
 8009396:	4640      	mov	r0, r8
 8009398:	4649      	mov	r1, r9
 800939a:	f7f7 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d07b      	beq.n	800949a <_dtoa_r+0x4f2>
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d078      	beq.n	800949a <_dtoa_r+0x4f2>
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dd39      	ble.n	8009422 <_dtoa_r+0x47a>
 80093ae:	4b90      	ldr	r3, [pc, #576]	; (80095f0 <_dtoa_r+0x648>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	4640      	mov	r0, r8
 80093b4:	4649      	mov	r1, r9
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093be:	9e01      	ldr	r6, [sp, #4]
 80093c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80093c4:	3501      	adds	r5, #1
 80093c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093ca:	4628      	mov	r0, r5
 80093cc:	f7f7 f8aa 	bl	8000524 <__aeabi_i2d>
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	f7f7 f910 	bl	80005f8 <__aeabi_dmul>
 80093d8:	4b86      	ldr	r3, [pc, #536]	; (80095f4 <_dtoa_r+0x64c>)
 80093da:	2200      	movs	r2, #0
 80093dc:	f7f6 ff56 	bl	800028c <__adddf3>
 80093e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80093e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e8:	9303      	str	r3, [sp, #12]
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d158      	bne.n	80094a0 <_dtoa_r+0x4f8>
 80093ee:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <_dtoa_r+0x650>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093fe:	4680      	mov	r8, r0
 8009400:	4689      	mov	r9, r1
 8009402:	f7f7 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8009406:	2800      	cmp	r0, #0
 8009408:	f040 8296 	bne.w	8009938 <_dtoa_r+0x990>
 800940c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009410:	4640      	mov	r0, r8
 8009412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009416:	4649      	mov	r1, r9
 8009418:	f7f7 fb60 	bl	8000adc <__aeabi_dcmplt>
 800941c:	2800      	cmp	r0, #0
 800941e:	f040 8289 	bne.w	8009934 <_dtoa_r+0x98c>
 8009422:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009428:	2b00      	cmp	r3, #0
 800942a:	f2c0 814e 	blt.w	80096ca <_dtoa_r+0x722>
 800942e:	f1bb 0f0e 	cmp.w	fp, #14
 8009432:	f300 814a 	bgt.w	80096ca <_dtoa_r+0x722>
 8009436:	4b6b      	ldr	r3, [pc, #428]	; (80095e4 <_dtoa_r+0x63c>)
 8009438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800943c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	f280 80dc 	bge.w	8009600 <_dtoa_r+0x658>
 8009448:	9b04      	ldr	r3, [sp, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f300 80d8 	bgt.w	8009600 <_dtoa_r+0x658>
 8009450:	f040 826f 	bne.w	8009932 <_dtoa_r+0x98a>
 8009454:	4b68      	ldr	r3, [pc, #416]	; (80095f8 <_dtoa_r+0x650>)
 8009456:	2200      	movs	r2, #0
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009464:	f7f7 fb4e 	bl	8000b04 <__aeabi_dcmpge>
 8009468:	9e04      	ldr	r6, [sp, #16]
 800946a:	4637      	mov	r7, r6
 800946c:	2800      	cmp	r0, #0
 800946e:	f040 8245 	bne.w	80098fc <_dtoa_r+0x954>
 8009472:	9d00      	ldr	r5, [sp, #0]
 8009474:	2331      	movs	r3, #49	; 0x31
 8009476:	f805 3b01 	strb.w	r3, [r5], #1
 800947a:	f10b 0b01 	add.w	fp, fp, #1
 800947e:	e241      	b.n	8009904 <_dtoa_r+0x95c>
 8009480:	07f2      	lsls	r2, r6, #31
 8009482:	d505      	bpl.n	8009490 <_dtoa_r+0x4e8>
 8009484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009488:	f7f7 f8b6 	bl	80005f8 <__aeabi_dmul>
 800948c:	3501      	adds	r5, #1
 800948e:	2301      	movs	r3, #1
 8009490:	1076      	asrs	r6, r6, #1
 8009492:	3708      	adds	r7, #8
 8009494:	e773      	b.n	800937e <_dtoa_r+0x3d6>
 8009496:	2502      	movs	r5, #2
 8009498:	e775      	b.n	8009386 <_dtoa_r+0x3de>
 800949a:	9e04      	ldr	r6, [sp, #16]
 800949c:	465f      	mov	r7, fp
 800949e:	e792      	b.n	80093c6 <_dtoa_r+0x41e>
 80094a0:	9900      	ldr	r1, [sp, #0]
 80094a2:	4b50      	ldr	r3, [pc, #320]	; (80095e4 <_dtoa_r+0x63c>)
 80094a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094a8:	4431      	add	r1, r6
 80094aa:	9102      	str	r1, [sp, #8]
 80094ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ae:	eeb0 9a47 	vmov.f32	s18, s14
 80094b2:	eef0 9a67 	vmov.f32	s19, s15
 80094b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094be:	2900      	cmp	r1, #0
 80094c0:	d044      	beq.n	800954c <_dtoa_r+0x5a4>
 80094c2:	494e      	ldr	r1, [pc, #312]	; (80095fc <_dtoa_r+0x654>)
 80094c4:	2000      	movs	r0, #0
 80094c6:	f7f7 f9c1 	bl	800084c <__aeabi_ddiv>
 80094ca:	ec53 2b19 	vmov	r2, r3, d9
 80094ce:	f7f6 fedb 	bl	8000288 <__aeabi_dsub>
 80094d2:	9d00      	ldr	r5, [sp, #0]
 80094d4:	ec41 0b19 	vmov	d9, r0, r1
 80094d8:	4649      	mov	r1, r9
 80094da:	4640      	mov	r0, r8
 80094dc:	f7f7 fb3c 	bl	8000b58 <__aeabi_d2iz>
 80094e0:	4606      	mov	r6, r0
 80094e2:	f7f7 f81f 	bl	8000524 <__aeabi_i2d>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f6 fecb 	bl	8000288 <__aeabi_dsub>
 80094f2:	3630      	adds	r6, #48	; 0x30
 80094f4:	f805 6b01 	strb.w	r6, [r5], #1
 80094f8:	ec53 2b19 	vmov	r2, r3, d9
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	f7f7 faec 	bl	8000adc <__aeabi_dcmplt>
 8009504:	2800      	cmp	r0, #0
 8009506:	d164      	bne.n	80095d2 <_dtoa_r+0x62a>
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	4937      	ldr	r1, [pc, #220]	; (80095ec <_dtoa_r+0x644>)
 800950e:	2000      	movs	r0, #0
 8009510:	f7f6 feba 	bl	8000288 <__aeabi_dsub>
 8009514:	ec53 2b19 	vmov	r2, r3, d9
 8009518:	f7f7 fae0 	bl	8000adc <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	f040 80b6 	bne.w	800968e <_dtoa_r+0x6e6>
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	429d      	cmp	r5, r3
 8009526:	f43f af7c 	beq.w	8009422 <_dtoa_r+0x47a>
 800952a:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <_dtoa_r+0x648>)
 800952c:	ec51 0b19 	vmov	r0, r1, d9
 8009530:	2200      	movs	r2, #0
 8009532:	f7f7 f861 	bl	80005f8 <__aeabi_dmul>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <_dtoa_r+0x648>)
 8009538:	ec41 0b19 	vmov	d9, r0, r1
 800953c:	2200      	movs	r2, #0
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	4680      	mov	r8, r0
 8009548:	4689      	mov	r9, r1
 800954a:	e7c5      	b.n	80094d8 <_dtoa_r+0x530>
 800954c:	ec51 0b17 	vmov	r0, r1, d7
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	9d00      	ldr	r5, [sp, #0]
 8009558:	930f      	str	r3, [sp, #60]	; 0x3c
 800955a:	ec41 0b19 	vmov	d9, r0, r1
 800955e:	4649      	mov	r1, r9
 8009560:	4640      	mov	r0, r8
 8009562:	f7f7 faf9 	bl	8000b58 <__aeabi_d2iz>
 8009566:	4606      	mov	r6, r0
 8009568:	f7f6 ffdc 	bl	8000524 <__aeabi_i2d>
 800956c:	3630      	adds	r6, #48	; 0x30
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f6 fe87 	bl	8000288 <__aeabi_dsub>
 800957a:	f805 6b01 	strb.w	r6, [r5], #1
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	429d      	cmp	r5, r3
 8009582:	4680      	mov	r8, r0
 8009584:	4689      	mov	r9, r1
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	d124      	bne.n	80095d6 <_dtoa_r+0x62e>
 800958c:	4b1b      	ldr	r3, [pc, #108]	; (80095fc <_dtoa_r+0x654>)
 800958e:	ec51 0b19 	vmov	r0, r1, d9
 8009592:	f7f6 fe7b 	bl	800028c <__adddf3>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	f7f7 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d173      	bne.n	800968e <_dtoa_r+0x6e6>
 80095a6:	ec53 2b19 	vmov	r2, r3, d9
 80095aa:	4914      	ldr	r1, [pc, #80]	; (80095fc <_dtoa_r+0x654>)
 80095ac:	2000      	movs	r0, #0
 80095ae:	f7f6 fe6b 	bl	8000288 <__aeabi_dsub>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f af2f 	beq.w	8009422 <_dtoa_r+0x47a>
 80095c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095c6:	1e6b      	subs	r3, r5, #1
 80095c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095ce:	2b30      	cmp	r3, #48	; 0x30
 80095d0:	d0f8      	beq.n	80095c4 <_dtoa_r+0x61c>
 80095d2:	46bb      	mov	fp, r7
 80095d4:	e04a      	b.n	800966c <_dtoa_r+0x6c4>
 80095d6:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <_dtoa_r+0x648>)
 80095d8:	f7f7 f80e 	bl	80005f8 <__aeabi_dmul>
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	e7bd      	b.n	800955e <_dtoa_r+0x5b6>
 80095e2:	bf00      	nop
 80095e4:	0800c1a0 	.word	0x0800c1a0
 80095e8:	0800c178 	.word	0x0800c178
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	40240000 	.word	0x40240000
 80095f4:	401c0000 	.word	0x401c0000
 80095f8:	40140000 	.word	0x40140000
 80095fc:	3fe00000 	.word	0x3fe00000
 8009600:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009604:	9d00      	ldr	r5, [sp, #0]
 8009606:	4642      	mov	r2, r8
 8009608:	464b      	mov	r3, r9
 800960a:	4630      	mov	r0, r6
 800960c:	4639      	mov	r1, r7
 800960e:	f7f7 f91d 	bl	800084c <__aeabi_ddiv>
 8009612:	f7f7 faa1 	bl	8000b58 <__aeabi_d2iz>
 8009616:	9001      	str	r0, [sp, #4]
 8009618:	f7f6 ff84 	bl	8000524 <__aeabi_i2d>
 800961c:	4642      	mov	r2, r8
 800961e:	464b      	mov	r3, r9
 8009620:	f7f6 ffea 	bl	80005f8 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	9e01      	ldr	r6, [sp, #4]
 8009632:	9f04      	ldr	r7, [sp, #16]
 8009634:	3630      	adds	r6, #48	; 0x30
 8009636:	f805 6b01 	strb.w	r6, [r5], #1
 800963a:	9e00      	ldr	r6, [sp, #0]
 800963c:	1bae      	subs	r6, r5, r6
 800963e:	42b7      	cmp	r7, r6
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	d134      	bne.n	80096b0 <_dtoa_r+0x708>
 8009646:	f7f6 fe21 	bl	800028c <__adddf3>
 800964a:	4642      	mov	r2, r8
 800964c:	464b      	mov	r3, r9
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	f7f7 fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8009656:	b9c8      	cbnz	r0, 800968c <_dtoa_r+0x6e4>
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f7 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009664:	b110      	cbz	r0, 800966c <_dtoa_r+0x6c4>
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	07db      	lsls	r3, r3, #31
 800966a:	d40f      	bmi.n	800968c <_dtoa_r+0x6e4>
 800966c:	4651      	mov	r1, sl
 800966e:	4620      	mov	r0, r4
 8009670:	f000 ff36 	bl	800a4e0 <_Bfree>
 8009674:	2300      	movs	r3, #0
 8009676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009678:	702b      	strb	r3, [r5, #0]
 800967a:	f10b 0301 	add.w	r3, fp, #1
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009682:	2b00      	cmp	r3, #0
 8009684:	f43f ace2 	beq.w	800904c <_dtoa_r+0xa4>
 8009688:	601d      	str	r5, [r3, #0]
 800968a:	e4df      	b.n	800904c <_dtoa_r+0xa4>
 800968c:	465f      	mov	r7, fp
 800968e:	462b      	mov	r3, r5
 8009690:	461d      	mov	r5, r3
 8009692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009696:	2a39      	cmp	r2, #57	; 0x39
 8009698:	d106      	bne.n	80096a8 <_dtoa_r+0x700>
 800969a:	9a00      	ldr	r2, [sp, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d1f7      	bne.n	8009690 <_dtoa_r+0x6e8>
 80096a0:	9900      	ldr	r1, [sp, #0]
 80096a2:	2230      	movs	r2, #48	; 0x30
 80096a4:	3701      	adds	r7, #1
 80096a6:	700a      	strb	r2, [r1, #0]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	3201      	adds	r2, #1
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	e790      	b.n	80095d2 <_dtoa_r+0x62a>
 80096b0:	4ba3      	ldr	r3, [pc, #652]	; (8009940 <_dtoa_r+0x998>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4606      	mov	r6, r0
 80096be:	460f      	mov	r7, r1
 80096c0:	f7f7 fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d09e      	beq.n	8009606 <_dtoa_r+0x65e>
 80096c8:	e7d0      	b.n	800966c <_dtoa_r+0x6c4>
 80096ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	f000 80ca 	beq.w	8009866 <_dtoa_r+0x8be>
 80096d2:	9a07      	ldr	r2, [sp, #28]
 80096d4:	2a01      	cmp	r2, #1
 80096d6:	f300 80ad 	bgt.w	8009834 <_dtoa_r+0x88c>
 80096da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096dc:	2a00      	cmp	r2, #0
 80096de:	f000 80a5 	beq.w	800982c <_dtoa_r+0x884>
 80096e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096e6:	9e08      	ldr	r6, [sp, #32]
 80096e8:	9d05      	ldr	r5, [sp, #20]
 80096ea:	9a05      	ldr	r2, [sp, #20]
 80096ec:	441a      	add	r2, r3
 80096ee:	9205      	str	r2, [sp, #20]
 80096f0:	9a06      	ldr	r2, [sp, #24]
 80096f2:	2101      	movs	r1, #1
 80096f4:	441a      	add	r2, r3
 80096f6:	4620      	mov	r0, r4
 80096f8:	9206      	str	r2, [sp, #24]
 80096fa:	f000 fff1 	bl	800a6e0 <__i2b>
 80096fe:	4607      	mov	r7, r0
 8009700:	b165      	cbz	r5, 800971c <_dtoa_r+0x774>
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dd09      	ble.n	800971c <_dtoa_r+0x774>
 8009708:	42ab      	cmp	r3, r5
 800970a:	9a05      	ldr	r2, [sp, #20]
 800970c:	bfa8      	it	ge
 800970e:	462b      	movge	r3, r5
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	9205      	str	r2, [sp, #20]
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	1aed      	subs	r5, r5, r3
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	9306      	str	r3, [sp, #24]
 800971c:	9b08      	ldr	r3, [sp, #32]
 800971e:	b1f3      	cbz	r3, 800975e <_dtoa_r+0x7b6>
 8009720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 80a3 	beq.w	800986e <_dtoa_r+0x8c6>
 8009728:	2e00      	cmp	r6, #0
 800972a:	dd10      	ble.n	800974e <_dtoa_r+0x7a6>
 800972c:	4639      	mov	r1, r7
 800972e:	4632      	mov	r2, r6
 8009730:	4620      	mov	r0, r4
 8009732:	f001 f895 	bl	800a860 <__pow5mult>
 8009736:	4652      	mov	r2, sl
 8009738:	4601      	mov	r1, r0
 800973a:	4607      	mov	r7, r0
 800973c:	4620      	mov	r0, r4
 800973e:	f000 ffe5 	bl	800a70c <__multiply>
 8009742:	4651      	mov	r1, sl
 8009744:	4680      	mov	r8, r0
 8009746:	4620      	mov	r0, r4
 8009748:	f000 feca 	bl	800a4e0 <_Bfree>
 800974c:	46c2      	mov	sl, r8
 800974e:	9b08      	ldr	r3, [sp, #32]
 8009750:	1b9a      	subs	r2, r3, r6
 8009752:	d004      	beq.n	800975e <_dtoa_r+0x7b6>
 8009754:	4651      	mov	r1, sl
 8009756:	4620      	mov	r0, r4
 8009758:	f001 f882 	bl	800a860 <__pow5mult>
 800975c:	4682      	mov	sl, r0
 800975e:	2101      	movs	r1, #1
 8009760:	4620      	mov	r0, r4
 8009762:	f000 ffbd 	bl	800a6e0 <__i2b>
 8009766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	4606      	mov	r6, r0
 800976c:	f340 8081 	ble.w	8009872 <_dtoa_r+0x8ca>
 8009770:	461a      	mov	r2, r3
 8009772:	4601      	mov	r1, r0
 8009774:	4620      	mov	r0, r4
 8009776:	f001 f873 	bl	800a860 <__pow5mult>
 800977a:	9b07      	ldr	r3, [sp, #28]
 800977c:	2b01      	cmp	r3, #1
 800977e:	4606      	mov	r6, r0
 8009780:	dd7a      	ble.n	8009878 <_dtoa_r+0x8d0>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	6933      	ldr	r3, [r6, #16]
 8009788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800978c:	6918      	ldr	r0, [r3, #16]
 800978e:	f000 ff59 	bl	800a644 <__hi0bits>
 8009792:	f1c0 0020 	rsb	r0, r0, #32
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	4418      	add	r0, r3
 800979a:	f010 001f 	ands.w	r0, r0, #31
 800979e:	f000 8094 	beq.w	80098ca <_dtoa_r+0x922>
 80097a2:	f1c0 0320 	rsb	r3, r0, #32
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	f340 8085 	ble.w	80098b6 <_dtoa_r+0x90e>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	f1c0 001c 	rsb	r0, r0, #28
 80097b2:	4403      	add	r3, r0
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	4403      	add	r3, r0
 80097ba:	4405      	add	r5, r0
 80097bc:	9306      	str	r3, [sp, #24]
 80097be:	9b05      	ldr	r3, [sp, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dd05      	ble.n	80097d0 <_dtoa_r+0x828>
 80097c4:	4651      	mov	r1, sl
 80097c6:	461a      	mov	r2, r3
 80097c8:	4620      	mov	r0, r4
 80097ca:	f001 f8a3 	bl	800a914 <__lshift>
 80097ce:	4682      	mov	sl, r0
 80097d0:	9b06      	ldr	r3, [sp, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	dd05      	ble.n	80097e2 <_dtoa_r+0x83a>
 80097d6:	4631      	mov	r1, r6
 80097d8:	461a      	mov	r2, r3
 80097da:	4620      	mov	r0, r4
 80097dc:	f001 f89a 	bl	800a914 <__lshift>
 80097e0:	4606      	mov	r6, r0
 80097e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d072      	beq.n	80098ce <_dtoa_r+0x926>
 80097e8:	4631      	mov	r1, r6
 80097ea:	4650      	mov	r0, sl
 80097ec:	f001 f8fe 	bl	800a9ec <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	da6c      	bge.n	80098ce <_dtoa_r+0x926>
 80097f4:	2300      	movs	r3, #0
 80097f6:	4651      	mov	r1, sl
 80097f8:	220a      	movs	r2, #10
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 fe92 	bl	800a524 <__multadd>
 8009800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009806:	4682      	mov	sl, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 81b0 	beq.w	8009b6e <_dtoa_r+0xbc6>
 800980e:	2300      	movs	r3, #0
 8009810:	4639      	mov	r1, r7
 8009812:	220a      	movs	r2, #10
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fe85 	bl	800a524 <__multadd>
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	4607      	mov	r7, r0
 8009820:	f300 8096 	bgt.w	8009950 <_dtoa_r+0x9a8>
 8009824:	9b07      	ldr	r3, [sp, #28]
 8009826:	2b02      	cmp	r3, #2
 8009828:	dc59      	bgt.n	80098de <_dtoa_r+0x936>
 800982a:	e091      	b.n	8009950 <_dtoa_r+0x9a8>
 800982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800982e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009832:	e758      	b.n	80096e6 <_dtoa_r+0x73e>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	1e5e      	subs	r6, r3, #1
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	42b3      	cmp	r3, r6
 800983c:	bfbf      	itttt	lt
 800983e:	9b08      	ldrlt	r3, [sp, #32]
 8009840:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009842:	9608      	strlt	r6, [sp, #32]
 8009844:	1af3      	sublt	r3, r6, r3
 8009846:	bfb4      	ite	lt
 8009848:	18d2      	addlt	r2, r2, r3
 800984a:	1b9e      	subge	r6, r3, r6
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	bfbc      	itt	lt
 8009850:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009852:	2600      	movlt	r6, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfb7      	itett	lt
 8009858:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800985c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009860:	1a9d      	sublt	r5, r3, r2
 8009862:	2300      	movlt	r3, #0
 8009864:	e741      	b.n	80096ea <_dtoa_r+0x742>
 8009866:	9e08      	ldr	r6, [sp, #32]
 8009868:	9d05      	ldr	r5, [sp, #20]
 800986a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800986c:	e748      	b.n	8009700 <_dtoa_r+0x758>
 800986e:	9a08      	ldr	r2, [sp, #32]
 8009870:	e770      	b.n	8009754 <_dtoa_r+0x7ac>
 8009872:	9b07      	ldr	r3, [sp, #28]
 8009874:	2b01      	cmp	r3, #1
 8009876:	dc19      	bgt.n	80098ac <_dtoa_r+0x904>
 8009878:	9b02      	ldr	r3, [sp, #8]
 800987a:	b9bb      	cbnz	r3, 80098ac <_dtoa_r+0x904>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009882:	b99b      	cbnz	r3, 80098ac <_dtoa_r+0x904>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800988a:	0d1b      	lsrs	r3, r3, #20
 800988c:	051b      	lsls	r3, r3, #20
 800988e:	b183      	cbz	r3, 80098b2 <_dtoa_r+0x90a>
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	3301      	adds	r3, #1
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	9b06      	ldr	r3, [sp, #24]
 8009898:	3301      	adds	r3, #1
 800989a:	9306      	str	r3, [sp, #24]
 800989c:	f04f 0801 	mov.w	r8, #1
 80098a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f47f af6f 	bne.w	8009786 <_dtoa_r+0x7de>
 80098a8:	2001      	movs	r0, #1
 80098aa:	e774      	b.n	8009796 <_dtoa_r+0x7ee>
 80098ac:	f04f 0800 	mov.w	r8, #0
 80098b0:	e7f6      	b.n	80098a0 <_dtoa_r+0x8f8>
 80098b2:	4698      	mov	r8, r3
 80098b4:	e7f4      	b.n	80098a0 <_dtoa_r+0x8f8>
 80098b6:	d082      	beq.n	80097be <_dtoa_r+0x816>
 80098b8:	9a05      	ldr	r2, [sp, #20]
 80098ba:	331c      	adds	r3, #28
 80098bc:	441a      	add	r2, r3
 80098be:	9205      	str	r2, [sp, #20]
 80098c0:	9a06      	ldr	r2, [sp, #24]
 80098c2:	441a      	add	r2, r3
 80098c4:	441d      	add	r5, r3
 80098c6:	9206      	str	r2, [sp, #24]
 80098c8:	e779      	b.n	80097be <_dtoa_r+0x816>
 80098ca:	4603      	mov	r3, r0
 80098cc:	e7f4      	b.n	80098b8 <_dtoa_r+0x910>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dc37      	bgt.n	8009944 <_dtoa_r+0x99c>
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	dd34      	ble.n	8009944 <_dtoa_r+0x99c>
 80098da:	9b04      	ldr	r3, [sp, #16]
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	b963      	cbnz	r3, 80098fc <_dtoa_r+0x954>
 80098e2:	4631      	mov	r1, r6
 80098e4:	2205      	movs	r2, #5
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 fe1c 	bl	800a524 <__multadd>
 80098ec:	4601      	mov	r1, r0
 80098ee:	4606      	mov	r6, r0
 80098f0:	4650      	mov	r0, sl
 80098f2:	f001 f87b 	bl	800a9ec <__mcmp>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f73f adbb 	bgt.w	8009472 <_dtoa_r+0x4ca>
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	9d00      	ldr	r5, [sp, #0]
 8009900:	ea6f 0b03 	mvn.w	fp, r3
 8009904:	f04f 0800 	mov.w	r8, #0
 8009908:	4631      	mov	r1, r6
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fde8 	bl	800a4e0 <_Bfree>
 8009910:	2f00      	cmp	r7, #0
 8009912:	f43f aeab 	beq.w	800966c <_dtoa_r+0x6c4>
 8009916:	f1b8 0f00 	cmp.w	r8, #0
 800991a:	d005      	beq.n	8009928 <_dtoa_r+0x980>
 800991c:	45b8      	cmp	r8, r7
 800991e:	d003      	beq.n	8009928 <_dtoa_r+0x980>
 8009920:	4641      	mov	r1, r8
 8009922:	4620      	mov	r0, r4
 8009924:	f000 fddc 	bl	800a4e0 <_Bfree>
 8009928:	4639      	mov	r1, r7
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fdd8 	bl	800a4e0 <_Bfree>
 8009930:	e69c      	b.n	800966c <_dtoa_r+0x6c4>
 8009932:	2600      	movs	r6, #0
 8009934:	4637      	mov	r7, r6
 8009936:	e7e1      	b.n	80098fc <_dtoa_r+0x954>
 8009938:	46bb      	mov	fp, r7
 800993a:	4637      	mov	r7, r6
 800993c:	e599      	b.n	8009472 <_dtoa_r+0x4ca>
 800993e:	bf00      	nop
 8009940:	40240000 	.word	0x40240000
 8009944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80c8 	beq.w	8009adc <_dtoa_r+0xb34>
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	2d00      	cmp	r5, #0
 8009952:	dd05      	ble.n	8009960 <_dtoa_r+0x9b8>
 8009954:	4639      	mov	r1, r7
 8009956:	462a      	mov	r2, r5
 8009958:	4620      	mov	r0, r4
 800995a:	f000 ffdb 	bl	800a914 <__lshift>
 800995e:	4607      	mov	r7, r0
 8009960:	f1b8 0f00 	cmp.w	r8, #0
 8009964:	d05b      	beq.n	8009a1e <_dtoa_r+0xa76>
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fd79 	bl	800a460 <_Balloc>
 800996e:	4605      	mov	r5, r0
 8009970:	b928      	cbnz	r0, 800997e <_dtoa_r+0x9d6>
 8009972:	4b83      	ldr	r3, [pc, #524]	; (8009b80 <_dtoa_r+0xbd8>)
 8009974:	4602      	mov	r2, r0
 8009976:	f240 21ef 	movw	r1, #751	; 0x2ef
 800997a:	f7ff bb2e 	b.w	8008fda <_dtoa_r+0x32>
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	3202      	adds	r2, #2
 8009982:	0092      	lsls	r2, r2, #2
 8009984:	f107 010c 	add.w	r1, r7, #12
 8009988:	300c      	adds	r0, #12
 800998a:	f7ff fa4a 	bl	8008e22 <memcpy>
 800998e:	2201      	movs	r2, #1
 8009990:	4629      	mov	r1, r5
 8009992:	4620      	mov	r0, r4
 8009994:	f000 ffbe 	bl	800a914 <__lshift>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a2:	4413      	add	r3, r2
 80099a4:	9308      	str	r3, [sp, #32]
 80099a6:	9b02      	ldr	r3, [sp, #8]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	46b8      	mov	r8, r7
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	4607      	mov	r7, r0
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	4631      	mov	r1, r6
 80099b6:	3b01      	subs	r3, #1
 80099b8:	4650      	mov	r0, sl
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	f7ff fa6c 	bl	8008e98 <quorem>
 80099c0:	4641      	mov	r1, r8
 80099c2:	9002      	str	r0, [sp, #8]
 80099c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099c8:	4650      	mov	r0, sl
 80099ca:	f001 f80f 	bl	800a9ec <__mcmp>
 80099ce:	463a      	mov	r2, r7
 80099d0:	9005      	str	r0, [sp, #20]
 80099d2:	4631      	mov	r1, r6
 80099d4:	4620      	mov	r0, r4
 80099d6:	f001 f825 	bl	800aa24 <__mdiff>
 80099da:	68c2      	ldr	r2, [r0, #12]
 80099dc:	4605      	mov	r5, r0
 80099de:	bb02      	cbnz	r2, 8009a22 <_dtoa_r+0xa7a>
 80099e0:	4601      	mov	r1, r0
 80099e2:	4650      	mov	r0, sl
 80099e4:	f001 f802 	bl	800a9ec <__mcmp>
 80099e8:	4602      	mov	r2, r0
 80099ea:	4629      	mov	r1, r5
 80099ec:	4620      	mov	r0, r4
 80099ee:	9209      	str	r2, [sp, #36]	; 0x24
 80099f0:	f000 fd76 	bl	800a4e0 <_Bfree>
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f8:	9d04      	ldr	r5, [sp, #16]
 80099fa:	ea43 0102 	orr.w	r1, r3, r2
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	4319      	orrs	r1, r3
 8009a02:	d110      	bne.n	8009a26 <_dtoa_r+0xa7e>
 8009a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a08:	d029      	beq.n	8009a5e <_dtoa_r+0xab6>
 8009a0a:	9b05      	ldr	r3, [sp, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dd02      	ble.n	8009a16 <_dtoa_r+0xa6e>
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	f883 9000 	strb.w	r9, [r3]
 8009a1c:	e774      	b.n	8009908 <_dtoa_r+0x960>
 8009a1e:	4638      	mov	r0, r7
 8009a20:	e7ba      	b.n	8009998 <_dtoa_r+0x9f0>
 8009a22:	2201      	movs	r2, #1
 8009a24:	e7e1      	b.n	80099ea <_dtoa_r+0xa42>
 8009a26:	9b05      	ldr	r3, [sp, #20]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db04      	blt.n	8009a36 <_dtoa_r+0xa8e>
 8009a2c:	9907      	ldr	r1, [sp, #28]
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	9906      	ldr	r1, [sp, #24]
 8009a32:	430b      	orrs	r3, r1
 8009a34:	d120      	bne.n	8009a78 <_dtoa_r+0xad0>
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	dded      	ble.n	8009a16 <_dtoa_r+0xa6e>
 8009a3a:	4651      	mov	r1, sl
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 ff68 	bl	800a914 <__lshift>
 8009a44:	4631      	mov	r1, r6
 8009a46:	4682      	mov	sl, r0
 8009a48:	f000 ffd0 	bl	800a9ec <__mcmp>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	dc03      	bgt.n	8009a58 <_dtoa_r+0xab0>
 8009a50:	d1e1      	bne.n	8009a16 <_dtoa_r+0xa6e>
 8009a52:	f019 0f01 	tst.w	r9, #1
 8009a56:	d0de      	beq.n	8009a16 <_dtoa_r+0xa6e>
 8009a58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a5c:	d1d8      	bne.n	8009a10 <_dtoa_r+0xa68>
 8009a5e:	9a01      	ldr	r2, [sp, #4]
 8009a60:	2339      	movs	r3, #57	; 0x39
 8009a62:	7013      	strb	r3, [r2, #0]
 8009a64:	462b      	mov	r3, r5
 8009a66:	461d      	mov	r5, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a6e:	2a39      	cmp	r2, #57	; 0x39
 8009a70:	d06c      	beq.n	8009b4c <_dtoa_r+0xba4>
 8009a72:	3201      	adds	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e747      	b.n	8009908 <_dtoa_r+0x960>
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	dd07      	ble.n	8009a8c <_dtoa_r+0xae4>
 8009a7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a80:	d0ed      	beq.n	8009a5e <_dtoa_r+0xab6>
 8009a82:	9a01      	ldr	r2, [sp, #4]
 8009a84:	f109 0301 	add.w	r3, r9, #1
 8009a88:	7013      	strb	r3, [r2, #0]
 8009a8a:	e73d      	b.n	8009908 <_dtoa_r+0x960>
 8009a8c:	9b04      	ldr	r3, [sp, #16]
 8009a8e:	9a08      	ldr	r2, [sp, #32]
 8009a90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d043      	beq.n	8009b20 <_dtoa_r+0xb78>
 8009a98:	4651      	mov	r1, sl
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 fd40 	bl	800a524 <__multadd>
 8009aa4:	45b8      	cmp	r8, r7
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	f04f 020a 	mov.w	r2, #10
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	d107      	bne.n	8009ac6 <_dtoa_r+0xb1e>
 8009ab6:	f000 fd35 	bl	800a524 <__multadd>
 8009aba:	4680      	mov	r8, r0
 8009abc:	4607      	mov	r7, r0
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	e775      	b.n	80099b2 <_dtoa_r+0xa0a>
 8009ac6:	f000 fd2d 	bl	800a524 <__multadd>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4680      	mov	r8, r0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	220a      	movs	r2, #10
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 fd26 	bl	800a524 <__multadd>
 8009ad8:	4607      	mov	r7, r0
 8009ada:	e7f0      	b.n	8009abe <_dtoa_r+0xb16>
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	9d00      	ldr	r5, [sp, #0]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	f7ff f9d7 	bl	8008e98 <quorem>
 8009aea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	f805 9b01 	strb.w	r9, [r5], #1
 8009af4:	1aea      	subs	r2, r5, r3
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	dd07      	ble.n	8009b0c <_dtoa_r+0xb64>
 8009afc:	4651      	mov	r1, sl
 8009afe:	2300      	movs	r3, #0
 8009b00:	220a      	movs	r2, #10
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fd0e 	bl	800a524 <__multadd>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	e7ea      	b.n	8009ae2 <_dtoa_r+0xb3a>
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	bfc8      	it	gt
 8009b12:	461d      	movgt	r5, r3
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	bfd8      	it	le
 8009b18:	2501      	movle	r5, #1
 8009b1a:	441d      	add	r5, r3
 8009b1c:	f04f 0800 	mov.w	r8, #0
 8009b20:	4651      	mov	r1, sl
 8009b22:	2201      	movs	r2, #1
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 fef5 	bl	800a914 <__lshift>
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4682      	mov	sl, r0
 8009b2e:	f000 ff5d 	bl	800a9ec <__mcmp>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	dc96      	bgt.n	8009a64 <_dtoa_r+0xabc>
 8009b36:	d102      	bne.n	8009b3e <_dtoa_r+0xb96>
 8009b38:	f019 0f01 	tst.w	r9, #1
 8009b3c:	d192      	bne.n	8009a64 <_dtoa_r+0xabc>
 8009b3e:	462b      	mov	r3, r5
 8009b40:	461d      	mov	r5, r3
 8009b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b46:	2a30      	cmp	r2, #48	; 0x30
 8009b48:	d0fa      	beq.n	8009b40 <_dtoa_r+0xb98>
 8009b4a:	e6dd      	b.n	8009908 <_dtoa_r+0x960>
 8009b4c:	9a00      	ldr	r2, [sp, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d189      	bne.n	8009a66 <_dtoa_r+0xabe>
 8009b52:	f10b 0b01 	add.w	fp, fp, #1
 8009b56:	2331      	movs	r3, #49	; 0x31
 8009b58:	e796      	b.n	8009a88 <_dtoa_r+0xae0>
 8009b5a:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <_dtoa_r+0xbdc>)
 8009b5c:	f7ff ba99 	b.w	8009092 <_dtoa_r+0xea>
 8009b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f aa6d 	bne.w	8009042 <_dtoa_r+0x9a>
 8009b68:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <_dtoa_r+0xbe0>)
 8009b6a:	f7ff ba92 	b.w	8009092 <_dtoa_r+0xea>
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dcb5      	bgt.n	8009ae0 <_dtoa_r+0xb38>
 8009b74:	9b07      	ldr	r3, [sp, #28]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	f73f aeb1 	bgt.w	80098de <_dtoa_r+0x936>
 8009b7c:	e7b0      	b.n	8009ae0 <_dtoa_r+0xb38>
 8009b7e:	bf00      	nop
 8009b80:	0800c0ac 	.word	0x0800c0ac
 8009b84:	0800bf69 	.word	0x0800bf69
 8009b88:	0800c047 	.word	0x0800c047

08009b8c <_free_r>:
 8009b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	d044      	beq.n	8009c1c <_free_r+0x90>
 8009b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b96:	9001      	str	r0, [sp, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b9e:	bfb8      	it	lt
 8009ba0:	18e4      	addlt	r4, r4, r3
 8009ba2:	f000 fc51 	bl	800a448 <__malloc_lock>
 8009ba6:	4a1e      	ldr	r2, [pc, #120]	; (8009c20 <_free_r+0x94>)
 8009ba8:	9801      	ldr	r0, [sp, #4]
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	b933      	cbnz	r3, 8009bbc <_free_r+0x30>
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	6014      	str	r4, [r2, #0]
 8009bb2:	b003      	add	sp, #12
 8009bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bb8:	f000 bc4c 	b.w	800a454 <__malloc_unlock>
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	d908      	bls.n	8009bd2 <_free_r+0x46>
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	1961      	adds	r1, r4, r5
 8009bc4:	428b      	cmp	r3, r1
 8009bc6:	bf01      	itttt	eq
 8009bc8:	6819      	ldreq	r1, [r3, #0]
 8009bca:	685b      	ldreq	r3, [r3, #4]
 8009bcc:	1949      	addeq	r1, r1, r5
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	e7ed      	b.n	8009bae <_free_r+0x22>
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	b10b      	cbz	r3, 8009bdc <_free_r+0x50>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d9fa      	bls.n	8009bd2 <_free_r+0x46>
 8009bdc:	6811      	ldr	r1, [r2, #0]
 8009bde:	1855      	adds	r5, r2, r1
 8009be0:	42a5      	cmp	r5, r4
 8009be2:	d10b      	bne.n	8009bfc <_free_r+0x70>
 8009be4:	6824      	ldr	r4, [r4, #0]
 8009be6:	4421      	add	r1, r4
 8009be8:	1854      	adds	r4, r2, r1
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	d1e0      	bne.n	8009bb2 <_free_r+0x26>
 8009bf0:	681c      	ldr	r4, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	6053      	str	r3, [r2, #4]
 8009bf6:	440c      	add	r4, r1
 8009bf8:	6014      	str	r4, [r2, #0]
 8009bfa:	e7da      	b.n	8009bb2 <_free_r+0x26>
 8009bfc:	d902      	bls.n	8009c04 <_free_r+0x78>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	6003      	str	r3, [r0, #0]
 8009c02:	e7d6      	b.n	8009bb2 <_free_r+0x26>
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	1961      	adds	r1, r4, r5
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf04      	itt	eq
 8009c0c:	6819      	ldreq	r1, [r3, #0]
 8009c0e:	685b      	ldreq	r3, [r3, #4]
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	bf04      	itt	eq
 8009c14:	1949      	addeq	r1, r1, r5
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	6054      	str	r4, [r2, #4]
 8009c1a:	e7ca      	b.n	8009bb2 <_free_r+0x26>
 8009c1c:	b003      	add	sp, #12
 8009c1e:	bd30      	pop	{r4, r5, pc}
 8009c20:	20002c04 	.word	0x20002c04

08009c24 <rshift>:
 8009c24:	6903      	ldr	r3, [r0, #16]
 8009c26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c32:	f100 0414 	add.w	r4, r0, #20
 8009c36:	dd45      	ble.n	8009cc4 <rshift+0xa0>
 8009c38:	f011 011f 	ands.w	r1, r1, #31
 8009c3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c44:	d10c      	bne.n	8009c60 <rshift+0x3c>
 8009c46:	f100 0710 	add.w	r7, r0, #16
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	42b1      	cmp	r1, r6
 8009c4e:	d334      	bcc.n	8009cba <rshift+0x96>
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	1eea      	subs	r2, r5, #3
 8009c56:	4296      	cmp	r6, r2
 8009c58:	bf38      	it	cc
 8009c5a:	2300      	movcc	r3, #0
 8009c5c:	4423      	add	r3, r4
 8009c5e:	e015      	b.n	8009c8c <rshift+0x68>
 8009c60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c64:	f1c1 0820 	rsb	r8, r1, #32
 8009c68:	40cf      	lsrs	r7, r1
 8009c6a:	f105 0e04 	add.w	lr, r5, #4
 8009c6e:	46a1      	mov	r9, r4
 8009c70:	4576      	cmp	r6, lr
 8009c72:	46f4      	mov	ip, lr
 8009c74:	d815      	bhi.n	8009ca2 <rshift+0x7e>
 8009c76:	1a9a      	subs	r2, r3, r2
 8009c78:	0092      	lsls	r2, r2, #2
 8009c7a:	3a04      	subs	r2, #4
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	42ae      	cmp	r6, r5
 8009c80:	bf38      	it	cc
 8009c82:	2200      	movcc	r2, #0
 8009c84:	18a3      	adds	r3, r4, r2
 8009c86:	50a7      	str	r7, [r4, r2]
 8009c88:	b107      	cbz	r7, 8009c8c <rshift+0x68>
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	1b1a      	subs	r2, r3, r4
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c94:	bf08      	it	eq
 8009c96:	2300      	moveq	r3, #0
 8009c98:	6102      	str	r2, [r0, #16]
 8009c9a:	bf08      	it	eq
 8009c9c:	6143      	streq	r3, [r0, #20]
 8009c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ca2:	f8dc c000 	ldr.w	ip, [ip]
 8009ca6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009caa:	ea4c 0707 	orr.w	r7, ip, r7
 8009cae:	f849 7b04 	str.w	r7, [r9], #4
 8009cb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cb6:	40cf      	lsrs	r7, r1
 8009cb8:	e7da      	b.n	8009c70 <rshift+0x4c>
 8009cba:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009cc2:	e7c3      	b.n	8009c4c <rshift+0x28>
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	e7e1      	b.n	8009c8c <rshift+0x68>

08009cc8 <__hexdig_fun>:
 8009cc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ccc:	2b09      	cmp	r3, #9
 8009cce:	d802      	bhi.n	8009cd6 <__hexdig_fun+0xe>
 8009cd0:	3820      	subs	r0, #32
 8009cd2:	b2c0      	uxtb	r0, r0
 8009cd4:	4770      	bx	lr
 8009cd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d801      	bhi.n	8009ce2 <__hexdig_fun+0x1a>
 8009cde:	3847      	subs	r0, #71	; 0x47
 8009ce0:	e7f7      	b.n	8009cd2 <__hexdig_fun+0xa>
 8009ce2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d801      	bhi.n	8009cee <__hexdig_fun+0x26>
 8009cea:	3827      	subs	r0, #39	; 0x27
 8009cec:	e7f1      	b.n	8009cd2 <__hexdig_fun+0xa>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	4770      	bx	lr
	...

08009cf4 <__gethex>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	4617      	mov	r7, r2
 8009cfa:	680a      	ldr	r2, [r1, #0]
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	f102 0b02 	add.w	fp, r2, #2
 8009d02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d0a:	4681      	mov	r9, r0
 8009d0c:	468a      	mov	sl, r1
 8009d0e:	9302      	str	r3, [sp, #8]
 8009d10:	32fe      	adds	r2, #254	; 0xfe
 8009d12:	eb02 030b 	add.w	r3, r2, fp
 8009d16:	46d8      	mov	r8, fp
 8009d18:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	2830      	cmp	r0, #48	; 0x30
 8009d20:	d0f7      	beq.n	8009d12 <__gethex+0x1e>
 8009d22:	f7ff ffd1 	bl	8009cc8 <__hexdig_fun>
 8009d26:	4604      	mov	r4, r0
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d138      	bne.n	8009d9e <__gethex+0xaa>
 8009d2c:	49a7      	ldr	r1, [pc, #668]	; (8009fcc <__gethex+0x2d8>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	4640      	mov	r0, r8
 8009d32:	f7fe ff60 	bl	8008bf6 <strncmp>
 8009d36:	4606      	mov	r6, r0
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d169      	bne.n	8009e10 <__gethex+0x11c>
 8009d3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009d40:	465d      	mov	r5, fp
 8009d42:	f7ff ffc1 	bl	8009cc8 <__hexdig_fun>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d064      	beq.n	8009e14 <__gethex+0x120>
 8009d4a:	465a      	mov	r2, fp
 8009d4c:	7810      	ldrb	r0, [r2, #0]
 8009d4e:	2830      	cmp	r0, #48	; 0x30
 8009d50:	4690      	mov	r8, r2
 8009d52:	f102 0201 	add.w	r2, r2, #1
 8009d56:	d0f9      	beq.n	8009d4c <__gethex+0x58>
 8009d58:	f7ff ffb6 	bl	8009cc8 <__hexdig_fun>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	fab0 f480 	clz	r4, r0
 8009d62:	0964      	lsrs	r4, r4, #5
 8009d64:	465e      	mov	r6, fp
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	4642      	mov	r2, r8
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	3201      	adds	r2, #1
 8009d6e:	7828      	ldrb	r0, [r5, #0]
 8009d70:	f7ff ffaa 	bl	8009cc8 <__hexdig_fun>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d1f8      	bne.n	8009d6a <__gethex+0x76>
 8009d78:	4994      	ldr	r1, [pc, #592]	; (8009fcc <__gethex+0x2d8>)
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7fe ff3a 	bl	8008bf6 <strncmp>
 8009d82:	b978      	cbnz	r0, 8009da4 <__gethex+0xb0>
 8009d84:	b946      	cbnz	r6, 8009d98 <__gethex+0xa4>
 8009d86:	1c6e      	adds	r6, r5, #1
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4615      	mov	r5, r2
 8009d8c:	3201      	adds	r2, #1
 8009d8e:	7828      	ldrb	r0, [r5, #0]
 8009d90:	f7ff ff9a 	bl	8009cc8 <__hexdig_fun>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d1f8      	bne.n	8009d8a <__gethex+0x96>
 8009d98:	1b73      	subs	r3, r6, r5
 8009d9a:	009e      	lsls	r6, r3, #2
 8009d9c:	e004      	b.n	8009da8 <__gethex+0xb4>
 8009d9e:	2400      	movs	r4, #0
 8009da0:	4626      	mov	r6, r4
 8009da2:	e7e1      	b.n	8009d68 <__gethex+0x74>
 8009da4:	2e00      	cmp	r6, #0
 8009da6:	d1f7      	bne.n	8009d98 <__gethex+0xa4>
 8009da8:	782b      	ldrb	r3, [r5, #0]
 8009daa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dae:	2b50      	cmp	r3, #80	; 0x50
 8009db0:	d13d      	bne.n	8009e2e <__gethex+0x13a>
 8009db2:	786b      	ldrb	r3, [r5, #1]
 8009db4:	2b2b      	cmp	r3, #43	; 0x2b
 8009db6:	d02f      	beq.n	8009e18 <__gethex+0x124>
 8009db8:	2b2d      	cmp	r3, #45	; 0x2d
 8009dba:	d031      	beq.n	8009e20 <__gethex+0x12c>
 8009dbc:	1c69      	adds	r1, r5, #1
 8009dbe:	f04f 0b00 	mov.w	fp, #0
 8009dc2:	7808      	ldrb	r0, [r1, #0]
 8009dc4:	f7ff ff80 	bl	8009cc8 <__hexdig_fun>
 8009dc8:	1e42      	subs	r2, r0, #1
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	2a18      	cmp	r2, #24
 8009dce:	d82e      	bhi.n	8009e2e <__gethex+0x13a>
 8009dd0:	f1a0 0210 	sub.w	r2, r0, #16
 8009dd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009dd8:	f7ff ff76 	bl	8009cc8 <__hexdig_fun>
 8009ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009de0:	fa5f fc8c 	uxtb.w	ip, ip
 8009de4:	f1bc 0f18 	cmp.w	ip, #24
 8009de8:	d91d      	bls.n	8009e26 <__gethex+0x132>
 8009dea:	f1bb 0f00 	cmp.w	fp, #0
 8009dee:	d000      	beq.n	8009df2 <__gethex+0xfe>
 8009df0:	4252      	negs	r2, r2
 8009df2:	4416      	add	r6, r2
 8009df4:	f8ca 1000 	str.w	r1, [sl]
 8009df8:	b1dc      	cbz	r4, 8009e32 <__gethex+0x13e>
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bf14      	ite	ne
 8009e00:	f04f 0800 	movne.w	r8, #0
 8009e04:	f04f 0806 	moveq.w	r8, #6
 8009e08:	4640      	mov	r0, r8
 8009e0a:	b005      	add	sp, #20
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	4645      	mov	r5, r8
 8009e12:	4626      	mov	r6, r4
 8009e14:	2401      	movs	r4, #1
 8009e16:	e7c7      	b.n	8009da8 <__gethex+0xb4>
 8009e18:	f04f 0b00 	mov.w	fp, #0
 8009e1c:	1ca9      	adds	r1, r5, #2
 8009e1e:	e7d0      	b.n	8009dc2 <__gethex+0xce>
 8009e20:	f04f 0b01 	mov.w	fp, #1
 8009e24:	e7fa      	b.n	8009e1c <__gethex+0x128>
 8009e26:	230a      	movs	r3, #10
 8009e28:	fb03 0002 	mla	r0, r3, r2, r0
 8009e2c:	e7d0      	b.n	8009dd0 <__gethex+0xdc>
 8009e2e:	4629      	mov	r1, r5
 8009e30:	e7e0      	b.n	8009df4 <__gethex+0x100>
 8009e32:	eba5 0308 	sub.w	r3, r5, r8
 8009e36:	3b01      	subs	r3, #1
 8009e38:	4621      	mov	r1, r4
 8009e3a:	2b07      	cmp	r3, #7
 8009e3c:	dc0a      	bgt.n	8009e54 <__gethex+0x160>
 8009e3e:	4648      	mov	r0, r9
 8009e40:	f000 fb0e 	bl	800a460 <_Balloc>
 8009e44:	4604      	mov	r4, r0
 8009e46:	b940      	cbnz	r0, 8009e5a <__gethex+0x166>
 8009e48:	4b61      	ldr	r3, [pc, #388]	; (8009fd0 <__gethex+0x2dc>)
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	21e4      	movs	r1, #228	; 0xe4
 8009e4e:	4861      	ldr	r0, [pc, #388]	; (8009fd4 <__gethex+0x2e0>)
 8009e50:	f7ff f804 	bl	8008e5c <__assert_func>
 8009e54:	3101      	adds	r1, #1
 8009e56:	105b      	asrs	r3, r3, #1
 8009e58:	e7ef      	b.n	8009e3a <__gethex+0x146>
 8009e5a:	f100 0a14 	add.w	sl, r0, #20
 8009e5e:	2300      	movs	r3, #0
 8009e60:	495a      	ldr	r1, [pc, #360]	; (8009fcc <__gethex+0x2d8>)
 8009e62:	f8cd a004 	str.w	sl, [sp, #4]
 8009e66:	469b      	mov	fp, r3
 8009e68:	45a8      	cmp	r8, r5
 8009e6a:	d342      	bcc.n	8009ef2 <__gethex+0x1fe>
 8009e6c:	9801      	ldr	r0, [sp, #4]
 8009e6e:	f840 bb04 	str.w	fp, [r0], #4
 8009e72:	eba0 000a 	sub.w	r0, r0, sl
 8009e76:	1080      	asrs	r0, r0, #2
 8009e78:	6120      	str	r0, [r4, #16]
 8009e7a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 fbe0 	bl	800a644 <__hi0bits>
 8009e84:	683d      	ldr	r5, [r7, #0]
 8009e86:	eba8 0000 	sub.w	r0, r8, r0
 8009e8a:	42a8      	cmp	r0, r5
 8009e8c:	dd59      	ble.n	8009f42 <__gethex+0x24e>
 8009e8e:	eba0 0805 	sub.w	r8, r0, r5
 8009e92:	4641      	mov	r1, r8
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 ff6f 	bl	800ad78 <__any_on>
 8009e9a:	4683      	mov	fp, r0
 8009e9c:	b1b8      	cbz	r0, 8009ece <__gethex+0x1da>
 8009e9e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ea2:	1159      	asrs	r1, r3, #5
 8009ea4:	f003 021f 	and.w	r2, r3, #31
 8009ea8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009eac:	f04f 0b01 	mov.w	fp, #1
 8009eb0:	fa0b f202 	lsl.w	r2, fp, r2
 8009eb4:	420a      	tst	r2, r1
 8009eb6:	d00a      	beq.n	8009ece <__gethex+0x1da>
 8009eb8:	455b      	cmp	r3, fp
 8009eba:	dd06      	ble.n	8009eca <__gethex+0x1d6>
 8009ebc:	f1a8 0102 	sub.w	r1, r8, #2
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 ff59 	bl	800ad78 <__any_on>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d138      	bne.n	8009f3c <__gethex+0x248>
 8009eca:	f04f 0b02 	mov.w	fp, #2
 8009ece:	4641      	mov	r1, r8
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f7ff fea7 	bl	8009c24 <rshift>
 8009ed6:	4446      	add	r6, r8
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	42b3      	cmp	r3, r6
 8009edc:	da41      	bge.n	8009f62 <__gethex+0x26e>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4648      	mov	r0, r9
 8009ee2:	f000 fafd 	bl	800a4e0 <_Bfree>
 8009ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ee8:	2300      	movs	r3, #0
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009ef0:	e78a      	b.n	8009e08 <__gethex+0x114>
 8009ef2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009ef6:	2a2e      	cmp	r2, #46	; 0x2e
 8009ef8:	d014      	beq.n	8009f24 <__gethex+0x230>
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d106      	bne.n	8009f0c <__gethex+0x218>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	f843 bb04 	str.w	fp, [r3], #4
 8009f04:	f04f 0b00 	mov.w	fp, #0
 8009f08:	9301      	str	r3, [sp, #4]
 8009f0a:	465b      	mov	r3, fp
 8009f0c:	7828      	ldrb	r0, [r5, #0]
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	f7ff feda 	bl	8009cc8 <__hexdig_fun>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	f000 000f 	and.w	r0, r0, #15
 8009f1a:	4098      	lsls	r0, r3
 8009f1c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f20:	3304      	adds	r3, #4
 8009f22:	e7a1      	b.n	8009e68 <__gethex+0x174>
 8009f24:	45a8      	cmp	r8, r5
 8009f26:	d8e8      	bhi.n	8009efa <__gethex+0x206>
 8009f28:	2201      	movs	r2, #1
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	f7fe fe62 	bl	8008bf6 <strncmp>
 8009f32:	4926      	ldr	r1, [pc, #152]	; (8009fcc <__gethex+0x2d8>)
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d1df      	bne.n	8009efa <__gethex+0x206>
 8009f3a:	e795      	b.n	8009e68 <__gethex+0x174>
 8009f3c:	f04f 0b03 	mov.w	fp, #3
 8009f40:	e7c5      	b.n	8009ece <__gethex+0x1da>
 8009f42:	da0b      	bge.n	8009f5c <__gethex+0x268>
 8009f44:	eba5 0800 	sub.w	r8, r5, r0
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fce1 	bl	800a914 <__lshift>
 8009f52:	eba6 0608 	sub.w	r6, r6, r8
 8009f56:	4604      	mov	r4, r0
 8009f58:	f100 0a14 	add.w	sl, r0, #20
 8009f5c:	f04f 0b00 	mov.w	fp, #0
 8009f60:	e7ba      	b.n	8009ed8 <__gethex+0x1e4>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	42b3      	cmp	r3, r6
 8009f66:	dd73      	ble.n	800a050 <__gethex+0x35c>
 8009f68:	1b9e      	subs	r6, r3, r6
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	dc34      	bgt.n	8009fd8 <__gethex+0x2e4>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d023      	beq.n	8009fbc <__gethex+0x2c8>
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d025      	beq.n	8009fc4 <__gethex+0x2d0>
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d115      	bne.n	8009fa8 <__gethex+0x2b4>
 8009f7c:	42b5      	cmp	r5, r6
 8009f7e:	d113      	bne.n	8009fa8 <__gethex+0x2b4>
 8009f80:	2d01      	cmp	r5, #1
 8009f82:	d10b      	bne.n	8009f9c <__gethex+0x2a8>
 8009f84:	9a02      	ldr	r2, [sp, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	f8ca 3000 	str.w	r3, [sl]
 8009f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f94:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009f98:	601c      	str	r4, [r3, #0]
 8009f9a:	e735      	b.n	8009e08 <__gethex+0x114>
 8009f9c:	1e69      	subs	r1, r5, #1
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 feea 	bl	800ad78 <__any_on>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d1ed      	bne.n	8009f84 <__gethex+0x290>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4648      	mov	r0, r9
 8009fac:	f000 fa98 	bl	800a4e0 <_Bfree>
 8009fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009fba:	e725      	b.n	8009e08 <__gethex+0x114>
 8009fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f2      	bne.n	8009fa8 <__gethex+0x2b4>
 8009fc2:	e7df      	b.n	8009f84 <__gethex+0x290>
 8009fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1dc      	bne.n	8009f84 <__gethex+0x290>
 8009fca:	e7ed      	b.n	8009fa8 <__gethex+0x2b4>
 8009fcc:	0800be00 	.word	0x0800be00
 8009fd0:	0800c0ac 	.word	0x0800c0ac
 8009fd4:	0800c0bd 	.word	0x0800c0bd
 8009fd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8009fdc:	f1bb 0f00 	cmp.w	fp, #0
 8009fe0:	d133      	bne.n	800a04a <__gethex+0x356>
 8009fe2:	f1b8 0f00 	cmp.w	r8, #0
 8009fe6:	d004      	beq.n	8009ff2 <__gethex+0x2fe>
 8009fe8:	4641      	mov	r1, r8
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fec4 	bl	800ad78 <__any_on>
 8009ff0:	4683      	mov	fp, r0
 8009ff2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ffc:	f008 081f 	and.w	r8, r8, #31
 800a000:	fa03 f308 	lsl.w	r3, r3, r8
 800a004:	4213      	tst	r3, r2
 800a006:	4631      	mov	r1, r6
 800a008:	4620      	mov	r0, r4
 800a00a:	bf18      	it	ne
 800a00c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a010:	1bad      	subs	r5, r5, r6
 800a012:	f7ff fe07 	bl	8009c24 <rshift>
 800a016:	687e      	ldr	r6, [r7, #4]
 800a018:	f04f 0802 	mov.w	r8, #2
 800a01c:	f1bb 0f00 	cmp.w	fp, #0
 800a020:	d04a      	beq.n	800a0b8 <__gethex+0x3c4>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d016      	beq.n	800a056 <__gethex+0x362>
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d018      	beq.n	800a05e <__gethex+0x36a>
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d109      	bne.n	800a044 <__gethex+0x350>
 800a030:	f01b 0f02 	tst.w	fp, #2
 800a034:	d006      	beq.n	800a044 <__gethex+0x350>
 800a036:	f8da 3000 	ldr.w	r3, [sl]
 800a03a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a03e:	f01b 0f01 	tst.w	fp, #1
 800a042:	d10f      	bne.n	800a064 <__gethex+0x370>
 800a044:	f048 0810 	orr.w	r8, r8, #16
 800a048:	e036      	b.n	800a0b8 <__gethex+0x3c4>
 800a04a:	f04f 0b01 	mov.w	fp, #1
 800a04e:	e7d0      	b.n	8009ff2 <__gethex+0x2fe>
 800a050:	f04f 0801 	mov.w	r8, #1
 800a054:	e7e2      	b.n	800a01c <__gethex+0x328>
 800a056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a058:	f1c3 0301 	rsb	r3, r3, #1
 800a05c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0ef      	beq.n	800a044 <__gethex+0x350>
 800a064:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a068:	f104 0214 	add.w	r2, r4, #20
 800a06c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a076:	2300      	movs	r3, #0
 800a078:	4694      	mov	ip, r2
 800a07a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a07e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a082:	d01e      	beq.n	800a0c2 <__gethex+0x3ce>
 800a084:	3101      	adds	r1, #1
 800a086:	f8cc 1000 	str.w	r1, [ip]
 800a08a:	f1b8 0f02 	cmp.w	r8, #2
 800a08e:	f104 0214 	add.w	r2, r4, #20
 800a092:	d13d      	bne.n	800a110 <__gethex+0x41c>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	3b01      	subs	r3, #1
 800a098:	42ab      	cmp	r3, r5
 800a09a:	d10b      	bne.n	800a0b4 <__gethex+0x3c0>
 800a09c:	1169      	asrs	r1, r5, #5
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f005 051f 	and.w	r5, r5, #31
 800a0a4:	fa03 f505 	lsl.w	r5, r3, r5
 800a0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ac:	421d      	tst	r5, r3
 800a0ae:	bf18      	it	ne
 800a0b0:	f04f 0801 	movne.w	r8, #1
 800a0b4:	f048 0820 	orr.w	r8, r8, #32
 800a0b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ba:	601c      	str	r4, [r3, #0]
 800a0bc:	9b02      	ldr	r3, [sp, #8]
 800a0be:	601e      	str	r6, [r3, #0]
 800a0c0:	e6a2      	b.n	8009e08 <__gethex+0x114>
 800a0c2:	4290      	cmp	r0, r2
 800a0c4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a0c8:	d8d6      	bhi.n	800a078 <__gethex+0x384>
 800a0ca:	68a2      	ldr	r2, [r4, #8]
 800a0cc:	4593      	cmp	fp, r2
 800a0ce:	db17      	blt.n	800a100 <__gethex+0x40c>
 800a0d0:	6861      	ldr	r1, [r4, #4]
 800a0d2:	4648      	mov	r0, r9
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	f000 f9c3 	bl	800a460 <_Balloc>
 800a0da:	4682      	mov	sl, r0
 800a0dc:	b918      	cbnz	r0, 800a0e6 <__gethex+0x3f2>
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <__gethex+0x458>)
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	2184      	movs	r1, #132	; 0x84
 800a0e4:	e6b3      	b.n	8009e4e <__gethex+0x15a>
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	f104 010c 	add.w	r1, r4, #12
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	300c      	adds	r0, #12
 800a0f2:	f7fe fe96 	bl	8008e22 <memcpy>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4648      	mov	r0, r9
 800a0fa:	f000 f9f1 	bl	800a4e0 <_Bfree>
 800a0fe:	4654      	mov	r4, sl
 800a100:	6922      	ldr	r2, [r4, #16]
 800a102:	1c51      	adds	r1, r2, #1
 800a104:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a108:	6121      	str	r1, [r4, #16]
 800a10a:	2101      	movs	r1, #1
 800a10c:	6151      	str	r1, [r2, #20]
 800a10e:	e7bc      	b.n	800a08a <__gethex+0x396>
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	4559      	cmp	r1, fp
 800a114:	dd0b      	ble.n	800a12e <__gethex+0x43a>
 800a116:	2101      	movs	r1, #1
 800a118:	4620      	mov	r0, r4
 800a11a:	f7ff fd83 	bl	8009c24 <rshift>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	3601      	adds	r6, #1
 800a122:	42b3      	cmp	r3, r6
 800a124:	f6ff aedb 	blt.w	8009ede <__gethex+0x1ea>
 800a128:	f04f 0801 	mov.w	r8, #1
 800a12c:	e7c2      	b.n	800a0b4 <__gethex+0x3c0>
 800a12e:	f015 051f 	ands.w	r5, r5, #31
 800a132:	d0f9      	beq.n	800a128 <__gethex+0x434>
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	441a      	add	r2, r3
 800a138:	f1c5 0520 	rsb	r5, r5, #32
 800a13c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a140:	f000 fa80 	bl	800a644 <__hi0bits>
 800a144:	42a8      	cmp	r0, r5
 800a146:	dbe6      	blt.n	800a116 <__gethex+0x422>
 800a148:	e7ee      	b.n	800a128 <__gethex+0x434>
 800a14a:	bf00      	nop
 800a14c:	0800c0ac 	.word	0x0800c0ac

0800a150 <L_shift>:
 800a150:	f1c2 0208 	rsb	r2, r2, #8
 800a154:	0092      	lsls	r2, r2, #2
 800a156:	b570      	push	{r4, r5, r6, lr}
 800a158:	f1c2 0620 	rsb	r6, r2, #32
 800a15c:	6843      	ldr	r3, [r0, #4]
 800a15e:	6804      	ldr	r4, [r0, #0]
 800a160:	fa03 f506 	lsl.w	r5, r3, r6
 800a164:	432c      	orrs	r4, r5
 800a166:	40d3      	lsrs	r3, r2
 800a168:	6004      	str	r4, [r0, #0]
 800a16a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a16e:	4288      	cmp	r0, r1
 800a170:	d3f4      	bcc.n	800a15c <L_shift+0xc>
 800a172:	bd70      	pop	{r4, r5, r6, pc}

0800a174 <__match>:
 800a174:	b530      	push	{r4, r5, lr}
 800a176:	6803      	ldr	r3, [r0, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17e:	b914      	cbnz	r4, 800a186 <__match+0x12>
 800a180:	6003      	str	r3, [r0, #0]
 800a182:	2001      	movs	r0, #1
 800a184:	bd30      	pop	{r4, r5, pc}
 800a186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a18e:	2d19      	cmp	r5, #25
 800a190:	bf98      	it	ls
 800a192:	3220      	addls	r2, #32
 800a194:	42a2      	cmp	r2, r4
 800a196:	d0f0      	beq.n	800a17a <__match+0x6>
 800a198:	2000      	movs	r0, #0
 800a19a:	e7f3      	b.n	800a184 <__match+0x10>

0800a19c <__hexnan>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	680b      	ldr	r3, [r1, #0]
 800a1a2:	6801      	ldr	r1, [r0, #0]
 800a1a4:	115e      	asrs	r6, r3, #5
 800a1a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1aa:	f013 031f 	ands.w	r3, r3, #31
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	bf18      	it	ne
 800a1b2:	3604      	addne	r6, #4
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	1f37      	subs	r7, r6, #4
 800a1b8:	4682      	mov	sl, r0
 800a1ba:	4690      	mov	r8, r2
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1c2:	46b9      	mov	r9, r7
 800a1c4:	463c      	mov	r4, r7
 800a1c6:	9502      	str	r5, [sp, #8]
 800a1c8:	46ab      	mov	fp, r5
 800a1ca:	784a      	ldrb	r2, [r1, #1]
 800a1cc:	1c4b      	adds	r3, r1, #1
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	b342      	cbz	r2, 800a224 <__hexnan+0x88>
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	9105      	str	r1, [sp, #20]
 800a1d6:	9204      	str	r2, [sp, #16]
 800a1d8:	f7ff fd76 	bl	8009cc8 <__hexdig_fun>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d14f      	bne.n	800a280 <__hexnan+0xe4>
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	9905      	ldr	r1, [sp, #20]
 800a1e4:	2a20      	cmp	r2, #32
 800a1e6:	d818      	bhi.n	800a21a <__hexnan+0x7e>
 800a1e8:	9b02      	ldr	r3, [sp, #8]
 800a1ea:	459b      	cmp	fp, r3
 800a1ec:	dd13      	ble.n	800a216 <__hexnan+0x7a>
 800a1ee:	454c      	cmp	r4, r9
 800a1f0:	d206      	bcs.n	800a200 <__hexnan+0x64>
 800a1f2:	2d07      	cmp	r5, #7
 800a1f4:	dc04      	bgt.n	800a200 <__hexnan+0x64>
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ffa8 	bl	800a150 <L_shift>
 800a200:	4544      	cmp	r4, r8
 800a202:	d950      	bls.n	800a2a6 <__hexnan+0x10a>
 800a204:	2300      	movs	r3, #0
 800a206:	f1a4 0904 	sub.w	r9, r4, #4
 800a20a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a20e:	f8cd b008 	str.w	fp, [sp, #8]
 800a212:	464c      	mov	r4, r9
 800a214:	461d      	mov	r5, r3
 800a216:	9903      	ldr	r1, [sp, #12]
 800a218:	e7d7      	b.n	800a1ca <__hexnan+0x2e>
 800a21a:	2a29      	cmp	r2, #41	; 0x29
 800a21c:	d155      	bne.n	800a2ca <__hexnan+0x12e>
 800a21e:	3102      	adds	r1, #2
 800a220:	f8ca 1000 	str.w	r1, [sl]
 800a224:	f1bb 0f00 	cmp.w	fp, #0
 800a228:	d04f      	beq.n	800a2ca <__hexnan+0x12e>
 800a22a:	454c      	cmp	r4, r9
 800a22c:	d206      	bcs.n	800a23c <__hexnan+0xa0>
 800a22e:	2d07      	cmp	r5, #7
 800a230:	dc04      	bgt.n	800a23c <__hexnan+0xa0>
 800a232:	462a      	mov	r2, r5
 800a234:	4649      	mov	r1, r9
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff ff8a 	bl	800a150 <L_shift>
 800a23c:	4544      	cmp	r4, r8
 800a23e:	d934      	bls.n	800a2aa <__hexnan+0x10e>
 800a240:	f1a8 0204 	sub.w	r2, r8, #4
 800a244:	4623      	mov	r3, r4
 800a246:	f853 1b04 	ldr.w	r1, [r3], #4
 800a24a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a24e:	429f      	cmp	r7, r3
 800a250:	d2f9      	bcs.n	800a246 <__hexnan+0xaa>
 800a252:	1b3b      	subs	r3, r7, r4
 800a254:	f023 0303 	bic.w	r3, r3, #3
 800a258:	3304      	adds	r3, #4
 800a25a:	3e03      	subs	r6, #3
 800a25c:	3401      	adds	r4, #1
 800a25e:	42a6      	cmp	r6, r4
 800a260:	bf38      	it	cc
 800a262:	2304      	movcc	r3, #4
 800a264:	4443      	add	r3, r8
 800a266:	2200      	movs	r2, #0
 800a268:	f843 2b04 	str.w	r2, [r3], #4
 800a26c:	429f      	cmp	r7, r3
 800a26e:	d2fb      	bcs.n	800a268 <__hexnan+0xcc>
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	b91b      	cbnz	r3, 800a27c <__hexnan+0xe0>
 800a274:	4547      	cmp	r7, r8
 800a276:	d126      	bne.n	800a2c6 <__hexnan+0x12a>
 800a278:	2301      	movs	r3, #1
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	2005      	movs	r0, #5
 800a27e:	e025      	b.n	800a2cc <__hexnan+0x130>
 800a280:	3501      	adds	r5, #1
 800a282:	2d08      	cmp	r5, #8
 800a284:	f10b 0b01 	add.w	fp, fp, #1
 800a288:	dd06      	ble.n	800a298 <__hexnan+0xfc>
 800a28a:	4544      	cmp	r4, r8
 800a28c:	d9c3      	bls.n	800a216 <__hexnan+0x7a>
 800a28e:	2300      	movs	r3, #0
 800a290:	f844 3c04 	str.w	r3, [r4, #-4]
 800a294:	2501      	movs	r5, #1
 800a296:	3c04      	subs	r4, #4
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	f000 000f 	and.w	r0, r0, #15
 800a29e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2a2:	6020      	str	r0, [r4, #0]
 800a2a4:	e7b7      	b.n	800a216 <__hexnan+0x7a>
 800a2a6:	2508      	movs	r5, #8
 800a2a8:	e7b5      	b.n	800a216 <__hexnan+0x7a>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0df      	beq.n	800a270 <__hexnan+0xd4>
 800a2b0:	f1c3 0320 	rsb	r3, r3, #32
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b8:	40da      	lsrs	r2, r3
 800a2ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2c4:	e7d4      	b.n	800a270 <__hexnan+0xd4>
 800a2c6:	3f04      	subs	r7, #4
 800a2c8:	e7d2      	b.n	800a270 <__hexnan+0xd4>
 800a2ca:	2004      	movs	r0, #4
 800a2cc:	b007      	add	sp, #28
 800a2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a2d4 <malloc>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <malloc+0xc>)
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f000 b823 	b.w	800a324 <_malloc_r>
 800a2de:	bf00      	nop
 800a2e0:	200001d4 	.word	0x200001d4

0800a2e4 <sbrk_aligned>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	4e0e      	ldr	r6, [pc, #56]	; (800a320 <sbrk_aligned+0x3c>)
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	6831      	ldr	r1, [r6, #0]
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	b911      	cbnz	r1, 800a2f6 <sbrk_aligned+0x12>
 800a2f0:	f001 f96a 	bl	800b5c8 <_sbrk_r>
 800a2f4:	6030      	str	r0, [r6, #0]
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f001 f965 	bl	800b5c8 <_sbrk_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d00a      	beq.n	800a318 <sbrk_aligned+0x34>
 800a302:	1cc4      	adds	r4, r0, #3
 800a304:	f024 0403 	bic.w	r4, r4, #3
 800a308:	42a0      	cmp	r0, r4
 800a30a:	d007      	beq.n	800a31c <sbrk_aligned+0x38>
 800a30c:	1a21      	subs	r1, r4, r0
 800a30e:	4628      	mov	r0, r5
 800a310:	f001 f95a 	bl	800b5c8 <_sbrk_r>
 800a314:	3001      	adds	r0, #1
 800a316:	d101      	bne.n	800a31c <sbrk_aligned+0x38>
 800a318:	f04f 34ff 	mov.w	r4, #4294967295
 800a31c:	4620      	mov	r0, r4
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	20002c08 	.word	0x20002c08

0800a324 <_malloc_r>:
 800a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a328:	1ccd      	adds	r5, r1, #3
 800a32a:	f025 0503 	bic.w	r5, r5, #3
 800a32e:	3508      	adds	r5, #8
 800a330:	2d0c      	cmp	r5, #12
 800a332:	bf38      	it	cc
 800a334:	250c      	movcc	r5, #12
 800a336:	2d00      	cmp	r5, #0
 800a338:	4607      	mov	r7, r0
 800a33a:	db01      	blt.n	800a340 <_malloc_r+0x1c>
 800a33c:	42a9      	cmp	r1, r5
 800a33e:	d905      	bls.n	800a34c <_malloc_r+0x28>
 800a340:	230c      	movs	r3, #12
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	2600      	movs	r6, #0
 800a346:	4630      	mov	r0, r6
 800a348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a420 <_malloc_r+0xfc>
 800a350:	f000 f87a 	bl	800a448 <__malloc_lock>
 800a354:	f8d8 3000 	ldr.w	r3, [r8]
 800a358:	461c      	mov	r4, r3
 800a35a:	bb5c      	cbnz	r4, 800a3b4 <_malloc_r+0x90>
 800a35c:	4629      	mov	r1, r5
 800a35e:	4638      	mov	r0, r7
 800a360:	f7ff ffc0 	bl	800a2e4 <sbrk_aligned>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	4604      	mov	r4, r0
 800a368:	d155      	bne.n	800a416 <_malloc_r+0xf2>
 800a36a:	f8d8 4000 	ldr.w	r4, [r8]
 800a36e:	4626      	mov	r6, r4
 800a370:	2e00      	cmp	r6, #0
 800a372:	d145      	bne.n	800a400 <_malloc_r+0xdc>
 800a374:	2c00      	cmp	r4, #0
 800a376:	d048      	beq.n	800a40a <_malloc_r+0xe6>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	4631      	mov	r1, r6
 800a37c:	4638      	mov	r0, r7
 800a37e:	eb04 0903 	add.w	r9, r4, r3
 800a382:	f001 f921 	bl	800b5c8 <_sbrk_r>
 800a386:	4581      	cmp	r9, r0
 800a388:	d13f      	bne.n	800a40a <_malloc_r+0xe6>
 800a38a:	6821      	ldr	r1, [r4, #0]
 800a38c:	1a6d      	subs	r5, r5, r1
 800a38e:	4629      	mov	r1, r5
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff ffa7 	bl	800a2e4 <sbrk_aligned>
 800a396:	3001      	adds	r0, #1
 800a398:	d037      	beq.n	800a40a <_malloc_r+0xe6>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	442b      	add	r3, r5
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d038      	beq.n	800a41a <_malloc_r+0xf6>
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	42a2      	cmp	r2, r4
 800a3ac:	d12b      	bne.n	800a406 <_malloc_r+0xe2>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	e00f      	b.n	800a3d4 <_malloc_r+0xb0>
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	1b52      	subs	r2, r2, r5
 800a3b8:	d41f      	bmi.n	800a3fa <_malloc_r+0xd6>
 800a3ba:	2a0b      	cmp	r2, #11
 800a3bc:	d917      	bls.n	800a3ee <_malloc_r+0xca>
 800a3be:	1961      	adds	r1, r4, r5
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	6025      	str	r5, [r4, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	6059      	strne	r1, [r3, #4]
 800a3c8:	6863      	ldr	r3, [r4, #4]
 800a3ca:	bf08      	it	eq
 800a3cc:	f8c8 1000 	streq.w	r1, [r8]
 800a3d0:	5162      	str	r2, [r4, r5]
 800a3d2:	604b      	str	r3, [r1, #4]
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f104 060b 	add.w	r6, r4, #11
 800a3da:	f000 f83b 	bl	800a454 <__malloc_unlock>
 800a3de:	f026 0607 	bic.w	r6, r6, #7
 800a3e2:	1d23      	adds	r3, r4, #4
 800a3e4:	1af2      	subs	r2, r6, r3
 800a3e6:	d0ae      	beq.n	800a346 <_malloc_r+0x22>
 800a3e8:	1b9b      	subs	r3, r3, r6
 800a3ea:	50a3      	str	r3, [r4, r2]
 800a3ec:	e7ab      	b.n	800a346 <_malloc_r+0x22>
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	6862      	ldr	r2, [r4, #4]
 800a3f2:	d1dd      	bne.n	800a3b0 <_malloc_r+0x8c>
 800a3f4:	f8c8 2000 	str.w	r2, [r8]
 800a3f8:	e7ec      	b.n	800a3d4 <_malloc_r+0xb0>
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	6864      	ldr	r4, [r4, #4]
 800a3fe:	e7ac      	b.n	800a35a <_malloc_r+0x36>
 800a400:	4634      	mov	r4, r6
 800a402:	6876      	ldr	r6, [r6, #4]
 800a404:	e7b4      	b.n	800a370 <_malloc_r+0x4c>
 800a406:	4613      	mov	r3, r2
 800a408:	e7cc      	b.n	800a3a4 <_malloc_r+0x80>
 800a40a:	230c      	movs	r3, #12
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	4638      	mov	r0, r7
 800a410:	f000 f820 	bl	800a454 <__malloc_unlock>
 800a414:	e797      	b.n	800a346 <_malloc_r+0x22>
 800a416:	6025      	str	r5, [r4, #0]
 800a418:	e7dc      	b.n	800a3d4 <_malloc_r+0xb0>
 800a41a:	605b      	str	r3, [r3, #4]
 800a41c:	deff      	udf	#255	; 0xff
 800a41e:	bf00      	nop
 800a420:	20002c04 	.word	0x20002c04

0800a424 <__ascii_mbtowc>:
 800a424:	b082      	sub	sp, #8
 800a426:	b901      	cbnz	r1, 800a42a <__ascii_mbtowc+0x6>
 800a428:	a901      	add	r1, sp, #4
 800a42a:	b142      	cbz	r2, 800a43e <__ascii_mbtowc+0x1a>
 800a42c:	b14b      	cbz	r3, 800a442 <__ascii_mbtowc+0x1e>
 800a42e:	7813      	ldrb	r3, [r2, #0]
 800a430:	600b      	str	r3, [r1, #0]
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	1e10      	subs	r0, r2, #0
 800a436:	bf18      	it	ne
 800a438:	2001      	movne	r0, #1
 800a43a:	b002      	add	sp, #8
 800a43c:	4770      	bx	lr
 800a43e:	4610      	mov	r0, r2
 800a440:	e7fb      	b.n	800a43a <__ascii_mbtowc+0x16>
 800a442:	f06f 0001 	mvn.w	r0, #1
 800a446:	e7f8      	b.n	800a43a <__ascii_mbtowc+0x16>

0800a448 <__malloc_lock>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__malloc_lock+0x8>)
 800a44a:	f7fe bce0 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 800a44e:	bf00      	nop
 800a450:	20002c00 	.word	0x20002c00

0800a454 <__malloc_unlock>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__malloc_unlock+0x8>)
 800a456:	f7fe bcdb 	b.w	8008e10 <__retarget_lock_release_recursive>
 800a45a:	bf00      	nop
 800a45c:	20002c00 	.word	0x20002c00

0800a460 <_Balloc>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	69c6      	ldr	r6, [r0, #28]
 800a464:	4604      	mov	r4, r0
 800a466:	460d      	mov	r5, r1
 800a468:	b976      	cbnz	r6, 800a488 <_Balloc+0x28>
 800a46a:	2010      	movs	r0, #16
 800a46c:	f7ff ff32 	bl	800a2d4 <malloc>
 800a470:	4602      	mov	r2, r0
 800a472:	61e0      	str	r0, [r4, #28]
 800a474:	b920      	cbnz	r0, 800a480 <_Balloc+0x20>
 800a476:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <_Balloc+0x78>)
 800a478:	4818      	ldr	r0, [pc, #96]	; (800a4dc <_Balloc+0x7c>)
 800a47a:	216b      	movs	r1, #107	; 0x6b
 800a47c:	f7fe fcee 	bl	8008e5c <__assert_func>
 800a480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a484:	6006      	str	r6, [r0, #0]
 800a486:	60c6      	str	r6, [r0, #12]
 800a488:	69e6      	ldr	r6, [r4, #28]
 800a48a:	68f3      	ldr	r3, [r6, #12]
 800a48c:	b183      	cbz	r3, 800a4b0 <_Balloc+0x50>
 800a48e:	69e3      	ldr	r3, [r4, #28]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a496:	b9b8      	cbnz	r0, 800a4c8 <_Balloc+0x68>
 800a498:	2101      	movs	r1, #1
 800a49a:	fa01 f605 	lsl.w	r6, r1, r5
 800a49e:	1d72      	adds	r2, r6, #5
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f001 f8a7 	bl	800b5f6 <_calloc_r>
 800a4a8:	b160      	cbz	r0, 800a4c4 <_Balloc+0x64>
 800a4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ae:	e00e      	b.n	800a4ce <_Balloc+0x6e>
 800a4b0:	2221      	movs	r2, #33	; 0x21
 800a4b2:	2104      	movs	r1, #4
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f001 f89e 	bl	800b5f6 <_calloc_r>
 800a4ba:	69e3      	ldr	r3, [r4, #28]
 800a4bc:	60f0      	str	r0, [r6, #12]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e4      	bne.n	800a48e <_Balloc+0x2e>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	6802      	ldr	r2, [r0, #0]
 800a4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4d4:	e7f7      	b.n	800a4c6 <_Balloc+0x66>
 800a4d6:	bf00      	nop
 800a4d8:	0800bf92 	.word	0x0800bf92
 800a4dc:	0800c11d 	.word	0x0800c11d

0800a4e0 <_Bfree>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	69c6      	ldr	r6, [r0, #28]
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	b976      	cbnz	r6, 800a508 <_Bfree+0x28>
 800a4ea:	2010      	movs	r0, #16
 800a4ec:	f7ff fef2 	bl	800a2d4 <malloc>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	61e8      	str	r0, [r5, #28]
 800a4f4:	b920      	cbnz	r0, 800a500 <_Bfree+0x20>
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <_Bfree+0x3c>)
 800a4f8:	4809      	ldr	r0, [pc, #36]	; (800a520 <_Bfree+0x40>)
 800a4fa:	218f      	movs	r1, #143	; 0x8f
 800a4fc:	f7fe fcae 	bl	8008e5c <__assert_func>
 800a500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a504:	6006      	str	r6, [r0, #0]
 800a506:	60c6      	str	r6, [r0, #12]
 800a508:	b13c      	cbz	r4, 800a51a <_Bfree+0x3a>
 800a50a:	69eb      	ldr	r3, [r5, #28]
 800a50c:	6862      	ldr	r2, [r4, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a514:	6021      	str	r1, [r4, #0]
 800a516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
 800a51c:	0800bf92 	.word	0x0800bf92
 800a520:	0800c11d 	.word	0x0800c11d

0800a524 <__multadd>:
 800a524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	690d      	ldr	r5, [r1, #16]
 800a52a:	4607      	mov	r7, r0
 800a52c:	460c      	mov	r4, r1
 800a52e:	461e      	mov	r6, r3
 800a530:	f101 0c14 	add.w	ip, r1, #20
 800a534:	2000      	movs	r0, #0
 800a536:	f8dc 3000 	ldr.w	r3, [ip]
 800a53a:	b299      	uxth	r1, r3
 800a53c:	fb02 6101 	mla	r1, r2, r1, r6
 800a540:	0c1e      	lsrs	r6, r3, #16
 800a542:	0c0b      	lsrs	r3, r1, #16
 800a544:	fb02 3306 	mla	r3, r2, r6, r3
 800a548:	b289      	uxth	r1, r1
 800a54a:	3001      	adds	r0, #1
 800a54c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a550:	4285      	cmp	r5, r0
 800a552:	f84c 1b04 	str.w	r1, [ip], #4
 800a556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a55a:	dcec      	bgt.n	800a536 <__multadd+0x12>
 800a55c:	b30e      	cbz	r6, 800a5a2 <__multadd+0x7e>
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	42ab      	cmp	r3, r5
 800a562:	dc19      	bgt.n	800a598 <__multadd+0x74>
 800a564:	6861      	ldr	r1, [r4, #4]
 800a566:	4638      	mov	r0, r7
 800a568:	3101      	adds	r1, #1
 800a56a:	f7ff ff79 	bl	800a460 <_Balloc>
 800a56e:	4680      	mov	r8, r0
 800a570:	b928      	cbnz	r0, 800a57e <__multadd+0x5a>
 800a572:	4602      	mov	r2, r0
 800a574:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <__multadd+0x84>)
 800a576:	480d      	ldr	r0, [pc, #52]	; (800a5ac <__multadd+0x88>)
 800a578:	21ba      	movs	r1, #186	; 0xba
 800a57a:	f7fe fc6f 	bl	8008e5c <__assert_func>
 800a57e:	6922      	ldr	r2, [r4, #16]
 800a580:	3202      	adds	r2, #2
 800a582:	f104 010c 	add.w	r1, r4, #12
 800a586:	0092      	lsls	r2, r2, #2
 800a588:	300c      	adds	r0, #12
 800a58a:	f7fe fc4a 	bl	8008e22 <memcpy>
 800a58e:	4621      	mov	r1, r4
 800a590:	4638      	mov	r0, r7
 800a592:	f7ff ffa5 	bl	800a4e0 <_Bfree>
 800a596:	4644      	mov	r4, r8
 800a598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a59c:	3501      	adds	r5, #1
 800a59e:	615e      	str	r6, [r3, #20]
 800a5a0:	6125      	str	r5, [r4, #16]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	0800c0ac 	.word	0x0800c0ac
 800a5ac:	0800c11d 	.word	0x0800c11d

0800a5b0 <__s2b>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	461f      	mov	r7, r3
 800a5ba:	2209      	movs	r2, #9
 800a5bc:	3308      	adds	r3, #8
 800a5be:	4606      	mov	r6, r0
 800a5c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	db09      	blt.n	800a5e0 <__s2b+0x30>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ff47 	bl	800a460 <_Balloc>
 800a5d2:	b940      	cbnz	r0, 800a5e6 <__s2b+0x36>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	4b19      	ldr	r3, [pc, #100]	; (800a63c <__s2b+0x8c>)
 800a5d8:	4819      	ldr	r0, [pc, #100]	; (800a640 <__s2b+0x90>)
 800a5da:	21d3      	movs	r1, #211	; 0xd3
 800a5dc:	f7fe fc3e 	bl	8008e5c <__assert_func>
 800a5e0:	0052      	lsls	r2, r2, #1
 800a5e2:	3101      	adds	r1, #1
 800a5e4:	e7f0      	b.n	800a5c8 <__s2b+0x18>
 800a5e6:	9b08      	ldr	r3, [sp, #32]
 800a5e8:	6143      	str	r3, [r0, #20]
 800a5ea:	2d09      	cmp	r5, #9
 800a5ec:	f04f 0301 	mov.w	r3, #1
 800a5f0:	6103      	str	r3, [r0, #16]
 800a5f2:	dd16      	ble.n	800a622 <__s2b+0x72>
 800a5f4:	f104 0909 	add.w	r9, r4, #9
 800a5f8:	46c8      	mov	r8, r9
 800a5fa:	442c      	add	r4, r5
 800a5fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a600:	4601      	mov	r1, r0
 800a602:	3b30      	subs	r3, #48	; 0x30
 800a604:	220a      	movs	r2, #10
 800a606:	4630      	mov	r0, r6
 800a608:	f7ff ff8c 	bl	800a524 <__multadd>
 800a60c:	45a0      	cmp	r8, r4
 800a60e:	d1f5      	bne.n	800a5fc <__s2b+0x4c>
 800a610:	f1a5 0408 	sub.w	r4, r5, #8
 800a614:	444c      	add	r4, r9
 800a616:	1b2d      	subs	r5, r5, r4
 800a618:	1963      	adds	r3, r4, r5
 800a61a:	42bb      	cmp	r3, r7
 800a61c:	db04      	blt.n	800a628 <__s2b+0x78>
 800a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a622:	340a      	adds	r4, #10
 800a624:	2509      	movs	r5, #9
 800a626:	e7f6      	b.n	800a616 <__s2b+0x66>
 800a628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a62c:	4601      	mov	r1, r0
 800a62e:	3b30      	subs	r3, #48	; 0x30
 800a630:	220a      	movs	r2, #10
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ff76 	bl	800a524 <__multadd>
 800a638:	e7ee      	b.n	800a618 <__s2b+0x68>
 800a63a:	bf00      	nop
 800a63c:	0800c0ac 	.word	0x0800c0ac
 800a640:	0800c11d 	.word	0x0800c11d

0800a644 <__hi0bits>:
 800a644:	0c03      	lsrs	r3, r0, #16
 800a646:	041b      	lsls	r3, r3, #16
 800a648:	b9d3      	cbnz	r3, 800a680 <__hi0bits+0x3c>
 800a64a:	0400      	lsls	r0, r0, #16
 800a64c:	2310      	movs	r3, #16
 800a64e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a652:	bf04      	itt	eq
 800a654:	0200      	lsleq	r0, r0, #8
 800a656:	3308      	addeq	r3, #8
 800a658:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a65c:	bf04      	itt	eq
 800a65e:	0100      	lsleq	r0, r0, #4
 800a660:	3304      	addeq	r3, #4
 800a662:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a666:	bf04      	itt	eq
 800a668:	0080      	lsleq	r0, r0, #2
 800a66a:	3302      	addeq	r3, #2
 800a66c:	2800      	cmp	r0, #0
 800a66e:	db05      	blt.n	800a67c <__hi0bits+0x38>
 800a670:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a674:	f103 0301 	add.w	r3, r3, #1
 800a678:	bf08      	it	eq
 800a67a:	2320      	moveq	r3, #32
 800a67c:	4618      	mov	r0, r3
 800a67e:	4770      	bx	lr
 800a680:	2300      	movs	r3, #0
 800a682:	e7e4      	b.n	800a64e <__hi0bits+0xa>

0800a684 <__lo0bits>:
 800a684:	6803      	ldr	r3, [r0, #0]
 800a686:	f013 0207 	ands.w	r2, r3, #7
 800a68a:	d00c      	beq.n	800a6a6 <__lo0bits+0x22>
 800a68c:	07d9      	lsls	r1, r3, #31
 800a68e:	d422      	bmi.n	800a6d6 <__lo0bits+0x52>
 800a690:	079a      	lsls	r2, r3, #30
 800a692:	bf49      	itett	mi
 800a694:	085b      	lsrmi	r3, r3, #1
 800a696:	089b      	lsrpl	r3, r3, #2
 800a698:	6003      	strmi	r3, [r0, #0]
 800a69a:	2201      	movmi	r2, #1
 800a69c:	bf5c      	itt	pl
 800a69e:	6003      	strpl	r3, [r0, #0]
 800a6a0:	2202      	movpl	r2, #2
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	4770      	bx	lr
 800a6a6:	b299      	uxth	r1, r3
 800a6a8:	b909      	cbnz	r1, 800a6ae <__lo0bits+0x2a>
 800a6aa:	0c1b      	lsrs	r3, r3, #16
 800a6ac:	2210      	movs	r2, #16
 800a6ae:	b2d9      	uxtb	r1, r3
 800a6b0:	b909      	cbnz	r1, 800a6b6 <__lo0bits+0x32>
 800a6b2:	3208      	adds	r2, #8
 800a6b4:	0a1b      	lsrs	r3, r3, #8
 800a6b6:	0719      	lsls	r1, r3, #28
 800a6b8:	bf04      	itt	eq
 800a6ba:	091b      	lsreq	r3, r3, #4
 800a6bc:	3204      	addeq	r2, #4
 800a6be:	0799      	lsls	r1, r3, #30
 800a6c0:	bf04      	itt	eq
 800a6c2:	089b      	lsreq	r3, r3, #2
 800a6c4:	3202      	addeq	r2, #2
 800a6c6:	07d9      	lsls	r1, r3, #31
 800a6c8:	d403      	bmi.n	800a6d2 <__lo0bits+0x4e>
 800a6ca:	085b      	lsrs	r3, r3, #1
 800a6cc:	f102 0201 	add.w	r2, r2, #1
 800a6d0:	d003      	beq.n	800a6da <__lo0bits+0x56>
 800a6d2:	6003      	str	r3, [r0, #0]
 800a6d4:	e7e5      	b.n	800a6a2 <__lo0bits+0x1e>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e7e3      	b.n	800a6a2 <__lo0bits+0x1e>
 800a6da:	2220      	movs	r2, #32
 800a6dc:	e7e1      	b.n	800a6a2 <__lo0bits+0x1e>
	...

0800a6e0 <__i2b>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	f7ff febb 	bl	800a460 <_Balloc>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	b928      	cbnz	r0, 800a6fa <__i2b+0x1a>
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <__i2b+0x24>)
 800a6f0:	4805      	ldr	r0, [pc, #20]	; (800a708 <__i2b+0x28>)
 800a6f2:	f240 1145 	movw	r1, #325	; 0x145
 800a6f6:	f7fe fbb1 	bl	8008e5c <__assert_func>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	6144      	str	r4, [r0, #20]
 800a6fe:	6103      	str	r3, [r0, #16]
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0800c0ac 	.word	0x0800c0ac
 800a708:	0800c11d 	.word	0x0800c11d

0800a70c <__multiply>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4691      	mov	r9, r2
 800a712:	690a      	ldr	r2, [r1, #16]
 800a714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a718:	429a      	cmp	r2, r3
 800a71a:	bfb8      	it	lt
 800a71c:	460b      	movlt	r3, r1
 800a71e:	460c      	mov	r4, r1
 800a720:	bfbc      	itt	lt
 800a722:	464c      	movlt	r4, r9
 800a724:	4699      	movlt	r9, r3
 800a726:	6927      	ldr	r7, [r4, #16]
 800a728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a72c:	68a3      	ldr	r3, [r4, #8]
 800a72e:	6861      	ldr	r1, [r4, #4]
 800a730:	eb07 060a 	add.w	r6, r7, sl
 800a734:	42b3      	cmp	r3, r6
 800a736:	b085      	sub	sp, #20
 800a738:	bfb8      	it	lt
 800a73a:	3101      	addlt	r1, #1
 800a73c:	f7ff fe90 	bl	800a460 <_Balloc>
 800a740:	b930      	cbnz	r0, 800a750 <__multiply+0x44>
 800a742:	4602      	mov	r2, r0
 800a744:	4b44      	ldr	r3, [pc, #272]	; (800a858 <__multiply+0x14c>)
 800a746:	4845      	ldr	r0, [pc, #276]	; (800a85c <__multiply+0x150>)
 800a748:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a74c:	f7fe fb86 	bl	8008e5c <__assert_func>
 800a750:	f100 0514 	add.w	r5, r0, #20
 800a754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a758:	462b      	mov	r3, r5
 800a75a:	2200      	movs	r2, #0
 800a75c:	4543      	cmp	r3, r8
 800a75e:	d321      	bcc.n	800a7a4 <__multiply+0x98>
 800a760:	f104 0314 	add.w	r3, r4, #20
 800a764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a768:	f109 0314 	add.w	r3, r9, #20
 800a76c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a770:	9202      	str	r2, [sp, #8]
 800a772:	1b3a      	subs	r2, r7, r4
 800a774:	3a15      	subs	r2, #21
 800a776:	f022 0203 	bic.w	r2, r2, #3
 800a77a:	3204      	adds	r2, #4
 800a77c:	f104 0115 	add.w	r1, r4, #21
 800a780:	428f      	cmp	r7, r1
 800a782:	bf38      	it	cc
 800a784:	2204      	movcc	r2, #4
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	9a02      	ldr	r2, [sp, #8]
 800a78a:	9303      	str	r3, [sp, #12]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d80c      	bhi.n	800a7aa <__multiply+0x9e>
 800a790:	2e00      	cmp	r6, #0
 800a792:	dd03      	ble.n	800a79c <__multiply+0x90>
 800a794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d05b      	beq.n	800a854 <__multiply+0x148>
 800a79c:	6106      	str	r6, [r0, #16]
 800a79e:	b005      	add	sp, #20
 800a7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a4:	f843 2b04 	str.w	r2, [r3], #4
 800a7a8:	e7d8      	b.n	800a75c <__multiply+0x50>
 800a7aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7ae:	f1ba 0f00 	cmp.w	sl, #0
 800a7b2:	d024      	beq.n	800a7fe <__multiply+0xf2>
 800a7b4:	f104 0e14 	add.w	lr, r4, #20
 800a7b8:	46a9      	mov	r9, r5
 800a7ba:	f04f 0c00 	mov.w	ip, #0
 800a7be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7c2:	f8d9 1000 	ldr.w	r1, [r9]
 800a7c6:	fa1f fb82 	uxth.w	fp, r2
 800a7ca:	b289      	uxth	r1, r1
 800a7cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a7d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a7d8:	4461      	add	r1, ip
 800a7da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7de:	fb0a c20b 	mla	r2, sl, fp, ip
 800a7e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7e6:	b289      	uxth	r1, r1
 800a7e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7ec:	4577      	cmp	r7, lr
 800a7ee:	f849 1b04 	str.w	r1, [r9], #4
 800a7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7f6:	d8e2      	bhi.n	800a7be <__multiply+0xb2>
 800a7f8:	9a01      	ldr	r2, [sp, #4]
 800a7fa:	f845 c002 	str.w	ip, [r5, r2]
 800a7fe:	9a03      	ldr	r2, [sp, #12]
 800a800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a804:	3304      	adds	r3, #4
 800a806:	f1b9 0f00 	cmp.w	r9, #0
 800a80a:	d021      	beq.n	800a850 <__multiply+0x144>
 800a80c:	6829      	ldr	r1, [r5, #0]
 800a80e:	f104 0c14 	add.w	ip, r4, #20
 800a812:	46ae      	mov	lr, r5
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	f8bc b000 	ldrh.w	fp, [ip]
 800a81c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a820:	fb09 220b 	mla	r2, r9, fp, r2
 800a824:	4452      	add	r2, sl
 800a826:	b289      	uxth	r1, r1
 800a828:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a82c:	f84e 1b04 	str.w	r1, [lr], #4
 800a830:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a834:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a838:	f8be 1000 	ldrh.w	r1, [lr]
 800a83c:	fb09 110a 	mla	r1, r9, sl, r1
 800a840:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a844:	4567      	cmp	r7, ip
 800a846:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a84a:	d8e5      	bhi.n	800a818 <__multiply+0x10c>
 800a84c:	9a01      	ldr	r2, [sp, #4]
 800a84e:	50a9      	str	r1, [r5, r2]
 800a850:	3504      	adds	r5, #4
 800a852:	e799      	b.n	800a788 <__multiply+0x7c>
 800a854:	3e01      	subs	r6, #1
 800a856:	e79b      	b.n	800a790 <__multiply+0x84>
 800a858:	0800c0ac 	.word	0x0800c0ac
 800a85c:	0800c11d 	.word	0x0800c11d

0800a860 <__pow5mult>:
 800a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a864:	4615      	mov	r5, r2
 800a866:	f012 0203 	ands.w	r2, r2, #3
 800a86a:	4606      	mov	r6, r0
 800a86c:	460f      	mov	r7, r1
 800a86e:	d007      	beq.n	800a880 <__pow5mult+0x20>
 800a870:	4c25      	ldr	r4, [pc, #148]	; (800a908 <__pow5mult+0xa8>)
 800a872:	3a01      	subs	r2, #1
 800a874:	2300      	movs	r3, #0
 800a876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a87a:	f7ff fe53 	bl	800a524 <__multadd>
 800a87e:	4607      	mov	r7, r0
 800a880:	10ad      	asrs	r5, r5, #2
 800a882:	d03d      	beq.n	800a900 <__pow5mult+0xa0>
 800a884:	69f4      	ldr	r4, [r6, #28]
 800a886:	b97c      	cbnz	r4, 800a8a8 <__pow5mult+0x48>
 800a888:	2010      	movs	r0, #16
 800a88a:	f7ff fd23 	bl	800a2d4 <malloc>
 800a88e:	4602      	mov	r2, r0
 800a890:	61f0      	str	r0, [r6, #28]
 800a892:	b928      	cbnz	r0, 800a8a0 <__pow5mult+0x40>
 800a894:	4b1d      	ldr	r3, [pc, #116]	; (800a90c <__pow5mult+0xac>)
 800a896:	481e      	ldr	r0, [pc, #120]	; (800a910 <__pow5mult+0xb0>)
 800a898:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a89c:	f7fe fade 	bl	8008e5c <__assert_func>
 800a8a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8a4:	6004      	str	r4, [r0, #0]
 800a8a6:	60c4      	str	r4, [r0, #12]
 800a8a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a8ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8b0:	b94c      	cbnz	r4, 800a8c6 <__pow5mult+0x66>
 800a8b2:	f240 2171 	movw	r1, #625	; 0x271
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff ff12 	bl	800a6e0 <__i2b>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	f04f 0900 	mov.w	r9, #0
 800a8ca:	07eb      	lsls	r3, r5, #31
 800a8cc:	d50a      	bpl.n	800a8e4 <__pow5mult+0x84>
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff ff1a 	bl	800a70c <__multiply>
 800a8d8:	4639      	mov	r1, r7
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7ff fdff 	bl	800a4e0 <_Bfree>
 800a8e2:	4647      	mov	r7, r8
 800a8e4:	106d      	asrs	r5, r5, #1
 800a8e6:	d00b      	beq.n	800a900 <__pow5mult+0xa0>
 800a8e8:	6820      	ldr	r0, [r4, #0]
 800a8ea:	b938      	cbnz	r0, 800a8fc <__pow5mult+0x9c>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f7ff ff0b 	bl	800a70c <__multiply>
 800a8f6:	6020      	str	r0, [r4, #0]
 800a8f8:	f8c0 9000 	str.w	r9, [r0]
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	e7e4      	b.n	800a8ca <__pow5mult+0x6a>
 800a900:	4638      	mov	r0, r7
 800a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a906:	bf00      	nop
 800a908:	0800c268 	.word	0x0800c268
 800a90c:	0800bf92 	.word	0x0800bf92
 800a910:	0800c11d 	.word	0x0800c11d

0800a914 <__lshift>:
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	6849      	ldr	r1, [r1, #4]
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	4607      	mov	r7, r0
 800a926:	4691      	mov	r9, r2
 800a928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a92c:	f108 0601 	add.w	r6, r8, #1
 800a930:	42b3      	cmp	r3, r6
 800a932:	db0b      	blt.n	800a94c <__lshift+0x38>
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff fd93 	bl	800a460 <_Balloc>
 800a93a:	4605      	mov	r5, r0
 800a93c:	b948      	cbnz	r0, 800a952 <__lshift+0x3e>
 800a93e:	4602      	mov	r2, r0
 800a940:	4b28      	ldr	r3, [pc, #160]	; (800a9e4 <__lshift+0xd0>)
 800a942:	4829      	ldr	r0, [pc, #164]	; (800a9e8 <__lshift+0xd4>)
 800a944:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a948:	f7fe fa88 	bl	8008e5c <__assert_func>
 800a94c:	3101      	adds	r1, #1
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	e7ee      	b.n	800a930 <__lshift+0x1c>
 800a952:	2300      	movs	r3, #0
 800a954:	f100 0114 	add.w	r1, r0, #20
 800a958:	f100 0210 	add.w	r2, r0, #16
 800a95c:	4618      	mov	r0, r3
 800a95e:	4553      	cmp	r3, sl
 800a960:	db33      	blt.n	800a9ca <__lshift+0xb6>
 800a962:	6920      	ldr	r0, [r4, #16]
 800a964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a968:	f104 0314 	add.w	r3, r4, #20
 800a96c:	f019 091f 	ands.w	r9, r9, #31
 800a970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a978:	d02b      	beq.n	800a9d2 <__lshift+0xbe>
 800a97a:	f1c9 0e20 	rsb	lr, r9, #32
 800a97e:	468a      	mov	sl, r1
 800a980:	2200      	movs	r2, #0
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	fa00 f009 	lsl.w	r0, r0, r9
 800a988:	4310      	orrs	r0, r2
 800a98a:	f84a 0b04 	str.w	r0, [sl], #4
 800a98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a992:	459c      	cmp	ip, r3
 800a994:	fa22 f20e 	lsr.w	r2, r2, lr
 800a998:	d8f3      	bhi.n	800a982 <__lshift+0x6e>
 800a99a:	ebac 0304 	sub.w	r3, ip, r4
 800a99e:	3b15      	subs	r3, #21
 800a9a0:	f023 0303 	bic.w	r3, r3, #3
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	f104 0015 	add.w	r0, r4, #21
 800a9aa:	4584      	cmp	ip, r0
 800a9ac:	bf38      	it	cc
 800a9ae:	2304      	movcc	r3, #4
 800a9b0:	50ca      	str	r2, [r1, r3]
 800a9b2:	b10a      	cbz	r2, 800a9b8 <__lshift+0xa4>
 800a9b4:	f108 0602 	add.w	r6, r8, #2
 800a9b8:	3e01      	subs	r6, #1
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	612e      	str	r6, [r5, #16]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f7ff fd8e 	bl	800a4e0 <_Bfree>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	e7c5      	b.n	800a95e <__lshift+0x4a>
 800a9d2:	3904      	subs	r1, #4
 800a9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9dc:	459c      	cmp	ip, r3
 800a9de:	d8f9      	bhi.n	800a9d4 <__lshift+0xc0>
 800a9e0:	e7ea      	b.n	800a9b8 <__lshift+0xa4>
 800a9e2:	bf00      	nop
 800a9e4:	0800c0ac 	.word	0x0800c0ac
 800a9e8:	0800c11d 	.word	0x0800c11d

0800a9ec <__mcmp>:
 800a9ec:	b530      	push	{r4, r5, lr}
 800a9ee:	6902      	ldr	r2, [r0, #16]
 800a9f0:	690c      	ldr	r4, [r1, #16]
 800a9f2:	1b12      	subs	r2, r2, r4
 800a9f4:	d10e      	bne.n	800aa14 <__mcmp+0x28>
 800a9f6:	f100 0314 	add.w	r3, r0, #20
 800a9fa:	3114      	adds	r1, #20
 800a9fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa0c:	42a5      	cmp	r5, r4
 800aa0e:	d003      	beq.n	800aa18 <__mcmp+0x2c>
 800aa10:	d305      	bcc.n	800aa1e <__mcmp+0x32>
 800aa12:	2201      	movs	r2, #1
 800aa14:	4610      	mov	r0, r2
 800aa16:	bd30      	pop	{r4, r5, pc}
 800aa18:	4283      	cmp	r3, r0
 800aa1a:	d3f3      	bcc.n	800aa04 <__mcmp+0x18>
 800aa1c:	e7fa      	b.n	800aa14 <__mcmp+0x28>
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa22:	e7f7      	b.n	800aa14 <__mcmp+0x28>

0800aa24 <__mdiff>:
 800aa24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	460c      	mov	r4, r1
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4690      	mov	r8, r2
 800aa32:	f7ff ffdb 	bl	800a9ec <__mcmp>
 800aa36:	1e05      	subs	r5, r0, #0
 800aa38:	d110      	bne.n	800aa5c <__mdiff+0x38>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff fd0f 	bl	800a460 <_Balloc>
 800aa42:	b930      	cbnz	r0, 800aa52 <__mdiff+0x2e>
 800aa44:	4b3a      	ldr	r3, [pc, #232]	; (800ab30 <__mdiff+0x10c>)
 800aa46:	4602      	mov	r2, r0
 800aa48:	f240 2137 	movw	r1, #567	; 0x237
 800aa4c:	4839      	ldr	r0, [pc, #228]	; (800ab34 <__mdiff+0x110>)
 800aa4e:	f7fe fa05 	bl	8008e5c <__assert_func>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	bfa4      	itt	ge
 800aa5e:	4643      	movge	r3, r8
 800aa60:	46a0      	movge	r8, r4
 800aa62:	4630      	mov	r0, r6
 800aa64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa68:	bfa6      	itte	ge
 800aa6a:	461c      	movge	r4, r3
 800aa6c:	2500      	movge	r5, #0
 800aa6e:	2501      	movlt	r5, #1
 800aa70:	f7ff fcf6 	bl	800a460 <_Balloc>
 800aa74:	b920      	cbnz	r0, 800aa80 <__mdiff+0x5c>
 800aa76:	4b2e      	ldr	r3, [pc, #184]	; (800ab30 <__mdiff+0x10c>)
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f240 2145 	movw	r1, #581	; 0x245
 800aa7e:	e7e5      	b.n	800aa4c <__mdiff+0x28>
 800aa80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa84:	6926      	ldr	r6, [r4, #16]
 800aa86:	60c5      	str	r5, [r0, #12]
 800aa88:	f104 0914 	add.w	r9, r4, #20
 800aa8c:	f108 0514 	add.w	r5, r8, #20
 800aa90:	f100 0e14 	add.w	lr, r0, #20
 800aa94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa9c:	f108 0210 	add.w	r2, r8, #16
 800aaa0:	46f2      	mov	sl, lr
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aaa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aaac:	fa11 f88b 	uxtah	r8, r1, fp
 800aab0:	b299      	uxth	r1, r3
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	eba8 0801 	sub.w	r8, r8, r1
 800aab8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aabc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aac0:	fa1f f888 	uxth.w	r8, r8
 800aac4:	1419      	asrs	r1, r3, #16
 800aac6:	454e      	cmp	r6, r9
 800aac8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aacc:	f84a 3b04 	str.w	r3, [sl], #4
 800aad0:	d8e8      	bhi.n	800aaa4 <__mdiff+0x80>
 800aad2:	1b33      	subs	r3, r6, r4
 800aad4:	3b15      	subs	r3, #21
 800aad6:	f023 0303 	bic.w	r3, r3, #3
 800aada:	3304      	adds	r3, #4
 800aadc:	3415      	adds	r4, #21
 800aade:	42a6      	cmp	r6, r4
 800aae0:	bf38      	it	cc
 800aae2:	2304      	movcc	r3, #4
 800aae4:	441d      	add	r5, r3
 800aae6:	4473      	add	r3, lr
 800aae8:	469e      	mov	lr, r3
 800aaea:	462e      	mov	r6, r5
 800aaec:	4566      	cmp	r6, ip
 800aaee:	d30e      	bcc.n	800ab0e <__mdiff+0xea>
 800aaf0:	f10c 0203 	add.w	r2, ip, #3
 800aaf4:	1b52      	subs	r2, r2, r5
 800aaf6:	f022 0203 	bic.w	r2, r2, #3
 800aafa:	3d03      	subs	r5, #3
 800aafc:	45ac      	cmp	ip, r5
 800aafe:	bf38      	it	cc
 800ab00:	2200      	movcc	r2, #0
 800ab02:	4413      	add	r3, r2
 800ab04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab08:	b17a      	cbz	r2, 800ab2a <__mdiff+0x106>
 800ab0a:	6107      	str	r7, [r0, #16]
 800ab0c:	e7a4      	b.n	800aa58 <__mdiff+0x34>
 800ab0e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab12:	fa11 f288 	uxtah	r2, r1, r8
 800ab16:	1414      	asrs	r4, r2, #16
 800ab18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab1c:	b292      	uxth	r2, r2
 800ab1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab22:	f84e 2b04 	str.w	r2, [lr], #4
 800ab26:	1421      	asrs	r1, r4, #16
 800ab28:	e7e0      	b.n	800aaec <__mdiff+0xc8>
 800ab2a:	3f01      	subs	r7, #1
 800ab2c:	e7ea      	b.n	800ab04 <__mdiff+0xe0>
 800ab2e:	bf00      	nop
 800ab30:	0800c0ac 	.word	0x0800c0ac
 800ab34:	0800c11d 	.word	0x0800c11d

0800ab38 <__ulp>:
 800ab38:	b082      	sub	sp, #8
 800ab3a:	ed8d 0b00 	vstr	d0, [sp]
 800ab3e:	9a01      	ldr	r2, [sp, #4]
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <__ulp+0x48>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dc08      	bgt.n	800ab5e <__ulp+0x26>
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab56:	da04      	bge.n	800ab62 <__ulp+0x2a>
 800ab58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab5c:	4113      	asrs	r3, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	e008      	b.n	800ab74 <__ulp+0x3c>
 800ab62:	f1a2 0314 	sub.w	r3, r2, #20
 800ab66:	2b1e      	cmp	r3, #30
 800ab68:	bfda      	itte	le
 800ab6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab6e:	40da      	lsrle	r2, r3
 800ab70:	2201      	movgt	r2, #1
 800ab72:	2300      	movs	r3, #0
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	ec41 0b10 	vmov	d0, r0, r1
 800ab7c:	b002      	add	sp, #8
 800ab7e:	4770      	bx	lr
 800ab80:	7ff00000 	.word	0x7ff00000

0800ab84 <__b2d>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	6906      	ldr	r6, [r0, #16]
 800ab8a:	f100 0814 	add.w	r8, r0, #20
 800ab8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab92:	1f37      	subs	r7, r6, #4
 800ab94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7ff fd53 	bl	800a644 <__hi0bits>
 800ab9e:	f1c0 0320 	rsb	r3, r0, #32
 800aba2:	280a      	cmp	r0, #10
 800aba4:	600b      	str	r3, [r1, #0]
 800aba6:	491b      	ldr	r1, [pc, #108]	; (800ac14 <__b2d+0x90>)
 800aba8:	dc15      	bgt.n	800abd6 <__b2d+0x52>
 800abaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800abae:	fa22 f30c 	lsr.w	r3, r2, ip
 800abb2:	45b8      	cmp	r8, r7
 800abb4:	ea43 0501 	orr.w	r5, r3, r1
 800abb8:	bf34      	ite	cc
 800abba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abbe:	2300      	movcs	r3, #0
 800abc0:	3015      	adds	r0, #21
 800abc2:	fa02 f000 	lsl.w	r0, r2, r0
 800abc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800abca:	4303      	orrs	r3, r0
 800abcc:	461c      	mov	r4, r3
 800abce:	ec45 4b10 	vmov	d0, r4, r5
 800abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd6:	45b8      	cmp	r8, r7
 800abd8:	bf3a      	itte	cc
 800abda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abde:	f1a6 0708 	subcc.w	r7, r6, #8
 800abe2:	2300      	movcs	r3, #0
 800abe4:	380b      	subs	r0, #11
 800abe6:	d012      	beq.n	800ac0e <__b2d+0x8a>
 800abe8:	f1c0 0120 	rsb	r1, r0, #32
 800abec:	fa23 f401 	lsr.w	r4, r3, r1
 800abf0:	4082      	lsls	r2, r0
 800abf2:	4322      	orrs	r2, r4
 800abf4:	4547      	cmp	r7, r8
 800abf6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800abfa:	bf8c      	ite	hi
 800abfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac00:	2200      	movls	r2, #0
 800ac02:	4083      	lsls	r3, r0
 800ac04:	40ca      	lsrs	r2, r1
 800ac06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	e7de      	b.n	800abcc <__b2d+0x48>
 800ac0e:	ea42 0501 	orr.w	r5, r2, r1
 800ac12:	e7db      	b.n	800abcc <__b2d+0x48>
 800ac14:	3ff00000 	.word	0x3ff00000

0800ac18 <__d2b>:
 800ac18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	2101      	movs	r1, #1
 800ac20:	ec59 8b10 	vmov	r8, r9, d0
 800ac24:	4616      	mov	r6, r2
 800ac26:	f7ff fc1b 	bl	800a460 <_Balloc>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b930      	cbnz	r0, 800ac3c <__d2b+0x24>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	4b24      	ldr	r3, [pc, #144]	; (800acc4 <__d2b+0xac>)
 800ac32:	4825      	ldr	r0, [pc, #148]	; (800acc8 <__d2b+0xb0>)
 800ac34:	f240 310f 	movw	r1, #783	; 0x30f
 800ac38:	f7fe f910 	bl	8008e5c <__assert_func>
 800ac3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac44:	bb2d      	cbnz	r5, 800ac92 <__d2b+0x7a>
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	f1b8 0300 	subs.w	r3, r8, #0
 800ac4c:	d026      	beq.n	800ac9c <__d2b+0x84>
 800ac4e:	4668      	mov	r0, sp
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	f7ff fd17 	bl	800a684 <__lo0bits>
 800ac56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac5a:	b1e8      	cbz	r0, 800ac98 <__d2b+0x80>
 800ac5c:	f1c0 0320 	rsb	r3, r0, #32
 800ac60:	fa02 f303 	lsl.w	r3, r2, r3
 800ac64:	430b      	orrs	r3, r1
 800ac66:	40c2      	lsrs	r2, r0
 800ac68:	6163      	str	r3, [r4, #20]
 800ac6a:	9201      	str	r2, [sp, #4]
 800ac6c:	9b01      	ldr	r3, [sp, #4]
 800ac6e:	61a3      	str	r3, [r4, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	bf14      	ite	ne
 800ac74:	2202      	movne	r2, #2
 800ac76:	2201      	moveq	r2, #1
 800ac78:	6122      	str	r2, [r4, #16]
 800ac7a:	b1bd      	cbz	r5, 800acac <__d2b+0x94>
 800ac7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac80:	4405      	add	r5, r0
 800ac82:	603d      	str	r5, [r7, #0]
 800ac84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	b003      	add	sp, #12
 800ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac96:	e7d6      	b.n	800ac46 <__d2b+0x2e>
 800ac98:	6161      	str	r1, [r4, #20]
 800ac9a:	e7e7      	b.n	800ac6c <__d2b+0x54>
 800ac9c:	a801      	add	r0, sp, #4
 800ac9e:	f7ff fcf1 	bl	800a684 <__lo0bits>
 800aca2:	9b01      	ldr	r3, [sp, #4]
 800aca4:	6163      	str	r3, [r4, #20]
 800aca6:	3020      	adds	r0, #32
 800aca8:	2201      	movs	r2, #1
 800acaa:	e7e5      	b.n	800ac78 <__d2b+0x60>
 800acac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acb4:	6038      	str	r0, [r7, #0]
 800acb6:	6918      	ldr	r0, [r3, #16]
 800acb8:	f7ff fcc4 	bl	800a644 <__hi0bits>
 800acbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acc0:	e7e2      	b.n	800ac88 <__d2b+0x70>
 800acc2:	bf00      	nop
 800acc4:	0800c0ac 	.word	0x0800c0ac
 800acc8:	0800c11d 	.word	0x0800c11d

0800accc <__ratio>:
 800accc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	4688      	mov	r8, r1
 800acd2:	4669      	mov	r1, sp
 800acd4:	4681      	mov	r9, r0
 800acd6:	f7ff ff55 	bl	800ab84 <__b2d>
 800acda:	a901      	add	r1, sp, #4
 800acdc:	4640      	mov	r0, r8
 800acde:	ec55 4b10 	vmov	r4, r5, d0
 800ace2:	f7ff ff4f 	bl	800ab84 <__b2d>
 800ace6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800acee:	eba3 0c02 	sub.w	ip, r3, r2
 800acf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800acfc:	ec51 0b10 	vmov	r0, r1, d0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfd6      	itet	le
 800ad04:	460a      	movle	r2, r1
 800ad06:	462a      	movgt	r2, r5
 800ad08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad0c:	468b      	mov	fp, r1
 800ad0e:	462f      	mov	r7, r5
 800ad10:	bfd4      	ite	le
 800ad12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	ee10 2a10 	vmov	r2, s0
 800ad20:	465b      	mov	r3, fp
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fd92 	bl	800084c <__aeabi_ddiv>
 800ad28:	ec41 0b10 	vmov	d0, r0, r1
 800ad2c:	b003      	add	sp, #12
 800ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad32 <__copybits>:
 800ad32:	3901      	subs	r1, #1
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	1149      	asrs	r1, r1, #5
 800ad38:	6914      	ldr	r4, [r2, #16]
 800ad3a:	3101      	adds	r1, #1
 800ad3c:	f102 0314 	add.w	r3, r2, #20
 800ad40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad48:	1f05      	subs	r5, r0, #4
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	d30c      	bcc.n	800ad68 <__copybits+0x36>
 800ad4e:	1aa3      	subs	r3, r4, r2
 800ad50:	3b11      	subs	r3, #17
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	3211      	adds	r2, #17
 800ad58:	42a2      	cmp	r2, r4
 800ad5a:	bf88      	it	hi
 800ad5c:	2300      	movhi	r3, #0
 800ad5e:	4418      	add	r0, r3
 800ad60:	2300      	movs	r3, #0
 800ad62:	4288      	cmp	r0, r1
 800ad64:	d305      	bcc.n	800ad72 <__copybits+0x40>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad6c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad70:	e7eb      	b.n	800ad4a <__copybits+0x18>
 800ad72:	f840 3b04 	str.w	r3, [r0], #4
 800ad76:	e7f4      	b.n	800ad62 <__copybits+0x30>

0800ad78 <__any_on>:
 800ad78:	f100 0214 	add.w	r2, r0, #20
 800ad7c:	6900      	ldr	r0, [r0, #16]
 800ad7e:	114b      	asrs	r3, r1, #5
 800ad80:	4298      	cmp	r0, r3
 800ad82:	b510      	push	{r4, lr}
 800ad84:	db11      	blt.n	800adaa <__any_on+0x32>
 800ad86:	dd0a      	ble.n	800ad9e <__any_on+0x26>
 800ad88:	f011 011f 	ands.w	r1, r1, #31
 800ad8c:	d007      	beq.n	800ad9e <__any_on+0x26>
 800ad8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad92:	fa24 f001 	lsr.w	r0, r4, r1
 800ad96:	fa00 f101 	lsl.w	r1, r0, r1
 800ad9a:	428c      	cmp	r4, r1
 800ad9c:	d10b      	bne.n	800adb6 <__any_on+0x3e>
 800ad9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d803      	bhi.n	800adae <__any_on+0x36>
 800ada6:	2000      	movs	r0, #0
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	4603      	mov	r3, r0
 800adac:	e7f7      	b.n	800ad9e <__any_on+0x26>
 800adae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adb2:	2900      	cmp	r1, #0
 800adb4:	d0f5      	beq.n	800ada2 <__any_on+0x2a>
 800adb6:	2001      	movs	r0, #1
 800adb8:	e7f6      	b.n	800ada8 <__any_on+0x30>

0800adba <__ascii_wctomb>:
 800adba:	b149      	cbz	r1, 800add0 <__ascii_wctomb+0x16>
 800adbc:	2aff      	cmp	r2, #255	; 0xff
 800adbe:	bf85      	ittet	hi
 800adc0:	238a      	movhi	r3, #138	; 0x8a
 800adc2:	6003      	strhi	r3, [r0, #0]
 800adc4:	700a      	strbls	r2, [r1, #0]
 800adc6:	f04f 30ff 	movhi.w	r0, #4294967295
 800adca:	bf98      	it	ls
 800adcc:	2001      	movls	r0, #1
 800adce:	4770      	bx	lr
 800add0:	4608      	mov	r0, r1
 800add2:	4770      	bx	lr

0800add4 <__ssputs_r>:
 800add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add8:	688e      	ldr	r6, [r1, #8]
 800adda:	461f      	mov	r7, r3
 800addc:	42be      	cmp	r6, r7
 800adde:	680b      	ldr	r3, [r1, #0]
 800ade0:	4682      	mov	sl, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4690      	mov	r8, r2
 800ade6:	d82c      	bhi.n	800ae42 <__ssputs_r+0x6e>
 800ade8:	898a      	ldrh	r2, [r1, #12]
 800adea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adee:	d026      	beq.n	800ae3e <__ssputs_r+0x6a>
 800adf0:	6965      	ldr	r5, [r4, #20]
 800adf2:	6909      	ldr	r1, [r1, #16]
 800adf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf8:	eba3 0901 	sub.w	r9, r3, r1
 800adfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae00:	1c7b      	adds	r3, r7, #1
 800ae02:	444b      	add	r3, r9
 800ae04:	106d      	asrs	r5, r5, #1
 800ae06:	429d      	cmp	r5, r3
 800ae08:	bf38      	it	cc
 800ae0a:	461d      	movcc	r5, r3
 800ae0c:	0553      	lsls	r3, r2, #21
 800ae0e:	d527      	bpl.n	800ae60 <__ssputs_r+0x8c>
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7ff fa87 	bl	800a324 <_malloc_r>
 800ae16:	4606      	mov	r6, r0
 800ae18:	b360      	cbz	r0, 800ae74 <__ssputs_r+0xa0>
 800ae1a:	6921      	ldr	r1, [r4, #16]
 800ae1c:	464a      	mov	r2, r9
 800ae1e:	f7fe f800 	bl	8008e22 <memcpy>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	6126      	str	r6, [r4, #16]
 800ae30:	6165      	str	r5, [r4, #20]
 800ae32:	444e      	add	r6, r9
 800ae34:	eba5 0509 	sub.w	r5, r5, r9
 800ae38:	6026      	str	r6, [r4, #0]
 800ae3a:	60a5      	str	r5, [r4, #8]
 800ae3c:	463e      	mov	r6, r7
 800ae3e:	42be      	cmp	r6, r7
 800ae40:	d900      	bls.n	800ae44 <__ssputs_r+0x70>
 800ae42:	463e      	mov	r6, r7
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4632      	mov	r2, r6
 800ae48:	4641      	mov	r1, r8
 800ae4a:	f000 fb81 	bl	800b550 <memmove>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	1b9b      	subs	r3, r3, r6
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	4433      	add	r3, r6
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	462a      	mov	r2, r5
 800ae62:	f000 fbde 	bl	800b622 <_realloc_r>
 800ae66:	4606      	mov	r6, r0
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d1e0      	bne.n	800ae2e <__ssputs_r+0x5a>
 800ae6c:	6921      	ldr	r1, [r4, #16]
 800ae6e:	4650      	mov	r0, sl
 800ae70:	f7fe fe8c 	bl	8009b8c <_free_r>
 800ae74:	230c      	movs	r3, #12
 800ae76:	f8ca 3000 	str.w	r3, [sl]
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae80:	81a3      	strh	r3, [r4, #12]
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	e7e9      	b.n	800ae5c <__ssputs_r+0x88>

0800ae88 <_svfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	4698      	mov	r8, r3
 800ae8e:	898b      	ldrh	r3, [r1, #12]
 800ae90:	061b      	lsls	r3, r3, #24
 800ae92:	b09d      	sub	sp, #116	; 0x74
 800ae94:	4607      	mov	r7, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	4614      	mov	r4, r2
 800ae9a:	d50e      	bpl.n	800aeba <_svfiprintf_r+0x32>
 800ae9c:	690b      	ldr	r3, [r1, #16]
 800ae9e:	b963      	cbnz	r3, 800aeba <_svfiprintf_r+0x32>
 800aea0:	2140      	movs	r1, #64	; 0x40
 800aea2:	f7ff fa3f 	bl	800a324 <_malloc_r>
 800aea6:	6028      	str	r0, [r5, #0]
 800aea8:	6128      	str	r0, [r5, #16]
 800aeaa:	b920      	cbnz	r0, 800aeb6 <_svfiprintf_r+0x2e>
 800aeac:	230c      	movs	r3, #12
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb4:	e0d0      	b.n	800b058 <_svfiprintf_r+0x1d0>
 800aeb6:	2340      	movs	r3, #64	; 0x40
 800aeb8:	616b      	str	r3, [r5, #20]
 800aeba:	2300      	movs	r3, #0
 800aebc:	9309      	str	r3, [sp, #36]	; 0x24
 800aebe:	2320      	movs	r3, #32
 800aec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec8:	2330      	movs	r3, #48	; 0x30
 800aeca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b070 <_svfiprintf_r+0x1e8>
 800aece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aed2:	f04f 0901 	mov.w	r9, #1
 800aed6:	4623      	mov	r3, r4
 800aed8:	469a      	mov	sl, r3
 800aeda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aede:	b10a      	cbz	r2, 800aee4 <_svfiprintf_r+0x5c>
 800aee0:	2a25      	cmp	r2, #37	; 0x25
 800aee2:	d1f9      	bne.n	800aed8 <_svfiprintf_r+0x50>
 800aee4:	ebba 0b04 	subs.w	fp, sl, r4
 800aee8:	d00b      	beq.n	800af02 <_svfiprintf_r+0x7a>
 800aeea:	465b      	mov	r3, fp
 800aeec:	4622      	mov	r2, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff ff6f 	bl	800add4 <__ssputs_r>
 800aef6:	3001      	adds	r0, #1
 800aef8:	f000 80a9 	beq.w	800b04e <_svfiprintf_r+0x1c6>
 800aefc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefe:	445a      	add	r2, fp
 800af00:	9209      	str	r2, [sp, #36]	; 0x24
 800af02:	f89a 3000 	ldrb.w	r3, [sl]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 80a1 	beq.w	800b04e <_svfiprintf_r+0x1c6>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f04f 32ff 	mov.w	r2, #4294967295
 800af12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af16:	f10a 0a01 	add.w	sl, sl, #1
 800af1a:	9304      	str	r3, [sp, #16]
 800af1c:	9307      	str	r3, [sp, #28]
 800af1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af22:	931a      	str	r3, [sp, #104]	; 0x68
 800af24:	4654      	mov	r4, sl
 800af26:	2205      	movs	r2, #5
 800af28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2c:	4850      	ldr	r0, [pc, #320]	; (800b070 <_svfiprintf_r+0x1e8>)
 800af2e:	f7f5 f94f 	bl	80001d0 <memchr>
 800af32:	9a04      	ldr	r2, [sp, #16]
 800af34:	b9d8      	cbnz	r0, 800af6e <_svfiprintf_r+0xe6>
 800af36:	06d0      	lsls	r0, r2, #27
 800af38:	bf44      	itt	mi
 800af3a:	2320      	movmi	r3, #32
 800af3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af40:	0711      	lsls	r1, r2, #28
 800af42:	bf44      	itt	mi
 800af44:	232b      	movmi	r3, #43	; 0x2b
 800af46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af4a:	f89a 3000 	ldrb.w	r3, [sl]
 800af4e:	2b2a      	cmp	r3, #42	; 0x2a
 800af50:	d015      	beq.n	800af7e <_svfiprintf_r+0xf6>
 800af52:	9a07      	ldr	r2, [sp, #28]
 800af54:	4654      	mov	r4, sl
 800af56:	2000      	movs	r0, #0
 800af58:	f04f 0c0a 	mov.w	ip, #10
 800af5c:	4621      	mov	r1, r4
 800af5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af62:	3b30      	subs	r3, #48	; 0x30
 800af64:	2b09      	cmp	r3, #9
 800af66:	d94d      	bls.n	800b004 <_svfiprintf_r+0x17c>
 800af68:	b1b0      	cbz	r0, 800af98 <_svfiprintf_r+0x110>
 800af6a:	9207      	str	r2, [sp, #28]
 800af6c:	e014      	b.n	800af98 <_svfiprintf_r+0x110>
 800af6e:	eba0 0308 	sub.w	r3, r0, r8
 800af72:	fa09 f303 	lsl.w	r3, r9, r3
 800af76:	4313      	orrs	r3, r2
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	46a2      	mov	sl, r4
 800af7c:	e7d2      	b.n	800af24 <_svfiprintf_r+0x9c>
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	1d19      	adds	r1, r3, #4
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	9103      	str	r1, [sp, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	bfbb      	ittet	lt
 800af8a:	425b      	neglt	r3, r3
 800af8c:	f042 0202 	orrlt.w	r2, r2, #2
 800af90:	9307      	strge	r3, [sp, #28]
 800af92:	9307      	strlt	r3, [sp, #28]
 800af94:	bfb8      	it	lt
 800af96:	9204      	strlt	r2, [sp, #16]
 800af98:	7823      	ldrb	r3, [r4, #0]
 800af9a:	2b2e      	cmp	r3, #46	; 0x2e
 800af9c:	d10c      	bne.n	800afb8 <_svfiprintf_r+0x130>
 800af9e:	7863      	ldrb	r3, [r4, #1]
 800afa0:	2b2a      	cmp	r3, #42	; 0x2a
 800afa2:	d134      	bne.n	800b00e <_svfiprintf_r+0x186>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	1d1a      	adds	r2, r3, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	9203      	str	r2, [sp, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	bfb8      	it	lt
 800afb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800afb4:	3402      	adds	r4, #2
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b080 <_svfiprintf_r+0x1f8>
 800afbc:	7821      	ldrb	r1, [r4, #0]
 800afbe:	2203      	movs	r2, #3
 800afc0:	4650      	mov	r0, sl
 800afc2:	f7f5 f905 	bl	80001d0 <memchr>
 800afc6:	b138      	cbz	r0, 800afd8 <_svfiprintf_r+0x150>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	eba0 000a 	sub.w	r0, r0, sl
 800afce:	2240      	movs	r2, #64	; 0x40
 800afd0:	4082      	lsls	r2, r0
 800afd2:	4313      	orrs	r3, r2
 800afd4:	3401      	adds	r4, #1
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afdc:	4825      	ldr	r0, [pc, #148]	; (800b074 <_svfiprintf_r+0x1ec>)
 800afde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe2:	2206      	movs	r2, #6
 800afe4:	f7f5 f8f4 	bl	80001d0 <memchr>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d038      	beq.n	800b05e <_svfiprintf_r+0x1d6>
 800afec:	4b22      	ldr	r3, [pc, #136]	; (800b078 <_svfiprintf_r+0x1f0>)
 800afee:	bb1b      	cbnz	r3, 800b038 <_svfiprintf_r+0x1b0>
 800aff0:	9b03      	ldr	r3, [sp, #12]
 800aff2:	3307      	adds	r3, #7
 800aff4:	f023 0307 	bic.w	r3, r3, #7
 800aff8:	3308      	adds	r3, #8
 800affa:	9303      	str	r3, [sp, #12]
 800affc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affe:	4433      	add	r3, r6
 800b000:	9309      	str	r3, [sp, #36]	; 0x24
 800b002:	e768      	b.n	800aed6 <_svfiprintf_r+0x4e>
 800b004:	fb0c 3202 	mla	r2, ip, r2, r3
 800b008:	460c      	mov	r4, r1
 800b00a:	2001      	movs	r0, #1
 800b00c:	e7a6      	b.n	800af5c <_svfiprintf_r+0xd4>
 800b00e:	2300      	movs	r3, #0
 800b010:	3401      	adds	r4, #1
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	4619      	mov	r1, r3
 800b016:	f04f 0c0a 	mov.w	ip, #10
 800b01a:	4620      	mov	r0, r4
 800b01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b020:	3a30      	subs	r2, #48	; 0x30
 800b022:	2a09      	cmp	r2, #9
 800b024:	d903      	bls.n	800b02e <_svfiprintf_r+0x1a6>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0c6      	beq.n	800afb8 <_svfiprintf_r+0x130>
 800b02a:	9105      	str	r1, [sp, #20]
 800b02c:	e7c4      	b.n	800afb8 <_svfiprintf_r+0x130>
 800b02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b032:	4604      	mov	r4, r0
 800b034:	2301      	movs	r3, #1
 800b036:	e7f0      	b.n	800b01a <_svfiprintf_r+0x192>
 800b038:	ab03      	add	r3, sp, #12
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	462a      	mov	r2, r5
 800b03e:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <_svfiprintf_r+0x1f4>)
 800b040:	a904      	add	r1, sp, #16
 800b042:	4638      	mov	r0, r7
 800b044:	f7fc fdc4 	bl	8007bd0 <_printf_float>
 800b048:	1c42      	adds	r2, r0, #1
 800b04a:	4606      	mov	r6, r0
 800b04c:	d1d6      	bne.n	800affc <_svfiprintf_r+0x174>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	065b      	lsls	r3, r3, #25
 800b052:	f53f af2d 	bmi.w	800aeb0 <_svfiprintf_r+0x28>
 800b056:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b058:	b01d      	add	sp, #116	; 0x74
 800b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05e:	ab03      	add	r3, sp, #12
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	462a      	mov	r2, r5
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <_svfiprintf_r+0x1f4>)
 800b066:	a904      	add	r1, sp, #16
 800b068:	4638      	mov	r0, r7
 800b06a:	f7fd f855 	bl	8008118 <_printf_i>
 800b06e:	e7eb      	b.n	800b048 <_svfiprintf_r+0x1c0>
 800b070:	0800c274 	.word	0x0800c274
 800b074:	0800c27e 	.word	0x0800c27e
 800b078:	08007bd1 	.word	0x08007bd1
 800b07c:	0800add5 	.word	0x0800add5
 800b080:	0800c27a 	.word	0x0800c27a

0800b084 <__sfputc_r>:
 800b084:	6893      	ldr	r3, [r2, #8]
 800b086:	3b01      	subs	r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	b410      	push	{r4}
 800b08c:	6093      	str	r3, [r2, #8]
 800b08e:	da08      	bge.n	800b0a2 <__sfputc_r+0x1e>
 800b090:	6994      	ldr	r4, [r2, #24]
 800b092:	42a3      	cmp	r3, r4
 800b094:	db01      	blt.n	800b09a <__sfputc_r+0x16>
 800b096:	290a      	cmp	r1, #10
 800b098:	d103      	bne.n	800b0a2 <__sfputc_r+0x1e>
 800b09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09e:	f7fd bd00 	b.w	8008aa2 <__swbuf_r>
 800b0a2:	6813      	ldr	r3, [r2, #0]
 800b0a4:	1c58      	adds	r0, r3, #1
 800b0a6:	6010      	str	r0, [r2, #0]
 800b0a8:	7019      	strb	r1, [r3, #0]
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <__sfputs_r>:
 800b0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460f      	mov	r7, r1
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	18d5      	adds	r5, r2, r3
 800b0bc:	42ac      	cmp	r4, r5
 800b0be:	d101      	bne.n	800b0c4 <__sfputs_r+0x12>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	e007      	b.n	800b0d4 <__sfputs_r+0x22>
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	463a      	mov	r2, r7
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7ff ffda 	bl	800b084 <__sfputc_r>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d1f3      	bne.n	800b0bc <__sfputs_r+0xa>
 800b0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0d8 <_vfiprintf_r>:
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	460d      	mov	r5, r1
 800b0de:	b09d      	sub	sp, #116	; 0x74
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	4698      	mov	r8, r3
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	b118      	cbz	r0, 800b0f0 <_vfiprintf_r+0x18>
 800b0e8:	6a03      	ldr	r3, [r0, #32]
 800b0ea:	b90b      	cbnz	r3, 800b0f0 <_vfiprintf_r+0x18>
 800b0ec:	f7fd fbd2 	bl	8008894 <__sinit>
 800b0f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f2:	07d9      	lsls	r1, r3, #31
 800b0f4:	d405      	bmi.n	800b102 <_vfiprintf_r+0x2a>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	059a      	lsls	r2, r3, #22
 800b0fa:	d402      	bmi.n	800b102 <_vfiprintf_r+0x2a>
 800b0fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0fe:	f7fd fe86 	bl	8008e0e <__retarget_lock_acquire_recursive>
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	071b      	lsls	r3, r3, #28
 800b106:	d501      	bpl.n	800b10c <_vfiprintf_r+0x34>
 800b108:	692b      	ldr	r3, [r5, #16]
 800b10a:	b99b      	cbnz	r3, 800b134 <_vfiprintf_r+0x5c>
 800b10c:	4629      	mov	r1, r5
 800b10e:	4630      	mov	r0, r6
 800b110:	f7fd fd04 	bl	8008b1c <__swsetup_r>
 800b114:	b170      	cbz	r0, 800b134 <_vfiprintf_r+0x5c>
 800b116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b118:	07dc      	lsls	r4, r3, #31
 800b11a:	d504      	bpl.n	800b126 <_vfiprintf_r+0x4e>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b01d      	add	sp, #116	; 0x74
 800b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	0598      	lsls	r0, r3, #22
 800b12a:	d4f7      	bmi.n	800b11c <_vfiprintf_r+0x44>
 800b12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b12e:	f7fd fe6f 	bl	8008e10 <__retarget_lock_release_recursive>
 800b132:	e7f3      	b.n	800b11c <_vfiprintf_r+0x44>
 800b134:	2300      	movs	r3, #0
 800b136:	9309      	str	r3, [sp, #36]	; 0x24
 800b138:	2320      	movs	r3, #32
 800b13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b142:	2330      	movs	r3, #48	; 0x30
 800b144:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2f8 <_vfiprintf_r+0x220>
 800b148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b14c:	f04f 0901 	mov.w	r9, #1
 800b150:	4623      	mov	r3, r4
 800b152:	469a      	mov	sl, r3
 800b154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b158:	b10a      	cbz	r2, 800b15e <_vfiprintf_r+0x86>
 800b15a:	2a25      	cmp	r2, #37	; 0x25
 800b15c:	d1f9      	bne.n	800b152 <_vfiprintf_r+0x7a>
 800b15e:	ebba 0b04 	subs.w	fp, sl, r4
 800b162:	d00b      	beq.n	800b17c <_vfiprintf_r+0xa4>
 800b164:	465b      	mov	r3, fp
 800b166:	4622      	mov	r2, r4
 800b168:	4629      	mov	r1, r5
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7ff ffa1 	bl	800b0b2 <__sfputs_r>
 800b170:	3001      	adds	r0, #1
 800b172:	f000 80a9 	beq.w	800b2c8 <_vfiprintf_r+0x1f0>
 800b176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b178:	445a      	add	r2, fp
 800b17a:	9209      	str	r2, [sp, #36]	; 0x24
 800b17c:	f89a 3000 	ldrb.w	r3, [sl]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 80a1 	beq.w	800b2c8 <_vfiprintf_r+0x1f0>
 800b186:	2300      	movs	r3, #0
 800b188:	f04f 32ff 	mov.w	r2, #4294967295
 800b18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b190:	f10a 0a01 	add.w	sl, sl, #1
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	9307      	str	r3, [sp, #28]
 800b198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b19c:	931a      	str	r3, [sp, #104]	; 0x68
 800b19e:	4654      	mov	r4, sl
 800b1a0:	2205      	movs	r2, #5
 800b1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a6:	4854      	ldr	r0, [pc, #336]	; (800b2f8 <_vfiprintf_r+0x220>)
 800b1a8:	f7f5 f812 	bl	80001d0 <memchr>
 800b1ac:	9a04      	ldr	r2, [sp, #16]
 800b1ae:	b9d8      	cbnz	r0, 800b1e8 <_vfiprintf_r+0x110>
 800b1b0:	06d1      	lsls	r1, r2, #27
 800b1b2:	bf44      	itt	mi
 800b1b4:	2320      	movmi	r3, #32
 800b1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ba:	0713      	lsls	r3, r2, #28
 800b1bc:	bf44      	itt	mi
 800b1be:	232b      	movmi	r3, #43	; 0x2b
 800b1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ca:	d015      	beq.n	800b1f8 <_vfiprintf_r+0x120>
 800b1cc:	9a07      	ldr	r2, [sp, #28]
 800b1ce:	4654      	mov	r4, sl
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f04f 0c0a 	mov.w	ip, #10
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1dc:	3b30      	subs	r3, #48	; 0x30
 800b1de:	2b09      	cmp	r3, #9
 800b1e0:	d94d      	bls.n	800b27e <_vfiprintf_r+0x1a6>
 800b1e2:	b1b0      	cbz	r0, 800b212 <_vfiprintf_r+0x13a>
 800b1e4:	9207      	str	r2, [sp, #28]
 800b1e6:	e014      	b.n	800b212 <_vfiprintf_r+0x13a>
 800b1e8:	eba0 0308 	sub.w	r3, r0, r8
 800b1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	46a2      	mov	sl, r4
 800b1f6:	e7d2      	b.n	800b19e <_vfiprintf_r+0xc6>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	1d19      	adds	r1, r3, #4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	9103      	str	r1, [sp, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bfbb      	ittet	lt
 800b204:	425b      	neglt	r3, r3
 800b206:	f042 0202 	orrlt.w	r2, r2, #2
 800b20a:	9307      	strge	r3, [sp, #28]
 800b20c:	9307      	strlt	r3, [sp, #28]
 800b20e:	bfb8      	it	lt
 800b210:	9204      	strlt	r2, [sp, #16]
 800b212:	7823      	ldrb	r3, [r4, #0]
 800b214:	2b2e      	cmp	r3, #46	; 0x2e
 800b216:	d10c      	bne.n	800b232 <_vfiprintf_r+0x15a>
 800b218:	7863      	ldrb	r3, [r4, #1]
 800b21a:	2b2a      	cmp	r3, #42	; 0x2a
 800b21c:	d134      	bne.n	800b288 <_vfiprintf_r+0x1b0>
 800b21e:	9b03      	ldr	r3, [sp, #12]
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	9203      	str	r2, [sp, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	bfb8      	it	lt
 800b22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b22e:	3402      	adds	r4, #2
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b308 <_vfiprintf_r+0x230>
 800b236:	7821      	ldrb	r1, [r4, #0]
 800b238:	2203      	movs	r2, #3
 800b23a:	4650      	mov	r0, sl
 800b23c:	f7f4 ffc8 	bl	80001d0 <memchr>
 800b240:	b138      	cbz	r0, 800b252 <_vfiprintf_r+0x17a>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	eba0 000a 	sub.w	r0, r0, sl
 800b248:	2240      	movs	r2, #64	; 0x40
 800b24a:	4082      	lsls	r2, r0
 800b24c:	4313      	orrs	r3, r2
 800b24e:	3401      	adds	r4, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4829      	ldr	r0, [pc, #164]	; (800b2fc <_vfiprintf_r+0x224>)
 800b258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b25c:	2206      	movs	r2, #6
 800b25e:	f7f4 ffb7 	bl	80001d0 <memchr>
 800b262:	2800      	cmp	r0, #0
 800b264:	d03f      	beq.n	800b2e6 <_vfiprintf_r+0x20e>
 800b266:	4b26      	ldr	r3, [pc, #152]	; (800b300 <_vfiprintf_r+0x228>)
 800b268:	bb1b      	cbnz	r3, 800b2b2 <_vfiprintf_r+0x1da>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	3308      	adds	r3, #8
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b278:	443b      	add	r3, r7
 800b27a:	9309      	str	r3, [sp, #36]	; 0x24
 800b27c:	e768      	b.n	800b150 <_vfiprintf_r+0x78>
 800b27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b282:	460c      	mov	r4, r1
 800b284:	2001      	movs	r0, #1
 800b286:	e7a6      	b.n	800b1d6 <_vfiprintf_r+0xfe>
 800b288:	2300      	movs	r3, #0
 800b28a:	3401      	adds	r4, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	4619      	mov	r1, r3
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29a:	3a30      	subs	r2, #48	; 0x30
 800b29c:	2a09      	cmp	r2, #9
 800b29e:	d903      	bls.n	800b2a8 <_vfiprintf_r+0x1d0>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0c6      	beq.n	800b232 <_vfiprintf_r+0x15a>
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	e7c4      	b.n	800b232 <_vfiprintf_r+0x15a>
 800b2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7f0      	b.n	800b294 <_vfiprintf_r+0x1bc>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b12      	ldr	r3, [pc, #72]	; (800b304 <_vfiprintf_r+0x22c>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7fc fc87 	bl	8007bd0 <_printf_float>
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	1c78      	adds	r0, r7, #1
 800b2c6:	d1d6      	bne.n	800b276 <_vfiprintf_r+0x19e>
 800b2c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_vfiprintf_r+0x202>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	059a      	lsls	r2, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_vfiprintf_r+0x202>
 800b2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2d6:	f7fd fd9b 	bl	8008e10 <__retarget_lock_release_recursive>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	065b      	lsls	r3, r3, #25
 800b2de:	f53f af1d 	bmi.w	800b11c <_vfiprintf_r+0x44>
 800b2e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2e4:	e71c      	b.n	800b120 <_vfiprintf_r+0x48>
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4b05      	ldr	r3, [pc, #20]	; (800b304 <_vfiprintf_r+0x22c>)
 800b2ee:	a904      	add	r1, sp, #16
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7fc ff11 	bl	8008118 <_printf_i>
 800b2f6:	e7e4      	b.n	800b2c2 <_vfiprintf_r+0x1ea>
 800b2f8:	0800c274 	.word	0x0800c274
 800b2fc:	0800c27e 	.word	0x0800c27e
 800b300:	08007bd1 	.word	0x08007bd1
 800b304:	0800b0b3 	.word	0x0800b0b3
 800b308:	0800c27a 	.word	0x0800c27a

0800b30c <__sflush_r>:
 800b30c:	898a      	ldrh	r2, [r1, #12]
 800b30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	4605      	mov	r5, r0
 800b314:	0710      	lsls	r0, r2, #28
 800b316:	460c      	mov	r4, r1
 800b318:	d458      	bmi.n	800b3cc <__sflush_r+0xc0>
 800b31a:	684b      	ldr	r3, [r1, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dc05      	bgt.n	800b32c <__sflush_r+0x20>
 800b320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc02      	bgt.n	800b32c <__sflush_r+0x20>
 800b326:	2000      	movs	r0, #0
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d0f9      	beq.n	800b326 <__sflush_r+0x1a>
 800b332:	2300      	movs	r3, #0
 800b334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b338:	682f      	ldr	r7, [r5, #0]
 800b33a:	6a21      	ldr	r1, [r4, #32]
 800b33c:	602b      	str	r3, [r5, #0]
 800b33e:	d032      	beq.n	800b3a6 <__sflush_r+0x9a>
 800b340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	075a      	lsls	r2, r3, #29
 800b346:	d505      	bpl.n	800b354 <__sflush_r+0x48>
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	1ac0      	subs	r0, r0, r3
 800b34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b34e:	b10b      	cbz	r3, 800b354 <__sflush_r+0x48>
 800b350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b352:	1ac0      	subs	r0, r0, r3
 800b354:	2300      	movs	r3, #0
 800b356:	4602      	mov	r2, r0
 800b358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b35a:	6a21      	ldr	r1, [r4, #32]
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	d106      	bne.n	800b374 <__sflush_r+0x68>
 800b366:	6829      	ldr	r1, [r5, #0]
 800b368:	291d      	cmp	r1, #29
 800b36a:	d82b      	bhi.n	800b3c4 <__sflush_r+0xb8>
 800b36c:	4a29      	ldr	r2, [pc, #164]	; (800b414 <__sflush_r+0x108>)
 800b36e:	410a      	asrs	r2, r1
 800b370:	07d6      	lsls	r6, r2, #31
 800b372:	d427      	bmi.n	800b3c4 <__sflush_r+0xb8>
 800b374:	2200      	movs	r2, #0
 800b376:	6062      	str	r2, [r4, #4]
 800b378:	04d9      	lsls	r1, r3, #19
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	d504      	bpl.n	800b38a <__sflush_r+0x7e>
 800b380:	1c42      	adds	r2, r0, #1
 800b382:	d101      	bne.n	800b388 <__sflush_r+0x7c>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b903      	cbnz	r3, 800b38a <__sflush_r+0x7e>
 800b388:	6560      	str	r0, [r4, #84]	; 0x54
 800b38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38c:	602f      	str	r7, [r5, #0]
 800b38e:	2900      	cmp	r1, #0
 800b390:	d0c9      	beq.n	800b326 <__sflush_r+0x1a>
 800b392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b396:	4299      	cmp	r1, r3
 800b398:	d002      	beq.n	800b3a0 <__sflush_r+0x94>
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7fe fbf6 	bl	8009b8c <_free_r>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800b3a4:	e7c0      	b.n	800b328 <__sflush_r+0x1c>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b0      	blx	r6
 800b3ac:	1c41      	adds	r1, r0, #1
 800b3ae:	d1c8      	bne.n	800b342 <__sflush_r+0x36>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0c5      	beq.n	800b342 <__sflush_r+0x36>
 800b3b6:	2b1d      	cmp	r3, #29
 800b3b8:	d001      	beq.n	800b3be <__sflush_r+0xb2>
 800b3ba:	2b16      	cmp	r3, #22
 800b3bc:	d101      	bne.n	800b3c2 <__sflush_r+0xb6>
 800b3be:	602f      	str	r7, [r5, #0]
 800b3c0:	e7b1      	b.n	800b326 <__sflush_r+0x1a>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c8:	81a3      	strh	r3, [r4, #12]
 800b3ca:	e7ad      	b.n	800b328 <__sflush_r+0x1c>
 800b3cc:	690f      	ldr	r7, [r1, #16]
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	d0a9      	beq.n	800b326 <__sflush_r+0x1a>
 800b3d2:	0793      	lsls	r3, r2, #30
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	bf08      	it	eq
 800b3d8:	694b      	ldreq	r3, [r1, #20]
 800b3da:	600f      	str	r7, [r1, #0]
 800b3dc:	bf18      	it	ne
 800b3de:	2300      	movne	r3, #0
 800b3e0:	eba6 0807 	sub.w	r8, r6, r7
 800b3e4:	608b      	str	r3, [r1, #8]
 800b3e6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ea:	dd9c      	ble.n	800b326 <__sflush_r+0x1a>
 800b3ec:	6a21      	ldr	r1, [r4, #32]
 800b3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3f0:	4643      	mov	r3, r8
 800b3f2:	463a      	mov	r2, r7
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b0      	blx	r6
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dc06      	bgt.n	800b40a <__sflush_r+0xfe>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	e78e      	b.n	800b328 <__sflush_r+0x1c>
 800b40a:	4407      	add	r7, r0
 800b40c:	eba8 0800 	sub.w	r8, r8, r0
 800b410:	e7e9      	b.n	800b3e6 <__sflush_r+0xda>
 800b412:	bf00      	nop
 800b414:	dfbffffe 	.word	0xdfbffffe

0800b418 <_fflush_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	4605      	mov	r5, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b913      	cbnz	r3, 800b428 <_fflush_r+0x10>
 800b422:	2500      	movs	r5, #0
 800b424:	4628      	mov	r0, r5
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	b118      	cbz	r0, 800b432 <_fflush_r+0x1a>
 800b42a:	6a03      	ldr	r3, [r0, #32]
 800b42c:	b90b      	cbnz	r3, 800b432 <_fflush_r+0x1a>
 800b42e:	f7fd fa31 	bl	8008894 <__sinit>
 800b432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0f3      	beq.n	800b422 <_fflush_r+0xa>
 800b43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b43c:	07d0      	lsls	r0, r2, #31
 800b43e:	d404      	bmi.n	800b44a <_fflush_r+0x32>
 800b440:	0599      	lsls	r1, r3, #22
 800b442:	d402      	bmi.n	800b44a <_fflush_r+0x32>
 800b444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b446:	f7fd fce2 	bl	8008e0e <__retarget_lock_acquire_recursive>
 800b44a:	4628      	mov	r0, r5
 800b44c:	4621      	mov	r1, r4
 800b44e:	f7ff ff5d 	bl	800b30c <__sflush_r>
 800b452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b454:	07da      	lsls	r2, r3, #31
 800b456:	4605      	mov	r5, r0
 800b458:	d4e4      	bmi.n	800b424 <_fflush_r+0xc>
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	059b      	lsls	r3, r3, #22
 800b45e:	d4e1      	bmi.n	800b424 <_fflush_r+0xc>
 800b460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b462:	f7fd fcd5 	bl	8008e10 <__retarget_lock_release_recursive>
 800b466:	e7dd      	b.n	800b424 <_fflush_r+0xc>

0800b468 <fiprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b503      	push	{r0, r1, lr}
 800b46c:	4601      	mov	r1, r0
 800b46e:	ab03      	add	r3, sp, #12
 800b470:	4805      	ldr	r0, [pc, #20]	; (800b488 <fiprintf+0x20>)
 800b472:	f853 2b04 	ldr.w	r2, [r3], #4
 800b476:	6800      	ldr	r0, [r0, #0]
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	f7ff fe2d 	bl	800b0d8 <_vfiprintf_r>
 800b47e:	b002      	add	sp, #8
 800b480:	f85d eb04 	ldr.w	lr, [sp], #4
 800b484:	b003      	add	sp, #12
 800b486:	4770      	bx	lr
 800b488:	200001d4 	.word	0x200001d4

0800b48c <__swhatbuf_r>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	460c      	mov	r4, r1
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	2900      	cmp	r1, #0
 800b496:	b096      	sub	sp, #88	; 0x58
 800b498:	4615      	mov	r5, r2
 800b49a:	461e      	mov	r6, r3
 800b49c:	da0d      	bge.n	800b4ba <__swhatbuf_r+0x2e>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4a4:	f04f 0100 	mov.w	r1, #0
 800b4a8:	bf0c      	ite	eq
 800b4aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b4ae:	2340      	movne	r3, #64	; 0x40
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	6031      	str	r1, [r6, #0]
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	b016      	add	sp, #88	; 0x58
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	466a      	mov	r2, sp
 800b4bc:	f000 f862 	bl	800b584 <_fstat_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dbec      	blt.n	800b49e <__swhatbuf_r+0x12>
 800b4c4:	9901      	ldr	r1, [sp, #4]
 800b4c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b4ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b4ce:	4259      	negs	r1, r3
 800b4d0:	4159      	adcs	r1, r3
 800b4d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d6:	e7eb      	b.n	800b4b0 <__swhatbuf_r+0x24>

0800b4d8 <__smakebuf_r>:
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4dc:	079d      	lsls	r5, r3, #30
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	d507      	bpl.n	800b4f4 <__smakebuf_r+0x1c>
 800b4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	b002      	add	sp, #8
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	ab01      	add	r3, sp, #4
 800b4f6:	466a      	mov	r2, sp
 800b4f8:	f7ff ffc8 	bl	800b48c <__swhatbuf_r>
 800b4fc:	9900      	ldr	r1, [sp, #0]
 800b4fe:	4605      	mov	r5, r0
 800b500:	4630      	mov	r0, r6
 800b502:	f7fe ff0f 	bl	800a324 <_malloc_r>
 800b506:	b948      	cbnz	r0, 800b51c <__smakebuf_r+0x44>
 800b508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50c:	059a      	lsls	r2, r3, #22
 800b50e:	d4ef      	bmi.n	800b4f0 <__smakebuf_r+0x18>
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7e3      	b.n	800b4e4 <__smakebuf_r+0xc>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	9b00      	ldr	r3, [sp, #0]
 800b528:	6163      	str	r3, [r4, #20]
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	6120      	str	r0, [r4, #16]
 800b52e:	b15b      	cbz	r3, 800b548 <__smakebuf_r+0x70>
 800b530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b534:	4630      	mov	r0, r6
 800b536:	f000 f837 	bl	800b5a8 <_isatty_r>
 800b53a:	b128      	cbz	r0, 800b548 <__smakebuf_r+0x70>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	f043 0301 	orr.w	r3, r3, #1
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	431d      	orrs	r5, r3
 800b54c:	81a5      	strh	r5, [r4, #12]
 800b54e:	e7cf      	b.n	800b4f0 <__smakebuf_r+0x18>

0800b550 <memmove>:
 800b550:	4288      	cmp	r0, r1
 800b552:	b510      	push	{r4, lr}
 800b554:	eb01 0402 	add.w	r4, r1, r2
 800b558:	d902      	bls.n	800b560 <memmove+0x10>
 800b55a:	4284      	cmp	r4, r0
 800b55c:	4623      	mov	r3, r4
 800b55e:	d807      	bhi.n	800b570 <memmove+0x20>
 800b560:	1e43      	subs	r3, r0, #1
 800b562:	42a1      	cmp	r1, r4
 800b564:	d008      	beq.n	800b578 <memmove+0x28>
 800b566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b56e:	e7f8      	b.n	800b562 <memmove+0x12>
 800b570:	4402      	add	r2, r0
 800b572:	4601      	mov	r1, r0
 800b574:	428a      	cmp	r2, r1
 800b576:	d100      	bne.n	800b57a <memmove+0x2a>
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b582:	e7f7      	b.n	800b574 <memmove+0x24>

0800b584 <_fstat_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	; (800b5a4 <_fstat_r+0x20>)
 800b588:	2300      	movs	r3, #0
 800b58a:	4604      	mov	r4, r0
 800b58c:	4608      	mov	r0, r1
 800b58e:	4611      	mov	r1, r2
 800b590:	602b      	str	r3, [r5, #0]
 800b592:	f7f6 ffc2 	bl	800251a <_fstat>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d102      	bne.n	800b5a0 <_fstat_r+0x1c>
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	b103      	cbz	r3, 800b5a0 <_fstat_r+0x1c>
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	bd38      	pop	{r3, r4, r5, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20002bfc 	.word	0x20002bfc

0800b5a8 <_isatty_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_isatty_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f6 ffc1 	bl	800253a <_isatty>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_isatty_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_isatty_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	20002bfc 	.word	0x20002bfc

0800b5c8 <_sbrk_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d06      	ldr	r5, [pc, #24]	; (800b5e4 <_sbrk_r+0x1c>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7f6 ffca 	bl	800256c <_sbrk>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_sbrk_r+0x1a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_sbrk_r+0x1a>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	20002bfc 	.word	0x20002bfc

0800b5e8 <abort>:
 800b5e8:	b508      	push	{r3, lr}
 800b5ea:	2006      	movs	r0, #6
 800b5ec:	f000 f870 	bl	800b6d0 <raise>
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f7f6 ff5f 	bl	80024b4 <_exit>

0800b5f6 <_calloc_r>:
 800b5f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5f8:	fba1 2402 	umull	r2, r4, r1, r2
 800b5fc:	b94c      	cbnz	r4, 800b612 <_calloc_r+0x1c>
 800b5fe:	4611      	mov	r1, r2
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	f7fe fe8f 	bl	800a324 <_malloc_r>
 800b606:	9a01      	ldr	r2, [sp, #4]
 800b608:	4605      	mov	r5, r0
 800b60a:	b930      	cbnz	r0, 800b61a <_calloc_r+0x24>
 800b60c:	4628      	mov	r0, r5
 800b60e:	b003      	add	sp, #12
 800b610:	bd30      	pop	{r4, r5, pc}
 800b612:	220c      	movs	r2, #12
 800b614:	6002      	str	r2, [r0, #0]
 800b616:	2500      	movs	r5, #0
 800b618:	e7f8      	b.n	800b60c <_calloc_r+0x16>
 800b61a:	4621      	mov	r1, r4
 800b61c:	f7fd fad6 	bl	8008bcc <memset>
 800b620:	e7f4      	b.n	800b60c <_calloc_r+0x16>

0800b622 <_realloc_r>:
 800b622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b626:	4680      	mov	r8, r0
 800b628:	4614      	mov	r4, r2
 800b62a:	460e      	mov	r6, r1
 800b62c:	b921      	cbnz	r1, 800b638 <_realloc_r+0x16>
 800b62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b632:	4611      	mov	r1, r2
 800b634:	f7fe be76 	b.w	800a324 <_malloc_r>
 800b638:	b92a      	cbnz	r2, 800b646 <_realloc_r+0x24>
 800b63a:	f7fe faa7 	bl	8009b8c <_free_r>
 800b63e:	4625      	mov	r5, r4
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b646:	f000 f85f 	bl	800b708 <_malloc_usable_size_r>
 800b64a:	4284      	cmp	r4, r0
 800b64c:	4607      	mov	r7, r0
 800b64e:	d802      	bhi.n	800b656 <_realloc_r+0x34>
 800b650:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b654:	d812      	bhi.n	800b67c <_realloc_r+0x5a>
 800b656:	4621      	mov	r1, r4
 800b658:	4640      	mov	r0, r8
 800b65a:	f7fe fe63 	bl	800a324 <_malloc_r>
 800b65e:	4605      	mov	r5, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	d0ed      	beq.n	800b640 <_realloc_r+0x1e>
 800b664:	42bc      	cmp	r4, r7
 800b666:	4622      	mov	r2, r4
 800b668:	4631      	mov	r1, r6
 800b66a:	bf28      	it	cs
 800b66c:	463a      	movcs	r2, r7
 800b66e:	f7fd fbd8 	bl	8008e22 <memcpy>
 800b672:	4631      	mov	r1, r6
 800b674:	4640      	mov	r0, r8
 800b676:	f7fe fa89 	bl	8009b8c <_free_r>
 800b67a:	e7e1      	b.n	800b640 <_realloc_r+0x1e>
 800b67c:	4635      	mov	r5, r6
 800b67e:	e7df      	b.n	800b640 <_realloc_r+0x1e>

0800b680 <_raise_r>:
 800b680:	291f      	cmp	r1, #31
 800b682:	b538      	push	{r3, r4, r5, lr}
 800b684:	4604      	mov	r4, r0
 800b686:	460d      	mov	r5, r1
 800b688:	d904      	bls.n	800b694 <_raise_r+0x14>
 800b68a:	2316      	movs	r3, #22
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	f04f 30ff 	mov.w	r0, #4294967295
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b696:	b112      	cbz	r2, 800b69e <_raise_r+0x1e>
 800b698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b69c:	b94b      	cbnz	r3, 800b6b2 <_raise_r+0x32>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 f830 	bl	800b704 <_getpid_r>
 800b6a4:	462a      	mov	r2, r5
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ae:	f000 b817 	b.w	800b6e0 <_kill_r>
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d00a      	beq.n	800b6cc <_raise_r+0x4c>
 800b6b6:	1c59      	adds	r1, r3, #1
 800b6b8:	d103      	bne.n	800b6c2 <_raise_r+0x42>
 800b6ba:	2316      	movs	r3, #22
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	2001      	movs	r0, #1
 800b6c0:	e7e7      	b.n	800b692 <_raise_r+0x12>
 800b6c2:	2400      	movs	r4, #0
 800b6c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	4798      	blx	r3
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e7e0      	b.n	800b692 <_raise_r+0x12>

0800b6d0 <raise>:
 800b6d0:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <raise+0xc>)
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	f7ff bfd3 	b.w	800b680 <_raise_r>
 800b6da:	bf00      	nop
 800b6dc:	200001d4 	.word	0x200001d4

0800b6e0 <_kill_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d07      	ldr	r5, [pc, #28]	; (800b700 <_kill_r+0x20>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	602b      	str	r3, [r5, #0]
 800b6ee:	f7f6 fed1 	bl	8002494 <_kill>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	d102      	bne.n	800b6fc <_kill_r+0x1c>
 800b6f6:	682b      	ldr	r3, [r5, #0]
 800b6f8:	b103      	cbz	r3, 800b6fc <_kill_r+0x1c>
 800b6fa:	6023      	str	r3, [r4, #0]
 800b6fc:	bd38      	pop	{r3, r4, r5, pc}
 800b6fe:	bf00      	nop
 800b700:	20002bfc 	.word	0x20002bfc

0800b704 <_getpid_r>:
 800b704:	f7f6 bebe 	b.w	8002484 <_getpid>

0800b708 <_malloc_usable_size_r>:
 800b708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70c:	1f18      	subs	r0, r3, #4
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfbc      	itt	lt
 800b712:	580b      	ldrlt	r3, [r1, r0]
 800b714:	18c0      	addlt	r0, r0, r3
 800b716:	4770      	bx	lr

0800b718 <_init>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	bf00      	nop
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

0800b724 <_fini>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr
