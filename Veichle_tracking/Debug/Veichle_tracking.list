
Veichle_tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  0800c0c8  0800c0c8  0001c0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cba4  0800cba4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cba4  0800cba4  0001cba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbac  0800cbac  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbac  0800cbac  0001cbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbb0  0800cbb0  0001cbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cbb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  200001f8  0800cdac  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  0800cdac  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001079f  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8c  00000000  00000000  00030a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b05  00000000  00000000  000345e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c27  00000000  00000000  000350e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ff0  00000000  00000000  0005cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec450  00000000  00000000  0006fcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052c0  00000000  00000000  0015c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0016140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0ac 	.word	0x0800c0ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800c0ac 	.word	0x0800c0ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_data_from_gps>:
 * Receiving the GPS data in NMEA formats and checking for the required sentences                  *
 * i.e, GNGGA, GNRMC sentences from the buffer (UART_receive_data), storing into                   *
 * separate buffers,checking the valid data if data is valid calling extract and JSON functions    *
 * *********************************************************************************************** */
void get_data_from_gps(char *UART_receive_data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0fa      	sub	sp, #488	; 0x1e8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000ffa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000ffe:	6018      	str	r0, [r3, #0]
	char *ptrgga=NULL, *ptrrmc=NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	char GGA_buffer[250],RMC_buffer[200];
	int rmc_length,gga_length;

	if( (ptrgga=strstr(UART_receive_data,"GNGGA")))
 800100c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001010:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001014:	4950      	ldr	r1, [pc, #320]	; (8001158 <get_data_from_gps+0x168>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	f007 f91c 	bl	8008254 <strstr>
 800101c:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 8001020:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d041      	beq.n	80010ac <get_data_from_gps+0xbc>
	{

		strncpy(GGA_buffer,ptrgga,80);    //copying received GNGGA data into GGA_buffer
 8001028:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800102c:	2250      	movs	r2, #80	; 0x50
 800102e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 f89f 	bl	8008176 <strncpy>
		printf("GGA string is %s\n", GGA_buffer);
 8001038:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103c:	4619      	mov	r1, r3
 800103e:	4847      	ldr	r0, [pc, #284]	; (800115c <get_data_from_gps+0x16c>)
 8001040:	f006 fede 	bl	8007e00 <iprintf>
		gga_length=strlen(GGA_buffer);
 8001044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f911 	bl	8000270 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

		if(GGA_buffer!=NULL)              //checking weather GGA_buffer empty or not
	  	{
			for(int i=0;i<gga_length;i++)
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800105a:	e021      	b.n	80010a0 <get_data_from_gps+0xb0>
			{

				if(GGA_buffer[i]=='M')
 800105c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001060:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001064:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b4d      	cmp	r3, #77	; 0x4d
 800106e:	d112      	bne.n	8001096 <get_data_from_gps+0xa6>
				{
					extract_data_for_GGA(GGA_buffer);    //calling extract function
 8001070:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f881 	bl	800117c <extract_data_for_GGA>

					if(gps_fix==1)                       //Checking for received GGA data is valid or not
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <get_data_from_gps+0x170>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d106      	bne.n	8001090 <get_data_from_gps+0xa0>
					{
						printf("GPS Valid Fix\n");
 8001082:	4838      	ldr	r0, [pc, #224]	; (8001164 <get_data_from_gps+0x174>)
 8001084:	f006 ff22 	bl	8007ecc <puts>

						json_format_for_GGA(json_str);
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <get_data_from_gps+0x178>)
 800108a:	f000 f9c3 	bl	8001414 <json_format_for_GGA>
 800108e:	e002      	b.n	8001096 <get_data_from_gps+0xa6>
					}
					else
					{
						printf("Invalid GPS fix not getting proper location\n Reset the GPS Module\n");
 8001090:	4836      	ldr	r0, [pc, #216]	; (800116c <get_data_from_gps+0x17c>)
 8001092:	f006 ff1b 	bl	8007ecc <puts>
			for(int i=0;i<gga_length;i++)
 8001096:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800109a:	3301      	adds	r3, #1
 800109c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010a0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80010a4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbd7      	blt.n	800105c <get_data_from_gps+0x6c>
		else
	  	{
	  	 	printf("GGA Buffer is empty\n");
	  	}
	}
	if((ptrrmc=strstr(UART_receive_data,"GNRMC")))
 80010ac:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80010b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80010b4:	492e      	ldr	r1, [pc, #184]	; (8001170 <get_data_from_gps+0x180>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	f007 f8cc 	bl	8008254 <strstr>
 80010bc:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
 80010c0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d034      	beq.n	8001132 <get_data_from_gps+0x142>
	{
		 strncpy(RMC_buffer,ptrrmc,85);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2255      	movs	r2, #85	; 0x55
 80010ce:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 80010d2:	4618      	mov	r0, r3
 80010d4:	f007 f84f 	bl	8008176 <strncpy>
		 printf("RMC string is %s\n", RMC_buffer);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	4825      	ldr	r0, [pc, #148]	; (8001174 <get_data_from_gps+0x184>)
 80010e0:	f006 fe8e 	bl	8007e00 <iprintf>
	 	 rmc_length=strlen(RMC_buffer);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f8c1 	bl	8000270 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	 	 if(RMC_buffer!=NULL)
	 	 {
	 		 if(rmc_length>=84)
 80010f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010f8:	2b53      	cmp	r3, #83	; 0x53
 80010fa:	dd17      	ble.n	800112c <get_data_from_gps+0x13c>
	 		 {
               char *ptr=NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	 		   if((ptr=strchr(RMC_buffer,'*')))
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	212a      	movs	r1, #42	; 0x2a
 8001108:	4618      	mov	r0, r3
 800110a:	f007 f815 	bl	8008138 <strchr>
 800110e:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
 8001112:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <get_data_from_gps+0x142>
	 		   {
              		extract_data_for_RMC(RMC_buffer);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f9a2 	bl	8001468 <extract_data_for_RMC>
              		json_format_for_RMC(json_str);
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <get_data_from_gps+0x178>)
 8001126:	f000 fb2f 	bl	8001788 <json_format_for_RMC>
 800112a:	e002      	b.n	8001132 <get_data_from_gps+0x142>
	 		   }
	 		 }
	 		 else
	 		 {
	 			 printf("Invalid RMC not getting proper location\n Reset the GPS Module\n");
 800112c:	4812      	ldr	r0, [pc, #72]	; (8001178 <get_data_from_gps+0x188>)
 800112e:	f006 fecd 	bl	8007ecc <puts>
	  	  else
	  	  {
	  	  	  printf("rmc buffer is empty\n");
	  	  }
	}
	memset(GGA_buffer,0,sizeof(GGA_buffer));   //Clearing the buffers
 8001132:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001136:	22fa      	movs	r2, #250	; 0xfa
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f006 fff4 	bl	8008128 <memset>
	memset(RMC_buffer,0,sizeof(RMC_buffer));
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	22c8      	movs	r2, #200	; 0xc8
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f006 ffed 	bl	8008128 <memset>
}
 800114e:	bf00      	nop
 8001150:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0800c0c8 	.word	0x0800c0c8
 800115c:	0800c0d0 	.word	0x0800c0d0
 8001160:	2000093c 	.word	0x2000093c
 8001164:	0800c0e4 	.word	0x0800c0e4
 8001168:	200007f4 	.word	0x200007f4
 800116c:	0800c0f4 	.word	0x0800c0f4
 8001170:	0800c138 	.word	0x0800c138
 8001174:	0800c140 	.word	0x0800c140
 8001178:	0800c154 	.word	0x0800c154

0800117c <extract_data_for_GGA>:
/**************************************************************************************
 * Extracting the required fields from GGA_buffer i.e time,fix,latitude and longitude *
 * ***********************************************************************************/

void extract_data_for_GGA( char *GGA_buffer)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b096      	sub	sp, #88	; 0x58
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]

		int comma_count = 0,utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
 8001184:	2300      	movs	r3, #0
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
		char utc_time[7],latitude_str[10], longitude_str[11],gpsfix[2];
		char *token = strtok(GGA_buffer, ",");           //Extracting substrings from GGA sentences
 8001188:	498f      	ldr	r1, [pc, #572]	; (80013c8 <extract_data_for_GGA+0x24c>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f007 f806 	bl	800819c <strtok>
 8001190:	63f8      	str	r0, [r7, #60]	; 0x3c
	    while (token != NULL && comma_count < 9)         //checking extracted substrings NULL or not
 8001192:	e10d      	b.n	80013b0 <extract_data_for_GGA+0x234>
	    {
		    switch (comma_count)
 8001194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001196:	3b01      	subs	r3, #1
 8001198:	2b05      	cmp	r3, #5
 800119a:	f200 8101 	bhi.w	80013a0 <extract_data_for_GGA+0x224>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <extract_data_for_GGA+0x28>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080012bb 	.word	0x080012bb
 80011ac:	08001313 	.word	0x08001313
 80011b0:	0800131d 	.word	0x0800131d
 80011b4:	08001373 	.word	0x08001373
 80011b8:	0800137d 	.word	0x0800137d
	        {
		    	case 1:
		    		    // Copying Time value from token to utc_time
						strncpy(utc_time, token, 6);
 80011bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c0:	2206      	movs	r2, #6
 80011c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 ffd6 	bl	8008176 <strncpy>
						utc_time[6] = '\0';
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						// Extract hours, minutes, and seconds
						utc_hours = atoi(utc_time) / 10000;
 80011d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fe49 	bl	8006e6c <atoi>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a7b      	ldr	r2, [pc, #492]	; (80013cc <extract_data_for_GGA+0x250>)
 80011de:	fb82 1203 	smull	r1, r2, r2, r3
 80011e2:	1312      	asrs	r2, r2, #12
 80011e4:	17db      	asrs	r3, r3, #31
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
						utc_minutes = (atoi(utc_time) % 10000) / 100;
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fe3c 	bl	8006e6c <atoi>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b75      	ldr	r3, [pc, #468]	; (80013cc <extract_data_for_GGA+0x250>)
 80011f8:	fb83 1302 	smull	r1, r3, r3, r2
 80011fc:	1319      	asrs	r1, r3, #12
 80011fe:	17d3      	asrs	r3, r2, #31
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	f242 7110 	movw	r1, #10000	; 0x2710
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a70      	ldr	r2, [pc, #448]	; (80013d0 <extract_data_for_GGA+0x254>)
 800120e:	fb82 1203 	smull	r1, r2, r2, r3
 8001212:	1152      	asrs	r2, r2, #5
 8001214:	17db      	asrs	r3, r3, #31
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
						utc_seconds = atoi(utc_time) % 100;
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fe24 	bl	8006e6c <atoi>
 8001224:	4603      	mov	r3, r0
 8001226:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <extract_data_for_GGA+0x254>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1151      	asrs	r1, r2, #5
 800122e:	17da      	asrs	r2, r3, #31
 8001230:	1a8a      	subs	r2, r1, r2
 8001232:	2164      	movs	r1, #100	; 0x64
 8001234:	fb01 f202 	mul.w	r2, r1, r2
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
     					// Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						ist_hours = (utc_hours + 5) % 24;
 800123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123e:	1d5a      	adds	r2, r3, #5
 8001240:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <extract_data_for_GGA+0x258>)
 8001242:	fb83 1302 	smull	r1, r3, r3, r2
 8001246:	1099      	asrs	r1, r3, #2
 8001248:	17d3      	asrs	r3, r2, #31
 800124a:	1ac9      	subs	r1, r1, r3
 800124c:	460b      	mov	r3, r1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	440b      	add	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
						ist_minutes = (utc_minutes + 30) % 60;
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	f103 021e 	add.w	r2, r3, #30
 800125e:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <extract_data_for_GGA+0x25c>)
 8001260:	fb83 1302 	smull	r1, r3, r3, r2
 8001264:	4413      	add	r3, r2
 8001266:	1159      	asrs	r1, r3, #5
 8001268:	17d3      	asrs	r3, r2, #31
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	460b      	mov	r3, r1
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	1a5b      	subs	r3, r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
						ist_seconds = utc_seconds;
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
						//Adjusting the hours,minutes and seconds to proper time stands
						if(ist_minutes==0)
 800127c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <extract_data_for_GGA+0x10c>
						{
							 ist_hours+=1;
 8001282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001284:	3301      	adds	r3, #1
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
						}
						if(ist_hours>24)
 8001288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800128a:	2b18      	cmp	r3, #24
 800128c:	dd02      	ble.n	8001294 <extract_data_for_GGA+0x118>
						{
							ist_hours-=24;
 800128e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001290:	3b18      	subs	r3, #24
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
						}
						if(ist_seconds>=60)
 8001294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001296:	2b3b      	cmp	r3, #59	; 0x3b
 8001298:	dd06      	ble.n	80012a8 <extract_data_for_GGA+0x12c>
						{
							ist_minutes+=1;
 800129a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129c:	3301      	adds	r3, #1
 800129e:	647b      	str	r3, [r7, #68]	; 0x44
							ist_seconds=60-ist_seconds;
 80012a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
						}
						// Print the result in the format "hrs:mins:secs"
						sprintf(time, "%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 80012a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012b0:	494a      	ldr	r1, [pc, #296]	; (80013dc <extract_data_for_GGA+0x260>)
 80012b2:	484b      	ldr	r0, [pc, #300]	; (80013e0 <extract_data_for_GGA+0x264>)
 80012b4:	f006 fe12 	bl	8007edc <siprintf>
						break;
 80012b8:	e072      	b.n	80013a0 <extract_data_for_GGA+0x224>
		    	case 2:
		    		    //Copying latitude string from token to latitude_str
						strncpy(latitude_str, token, 9);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2209      	movs	r2, #9
 80012c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 ff57 	bl	8008176 <strncpy>
						latitude_str[9] = '\0';
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						//Copying the degrees and minutes values of latitude into lat_deg,lat_min
						sscanf(latitude_str,"%2d%lf",&lat_deg,&lat_min);
 80012ce:	f107 001c 	add.w	r0, r7, #28
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <extract_data_for_GGA+0x268>)
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <extract_data_for_GGA+0x26c>)
 80012d6:	4945      	ldr	r1, [pc, #276]	; (80013ec <extract_data_for_GGA+0x270>)
 80012d8:	f006 fe20 	bl	8007f1c <siscanf>
						//Converting the latitude into proper location formation
						gga_latitude =lat_deg+lat_min/60.0;
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <extract_data_for_GGA+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_i2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <extract_data_for_GGA+0x268>)
 80012ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <extract_data_for_GGA+0x274>)
 80012f6:	f7ff faa9 	bl	800084c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ffc3 	bl	800028c <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	493a      	ldr	r1, [pc, #232]	; (80013f4 <extract_data_for_GGA+0x278>)
 800130c:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001310:	e046      	b.n	80013a0 <extract_data_for_GGA+0x224>
		    	case 3:
		    		    // latitude direction
						latitude_dir=token[0];
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <extract_data_for_GGA+0x27c>)
 8001318:	701a      	strb	r2, [r3, #0]
						break;
 800131a:	e041      	b.n	80013a0 <extract_data_for_GGA+0x224>
			    case 4:
			    	    // Copying Longitude value from token to longitude string
						strncpy(longitude_str, token, 10);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	220a      	movs	r2, #10
 8001322:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001324:	4618      	mov	r0, r3
 8001326:	f006 ff26 	bl	8008176 <strncpy>
						longitude_str[10] = '\0';
 800132a:	2300      	movs	r3, #0
 800132c:	76bb      	strb	r3, [r7, #26]
						//Copying the degrees and minutes values of latitude into long_deg,long_min
						sscanf(longitude_str,"%3d%lf",&long_deg,&long_min);
 800132e:	f107 0010 	add.w	r0, r7, #16
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <extract_data_for_GGA+0x280>)
 8001334:	4a32      	ldr	r2, [pc, #200]	; (8001400 <extract_data_for_GGA+0x284>)
 8001336:	4933      	ldr	r1, [pc, #204]	; (8001404 <extract_data_for_GGA+0x288>)
 8001338:	f006 fdf0 	bl	8007f1c <siscanf>
						//Converting the longitude into proper location
						gga_longitude=long_deg+long_min/60.0;
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <extract_data_for_GGA+0x284>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8ef 	bl	8000524 <__aeabi_i2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <extract_data_for_GGA+0x280>)
 800134c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <extract_data_for_GGA+0x274>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7fe ff93 	bl	800028c <__adddf3>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <extract_data_for_GGA+0x28c>)
 800136c:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001370:	e016      	b.n	80013a0 <extract_data_for_GGA+0x224>
			    case 5:
			    	    // longitude dir
						longitude_dir=token[0];
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <extract_data_for_GGA+0x290>)
 8001378:	701a      	strb	r2, [r3, #0]
						//printf("longidir=%c\n",longitude_dir);
						break;
 800137a:	e011      	b.n	80013a0 <extract_data_for_GGA+0x224>
			    case 6:
			    	    // gps fix
						strncpy(gpsfix,token,1);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2201      	movs	r2, #1
 8001382:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fef6 	bl	8008176 <strncpy>
						gpsfix[1]='\0';
 800138a:	2300      	movs	r3, #0
 800138c:	737b      	strb	r3, [r7, #13]
						//converting the fix value i.e string to integer
						gps_fix =atoi(gpsfix);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fd6a 	bl	8006e6c <atoi>
 8001398:	4603      	mov	r3, r0
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <extract_data_for_GGA+0x294>)
 800139c:	6013      	str	r3, [r2, #0]
						break;
 800139e:	bf00      	nop
		   }
		token = strtok(NULL, ",");
 80013a0:	4909      	ldr	r1, [pc, #36]	; (80013c8 <extract_data_for_GGA+0x24c>)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f006 fefa 	bl	800819c <strtok>
 80013a8:	63f8      	str	r0, [r7, #60]	; 0x3c
		comma_count++;
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ac:	3301      	adds	r3, #1
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	    while (token != NULL && comma_count < 9)         //checking extracted substrings NULL or not
 80013b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <extract_data_for_GGA+0x242>
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	f77f aeeb 	ble.w	8001194 <extract_data_for_GGA+0x18>
	}
}
 80013be:	bf00      	nop
 80013c0:	3750      	adds	r7, #80	; 0x50
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800c194 	.word	0x0800c194
 80013cc:	68db8bad 	.word	0x68db8bad
 80013d0:	51eb851f 	.word	0x51eb851f
 80013d4:	2aaaaaab 	.word	0x2aaaaaab
 80013d8:	88888889 	.word	0x88888889
 80013dc:	0800c198 	.word	0x0800c198
 80013e0:	20000920 	.word	0x20000920
 80013e4:	20000948 	.word	0x20000948
 80013e8:	20000938 	.word	0x20000938
 80013ec:	0800c1a8 	.word	0x0800c1a8
 80013f0:	404e0000 	.word	0x404e0000
 80013f4:	20000958 	.word	0x20000958
 80013f8:	20000935 	.word	0x20000935
 80013fc:	20000950 	.word	0x20000950
 8001400:	20000940 	.word	0x20000940
 8001404:	0800c1b0 	.word	0x0800c1b0
 8001408:	20000960 	.word	0x20000960
 800140c:	20000936 	.word	0x20000936
 8001410:	2000093c 	.word	0x2000093c

08001414 <json_format_for_GGA>:

/* Creating the JSON string */

void json_format_for_GGA(char *json_str)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af08      	add	r7, sp, #32
 800141a:	6078      	str	r0, [r7, #4]

	// Creating the JSON string
	sprintf(json_str, "$%s,%lf%c,%lf%c#\n", time, gga_latitude, latitude_dir, gga_longitude,longitude_dir);
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <json_format_for_GGA+0x3c>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	490c      	ldr	r1, [pc, #48]	; (8001454 <json_format_for_GGA+0x40>)
 8001424:	7809      	ldrb	r1, [r1, #0]
 8001426:	460d      	mov	r5, r1
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <json_format_for_GGA+0x44>)
 800142a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142e:	4c0b      	ldr	r4, [pc, #44]	; (800145c <json_format_for_GGA+0x48>)
 8001430:	7824      	ldrb	r4, [r4, #0]
 8001432:	9406      	str	r4, [sp, #24]
 8001434:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001438:	9502      	str	r5, [sp, #8]
 800143a:	e9cd 2300 	strd	r2, r3, [sp]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <json_format_for_GGA+0x4c>)
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <json_format_for_GGA+0x50>)
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f006 fd4a 	bl	8007edc <siprintf>
//	printf("JSON string format=%s\n",json_str);
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	20000958 	.word	0x20000958
 8001454:	20000935 	.word	0x20000935
 8001458:	20000960 	.word	0x20000960
 800145c:	20000936 	.word	0x20000936
 8001460:	20000920 	.word	0x20000920
 8001464:	0800c1b8 	.word	0x0800c1b8

08001468 <extract_data_for_RMC>:
/**************************************************************************************
 * Extracting the required fields from RMC_buffer i.e time,fix,latitude and longitude *
 * ***********************************************************************************/

void extract_data_for_RMC(char *RMC_buffer)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
		int comma_count = 0,dd,mm,yy;
 8001470:	2300      	movs	r3, #0
 8001472:	65fb      	str	r3, [r7, #92]	; 0x5c
		int utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
		char utc_time[7], latitude_str[10], longitude_str[11],Date_str[7];
		printf("rmc buffer in function = %s\n",RMC_buffer);
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	48af      	ldr	r0, [pc, #700]	; (8001734 <extract_data_for_RMC+0x2cc>)
 8001478:	f006 fcc2 	bl	8007e00 <iprintf>

		char *token = strtok(RMC_buffer, ",");
 800147c:	49ae      	ldr	r1, [pc, #696]	; (8001738 <extract_data_for_RMC+0x2d0>)
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f006 fe8c 	bl	800819c <strtok>
 8001484:	64f8      	str	r0, [r7, #76]	; 0x4c

		while (token != NULL && comma_count < 12)
 8001486:	e149      	b.n	800171c <extract_data_for_RMC+0x2b4>
		{
			switch (comma_count)
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	3b01      	subs	r3, #1
 800148c:	2b08      	cmp	r3, #8
 800148e:	f200 813d 	bhi.w	800170c <extract_data_for_RMC+0x2a4>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <extract_data_for_RMC+0x30>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014bd 	.word	0x080014bd
 800149c:	0800170d 	.word	0x0800170d
 80014a0:	080015bb 	.word	0x080015bb
 80014a4:	08001613 	.word	0x08001613
 80014a8:	0800161d 	.word	0x0800161d
 80014ac:	08001673 	.word	0x08001673
 80014b0:	0800170d 	.word	0x0800170d
 80014b4:	0800170d 	.word	0x0800170d
 80014b8:	0800167d 	.word	0x0800167d
			{
				case 1: // Time
						 strncpy(utc_time, token, 6);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	2206      	movs	r2, #6
 80014c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 fe56 	bl	8008176 <strncpy>
						 utc_time[6] = '\0';
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						 // Extract hours, minutes, and seconds
						 utc_hours = atoi(utc_time) / 10000;
 80014d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fcc9 	bl	8006e6c <atoi>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a97      	ldr	r2, [pc, #604]	; (800173c <extract_data_for_RMC+0x2d4>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1312      	asrs	r2, r2, #12
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
						 utc_minutes = (atoi(utc_time) % 10000) / 100;
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fcbc 	bl	8006e6c <atoi>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b91      	ldr	r3, [pc, #580]	; (800173c <extract_data_for_RMC+0x2d4>)
 80014f8:	fb83 1302 	smull	r1, r3, r3, r2
 80014fc:	1319      	asrs	r1, r3, #12
 80014fe:	17d3      	asrs	r3, r2, #31
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	f242 7110 	movw	r1, #10000	; 0x2710
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a8c      	ldr	r2, [pc, #560]	; (8001740 <extract_data_for_RMC+0x2d8>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1152      	asrs	r2, r2, #5
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
						 utc_seconds = atoi(utc_time) % 100;
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fca4 	bl	8006e6c <atoi>
 8001524:	4603      	mov	r3, r0
 8001526:	4a86      	ldr	r2, [pc, #536]	; (8001740 <extract_data_for_RMC+0x2d8>)
 8001528:	fb82 1203 	smull	r1, r2, r2, r3
 800152c:	1151      	asrs	r1, r2, #5
 800152e:	17da      	asrs	r2, r3, #31
 8001530:	1a8a      	subs	r2, r1, r2
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	fb01 f202 	mul.w	r2, r1, r2
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	637b      	str	r3, [r7, #52]	; 0x34

						 // Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						 ist_hours = (utc_hours + 5) % 24 ;
 800153c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153e:	1d5a      	adds	r2, r3, #5
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <extract_data_for_RMC+0x2dc>)
 8001542:	fb83 1302 	smull	r1, r3, r3, r2
 8001546:	1099      	asrs	r1, r3, #2
 8001548:	17d3      	asrs	r3, r2, #31
 800154a:	1ac9      	subs	r1, r1, r3
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	65bb      	str	r3, [r7, #88]	; 0x58
						 ist_minutes = (utc_minutes + 30) % 60;
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	f103 021e 	add.w	r2, r3, #30
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <extract_data_for_RMC+0x2e0>)
 8001560:	fb83 1302 	smull	r1, r3, r3, r2
 8001564:	4413      	add	r3, r2
 8001566:	1159      	asrs	r1, r3, #5
 8001568:	17d3      	asrs	r3, r2, #31
 800156a:	1ac9      	subs	r1, r1, r3
 800156c:	460b      	mov	r3, r1
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	1a5b      	subs	r3, r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
						 ist_seconds = utc_seconds;
 8001578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157a:	653b      	str	r3, [r7, #80]	; 0x50
						 //Adjusting the hours,minutes and seconds to proper time stands
						 if(ist_minutes==0)
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <extract_data_for_RMC+0x120>
						 {
						 	 ist_hours+=1;
 8001582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001584:	3301      	adds	r3, #1
 8001586:	65bb      	str	r3, [r7, #88]	; 0x58
						 }
						 if(ist_hours>24)
 8001588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800158a:	2b18      	cmp	r3, #24
 800158c:	dd02      	ble.n	8001594 <extract_data_for_RMC+0x12c>
						 {
						 	ist_hours-=24;
 800158e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001590:	3b18      	subs	r3, #24
 8001592:	65bb      	str	r3, [r7, #88]	; 0x58
						 }
						 if(ist_seconds>=60)
 8001594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001596:	2b3b      	cmp	r3, #59	; 0x3b
 8001598:	dd06      	ble.n	80015a8 <extract_data_for_RMC+0x140>
						 {
						 	ist_minutes+=1;
 800159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159c:	3301      	adds	r3, #1
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
						 	ist_seconds=60-ist_seconds;
 80015a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015a2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80015a6:	653b      	str	r3, [r7, #80]	; 0x50
						 }
						 // Print the result in the format "hrs:mins:secs"
						 sprintf(time,"%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 80015a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015b0:	4966      	ldr	r1, [pc, #408]	; (800174c <extract_data_for_RMC+0x2e4>)
 80015b2:	4867      	ldr	r0, [pc, #412]	; (8001750 <extract_data_for_RMC+0x2e8>)
 80015b4:	f006 fc92 	bl	8007edc <siprintf>
						 break;
 80015b8:	e0a8      	b.n	800170c <extract_data_for_RMC+0x2a4>
				case 3:
					 	// Copying Longitude value from token to latitude string
						strncpy(latitude_str, token, 9);
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2209      	movs	r2, #9
 80015c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fdd7 	bl	8008176 <strncpy>
						latitude_str[9] = '\0';
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						//Copying the degrees and minutes values of latitude into lat_deg,lat_min
						sscanf(latitude_str,"%2d%lf",&lat_deg,&lat_min);
 80015ce:	f107 0020 	add.w	r0, r7, #32
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <extract_data_for_RMC+0x2ec>)
 80015d4:	4a60      	ldr	r2, [pc, #384]	; (8001758 <extract_data_for_RMC+0x2f0>)
 80015d6:	4961      	ldr	r1, [pc, #388]	; (800175c <extract_data_for_RMC+0x2f4>)
 80015d8:	f006 fca0 	bl	8007f1c <siscanf>
						//Converting the latitude into proper location formation
						rmc_latitude =lat_deg+lat_min/60.0;
 80015dc:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <extract_data_for_RMC+0x2f0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	4604      	mov	r4, r0
 80015e8:	460d      	mov	r5, r1
 80015ea:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <extract_data_for_RMC+0x2ec>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <extract_data_for_RMC+0x2f8>)
 80015f6:	f7ff f929 	bl	800084c <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe43 	bl	800028c <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4956      	ldr	r1, [pc, #344]	; (8001764 <extract_data_for_RMC+0x2fc>)
 800160c:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001610:	e07c      	b.n	800170c <extract_data_for_RMC+0x2a4>
				case 4:
					    // latitude direction
						latitude_dir=token[0];
 8001612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <extract_data_for_RMC+0x300>)
 8001618:	701a      	strb	r2, [r3, #0]
						break;
 800161a:	e077      	b.n	800170c <extract_data_for_RMC+0x2a4>
				case 5:
					    // Copying Longitude value from token to longitude string
						strncpy(longitude_str, token, 10);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	220a      	movs	r2, #10
 8001622:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001624:	4618      	mov	r0, r3
 8001626:	f006 fda6 	bl	8008176 <strncpy>
						longitude_str[10] = '\0';
 800162a:	2300      	movs	r3, #0
 800162c:	77bb      	strb	r3, [r7, #30]
						//Copying the degrees and minutes values of latitude into long_deg,long_min
						sscanf(longitude_str,"%3d%lf",&long_deg,&long_min);
 800162e:	f107 0014 	add.w	r0, r7, #20
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <extract_data_for_RMC+0x304>)
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <extract_data_for_RMC+0x308>)
 8001636:	494f      	ldr	r1, [pc, #316]	; (8001774 <extract_data_for_RMC+0x30c>)
 8001638:	f006 fc70 	bl	8007f1c <siscanf>
						//Converting the longitude into proper location
						rmc_longitude=long_deg+long_min/60.0;
 800163c:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <extract_data_for_RMC+0x308>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff6f 	bl	8000524 <__aeabi_i2d>
 8001646:	4604      	mov	r4, r0
 8001648:	460d      	mov	r5, r1
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <extract_data_for_RMC+0x304>)
 800164c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <extract_data_for_RMC+0x2f8>)
 8001656:	f7ff f8f9 	bl	800084c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fe13 	bl	800028c <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4943      	ldr	r1, [pc, #268]	; (8001778 <extract_data_for_RMC+0x310>)
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001670:	e04c      	b.n	800170c <extract_data_for_RMC+0x2a4>
				case 6:
						// longitude direction
						longitude_dir=token[0];
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <extract_data_for_RMC+0x314>)
 8001678:	701a      	strb	r2, [r3, #0]
						break;
 800167a:	e047      	b.n	800170c <extract_data_for_RMC+0x2a4>
				case 9: // Date
						strncpy(Date_str, token, 7);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2207      	movs	r2, #7
 8001682:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fd76 	bl	8008176 <strncpy>
						Date_str[6] = '\0';
 800168a:	2300      	movs	r3, #0
 800168c:	74bb      	strb	r3, [r7, #18]
						// converting the date into dd/mm/yy format
						dd = atoi(Date_str) / 10000;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fbea 	bl	8006e6c <atoi>
 8001698:	4603      	mov	r3, r0
 800169a:	4a28      	ldr	r2, [pc, #160]	; (800173c <extract_data_for_RMC+0x2d4>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1312      	asrs	r2, r2, #12
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
						mm = (atoi(Date_str) % 10000) / 100;
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 fbdd 	bl	8006e6c <atoi>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <extract_data_for_RMC+0x2d4>)
 80016b6:	fb83 1302 	smull	r1, r3, r3, r2
 80016ba:	1319      	asrs	r1, r3, #12
 80016bc:	17d3      	asrs	r3, r2, #31
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <extract_data_for_RMC+0x2d8>)
 80016cc:	fb82 1203 	smull	r1, r2, r2, r3
 80016d0:	1152      	asrs	r2, r2, #5
 80016d2:	17db      	asrs	r3, r3, #31
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
						yy = atoi(Date_str) % 100;
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fbc5 	bl	8006e6c <atoi>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <extract_data_for_RMC+0x2d8>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1151      	asrs	r1, r2, #5
 80016ec:	17da      	asrs	r2, r3, #31
 80016ee:	1a8a      	subs	r2, r1, r2
 80016f0:	2164      	movs	r1, #100	; 0x64
 80016f2:	fb01 f202 	mul.w	r2, r1, r2
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
						// Print the result in the format "dd/mm/yy"
						sprintf(date,"%02d/%02d/%02d", dd, mm, yy);
 80016fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001702:	491f      	ldr	r1, [pc, #124]	; (8001780 <extract_data_for_RMC+0x318>)
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <extract_data_for_RMC+0x31c>)
 8001706:	f006 fbe9 	bl	8007edc <siprintf>
						break;
 800170a:	bf00      	nop

			}
			token = strtok(NULL, ",");
 800170c:	490a      	ldr	r1, [pc, #40]	; (8001738 <extract_data_for_RMC+0x2d0>)
 800170e:	2000      	movs	r0, #0
 8001710:	f006 fd44 	bl	800819c <strtok>
 8001714:	64f8      	str	r0, [r7, #76]	; 0x4c
			comma_count++;
 8001716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001718:	3301      	adds	r3, #1
 800171a:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (token != NULL && comma_count < 12)
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <extract_data_for_RMC+0x2c2>
 8001722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001724:	2b0b      	cmp	r3, #11
 8001726:	f77f aeaf 	ble.w	8001488 <extract_data_for_RMC+0x20>
		}
}
 800172a:	bf00      	nop
 800172c:	3760      	adds	r7, #96	; 0x60
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	0800c1cc 	.word	0x0800c1cc
 8001738:	0800c194 	.word	0x0800c194
 800173c:	68db8bad 	.word	0x68db8bad
 8001740:	51eb851f 	.word	0x51eb851f
 8001744:	2aaaaaab 	.word	0x2aaaaaab
 8001748:	88888889 	.word	0x88888889
 800174c:	0800c198 	.word	0x0800c198
 8001750:	20000920 	.word	0x20000920
 8001754:	20000948 	.word	0x20000948
 8001758:	20000938 	.word	0x20000938
 800175c:	0800c1a8 	.word	0x0800c1a8
 8001760:	404e0000 	.word	0x404e0000
 8001764:	20000968 	.word	0x20000968
 8001768:	20000935 	.word	0x20000935
 800176c:	20000950 	.word	0x20000950
 8001770:	20000940 	.word	0x20000940
 8001774:	0800c1b0 	.word	0x0800c1b0
 8001778:	20000970 	.word	0x20000970
 800177c:	20000936 	.word	0x20000936
 8001780:	0800c1ec 	.word	0x0800c1ec
 8001784:	2000092c 	.word	0x2000092c

08001788 <json_format_for_RMC>:
/* Creating the JSON string */

void json_format_for_RMC(char *json_str)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af08      	add	r7, sp, #32
 800178e:	6078      	str	r0, [r7, #4]

	sprintf(json_str, "$%s,%s,%lf%c,%lf%c#\n", date, time, rmc_latitude,latitude_dir, rmc_longitude,longitude_dir);
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <json_format_for_RMC+0x40>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <json_format_for_RMC+0x44>)
 8001798:	7809      	ldrb	r1, [r1, #0]
 800179a:	460d      	mov	r5, r1
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <json_format_for_RMC+0x48>)
 800179e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a2:	4c0c      	ldr	r4, [pc, #48]	; (80017d4 <json_format_for_RMC+0x4c>)
 80017a4:	7824      	ldrb	r4, [r4, #0]
 80017a6:	9406      	str	r4, [sp, #24]
 80017a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80017ac:	9502      	str	r5, [sp, #8]
 80017ae:	e9cd 2300 	strd	r2, r3, [sp]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <json_format_for_RMC+0x50>)
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <json_format_for_RMC+0x54>)
 80017b6:	490a      	ldr	r1, [pc, #40]	; (80017e0 <json_format_for_RMC+0x58>)
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f006 fb8f 	bl	8007edc <siprintf>
	//printf("JSON String:\n%s\n", json_str);
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bdb0      	pop	{r4, r5, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000968 	.word	0x20000968
 80017cc:	20000935 	.word	0x20000935
 80017d0:	20000970 	.word	0x20000970
 80017d4:	20000936 	.word	0x20000936
 80017d8:	20000920 	.word	0x20000920
 80017dc:	2000092c 	.word	0x2000092c
 80017e0:	0800c1fc 	.word	0x0800c1fc

080017e4 <DATA_SEND_READY>:
char *Rx_string;
extern UART_HandleTypeDef huart4;


int DATA_SEND_READY(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	int ret;
	int ret1;
	 ret= GSM_SIM_INIT();
 80017ea:	f000 fa65 	bl	8001cb8 <GSM_SIM_INIT>
 80017ee:	6038      	str	r0, [r7, #0]
	  	 if (ret==0)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <DATA_SEND_READY+0x1a>
	  	 {
	  		 printf("GSM INIT DONE!\n");
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <DATA_SEND_READY+0x60>)
 80017f8:	f006 fb68 	bl	8007ecc <puts>
 80017fc:	e002      	b.n	8001804 <DATA_SEND_READY+0x20>
	  	 }
	  	 else
	  	 {
	  			 printf("GSM INIT FAILED!!!\n");
 80017fe:	4812      	ldr	r0, [pc, #72]	; (8001848 <DATA_SEND_READY+0x64>)
 8001800:	f006 fb64 	bl	8007ecc <puts>
	  	}
	  	 ret = GSM_APN_SET();
 8001804:	f000 f912 	bl	8001a2c <GSM_APN_SET>
 8001808:	6038      	str	r0, [r7, #0]
	  	 if (ret==0)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <DATA_SEND_READY+0x3a>
	  		 {
	  			 printf("APN SET DONE!\n");
 8001810:	480e      	ldr	r0, [pc, #56]	; (800184c <DATA_SEND_READY+0x68>)
 8001812:	f006 fb5b 	bl	8007ecc <puts>
	  			ret1= GSM_TCP_init();
 8001816:	f000 f851 	bl	80018bc <GSM_TCP_init>
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	e002      	b.n	8001824 <DATA_SEND_READY+0x40>
	  		 }
	  		 else
	  		 {
	  				 printf("APN SET FAILED\n");
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <DATA_SEND_READY+0x6c>)
 8001820:	f006 fb54 	bl	8007ecc <puts>
	  		}
	  	 if (ret1==0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <DATA_SEND_READY+0x50>
	  	 	 {
	  	 		 printf("TCP INIT DONE\n");
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <DATA_SEND_READY+0x70>)
 800182c:	f006 fb4e 	bl	8007ecc <puts>
	  	 		 return 0;
 8001830:	2300      	movs	r3, #0
 8001832:	e003      	b.n	800183c <DATA_SEND_READY+0x58>

	  	 	 }
	  	 	 else
	  	 	 {
	  	 			 printf("TCP INIT FAILED\n");
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <DATA_SEND_READY+0x74>)
 8001836:	f006 fb49 	bl	8007ecc <puts>
	  	 			 return 1;
 800183a:	2301      	movs	r3, #1
	  	 	}
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800c214 	.word	0x0800c214
 8001848:	0800c224 	.word	0x0800c224
 800184c:	0800c238 	.word	0x0800c238
 8001850:	0800c248 	.word	0x0800c248
 8001854:	0800c258 	.word	0x0800c258
 8001858:	0800c268 	.word	0x0800c268

0800185c <GSM_Send_AT_Command>:
char* GSM_Send_AT_Command(char* AT_CMD)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,RXSIZE);
 8001864:	22c8      	movs	r2, #200	; 0xc8
 8001866:	2100      	movs	r1, #0
 8001868:	4810      	ldr	r0, [pc, #64]	; (80018ac <GSM_Send_AT_Command+0x50>)
 800186a:	f006 fc5d 	bl	8008128 <memset>
	printf("Sent command %s\n",AT_CMD);
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	480f      	ldr	r0, [pc, #60]	; (80018b0 <GSM_Send_AT_Command+0x54>)
 8001872:	f006 fac5 	bl	8007e00 <iprintf>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fcfa 	bl	8000270 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <GSM_Send_AT_Command+0x58>)
 8001886:	f003 fedd 	bl	8005644 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, RXSIZE,500);
 800188a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800188e:	22c8      	movs	r2, #200	; 0xc8
 8001890:	4906      	ldr	r1, [pc, #24]	; (80018ac <GSM_Send_AT_Command+0x50>)
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <GSM_Send_AT_Command+0x58>)
 8001894:	f003 fe0d 	bl	80054b2 <HAL_UART_Receive>
	printf("Received response %s\n",RxBuf);
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <GSM_Send_AT_Command+0x50>)
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <GSM_Send_AT_Command+0x5c>)
 800189c:	f006 fab0 	bl	8007e00 <iprintf>
	return (char *)RxBuf;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <GSM_Send_AT_Command+0x50>)

}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000978 	.word	0x20000978
 80018b0:	0800c278 	.word	0x0800c278
 80018b4:	20000b0c 	.word	0x20000b0c
 80018b8:	0800c28c 	.word	0x0800c28c

080018bc <GSM_TCP_init>:
int GSM_TCP_init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	uint8_t state=0,substate=0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	2300      	movs	r3, #0
 80018c8:	71bb      	strb	r3, [r7, #6]
	uint8_t counter=0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	717b      	strb	r3, [r7, #5]

	while(1)
	{
		switch(state)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f000 808f 	beq.w	80019f4 <GSM_TCP_init+0x138>
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	f300 808e 	bgt.w	80019f8 <GSM_TCP_init+0x13c>
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <GSM_TCP_init+0x2a>
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d044      	beq.n	800196e <GSM_TCP_init+0xb2>
 80018e4:	e088      	b.n	80019f8 <GSM_TCP_init+0x13c>
		{
			case 0:

					switch(substate)
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <GSM_TCP_init+0x36>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d019      	beq.n	8001924 <GSM_TCP_init+0x68>
									   			  		  return 1;
									   			  	  }
							}
							break;
					}
					break;
 80018f0:	e085      	b.n	80019fe <GSM_TCP_init+0x142>
							Rx_string=GSM_Send_AT_Command("AT+CIPMODE?\r");
 80018f2:	4845      	ldr	r0, [pc, #276]	; (8001a08 <GSM_TCP_init+0x14c>)
 80018f4:	f7ff ffb2 	bl	800185c <GSM_Send_AT_Command>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <GSM_TCP_init+0x150>)
 80018fc:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"+CIPMODE: 0"))
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <GSM_TCP_init+0x150>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4943      	ldr	r1, [pc, #268]	; (8001a10 <GSM_TCP_init+0x154>)
 8001904:	4618      	mov	r0, r3
 8001906:	f006 fca5 	bl	8008254 <strstr>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <GSM_TCP_init+0x62>
								state=1;
 8001910:	2301      	movs	r3, #1
 8001912:	71fb      	strb	r3, [r7, #7]
								substate=0;
 8001914:	2300      	movs	r3, #0
 8001916:	71bb      	strb	r3, [r7, #6]
								counter=0;
 8001918:	2300      	movs	r3, #0
 800191a:	717b      	strb	r3, [r7, #5]
							break;
 800191c:	e026      	b.n	800196c <GSM_TCP_init+0xb0>
								substate=1;
 800191e:	2301      	movs	r3, #1
 8001920:	71bb      	strb	r3, [r7, #6]
							break;
 8001922:	e023      	b.n	800196c <GSM_TCP_init+0xb0>
							Rx_string=GSM_Send_AT_Command("AT+CIPMODE=0\r");
 8001924:	483b      	ldr	r0, [pc, #236]	; (8001a14 <GSM_TCP_init+0x158>)
 8001926:	f7ff ff99 	bl	800185c <GSM_Send_AT_Command>
 800192a:	4603      	mov	r3, r0
 800192c:	4a37      	ldr	r2, [pc, #220]	; (8001a0c <GSM_TCP_init+0x150>)
 800192e:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"OK"))
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <GSM_TCP_init+0x150>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4938      	ldr	r1, [pc, #224]	; (8001a18 <GSM_TCP_init+0x15c>)
 8001936:	4618      	mov	r0, r3
 8001938:	f006 fc8c 	bl	8008254 <strstr>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <GSM_TCP_init+0x94>
								state=1;
 8001942:	2301      	movs	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
								substate=0;
 8001946:	2300      	movs	r3, #0
 8001948:	71bb      	strb	r3, [r7, #6]
								counter=0;
 800194a:	2300      	movs	r3, #0
 800194c:	717b      	strb	r3, [r7, #5]
							break;
 800194e:	e00c      	b.n	800196a <GSM_TCP_init+0xae>
								substate=0;
 8001950:	2300      	movs	r3, #0
 8001952:	71bb      	strb	r3, [r7, #6]
								counter++;
 8001954:	797b      	ldrb	r3, [r7, #5]
 8001956:	3301      	adds	r3, #1
 8001958:	717b      	strb	r3, [r7, #5]
									   			  	  if(counter>=10)
 800195a:	797b      	ldrb	r3, [r7, #5]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d904      	bls.n	800196a <GSM_TCP_init+0xae>
									   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001960:	482e      	ldr	r0, [pc, #184]	; (8001a1c <GSM_TCP_init+0x160>)
 8001962:	f006 fab3 	bl	8007ecc <puts>
									   			  		  return 1;
 8001966:	2301      	movs	r3, #1
 8001968:	e04a      	b.n	8001a00 <GSM_TCP_init+0x144>
							break;
 800196a:	bf00      	nop
					break;
 800196c:	e047      	b.n	80019fe <GSM_TCP_init+0x142>

			case 1:

					switch(substate)
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <GSM_TCP_init+0xbe>
 8001974:	2b01      	cmp	r3, #1
 8001976:	d019      	beq.n	80019ac <GSM_TCP_init+0xf0>
										   			  		  printf("CONNECTIVITY PROBLEM\n");
										   			  		  return 1;
										   			  	  }
							}
					}
					break;
 8001978:	e040      	b.n	80019fc <GSM_TCP_init+0x140>
							Rx_string=GSM_Send_AT_Command("AT+NETOPEN\r");
 800197a:	4829      	ldr	r0, [pc, #164]	; (8001a20 <GSM_TCP_init+0x164>)
 800197c:	f7ff ff6e 	bl	800185c <GSM_Send_AT_Command>
 8001980:	4603      	mov	r3, r0
 8001982:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <GSM_TCP_init+0x150>)
 8001984:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"NETOPEN"))
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <GSM_TCP_init+0x150>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4926      	ldr	r1, [pc, #152]	; (8001a24 <GSM_TCP_init+0x168>)
 800198c:	4618      	mov	r0, r3
 800198e:	f006 fc61 	bl	8008254 <strstr>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <GSM_TCP_init+0xea>
								state=2;
 8001998:	2302      	movs	r3, #2
 800199a:	71fb      	strb	r3, [r7, #7]
								substate=0;
 800199c:	2300      	movs	r3, #0
 800199e:	71bb      	strb	r3, [r7, #6]
								counter=0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	717b      	strb	r3, [r7, #5]
							break;
 80019a4:	e025      	b.n	80019f2 <GSM_TCP_init+0x136>
								substate=1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	71bb      	strb	r3, [r7, #6]
							break;
 80019aa:	e022      	b.n	80019f2 <GSM_TCP_init+0x136>
							Rx_string=GSM_Send_AT_Command("AT+NETOPEN\r");
 80019ac:	481c      	ldr	r0, [pc, #112]	; (8001a20 <GSM_TCP_init+0x164>)
 80019ae:	f7ff ff55 	bl	800185c <GSM_Send_AT_Command>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <GSM_TCP_init+0x150>)
 80019b6:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"opened"))
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <GSM_TCP_init+0x150>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <GSM_TCP_init+0x16c>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fc48 	bl	8008254 <strstr>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <GSM_TCP_init+0x11c>
									state=2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	71fb      	strb	r3, [r7, #7]
									substate=0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71bb      	strb	r3, [r7, #6]
									counter=0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	717b      	strb	r3, [r7, #5]
					break;
 80019d6:	e011      	b.n	80019fc <GSM_TCP_init+0x140>
									substate=0;
 80019d8:	2300      	movs	r3, #0
 80019da:	71bb      	strb	r3, [r7, #6]
									counter++;
 80019dc:	797b      	ldrb	r3, [r7, #5]
 80019de:	3301      	adds	r3, #1
 80019e0:	717b      	strb	r3, [r7, #5]
										   			  	  if(counter>=10)
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d909      	bls.n	80019fc <GSM_TCP_init+0x140>
										   			  		  printf("CONNECTIVITY PROBLEM\n");
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <GSM_TCP_init+0x160>)
 80019ea:	f006 fa6f 	bl	8007ecc <puts>
										   			  		  return 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e006      	b.n	8001a00 <GSM_TCP_init+0x144>
					break;
 80019f2:	e003      	b.n	80019fc <GSM_TCP_init+0x140>

			case 2:
					return 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e003      	b.n	8001a00 <GSM_TCP_init+0x144>
					break;
			default:
					return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e001      	b.n	8001a00 <GSM_TCP_init+0x144>
					break;
 80019fc:	bf00      	nop
		switch(state)
 80019fe:	e766      	b.n	80018ce <GSM_TCP_init+0x12>
		}
	}
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	0800c2a4 	.word	0x0800c2a4
 8001a0c:	20000a40 	.word	0x20000a40
 8001a10:	0800c2b4 	.word	0x0800c2b4
 8001a14:	0800c2c0 	.word	0x0800c2c0
 8001a18:	0800c2d0 	.word	0x0800c2d0
 8001a1c:	0800c2d4 	.word	0x0800c2d4
 8001a20:	0800c2ec 	.word	0x0800c2ec
 8001a24:	0800c2f8 	.word	0x0800c2f8
 8001a28:	0800c300 	.word	0x0800c300

08001a2c <GSM_APN_SET>:

int GSM_APN_SET(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0

uint8_t state=0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71bb      	strb	r3, [r7, #6]
uint8_t counter=0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	717b      	strb	r3, [r7, #5]
 while (1)
  {
	  switch(state)
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f000 80d1 	beq.w	8001be8 <GSM_APN_SET+0x1bc>
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	dcf9      	bgt.n	8001a3e <GSM_APN_SET+0x12>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <GSM_APN_SET+0x28>
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d07d      	beq.n	8001b4e <GSM_APN_SET+0x122>
 8001a52:	e7f4      	b.n	8001a3e <GSM_APN_SET+0x12>
	 	  {
	 	case 0:
	 		  switch(substate)
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d04a      	beq.n	8001af0 <GSM_APN_SET+0xc4>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	dc6f      	bgt.n	8001b3e <GSM_APN_SET+0x112>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <GSM_APN_SET+0x3c>
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d024      	beq.n	8001ab0 <GSM_APN_SET+0x84>
	   			  		   			  	  }
	   			  }
	   			  break;

	   		  default:
	   			  break;
 8001a66:	e06a      	b.n	8001b3e <GSM_APN_SET+0x112>
	   			  Rx_string = GSM_Send_AT_Command("AT+COPS?\r");
 8001a68:	4888      	ldr	r0, [pc, #544]	; (8001c8c <GSM_APN_SET+0x260>)
 8001a6a:	f7ff fef7 	bl	800185c <GSM_Send_AT_Command>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <GSM_APN_SET+0x264>)
 8001a72:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"40449"))
 8001a74:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <GSM_APN_SET+0x264>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4986      	ldr	r1, [pc, #536]	; (8001c94 <GSM_APN_SET+0x268>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f006 fbea 	bl	8008254 <strstr>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <GSM_APN_SET+0x6a>
	   				  counter=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	717b      	strb	r3, [r7, #5]
	   				 state=1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
	   				printf("RESPONSE MATCHED\n");
 8001a8e:	4882      	ldr	r0, [pc, #520]	; (8001c98 <GSM_APN_SET+0x26c>)
 8001a90:	f006 fa1c 	bl	8007ecc <puts>
	   			  break;
 8001a94:	e055      	b.n	8001b42 <GSM_APN_SET+0x116>
	   				  substate=1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	71bb      	strb	r3, [r7, #6]
	   				counter++;
 8001a9a:	797b      	ldrb	r3, [r7, #5]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	717b      	strb	r3, [r7, #5]
	   					   			  	  if(counter>=10)
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d94d      	bls.n	8001b42 <GSM_APN_SET+0x116>
	   					   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001aa6:	487d      	ldr	r0, [pc, #500]	; (8001c9c <GSM_APN_SET+0x270>)
 8001aa8:	f006 fa10 	bl	8007ecc <puts>
	   					   			  		  return 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0e9      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  if(strstr(Rx_string,"405854"))
 8001ab0:	4b77      	ldr	r3, [pc, #476]	; (8001c90 <GSM_APN_SET+0x264>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	497a      	ldr	r1, [pc, #488]	; (8001ca0 <GSM_APN_SET+0x274>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f006 fbcc 	bl	8008254 <strstr>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <GSM_APN_SET+0xaa>
	   				  state=2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	71fb      	strb	r3, [r7, #7]
	   				  substate=0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71bb      	strb	r3, [r7, #6]
	   				  counter=0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	717b      	strb	r3, [r7, #5]
	   			  	  printf("RESPONSE MATCHED\n");
 8001ace:	4872      	ldr	r0, [pc, #456]	; (8001c98 <GSM_APN_SET+0x26c>)
 8001ad0:	f006 f9fc 	bl	8007ecc <puts>
	   			  break;
 8001ad4:	e037      	b.n	8001b46 <GSM_APN_SET+0x11a>
	   			  	  substate=0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001ada:	797b      	ldrb	r3, [r7, #5]
 8001adc:	3301      	adds	r3, #1
 8001ade:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d92f      	bls.n	8001b46 <GSM_APN_SET+0x11a>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001ae6:	486d      	ldr	r0, [pc, #436]	; (8001c9c <GSM_APN_SET+0x270>)
 8001ae8:	f006 f9f0 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0c9      	b.n	8001c84 <GSM_APN_SET+0x258>
				  if(strstr(Rx_string,"ERROR"))
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <GSM_APN_SET+0x264>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	496b      	ldr	r1, [pc, #428]	; (8001ca4 <GSM_APN_SET+0x278>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 fbac 	bl	8008254 <strstr>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00e      	beq.n	8001b20 <GSM_APN_SET+0xf4>
	   				  state=0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001b0a:	797b      	ldrb	r3, [r7, #5]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b09      	cmp	r3, #9
 8001b14:	d919      	bls.n	8001b4a <GSM_APN_SET+0x11e>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001b16:	4861      	ldr	r0, [pc, #388]	; (8001c9c <GSM_APN_SET+0x270>)
 8001b18:	f006 f9d8 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b1      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  	  state=0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001b28:	797b      	ldrb	r3, [r7, #5]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001b2e:	797b      	ldrb	r3, [r7, #5]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d90a      	bls.n	8001b4a <GSM_APN_SET+0x11e>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001b34:	4859      	ldr	r0, [pc, #356]	; (8001c9c <GSM_APN_SET+0x270>)
 8001b36:	f006 f9c9 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0a2      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  break;
 8001b3e:	bf00      	nop
 8001b40:	e09f      	b.n	8001c82 <GSM_APN_SET+0x256>
	   			  break;
 8001b42:	bf00      	nop
 8001b44:	e09d      	b.n	8001c82 <GSM_APN_SET+0x256>
	   			  break;
 8001b46:	bf00      	nop
 8001b48:	e09b      	b.n	8001c82 <GSM_APN_SET+0x256>
	   			  break;
 8001b4a:	bf00      	nop
	   		  }
	 		  break;
 8001b4c:	e099      	b.n	8001c82 <GSM_APN_SET+0x256>
	 	case 1:
	 		  switch(substate)
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <GSM_APN_SET+0x12e>
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d01d      	beq.n	8001b94 <GSM_APN_SET+0x168>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001b58:	e045      	b.n	8001be6 <GSM_APN_SET+0x1ba>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 8001b5a:	4853      	ldr	r0, [pc, #332]	; (8001ca8 <GSM_APN_SET+0x27c>)
 8001b5c:	f7ff fe7e 	bl	800185c <GSM_Send_AT_Command>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <GSM_APN_SET+0x264>)
 8001b64:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <GSM_APN_SET+0x264>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4950      	ldr	r1, [pc, #320]	; (8001cac <GSM_APN_SET+0x280>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f006 fb71 	bl	8008254 <strstr>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00a      	beq.n	8001b8e <GSM_APN_SET+0x162>
	   				 state=2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71bb      	strb	r3, [r7, #6]
	   				printf("RESPONSE MATCHED\n");
 8001b80:	4845      	ldr	r0, [pc, #276]	; (8001c98 <GSM_APN_SET+0x26c>)
 8001b82:	f006 f9a3 	bl	8007ecc <puts>
	   				counter=0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	717b      	strb	r3, [r7, #5]
	   				return 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e07a      	b.n	8001c84 <GSM_APN_SET+0x258>
	   				  substate=1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001b92:	e028      	b.n	8001be6 <GSM_APN_SET+0x1ba>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001b94:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <GSM_APN_SET+0x264>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2206      	movs	r2, #6
 8001b9a:	4945      	ldr	r1, [pc, #276]	; (8001cb0 <GSM_APN_SET+0x284>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fad8 	bl	8008152 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10e      	bne.n	8001bc6 <GSM_APN_SET+0x19a>
	   				  state=0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001bb6:	797b      	ldrb	r3, [r7, #5]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d913      	bls.n	8001be4 <GSM_APN_SET+0x1b8>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001bbc:	4837      	ldr	r0, [pc, #220]	; (8001c9c <GSM_APN_SET+0x270>)
 8001bbe:	f006 f985 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e05e      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  	  state=0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001bce:	797b      	ldrb	r3, [r7, #5]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	2b09      	cmp	r3, #9
 8001bd8:	d904      	bls.n	8001be4 <GSM_APN_SET+0x1b8>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001bda:	4830      	ldr	r0, [pc, #192]	; (8001c9c <GSM_APN_SET+0x270>)
 8001bdc:	f006 f976 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e04f      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  break;
 8001be4:	bf00      	nop
	   		  }
	 		  break;
 8001be6:	e04c      	b.n	8001c82 <GSM_APN_SET+0x256>
	 	case 2:
	 		  switch(substate)
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <GSM_APN_SET+0x1c8>
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d01d      	beq.n	8001c2e <GSM_APN_SET+0x202>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001bf2:	e045      	b.n	8001c80 <GSM_APN_SET+0x254>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8001bf4:	482f      	ldr	r0, [pc, #188]	; (8001cb4 <GSM_APN_SET+0x288>)
 8001bf6:	f7ff fe31 	bl	800185c <GSM_Send_AT_Command>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <GSM_APN_SET+0x264>)
 8001bfe:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <GSM_APN_SET+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4929      	ldr	r1, [pc, #164]	; (8001cac <GSM_APN_SET+0x280>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f006 fb24 	bl	8008254 <strstr>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <GSM_APN_SET+0x1fc>
	   				 state=3;
 8001c12:	2303      	movs	r3, #3
 8001c14:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001c1e:	481e      	ldr	r0, [pc, #120]	; (8001c98 <GSM_APN_SET+0x26c>)
 8001c20:	f006 f954 	bl	8007ecc <puts>
					return 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e02d      	b.n	8001c84 <GSM_APN_SET+0x258>
	   				  substate=1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001c2c:	e028      	b.n	8001c80 <GSM_APN_SET+0x254>
			          if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <GSM_APN_SET+0x264>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2206      	movs	r2, #6
 8001c34:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <GSM_APN_SET+0x284>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 fa8b 	bl	8008152 <strncmp>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10e      	bne.n	8001c60 <GSM_APN_SET+0x234>
	   			  	  substate=0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001c4a:	797b      	ldrb	r3, [r7, #5]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	d913      	bls.n	8001c7e <GSM_APN_SET+0x252>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <GSM_APN_SET+0x270>)
 8001c58:	f006 f938 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e011      	b.n	8001c84 <GSM_APN_SET+0x258>
	   				  substate=0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001c68:	797b      	ldrb	r3, [r7, #5]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001c6e:	797b      	ldrb	r3, [r7, #5]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d904      	bls.n	8001c7e <GSM_APN_SET+0x252>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <GSM_APN_SET+0x270>)
 8001c76:	f006 f929 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e002      	b.n	8001c84 <GSM_APN_SET+0x258>
	   			  break;
 8001c7e:	bf00      	nop
	   		  }
	 		  break;
 8001c80:	bf00      	nop
	  switch(state)
 8001c82:	e6dc      	b.n	8001a3e <GSM_APN_SET+0x12>
	}
}
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800c308 	.word	0x0800c308
 8001c90:	20000a40 	.word	0x20000a40
 8001c94:	0800c314 	.word	0x0800c314
 8001c98:	0800c31c 	.word	0x0800c31c
 8001c9c:	0800c2d4 	.word	0x0800c2d4
 8001ca0:	0800c330 	.word	0x0800c330
 8001ca4:	0800c338 	.word	0x0800c338
 8001ca8:	0800c340 	.word	0x0800c340
 8001cac:	0800c2d0 	.word	0x0800c2d0
 8001cb0:	0800c364 	.word	0x0800c364
 8001cb4:	0800c370 	.word	0x0800c370

08001cb8 <GSM_SIM_INIT>:
int GSM_SIM_INIT(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

uint8_t state=0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71bb      	strb	r3, [r7, #6]
uint8_t counter=0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	717b      	strb	r3, [r7, #5]

 while (1)
  {
	  switch(state)
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	f200 8247 	bhi.w	8002160 <GSM_SIM_INIT+0x4a8>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <GSM_SIM_INIT+0x20>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001cf5 	.word	0x08001cf5
 8001cdc:	08001d8b 	.word	0x08001d8b
 8001ce0:	08001e23 	.word	0x08001e23
 8001ce4:	08001ec1 	.word	0x08001ec1
 8001ce8:	08001f59 	.word	0x08001f59
 8001cec:	08002045 	.word	0x08002045
 8001cf0:	080020e9 	.word	0x080020e9
	 	  {
	 	case 0:
	 		  switch(substate)
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <GSM_SIM_INIT+0x48>
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d01b      	beq.n	8001d36 <GSM_SIM_INIT+0x7e>
	   			  		  return 1;
	   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001cfe:	e043      	b.n	8001d88 <GSM_SIM_INIT+0xd0>
	   			  Rx_string = GSM_Send_AT_Command("ATE0\r");
 8001d00:	48ab      	ldr	r0, [pc, #684]	; (8001fb0 <GSM_SIM_INIT+0x2f8>)
 8001d02:	f7ff fdab 	bl	800185c <GSM_Send_AT_Command>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4aaa      	ldr	r2, [pc, #680]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001d0a:	6013      	str	r3, [r2, #0]
	   			  if(!(strncmp(Rx_string,"\r\nOK\r\n",6)))
 8001d0c:	4ba9      	ldr	r3, [pc, #676]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2206      	movs	r2, #6
 8001d12:	49a9      	ldr	r1, [pc, #676]	; (8001fb8 <GSM_SIM_INIT+0x300>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 fa1c 	bl	8008152 <strncmp>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <GSM_SIM_INIT+0x78>
	   				 state=1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	71fb      	strb	r3, [r7, #7]
	   				printf("RESPONSE MATCHED\n");
 8001d24:	48a5      	ldr	r0, [pc, #660]	; (8001fbc <GSM_SIM_INIT+0x304>)
 8001d26:	f006 f8d1 	bl	8007ecc <puts>
	   				counter=0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	717b      	strb	r3, [r7, #5]
	   			  break;
 8001d2e:	e02b      	b.n	8001d88 <GSM_SIM_INIT+0xd0>
	   				  substate=1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001d34:	e028      	b.n	8001d88 <GSM_SIM_INIT+0xd0>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001d36:	4b9f      	ldr	r3, [pc, #636]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	49a0      	ldr	r1, [pc, #640]	; (8001fc0 <GSM_SIM_INIT+0x308>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 fa07 	bl	8008152 <strncmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10e      	bne.n	8001d68 <GSM_SIM_INIT+0xb0>
	   				  state=0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	3301      	adds	r3, #1
 8001d56:	717b      	strb	r3, [r7, #5]
	   			  	if(counter>=10)
 8001d58:	797b      	ldrb	r3, [r7, #5]
 8001d5a:	2b09      	cmp	r3, #9
 8001d5c:	d913      	bls.n	8001d86 <GSM_SIM_INIT+0xce>
	   			  		printf("CONNECTIVITY PROBLEM\n");
 8001d5e:	4899      	ldr	r0, [pc, #612]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001d60:	f006 f8b4 	bl	8007ecc <puts>
	   			  		return 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e1fd      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71bb      	strb	r3, [r7, #6]
	   			  	  counter++;
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	3301      	adds	r3, #1
 8001d74:	717b      	strb	r3, [r7, #5]
	   			  	  if(counter>=10)
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d904      	bls.n	8001d86 <GSM_SIM_INIT+0xce>
	   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001d7c:	4891      	ldr	r0, [pc, #580]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001d7e:	f006 f8a5 	bl	8007ecc <puts>
	   			  		  return 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1ee      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001d86:	bf00      	nop
	   		  }
	 		  break;
 8001d88:	e1eb      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
	 	case 1:
	 		  switch(substate)
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <GSM_SIM_INIT+0xde>
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d01c      	beq.n	8001dce <GSM_SIM_INIT+0x116>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001d94:	e044      	b.n	8001e20 <GSM_SIM_INIT+0x168>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPIN?\r");
 8001d96:	488c      	ldr	r0, [pc, #560]	; (8001fc8 <GSM_SIM_INIT+0x310>)
 8001d98:	f7ff fd60 	bl	800185c <GSM_Send_AT_Command>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001da0:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"READY"))
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4989      	ldr	r1, [pc, #548]	; (8001fcc <GSM_SIM_INIT+0x314>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 fa53 	bl	8008254 <strstr>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <GSM_SIM_INIT+0x110>
	   				 state=2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001dc0:	487e      	ldr	r0, [pc, #504]	; (8001fbc <GSM_SIM_INIT+0x304>)
 8001dc2:	f006 f883 	bl	8007ecc <puts>
	   			  break;
 8001dc6:	e02b      	b.n	8001e20 <GSM_SIM_INIT+0x168>
	   				  substate=1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001dcc:	e028      	b.n	8001e20 <GSM_SIM_INIT+0x168>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001dce:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	497a      	ldr	r1, [pc, #488]	; (8001fc0 <GSM_SIM_INIT+0x308>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 f9bb 	bl	8008152 <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <GSM_SIM_INIT+0x148>
	   				  state=0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	3301      	adds	r3, #1
 8001dee:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	d913      	bls.n	8001e1e <GSM_SIM_INIT+0x166>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001df6:	4873      	ldr	r0, [pc, #460]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001df8:	f006 f868 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e1b1      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001e08:	797b      	ldrb	r3, [r7, #5]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001e0e:	797b      	ldrb	r3, [r7, #5]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	d904      	bls.n	8001e1e <GSM_SIM_INIT+0x166>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001e14:	486b      	ldr	r0, [pc, #428]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001e16:	f006 f859 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1a2      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001e1e:	bf00      	nop
	   		  }
	 		  break;
 8001e20:	e19f      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
	 	case 2:
	 		  switch(substate)
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <GSM_SIM_INIT+0x176>
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d022      	beq.n	8001e72 <GSM_SIM_INIT+0x1ba>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001e2c:	e047      	b.n	8001ebe <GSM_SIM_INIT+0x206>
	   			  Rx_string = GSM_Send_AT_Command("AT+CSQ\r");
 8001e2e:	4868      	ldr	r0, [pc, #416]	; (8001fd0 <GSM_SIM_INIT+0x318>)
 8001e30:	f7ff fd14 	bl	800185c <GSM_Send_AT_Command>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a5f      	ldr	r2, [pc, #380]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001e38:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"99")&& (Rx_string[8]>='2'))
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4965      	ldr	r1, [pc, #404]	; (8001fd4 <GSM_SIM_INIT+0x31c>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f006 fa07 	bl	8008254 <strstr>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00f      	beq.n	8001e6c <GSM_SIM_INIT+0x1b4>
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3308      	adds	r3, #8
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b31      	cmp	r3, #49	; 0x31
 8001e56:	d909      	bls.n	8001e6c <GSM_SIM_INIT+0x1b4>
	   				 state=3;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001e64:	4855      	ldr	r0, [pc, #340]	; (8001fbc <GSM_SIM_INIT+0x304>)
 8001e66:	f006 f831 	bl	8007ecc <puts>
	   			  break;
 8001e6a:	e028      	b.n	8001ebe <GSM_SIM_INIT+0x206>
	   				  substate=1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001e70:	e025      	b.n	8001ebe <GSM_SIM_INIT+0x206>
			          Rx_string = GSM_Send_AT_Command("AT+CFUN=1\r");
 8001e72:	4859      	ldr	r0, [pc, #356]	; (8001fd8 <GSM_SIM_INIT+0x320>)
 8001e74:	f7ff fcf2 	bl	800185c <GSM_Send_AT_Command>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001e7c:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"0,1"))
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4956      	ldr	r1, [pc, #344]	; (8001fdc <GSM_SIM_INIT+0x324>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 f9e5 	bl	8008254 <strstr>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <GSM_SIM_INIT+0x1e6>
	   			  	  substate=0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	71fb      	strb	r3, [r7, #7]
	   			  	  counter=0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	717b      	strb	r3, [r7, #5]
	   			  break;
 8001e9c:	e00e      	b.n	8001ebc <GSM_SIM_INIT+0x204>
	   				  substate=0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	2b09      	cmp	r3, #9
 8001eb0:	d904      	bls.n	8001ebc <GSM_SIM_INIT+0x204>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001eb2:	4844      	ldr	r0, [pc, #272]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001eb4:	f006 f80a 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e153      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001ebc:	bf00      	nop
	   		  }
	 		  break;
 8001ebe:	e150      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
	 case 3:
	 		  switch(substate)
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <GSM_SIM_INIT+0x214>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d01c      	beq.n	8001f04 <GSM_SIM_INIT+0x24c>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001eca:	e044      	b.n	8001f56 <GSM_SIM_INIT+0x29e>
	   			  Rx_string = GSM_Send_AT_Command("AT+CMEE=2\r");
 8001ecc:	4844      	ldr	r0, [pc, #272]	; (8001fe0 <GSM_SIM_INIT+0x328>)
 8001ece:	f7ff fcc5 	bl	800185c <GSM_Send_AT_Command>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a37      	ldr	r2, [pc, #220]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001ed6:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4941      	ldr	r1, [pc, #260]	; (8001fe4 <GSM_SIM_INIT+0x32c>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 f9b8 	bl	8008254 <strstr>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <GSM_SIM_INIT+0x246>
	   				 state=4;
 8001eea:	2304      	movs	r3, #4
 8001eec:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <GSM_SIM_INIT+0x304>)
 8001ef8:	f005 ffe8 	bl	8007ecc <puts>
	   			  break;
 8001efc:	e02b      	b.n	8001f56 <GSM_SIM_INIT+0x29e>
	   				  substate=1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001f02:	e028      	b.n	8001f56 <GSM_SIM_INIT+0x29e>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2206      	movs	r2, #6
 8001f0a:	492d      	ldr	r1, [pc, #180]	; (8001fc0 <GSM_SIM_INIT+0x308>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 f920 	bl	8008152 <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10e      	bne.n	8001f36 <GSM_SIM_INIT+0x27e>
	   				  state=0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001f20:	797b      	ldrb	r3, [r7, #5]
 8001f22:	3301      	adds	r3, #1
 8001f24:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d913      	bls.n	8001f54 <GSM_SIM_INIT+0x29c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001f2e:	f005 ffcd 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e116      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	3301      	adds	r3, #1
 8001f42:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	d904      	bls.n	8001f54 <GSM_SIM_INIT+0x29c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <GSM_SIM_INIT+0x30c>)
 8001f4c:	f005 ffbe 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e107      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001f54:	bf00      	nop
	   		  }
	 		  break;
 8001f56:	e104      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
	 	case 4:
	 		  switch(substate)
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <GSM_SIM_INIT+0x2ac>
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d046      	beq.n	8001ff0 <GSM_SIM_INIT+0x338>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001f62:	e06e      	b.n	8002042 <GSM_SIM_INIT+0x38a>
	   			  Rx_string = GSM_Send_AT_Command("AT+CREG?\r");
 8001f64:	4820      	ldr	r0, [pc, #128]	; (8001fe8 <GSM_SIM_INIT+0x330>)
 8001f66:	f7ff fc79 	bl	800185c <GSM_Send_AT_Command>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001f6e:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"0,6")))
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4919      	ldr	r1, [pc, #100]	; (8001fdc <GSM_SIM_INIT+0x324>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f006 f96c 	bl	8008254 <strstr>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <GSM_SIM_INIT+0x2dc>
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <GSM_SIM_INIT+0x2fc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4919      	ldr	r1, [pc, #100]	; (8001fec <GSM_SIM_INIT+0x334>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f006 f963 	bl	8008254 <strstr>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <GSM_SIM_INIT+0x2f0>
	   				 state=5;
 8001f94:	2305      	movs	r3, #5
 8001f96:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <GSM_SIM_INIT+0x304>)
 8001fa2:	f005 ff93 	bl	8007ecc <puts>
	   			  break;
 8001fa6:	e04c      	b.n	8002042 <GSM_SIM_INIT+0x38a>
	   				  substate=1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001fac:	e049      	b.n	8002042 <GSM_SIM_INIT+0x38a>
 8001fae:	bf00      	nop
 8001fb0:	0800c38c 	.word	0x0800c38c
 8001fb4:	20000a40 	.word	0x20000a40
 8001fb8:	0800c394 	.word	0x0800c394
 8001fbc:	0800c31c 	.word	0x0800c31c
 8001fc0:	0800c364 	.word	0x0800c364
 8001fc4:	0800c2d4 	.word	0x0800c2d4
 8001fc8:	0800c39c 	.word	0x0800c39c
 8001fcc:	0800c3a8 	.word	0x0800c3a8
 8001fd0:	0800c3b0 	.word	0x0800c3b0
 8001fd4:	0800c3b8 	.word	0x0800c3b8
 8001fd8:	0800c3bc 	.word	0x0800c3bc
 8001fdc:	0800c3c8 	.word	0x0800c3c8
 8001fe0:	0800c3cc 	.word	0x0800c3cc
 8001fe4:	0800c2d0 	.word	0x0800c2d0
 8001fe8:	0800c3d8 	.word	0x0800c3d8
 8001fec:	0800c3e4 	.word	0x0800c3e4
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	; (800216c <GSM_SIM_INIT+0x4b4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	495e      	ldr	r1, [pc, #376]	; (8002170 <GSM_SIM_INIT+0x4b8>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 f8aa 	bl	8008152 <strncmp>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10e      	bne.n	8002022 <GSM_SIM_INIT+0x36a>
	   				  state=0;
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8002008:	2300      	movs	r3, #0
 800200a:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 800200c:	797b      	ldrb	r3, [r7, #5]
 800200e:	3301      	adds	r3, #1
 8002010:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8002012:	797b      	ldrb	r3, [r7, #5]
 8002014:	2b09      	cmp	r3, #9
 8002016:	d913      	bls.n	8002040 <GSM_SIM_INIT+0x388>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8002018:	4856      	ldr	r0, [pc, #344]	; (8002174 <GSM_SIM_INIT+0x4bc>)
 800201a:	f005 ff57 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 800201e:	2301      	movs	r3, #1
 8002020:	e0a0      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	3301      	adds	r3, #1
 800202e:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8002030:	797b      	ldrb	r3, [r7, #5]
 8002032:	2b09      	cmp	r3, #9
 8002034:	d904      	bls.n	8002040 <GSM_SIM_INIT+0x388>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8002036:	484f      	ldr	r0, [pc, #316]	; (8002174 <GSM_SIM_INIT+0x4bc>)
 8002038:	f005 ff48 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 800203c:	2301      	movs	r3, #1
 800203e:	e091      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8002040:	bf00      	nop
	   		  }
 			  break;
 8002042:	e08e      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
		case 5:
	 		  switch(substate)
 8002044:	79bb      	ldrb	r3, [r7, #6]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <GSM_SIM_INIT+0x398>
 800204a:	2b01      	cmp	r3, #1
 800204c:	d025      	beq.n	800209a <GSM_SIM_INIT+0x3e2>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 800204e:	e04a      	b.n	80020e6 <GSM_SIM_INIT+0x42e>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGREG?\r");
 8002050:	4849      	ldr	r0, [pc, #292]	; (8002178 <GSM_SIM_INIT+0x4c0>)
 8002052:	f7ff fc03 	bl	800185c <GSM_Send_AT_Command>
 8002056:	4603      	mov	r3, r0
 8002058:	4a44      	ldr	r2, [pc, #272]	; (800216c <GSM_SIM_INIT+0x4b4>)
 800205a:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"1,1")))
 800205c:	4b43      	ldr	r3, [pc, #268]	; (800216c <GSM_SIM_INIT+0x4b4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4946      	ldr	r1, [pc, #280]	; (800217c <GSM_SIM_INIT+0x4c4>)
 8002062:	4618      	mov	r0, r3
 8002064:	f006 f8f6 	bl	8008254 <strstr>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <GSM_SIM_INIT+0x3c8>
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <GSM_SIM_INIT+0x4b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4943      	ldr	r1, [pc, #268]	; (8002180 <GSM_SIM_INIT+0x4c8>)
 8002074:	4618      	mov	r0, r3
 8002076:	f006 f8ed 	bl	8008254 <strstr>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <GSM_SIM_INIT+0x3dc>
	   				 state=6;
 8002080:	2306      	movs	r3, #6
 8002082:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8002084:	2300      	movs	r3, #0
 8002086:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8002088:	2300      	movs	r3, #0
 800208a:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 800208c:	483d      	ldr	r0, [pc, #244]	; (8002184 <GSM_SIM_INIT+0x4cc>)
 800208e:	f005 ff1d 	bl	8007ecc <puts>
	   			  break;
 8002092:	e028      	b.n	80020e6 <GSM_SIM_INIT+0x42e>
	   				  substate=1;
 8002094:	2301      	movs	r3, #1
 8002096:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8002098:	e025      	b.n	80020e6 <GSM_SIM_INIT+0x42e>
				  Rx_string = GSM_Send_AT_Command("AT+CGREG=0\r");
 800209a:	483b      	ldr	r0, [pc, #236]	; (8002188 <GSM_SIM_INIT+0x4d0>)
 800209c:	f7ff fbde 	bl	800185c <GSM_Send_AT_Command>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <GSM_SIM_INIT+0x4b4>)
 80020a4:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <GSM_SIM_INIT+0x4b4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4938      	ldr	r1, [pc, #224]	; (800218c <GSM_SIM_INIT+0x4d4>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 f8d1 	bl	8008254 <strstr>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <GSM_SIM_INIT+0x40e>
	   				  state=5;
 80020b8:	2305      	movs	r3, #5
 80020ba:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80020bc:	2300      	movs	r3, #0
 80020be:	71bb      	strb	r3, [r7, #6]
	   			  	  counter=0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	717b      	strb	r3, [r7, #5]
	   			  break;
 80020c4:	e00e      	b.n	80020e4 <GSM_SIM_INIT+0x42c>
	   			  	  state=0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	3301      	adds	r3, #1
 80020d2:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	d904      	bls.n	80020e4 <GSM_SIM_INIT+0x42c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 80020da:	4826      	ldr	r0, [pc, #152]	; (8002174 <GSM_SIM_INIT+0x4bc>)
 80020dc:	f005 fef6 	bl	8007ecc <puts>
	   			  		   			  		  return 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e03f      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 80020e4:	bf00      	nop
	   		  }
 			  break;
 80020e6:	e03c      	b.n	8002162 <GSM_SIM_INIT+0x4aa>
		case 6:
	 		  switch(substate)
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <GSM_SIM_INIT+0x43c>
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d01d      	beq.n	800212e <GSM_SIM_INIT+0x476>
	   			   	   			  		  return 1;
	   			   	   			  	  }
	   			  }

	   		  default:
	   			  break;
 80020f2:	e033      	b.n	800215c <GSM_SIM_INIT+0x4a4>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPSI?\r");
 80020f4:	4826      	ldr	r0, [pc, #152]	; (8002190 <GSM_SIM_INIT+0x4d8>)
 80020f6:	f7ff fbb1 	bl	800185c <GSM_Send_AT_Command>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <GSM_SIM_INIT+0x4b4>)
 80020fe:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"LTE,Online")))
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <GSM_SIM_INIT+0x4b4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4923      	ldr	r1, [pc, #140]	; (8002194 <GSM_SIM_INIT+0x4dc>)
 8002106:	4618      	mov	r0, r3
 8002108:	f006 f8a4 	bl	8008254 <strstr>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <GSM_SIM_INIT+0x470>
	   				 state=0;
 8002112:	2300      	movs	r3, #0
 8002114:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8002116:	2300      	movs	r3, #0
 8002118:	71bb      	strb	r3, [r7, #6]
	   				printf("RESPONSE MATCHED\n");
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <GSM_SIM_INIT+0x4cc>)
 800211c:	f005 fed6 	bl	8007ecc <puts>
	   				counter=0;
 8002120:	2300      	movs	r3, #0
 8002122:	717b      	strb	r3, [r7, #5]
					return 0;
 8002124:	2300      	movs	r3, #0
 8002126:	e01d      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   				  substate=1;
 8002128:	2301      	movs	r3, #1
 800212a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800212c:	e017      	b.n	800215e <GSM_SIM_INIT+0x4a6>
	   			  if(GSM_APN_SET()==0)
 800212e:	f7ff fc7d 	bl	8001a2c <GSM_APN_SET>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <GSM_SIM_INIT+0x486>
	   			     substate=0;
 8002138:	2300      	movs	r3, #0
 800213a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800213c:	e00e      	b.n	800215c <GSM_SIM_INIT+0x4a4>
	   				  substate=0;
 800213e:	2300      	movs	r3, #0
 8002140:	71bb      	strb	r3, [r7, #6]
	   			   	  state=6;
 8002142:	2306      	movs	r3, #6
 8002144:	71fb      	strb	r3, [r7, #7]
	   			   counter++;
 8002146:	797b      	ldrb	r3, [r7, #5]
 8002148:	3301      	adds	r3, #1
 800214a:	717b      	strb	r3, [r7, #5]
	   			   	   			  	  if(counter>=10)
 800214c:	797b      	ldrb	r3, [r7, #5]
 800214e:	2b09      	cmp	r3, #9
 8002150:	d904      	bls.n	800215c <GSM_SIM_INIT+0x4a4>
	   			   	   			  		  printf("CONNECTIVITY PROBLEM\n");
 8002152:	4808      	ldr	r0, [pc, #32]	; (8002174 <GSM_SIM_INIT+0x4bc>)
 8002154:	f005 feba 	bl	8007ecc <puts>
	   			   	   			  		  return 1;
 8002158:	2301      	movs	r3, #1
 800215a:	e003      	b.n	8002164 <GSM_SIM_INIT+0x4ac>
	   			  break;
 800215c:	bf00      	nop
	   		  }
 			  break;
 800215e:	e000      	b.n	8002162 <GSM_SIM_INIT+0x4aa>

	  default:
	 	 break;
 8002160:	bf00      	nop
	  switch(state)
 8002162:	e5b2      	b.n	8001cca <GSM_SIM_INIT+0x12>
  	}
	}
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000a40 	.word	0x20000a40
 8002170:	0800c364 	.word	0x0800c364
 8002174:	0800c2d4 	.word	0x0800c2d4
 8002178:	0800c3e8 	.word	0x0800c3e8
 800217c:	0800c3c8 	.word	0x0800c3c8
 8002180:	0800c3f4 	.word	0x0800c3f4
 8002184:	0800c31c 	.word	0x0800c31c
 8002188:	0800c3f8 	.word	0x0800c3f8
 800218c:	0800c2d0 	.word	0x0800c2d0
 8002190:	0800c404 	.word	0x0800c404
 8002194:	0800c410 	.word	0x0800c410

08002198 <GSM_Send_Data>:


int GSM_Send_Data(uint8_t * data)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	int substate=0,counter=0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
	char CTRL_Z=26;
 80021a8:	231a      	movs	r3, #26
 80021aa:	73fb      	strb	r3, [r7, #15]


		while(1)
		{			switch(substate)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	f000 80d4 	beq.w	800235c <GSM_Send_Data+0x1c4>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	dcf8      	bgt.n	80021ac <GSM_Send_Data+0x14>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <GSM_Send_Data+0x30>
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d062      	beq.n	800228c <GSM_Send_Data+0xf4>
 80021c6:	e7f1      	b.n	80021ac <GSM_Send_Data+0x14>
					{		case 0:
							Rx_string=GSM_Send_AT_Command("AT+CIPOPEN?\r");
 80021c8:	4868      	ldr	r0, [pc, #416]	; (800236c <GSM_Send_Data+0x1d4>)
 80021ca:	f7ff fb47 	bl	800185c <GSM_Send_AT_Command>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a67      	ldr	r2, [pc, #412]	; (8002370 <GSM_Send_Data+0x1d8>)
 80021d2:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"139.59.78.252"))
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <GSM_Send_Data+0x1d8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4966      	ldr	r1, [pc, #408]	; (8002374 <GSM_Send_Data+0x1dc>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f006 f83a 	bl	8008254 <strstr>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04f      	beq.n	8002286 <GSM_Send_Data+0xee>
							{
									printf("IP OPENED\n");
 80021e6:	4864      	ldr	r0, [pc, #400]	; (8002378 <GSM_Send_Data+0x1e0>)
 80021e8:	f005 fe70 	bl	8007ecc <puts>
									counter=0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
									memset(RxBuf,0,200);
 80021f0:	22c8      	movs	r2, #200	; 0xc8
 80021f2:	2100      	movs	r1, #0
 80021f4:	4861      	ldr	r0, [pc, #388]	; (800237c <GSM_Send_Data+0x1e4>)
 80021f6:	f005 ff97 	bl	8008128 <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 80021fa:	220d      	movs	r2, #13
 80021fc:	4960      	ldr	r1, [pc, #384]	; (8002380 <GSM_Send_Data+0x1e8>)
 80021fe:	4861      	ldr	r0, [pc, #388]	; (8002384 <GSM_Send_Data+0x1ec>)
 8002200:	f003 fa20 	bl	8005644 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8002204:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002208:	22c8      	movs	r2, #200	; 0xc8
 800220a:	495c      	ldr	r1, [pc, #368]	; (800237c <GSM_Send_Data+0x1e4>)
 800220c:	485d      	ldr	r0, [pc, #372]	; (8002384 <GSM_Send_Data+0x1ec>)
 800220e:	f003 f950 	bl	80054b2 <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8002212:	495a      	ldr	r1, [pc, #360]	; (800237c <GSM_Send_Data+0x1e4>)
 8002214:	485c      	ldr	r0, [pc, #368]	; (8002388 <GSM_Send_Data+0x1f0>)
 8002216:	f005 fdf3 	bl	8007e00 <iprintf>
									if(strstr(RxBuf,(char *)">"))
 800221a:	213e      	movs	r1, #62	; 0x3e
 800221c:	4857      	ldr	r0, [pc, #348]	; (800237c <GSM_Send_Data+0x1e4>)
 800221e:	f005 ff8b 	bl	8008138 <strchr>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02b      	beq.n	8002280 <GSM_Send_Data+0xe8>
									{
									memset(RxBuf,0,200);
 8002228:	22c8      	movs	r2, #200	; 0xc8
 800222a:	2100      	movs	r1, #0
 800222c:	4853      	ldr	r0, [pc, #332]	; (800237c <GSM_Send_Data+0x1e4>)
 800222e:	f005 ff7b 	bl	8008128 <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe f81c 	bl	8000270 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4850      	ldr	r0, [pc, #320]	; (8002384 <GSM_Send_Data+0x1ec>)
 8002242:	f003 f9ff 	bl	8005644 <HAL_UART_Transmit_IT>
									HAL_Delay(2000);
 8002246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800224a:	f000 ff2f 	bl	80030ac <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 800224e:	f107 030f 	add.w	r3, r7, #15
 8002252:	2201      	movs	r2, #1
 8002254:	4619      	mov	r1, r3
 8002256:	484b      	ldr	r0, [pc, #300]	; (8002384 <GSM_Send_Data+0x1ec>)
 8002258:	f003 f9f4 	bl	8005644 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 800225c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002260:	22c8      	movs	r2, #200	; 0xc8
 8002262:	4946      	ldr	r1, [pc, #280]	; (800237c <GSM_Send_Data+0x1e4>)
 8002264:	4847      	ldr	r0, [pc, #284]	; (8002384 <GSM_Send_Data+0x1ec>)
 8002266:	f003 f924 	bl	80054b2 <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 800226a:	4944      	ldr	r1, [pc, #272]	; (800237c <GSM_Send_Data+0x1e4>)
 800226c:	4846      	ldr	r0, [pc, #280]	; (8002388 <GSM_Send_Data+0x1f0>)
 800226e:	f005 fdc7 	bl	8007e00 <iprintf>
									memset(RxBuf,0,200);
 8002272:	22c8      	movs	r2, #200	; 0xc8
 8002274:	2100      	movs	r1, #0
 8002276:	4841      	ldr	r0, [pc, #260]	; (800237c <GSM_Send_Data+0x1e4>)
 8002278:	f005 ff56 	bl	8008128 <memset>
									return 0;
 800227c:	2300      	movs	r3, #0
 800227e:	e071      	b.n	8002364 <GSM_Send_Data+0x1cc>
									}
									else
									{
										substate=0;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
							}
							else
							{
								substate=1;
							}
							break;
 8002284:	e06d      	b.n	8002362 <GSM_Send_Data+0x1ca>
								substate=1;
 8002286:	2301      	movs	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
							break;
 800228a:	e06a      	b.n	8002362 <GSM_Send_Data+0x1ca>
						    case 1:
						    	Rx_string=GSM_Send_AT_Command("AT+CIPOPEN=1,\"TCP\",\"139.59.78.252\",52102\r");
 800228c:	483f      	ldr	r0, [pc, #252]	; (800238c <GSM_Send_Data+0x1f4>)
 800228e:	f7ff fae5 	bl	800185c <GSM_Send_AT_Command>
 8002292:	4603      	mov	r3, r0
 8002294:	4a36      	ldr	r2, [pc, #216]	; (8002370 <GSM_Send_Data+0x1d8>)
 8002296:	6013      	str	r3, [r2, #0]
						    	if(strstr(Rx_string,"+CIPOPEN: 1,0"))
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <GSM_Send_Data+0x1d8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	493c      	ldr	r1, [pc, #240]	; (8002390 <GSM_Send_Data+0x1f8>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 ffd8 	bl	8008254 <strstr>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d050      	beq.n	800234c <GSM_Send_Data+0x1b4>
						    	{
						    		printf("IP OPENED\n");
 80022aa:	4833      	ldr	r0, [pc, #204]	; (8002378 <GSM_Send_Data+0x1e0>)
 80022ac:	f005 fe0e 	bl	8007ecc <puts>
						    		counter=0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
						    		substate=0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
						    		memset(RxBuf,0,200);
 80022b8:	22c8      	movs	r2, #200	; 0xc8
 80022ba:	2100      	movs	r1, #0
 80022bc:	482f      	ldr	r0, [pc, #188]	; (800237c <GSM_Send_Data+0x1e4>)
 80022be:	f005 ff33 	bl	8008128 <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 80022c2:	220d      	movs	r2, #13
 80022c4:	492e      	ldr	r1, [pc, #184]	; (8002380 <GSM_Send_Data+0x1e8>)
 80022c6:	482f      	ldr	r0, [pc, #188]	; (8002384 <GSM_Send_Data+0x1ec>)
 80022c8:	f003 f9bc 	bl	8005644 <HAL_UART_Transmit_IT>
						    		HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,1000);
 80022cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d0:	22c8      	movs	r2, #200	; 0xc8
 80022d2:	492a      	ldr	r1, [pc, #168]	; (800237c <GSM_Send_Data+0x1e4>)
 80022d4:	482b      	ldr	r0, [pc, #172]	; (8002384 <GSM_Send_Data+0x1ec>)
 80022d6:	f003 f8ec 	bl	80054b2 <HAL_UART_Receive>
						    		printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 80022da:	4928      	ldr	r1, [pc, #160]	; (800237c <GSM_Send_Data+0x1e4>)
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <GSM_Send_Data+0x1f0>)
 80022de:	f005 fd8f 	bl	8007e00 <iprintf>
						    				if(strstr(RxBuf,(char *)">"))
 80022e2:	213e      	movs	r1, #62	; 0x3e
 80022e4:	4825      	ldr	r0, [pc, #148]	; (800237c <GSM_Send_Data+0x1e4>)
 80022e6:	f005 ff27 	bl	8008138 <strchr>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02a      	beq.n	8002346 <GSM_Send_Data+0x1ae>
						    					{
						    					memset(RxBuf,0,200);
 80022f0:	22c8      	movs	r2, #200	; 0xc8
 80022f2:	2100      	movs	r1, #0
 80022f4:	4821      	ldr	r0, [pc, #132]	; (800237c <GSM_Send_Data+0x1e4>)
 80022f6:	f005 ff17 	bl	8008128 <memset>
						    					HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fd ffb8 	bl	8000270 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	481e      	ldr	r0, [pc, #120]	; (8002384 <GSM_Send_Data+0x1ec>)
 800230a:	f003 f99b 	bl	8005644 <HAL_UART_Transmit_IT>
						    					HAL_Delay(2000);
 800230e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002312:	f000 fecb 	bl	80030ac <HAL_Delay>
						    					HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 8002316:	f107 030f 	add.w	r3, r7, #15
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	4819      	ldr	r0, [pc, #100]	; (8002384 <GSM_Send_Data+0x1ec>)
 8002320:	f003 f990 	bl	8005644 <HAL_UART_Transmit_IT>
						    					HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,1000);
 8002324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002328:	22c8      	movs	r2, #200	; 0xc8
 800232a:	4914      	ldr	r1, [pc, #80]	; (800237c <GSM_Send_Data+0x1e4>)
 800232c:	4815      	ldr	r0, [pc, #84]	; (8002384 <GSM_Send_Data+0x1ec>)
 800232e:	f003 f8c0 	bl	80054b2 <HAL_UART_Receive>
						    					printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8002332:	4912      	ldr	r1, [pc, #72]	; (800237c <GSM_Send_Data+0x1e4>)
 8002334:	4814      	ldr	r0, [pc, #80]	; (8002388 <GSM_Send_Data+0x1f0>)
 8002336:	f005 fd63 	bl	8007e00 <iprintf>
						    					memset(RxBuf,0,200);
 800233a:	22c8      	movs	r2, #200	; 0xc8
 800233c:	2100      	movs	r1, #0
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <GSM_Send_Data+0x1e4>)
 8002340:	f005 fef2 	bl	8008128 <memset>
									if(counter>5)
									{
									  return 1;
									}
								}
						    	break;
 8002344:	e00c      	b.n	8002360 <GSM_Send_Data+0x1c8>
													substate=1;
 8002346:	2301      	movs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
						    	break;
 800234a:	e009      	b.n	8002360 <GSM_Send_Data+0x1c8>
									counter++;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3301      	adds	r3, #1
 8002350:	613b      	str	r3, [r7, #16]
									if(counter>5)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b05      	cmp	r3, #5
 8002356:	dd03      	ble.n	8002360 <GSM_Send_Data+0x1c8>
									  return 1;
 8002358:	2301      	movs	r3, #1
 800235a:	e003      	b.n	8002364 <GSM_Send_Data+0x1cc>
						case 2:
								return 1;  // GSM SEND failed
 800235c:	2301      	movs	r3, #1
 800235e:	e001      	b.n	8002364 <GSM_Send_Data+0x1cc>
						    	break;
 8002360:	bf00      	nop
		{			switch(substate)
 8002362:	e723      	b.n	80021ac <GSM_Send_Data+0x14>
								break;
					  }
		}
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	0800c41c 	.word	0x0800c41c
 8002370:	20000a40 	.word	0x20000a40
 8002374:	0800c42c 	.word	0x0800c42c
 8002378:	0800c43c 	.word	0x0800c43c
 800237c:	20000978 	.word	0x20000978
 8002380:	0800c448 	.word	0x0800c448
 8002384:	20000b0c 	.word	0x20000b0c
 8002388:	0800c458 	.word	0x0800c458
 800238c:	0800c47c 	.word	0x0800c47c
 8002390:	0800c4a8 	.word	0x0800c4a8

08002394 <writeStringToFlash>:
char readData[100];
#define JSON_SIZE 256

//extern char json_str[JSON_SIZE];
/************ writing data to flash memory ********/
void writeStringToFlash(uint64_t address, char* str) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 80023a0:	f001 f8a4 	bl	80034ec <HAL_FLASH_Unlock>

    // Calculate the length of the string
    uint32_t len = strlen(str);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fd ff63 	bl	8000270 <strlen>
 80023aa:	61f8      	str	r0, [r7, #28]
    //printf("th str %s \n",str);
//printf(" IN Write function %d \n",len);
    // Ensure the length is even to write complete double words
    if (len % 8 != 0) {
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <writeStringToFlash+0x2c>
        len += (8 - len % 8);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f023 0307 	bic.w	r3, r3, #7
 80023bc:	3308      	adds	r3, #8
 80023be:	61fb      	str	r3, [r7, #28]
    }

    // Write the string to flash
    for (uint32_t i = 0; i < len; i += 8) {
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e019      	b.n	80023fa <writeStringToFlash+0x66>
        uint64_t data = 0;
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&data, str + i, 8);
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	18d1      	adds	r1, r2, r3
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2208      	movs	r2, #8
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 ffcd 	bl	800837e <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	18d1      	adds	r1, r2, r3
 80023ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023ee:	2000      	movs	r0, #0
 80023f0:	f001 f810 	bl	8003414 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < len; i += 8) {
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	3308      	adds	r3, #8
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3e1      	bcc.n	80023c6 <writeStringToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8002402:	f001 f895 	bl	8003530 <HAL_FLASH_Lock>
}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <readDataFromFlash>:


/***************reading data from flash memory **************/
void readDataFromFlash(uint64_t address, char* buffer, uint64_t dataSize)
{
 800240e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002412:	b08d      	sub	sp, #52	; 0x34
 8002414:	af00      	add	r7, sp, #0
 8002416:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800241a:	60fa      	str	r2, [r7, #12]
	uint32_t i,j=0;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < dataSize; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	e03d      	b.n	80024a2 <readDataFromFlash+0x94>
	{
	       uint64_t data = *(__IO uint64_t*)address;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	       // Copy each byte from the 64-bit data
	               for (int k = 0; k < 8; k++) {
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e023      	b.n	800247e <readDataFromFlash+0x70>
	                   if (j < dataSize - 1) {  // Ensure not to overflow the buffer
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	2200      	movs	r2, #0
 800243a:	469a      	mov	sl, r3
 800243c:	4693      	mov	fp, r2
 800243e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002442:	1e54      	subs	r4, r2, #1
 8002444:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002448:	45a2      	cmp	sl, r4
 800244a:	eb7b 0305 	sbcs.w	r3, fp, r5
 800244e:	d207      	bcs.n	8002460 <readDataFromFlash+0x52>
	                       buffer[j++] = (char)(data & 0xFF);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	62ba      	str	r2, [r7, #40]	; 0x28
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800245e:	701a      	strb	r2, [r3, #0]
	                   }
	                   data >>= 8;
 8002460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	0a02      	lsrs	r2, r0, #8
 800246e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002472:	0a0b      	lsrs	r3, r1, #8
 8002474:	e9c7 2308 	strd	r2, r3, [r7, #32]
	               for (int k = 0; k < 8; k++) {
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3301      	adds	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b07      	cmp	r3, #7
 8002482:	ddd8      	ble.n	8002436 <readDataFromFlash+0x28>
	               }
	       address += 8;
 8002484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002488:	f112 0108 	adds.w	r1, r2, #8
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	f143 0300 	adc.w	r3, r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002498:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < dataSize; i++)
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	3301      	adds	r3, #1
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2200      	movs	r2, #0
 80024a6:	4698      	mov	r8, r3
 80024a8:	4691      	mov	r9, r2
 80024aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024ae:	4590      	cmp	r8, r2
 80024b0:	eb79 0303 	sbcs.w	r3, r9, r3
 80024b4:	d3b7      	bcc.n	8002426 <readDataFromFlash+0x18>
	}
	buffer[i] = '\0';
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	4413      	add	r3, r2
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]

}
 80024c0:	bf00      	nop
 80024c2:	3734      	adds	r7, #52	; 0x34
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024ca:	4770      	bx	lr

080024cc <eraseFlashPage>:



/**************Erasing data from flash memory ****************/
void eraseFlashPage(uint64_t pageAddress) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	e9c7 0100 	strd	r0, r1, [r7]
    FLASH_EraseInitTypeDef eraseConfig;
    uint32_t pageError;

    eraseConfig.TypeErase   = FLASH_TYPEERASE_PAGES;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
    eraseConfig.Page        = pageAddress / FLASH_PAGE_SIZE; // Specify the page number, not the address
 80024da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	0ac2      	lsrs	r2, r0, #11
 80024e8:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80024ec:	0acb      	lsrs	r3, r1, #11
 80024ee:	4613      	mov	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
    eraseConfig.Banks       = FLASH_BANK_2; // Specify the bank
 80024f2:	2302      	movs	r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
    eraseConfig.NbPages     = 1; // Number of pages to erase
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 80024fa:	f000 fff7 	bl	80034ec <HAL_FLASH_Unlock>

    HAL_FLASHEx_Erase(&eraseConfig, &pageError);
 80024fe:	f107 020c 	add.w	r2, r7, #12
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f8d3 	bl	80036b4 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800250e:	f001 f80f 	bl	8003530 <HAL_FLASH_Lock>
}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002522:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002526:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002532:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002536:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800253a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002542:	e000      	b.n	8002546 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002544:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002546:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f9      	beq.n	8002544 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002550:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800255a:	687b      	ldr	r3, [r7, #4]
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_write>:
#define Buffer_For_Send 100


int _write(int file,char *ptr,int len)

{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]

    int i=0;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

    for(i=0;i<len;i++)
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e009      	b.n	8002592 <_write+0x2a>

      ITM_SendChar((*ptr++));
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	60ba      	str	r2, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ffc7 	bl	800251a <ITM_SendChar>
    for(i=0;i<len;i++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf1      	blt.n	800257e <_write+0x16>

    return len;
 800259a:	687b      	ldr	r3, [r7, #4]

}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b09c      	sub	sp, #112	; 0x70
 80025aa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f000 fd02 	bl	8002fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f9b6 	bl	8002920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 faa4 	bl	8002b00 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025b8:	f000 fa04 	bl	80029c4 <MX_SPI1_Init>
  MX_UART4_Init();
 80025bc:	f000 fa40 	bl	8002a40 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80025c0:	f000 fa6e 	bl	8002aa0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */

  eraseFlashPage(FLASH_START_ADDRESS); // Erasing Flash
 80025c4:	48b8      	ldr	r0, [pc, #736]	; (80028a8 <main+0x304>)
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	f7ff ff7f 	bl	80024cc <eraseFlashPage>
  while (1)
  {
    /*/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DATA_SEND_READY()==0)
 80025ce:	f7ff f909 	bl	80017e4 <DATA_SEND_READY>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 80ba 	bne.w	800274e <main+0x1aa>
	  {
		  	 if(No_Of_Locations!=0) // Block for sending stored locations to server
 80025da:	4bb4      	ldr	r3, [pc, #720]	; (80028ac <main+0x308>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d07b      	beq.n	80026da <main+0x136>
		  	 {
		  		Read_Location=0; // Read location counter making zero
 80025e2:	4bb3      	ldr	r3, [pc, #716]	; (80028b0 <main+0x30c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
		  		char Buffer_to_Send[Buffer_for_Stored_Loc]; // Buffer to Send the stored locations
		  		 	 for(uint8_t instance=0;instance < No_Of_Locations;instance++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025ee:	e05d      	b.n	80026ac <main+0x108>
		  		 	 {
		  		 		readDataFromFlash((FLASH_START_ADDRESS)+(OFFESET*Read_Location),readData,OFFESET);
 80025f0:	4baf      	ldr	r3, [pc, #700]	; (80028b0 <main+0x30c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002600:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002604:	2200      	movs	r2, #0
 8002606:	461c      	mov	r4, r3
 8002608:	4615      	mov	r5, r2
 800260a:	f04f 0238 	mov.w	r2, #56	; 0x38
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9cd 2300 	strd	r2, r3, [sp]
 8002616:	4aa7      	ldr	r2, [pc, #668]	; (80028b4 <main+0x310>)
 8002618:	4620      	mov	r0, r4
 800261a:	4629      	mov	r1, r5
 800261c:	f7ff fef7 	bl	800240e <readDataFromFlash>
		  		 		HAL_Delay(500); // Random Delay to read
 8002620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002624:	f000 fd42 	bl	80030ac <HAL_Delay>
		  		 		strcpy(Buffer_to_Send,readData);
 8002628:	463b      	mov	r3, r7
 800262a:	49a2      	ldr	r1, [pc, #648]	; (80028b4 <main+0x310>)
 800262c:	4618      	mov	r0, r3
 800262e:	f005 fe9e 	bl	800836e <strcpy>

		  		 		printf("Reading Done ");
 8002632:	48a1      	ldr	r0, [pc, #644]	; (80028b8 <main+0x314>)
 8002634:	f005 fbe4 	bl	8007e00 <iprintf>
		  		 		printf("Read data : %s\n ",Buffer_to_Send);
 8002638:	463b      	mov	r3, r7
 800263a:	4619      	mov	r1, r3
 800263c:	489f      	ldr	r0, [pc, #636]	; (80028bc <main+0x318>)
 800263e:	f005 fbdf 	bl	8007e00 <iprintf>
		  		 			ret=GSM_Send_Data((uint8_t *)Buffer_to_Send);
 8002642:	463b      	mov	r3, r7
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fda7 	bl	8002198 <GSM_Send_Data>
 800264a:	4603      	mov	r3, r0
 800264c:	4a9c      	ldr	r2, [pc, #624]	; (80028c0 <main+0x31c>)
 800264e:	6013      	str	r3, [r2, #0]
		  		 		if(ret==0)
 8002650:	4b9b      	ldr	r3, [pc, #620]	; (80028c0 <main+0x31c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10e      	bne.n	8002676 <main+0xd2>
		  		 		{
		  		 			counter=0;
 8002658:	4b9a      	ldr	r3, [pc, #616]	; (80028c4 <main+0x320>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
		  		 			Read_Location++; // Increment the read location counter
 800265e:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <main+0x30c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	4a92      	ldr	r2, [pc, #584]	; (80028b0 <main+0x30c>)
 8002666:	6013      	str	r3, [r2, #0]
		  		 			printf("No of locations sent to server after server got connected %d\n",Read_Location);
 8002668:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <main+0x30c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	4896      	ldr	r0, [pc, #600]	; (80028c8 <main+0x324>)
 8002670:	f005 fbc6 	bl	8007e00 <iprintf>
 8002674:	e015      	b.n	80026a2 <main+0xfe>

		  		 		}
		  		 		else
		  		 		{   instance--;
 8002676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800267a:	3b01      	subs	r3, #1
 800267c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  		 			counter++;
 8002680:	4b90      	ldr	r3, [pc, #576]	; (80028c4 <main+0x320>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a8f      	ldr	r2, [pc, #572]	; (80028c4 <main+0x320>)
 8002688:	6013      	str	r3, [r2, #0]
		  		 			if(counter>5)
 800268a:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <main+0x320>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b05      	cmp	r3, #5
 8002690:	dd03      	ble.n	800269a <main+0xf6>
		  		 			{
		  		 				printf("Server Issue \n");
 8002692:	488e      	ldr	r0, [pc, #568]	; (80028cc <main+0x328>)
 8002694:	f005 fc1a 	bl	8007ecc <puts>
		  		 				goto STORE_IN_FLASH;
 8002698:	e05a      	b.n	8002750 <main+0x1ac>
		  		 			}
		  		 			printf("Restoring from flash to server was failed\n,Check the server \n");
 800269a:	488d      	ldr	r0, [pc, #564]	; (80028d0 <main+0x32c>)
 800269c:	f005 fc16 	bl	8007ecc <puts>
		  		 			goto STORE_IN_FLASH;
 80026a0:	e056      	b.n	8002750 <main+0x1ac>
		  		 	 for(uint8_t instance=0;instance < No_Of_Locations;instance++)
 80026a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80026ac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80026b0:	4b7e      	ldr	r3, [pc, #504]	; (80028ac <main+0x308>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	db9b      	blt.n	80025f0 <main+0x4c>
		  		 		}
		  		 	 }
		  		 	 Read_Location_1=0;
 80026b8:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <main+0x330>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
		  		 	 No_Of_Locations=0;
 80026be:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <main+0x308>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
		  		 	 Write_Location=0;
 80026c4:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <main+0x334>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
		  		 	 eraseFlashPage(FLASH_START_ADDRESS);
 80026ca:	4877      	ldr	r0, [pc, #476]	; (80028a8 <main+0x304>)
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	f7ff fefc 	bl	80024cc <eraseFlashPage>
		  		 	 printf("Erased the Flash after stored data sent to server\n");
 80026d4:	4881      	ldr	r0, [pc, #516]	; (80028dc <main+0x338>)
 80026d6:	f005 fbf9 	bl	8007ecc <puts>

		  	  }

	  	  	 		while(1)  /// Sending GPS data to server
	  	  	 		{
	  	  	 		  if(HAL_UART_Receive_IT(&huart1, (unsigned char *)RxBuffer, 750)==HAL_OK)
 80026da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80026de:	4980      	ldr	r1, [pc, #512]	; (80028e0 <main+0x33c>)
 80026e0:	4880      	ldr	r0, [pc, #512]	; (80028e4 <main+0x340>)
 80026e2:	f003 f80d 	bl	8005700 <HAL_UART_Receive_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f6      	bne.n	80026da <main+0x136>
	  	  	 		  {
	  	  	 			printf("Received NMEA %s\n",RxBuffer);
 80026ec:	497c      	ldr	r1, [pc, #496]	; (80028e0 <main+0x33c>)
 80026ee:	487e      	ldr	r0, [pc, #504]	; (80028e8 <main+0x344>)
 80026f0:	f005 fb86 	bl	8007e00 <iprintf>
	  	  	 			strcpy(buf_to_extract,RxBuffer);
 80026f4:	497a      	ldr	r1, [pc, #488]	; (80028e0 <main+0x33c>)
 80026f6:	487d      	ldr	r0, [pc, #500]	; (80028ec <main+0x348>)
 80026f8:	f005 fe39 	bl	800836e <strcpy>
	  	  	 			memset(RxBuffer,0,NMEA_SIZE);
 80026fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002700:	2100      	movs	r1, #0
 8002702:	4877      	ldr	r0, [pc, #476]	; (80028e0 <main+0x33c>)
 8002704:	f005 fd10 	bl	8008128 <memset>
	  	  	 			get_data_from_gps(buf_to_extract);
 8002708:	4878      	ldr	r0, [pc, #480]	; (80028ec <main+0x348>)
 800270a:	f7fe fc71 	bl	8000ff0 <get_data_from_gps>


	  	  	 			if(*json_str)
 800270e:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <main+0x34c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d011      	beq.n	800273a <main+0x196>
	  	  	 			{
	  	  	 				printf("GPS Received %s \n",json_str);
 8002716:	4976      	ldr	r1, [pc, #472]	; (80028f0 <main+0x34c>)
 8002718:	4876      	ldr	r0, [pc, #472]	; (80028f4 <main+0x350>)
 800271a:	f005 fb71 	bl	8007e00 <iprintf>
	  	  	 				if(GSM_Send_Data((uint8_t *)json_str)==0)
 800271e:	4874      	ldr	r0, [pc, #464]	; (80028f0 <main+0x34c>)
 8002720:	f7ff fd3a 	bl	8002198 <GSM_Send_Data>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <main+0x18e>
	  	  	 				{
	  	  	 					printf("Sending worked \n");
 800272a:	4873      	ldr	r0, [pc, #460]	; (80028f8 <main+0x354>)
 800272c:	f005 fbce 	bl	8007ecc <puts>
 8002730:	e006      	b.n	8002740 <main+0x19c>

	  	  	 				}
	  	  	 				else
	  	  	 				{

	  	  	 					printf("Sending  not worked \n");
 8002732:	4872      	ldr	r0, [pc, #456]	; (80028fc <main+0x358>)
 8002734:	f005 fbca 	bl	8007ecc <puts>
	  	  	 					goto STORE_IN_FLASH;
 8002738:	e00a      	b.n	8002750 <main+0x1ac>

	  	  	 				}
	  	  	 			}
	  	  	 			else
	  	  	 			{
	  	  	 				printf("GPS Received No DATA\n");
 800273a:	4871      	ldr	r0, [pc, #452]	; (8002900 <main+0x35c>)
 800273c:	f005 fbc6 	bl	8007ecc <puts>

	  	  	 			}
	  	  	 			memset(json_str,0,JSON_SIZE);
 8002740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002744:	2100      	movs	r1, #0
 8002746:	486a      	ldr	r0, [pc, #424]	; (80028f0 <main+0x34c>)
 8002748:	f005 fcee 	bl	8008128 <memset>
	  	  	 		  if(HAL_UART_Receive_IT(&huart1, (unsigned char *)RxBuffer, 750)==HAL_OK)
 800274c:	e7c5      	b.n	80026da <main+0x136>
	  	  	 		  }
	  	  	 		}
	  	  	 } //  GSM Sending block ends here
	  	  	 else
	  	  	 {
STORE_IN_FLASH :	 printf("GSM Init Failed in Main\n Storing in Flash \n");
 800274e:	bf00      	nop
 8002750:	486c      	ldr	r0, [pc, #432]	; (8002904 <main+0x360>)
 8002752:	f005 fbbb 	bl	8007ecc <puts>
 			  	  	//eraseFlashPage(FLASH_START_ADDRESS);

	  	  		while(1)
	  	  		{
	  	  			uint8_t json_str_len=0;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	  	  			if(HAL_UART_Receive_IT(&huart1,(unsigned char *)RxBuffer, 750)==HAL_OK)
 800275c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002760:	495f      	ldr	r1, [pc, #380]	; (80028e0 <main+0x33c>)
 8002762:	4860      	ldr	r0, [pc, #384]	; (80028e4 <main+0x340>)
 8002764:	f002 ffcc 	bl	8005700 <HAL_UART_Receive_IT>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f3      	bne.n	8002756 <main+0x1b2>
	  	  			{

	  	  				printf("Received NMEA %s\n",RxBuffer);
 800276e:	495c      	ldr	r1, [pc, #368]	; (80028e0 <main+0x33c>)
 8002770:	485d      	ldr	r0, [pc, #372]	; (80028e8 <main+0x344>)
 8002772:	f005 fb45 	bl	8007e00 <iprintf>
	  	  			  	strcpy(buf_to_extract,RxBuffer);
 8002776:	495a      	ldr	r1, [pc, #360]	; (80028e0 <main+0x33c>)
 8002778:	485c      	ldr	r0, [pc, #368]	; (80028ec <main+0x348>)
 800277a:	f005 fdf8 	bl	800836e <strcpy>
	  	  			  	memset(RxBuffer,0,NMEA_SIZE);
 800277e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002782:	2100      	movs	r1, #0
 8002784:	4856      	ldr	r0, [pc, #344]	; (80028e0 <main+0x33c>)
 8002786:	f005 fccf 	bl	8008128 <memset>
	  	  			  	get_data_from_gps(buf_to_extract);
 800278a:	4858      	ldr	r0, [pc, #352]	; (80028ec <main+0x348>)
 800278c:	f7fe fc30 	bl	8000ff0 <get_data_from_gps>

	  	  			  	  if(*json_str)
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <main+0x34c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d07c      	beq.n	8002892 <main+0x2ee>
	  	  			  		{
	  	  			  	  	 printf("GPS Received %s \n",json_str);
 8002798:	4955      	ldr	r1, [pc, #340]	; (80028f0 <main+0x34c>)
 800279a:	4856      	ldr	r0, [pc, #344]	; (80028f4 <main+0x350>)
 800279c:	f005 fb30 	bl	8007e00 <iprintf>
	  	  			  	  	 json_str_len=strlen(json_str);
 80027a0:	4853      	ldr	r0, [pc, #332]	; (80028f0 <main+0x34c>)
 80027a2:	f7fd fd65 	bl	8000270 <strlen>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	  	  			  	  	 printf(" json string length %d",json_str_len);
 80027ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80027b0:	4619      	mov	r1, r3
 80027b2:	4855      	ldr	r0, [pc, #340]	; (8002908 <main+0x364>)
 80027b4:	f005 fb24 	bl	8007e00 <iprintf>
	  	  			  	  // Write the json string into the flash
	  	  	  		  	  	 writeStringToFlash((FLASH_START_ADDRESS)+(OFFESET*Write_Location),(char * )json_str);
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <main+0x334>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80027c8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80027cc:	2200      	movs	r2, #0
 80027ce:	4698      	mov	r8, r3
 80027d0:	4691      	mov	r9, r2
 80027d2:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <main+0x34c>)
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7ff fddc 	bl	8002394 <writeStringToFlash>
	  	  	  		  	  	 Write_Location++;
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <main+0x334>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a3d      	ldr	r2, [pc, #244]	; (80028d8 <main+0x334>)
 80027e4:	6013      	str	r3, [r2, #0]

	  	  			  	  	 HAL_Delay(1000);
 80027e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ea:	f000 fc5f 	bl	80030ac <HAL_Delay>
	  	  			  	  	 printf("Writing into flash done\n");
 80027ee:	4847      	ldr	r0, [pc, #284]	; (800290c <main+0x368>)
 80027f0:	f005 fb6c 	bl	8007ecc <puts>
	  	  			  	  	 	 readDataFromFlash((FLASH_START_ADDRESS)+(OFFESET*Read_Location_1),readData,OFFESET);
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <main+0x330>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002804:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002808:	2200      	movs	r2, #0
 800280a:	469a      	mov	sl, r3
 800280c:	4693      	mov	fp, r2
 800280e:	f04f 0238 	mov.w	r2, #56	; 0x38
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9cd 2300 	strd	r2, r3, [sp]
 800281a:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <main+0x310>)
 800281c:	4650      	mov	r0, sl
 800281e:	4659      	mov	r1, fp
 8002820:	f7ff fdf5 	bl	800240e <readDataFromFlash>
	  	  			  	  		 HAL_Delay(500);
 8002824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002828:	f000 fc40 	bl	80030ac <HAL_Delay>
	  	  			  	  		 Read_Location_1++;
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <main+0x330>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <main+0x330>)
 8002834:	6013      	str	r3, [r2, #0]
	  	  			  	  		 printf("Reading Done ");
 8002836:	4820      	ldr	r0, [pc, #128]	; (80028b8 <main+0x314>)
 8002838:	f005 fae2 	bl	8007e00 <iprintf>
	  	  			  	  		 printf("Read data : %s\n ",readData);
 800283c:	491d      	ldr	r1, [pc, #116]	; (80028b4 <main+0x310>)
 800283e:	481f      	ldr	r0, [pc, #124]	; (80028bc <main+0x318>)
 8002840:	f005 fade 	bl	8007e00 <iprintf>
	  	  			  	  		 printf("Read PTR : %s\n ",json_str);
 8002844:	492a      	ldr	r1, [pc, #168]	; (80028f0 <main+0x34c>)
 8002846:	4832      	ldr	r0, [pc, #200]	; (8002910 <main+0x36c>)
 8002848:	f005 fada 	bl	8007e00 <iprintf>
	  	  			  	  		 char Buffer_to_Send[Buffer_For_Send];
	  	  			  	  		 strcpy(Buffer_to_Send,readData);
 800284c:	463b      	mov	r3, r7
 800284e:	4919      	ldr	r1, [pc, #100]	; (80028b4 <main+0x310>)
 8002850:	4618      	mov	r0, r3
 8002852:	f005 fd8c 	bl	800836e <strcpy>
	  	  			  	  		 if(strncmp(Buffer_to_Send,json_str,json_str_len)==0)
 8002856:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800285a:	463b      	mov	r3, r7
 800285c:	4924      	ldr	r1, [pc, #144]	; (80028f0 <main+0x34c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fc77 	bl	8008152 <strncmp>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <main+0x2e6>
	  	  			  	  		 {
	  	  			  	  			 printf("Storing worked \n");
 800286a:	482a      	ldr	r0, [pc, #168]	; (8002914 <main+0x370>)
 800286c:	f005 fb2e 	bl	8007ecc <puts>
	  	  			  	  			 printf("Read from flash :%d :%s",Read_Location_1,readData);
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <main+0x330>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <main+0x310>)
 8002876:	4619      	mov	r1, r3
 8002878:	4827      	ldr	r0, [pc, #156]	; (8002918 <main+0x374>)
 800287a:	f005 fac1 	bl	8007e00 <iprintf>
	  	  			  	  			 No_Of_Locations++;
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <main+0x308>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	4a09      	ldr	r2, [pc, #36]	; (80028ac <main+0x308>)
 8002886:	6013      	str	r3, [r2, #0]
	  if(DATA_SEND_READY()==0)
 8002888:	e6a1      	b.n	80025ce <main+0x2a>
	  	  			  	  			 break;

	  	  			  	  		 }
	  	  			  	  		 else
	  	  			  	  		 {
	  	  			  	  			 printf("Storing  not worked \n");
 800288a:	4824      	ldr	r0, [pc, #144]	; (800291c <main+0x378>)
 800288c:	f005 fb1e 	bl	8007ecc <puts>
 8002890:	e002      	b.n	8002898 <main+0x2f4>
	  	  			  	  		 }

	  	  			  	 }
	  	  			  	  else
	  	  			  	  {
	  	  			  	  	  printf("GPS Received No DATA\n");
 8002892:	481b      	ldr	r0, [pc, #108]	; (8002900 <main+0x35c>)
 8002894:	f005 fb1a 	bl	8007ecc <puts>

	  	  			  	  }
	  	  			  	  	memset(json_str,0,JSON_SIZE);
 8002898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289c:	2100      	movs	r1, #0
 800289e:	4814      	ldr	r0, [pc, #80]	; (80028f0 <main+0x34c>)
 80028a0:	f005 fc42 	bl	8008128 <memset>
	  	  		{
 80028a4:	e757      	b.n	8002756 <main+0x1b2>
 80028a6:	bf00      	nop
 80028a8:	08080000 	.word	0x08080000
 80028ac:	20000c28 	.word	0x20000c28
 80028b0:	20000c1c 	.word	0x20000c1c
 80028b4:	20000a44 	.word	0x20000a44
 80028b8:	0800c4b8 	.word	0x0800c4b8
 80028bc:	0800c4c8 	.word	0x0800c4c8
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000c2c 	.word	0x20000c2c
 80028c8:	0800c4dc 	.word	0x0800c4dc
 80028cc:	0800c51c 	.word	0x0800c51c
 80028d0:	0800c52c 	.word	0x0800c52c
 80028d4:	20000c20 	.word	0x20000c20
 80028d8:	20000c24 	.word	0x20000c24
 80028dc:	0800c56c 	.word	0x0800c56c
 80028e0:	20000214 	.word	0x20000214
 80028e4:	20000b94 	.word	0x20000b94
 80028e8:	0800c5a0 	.word	0x0800c5a0
 80028ec:	20000504 	.word	0x20000504
 80028f0:	200007f4 	.word	0x200007f4
 80028f4:	0800c5b4 	.word	0x0800c5b4
 80028f8:	0800c5c8 	.word	0x0800c5c8
 80028fc:	0800c5d8 	.word	0x0800c5d8
 8002900:	0800c5f0 	.word	0x0800c5f0
 8002904:	0800c608 	.word	0x0800c608
 8002908:	0800c634 	.word	0x0800c634
 800290c:	0800c64c 	.word	0x0800c64c
 8002910:	0800c664 	.word	0x0800c664
 8002914:	0800c674 	.word	0x0800c674
 8002918:	0800c684 	.word	0x0800c684
 800291c:	0800c69c 	.word	0x0800c69c

08002920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b096      	sub	sp, #88	; 0x58
 8002924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	2244      	movs	r2, #68	; 0x44
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f005 fbfa 	bl	8008128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002934:	463b      	mov	r3, r7
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
 8002940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002946:	f001 f9b1 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002950:	f000 f8ee 	bl	8002b30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002954:	2302      	movs	r3, #2
 8002956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800295e:	2310      	movs	r3, #16
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002962:	2302      	movs	r3, #2
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002966:	2302      	movs	r3, #2
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800296e:	230a      	movs	r3, #10
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002972:	2307      	movs	r3, #7
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002976:	2302      	movs	r3, #2
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800297a:	2302      	movs	r3, #2
 800297c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4618      	mov	r0, r3
 8002984:	f001 f9e8 	bl	8003d58 <HAL_RCC_OscConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800298e:	f000 f8cf 	bl	8002b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002992:	230f      	movs	r3, #15
 8002994:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002996:	2303      	movs	r3, #3
 8002998:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	2104      	movs	r1, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fdb0 	bl	8004510 <HAL_RCC_ClockConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80029b6:	f000 f8bb 	bl	8002b30 <Error_Handler>
  }
}
 80029ba:	bf00      	nop
 80029bc:	3758      	adds	r7, #88	; 0x58
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <MX_SPI1_Init+0x78>)
 80029cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a12:	2207      	movs	r2, #7
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a1e:	2208      	movs	r2, #8
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a24:	f002 fc54 	bl	80052d0 <HAL_SPI_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a2e:	f000 f87f 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000aa8 	.word	0x20000aa8
 8002a3c:	40013000 	.word	0x40013000

08002a40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a46:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <MX_UART4_Init+0x5c>)
 8002a48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a66:	220c      	movs	r2, #12
 8002a68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_UART4_Init+0x58>)
 8002a84:	f002 fcc7 	bl	8005416 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002a8e:	f000 f84f 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000b0c 	.word	0x20000b0c
 8002a9c:	40004c00 	.word	0x40004c00

08002aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <MX_USART1_UART_Init+0x5c>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_USART1_UART_Init+0x58>)
 8002ae4:	f002 fc97 	bl	8005416 <HAL_UART_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002aee:	f000 f81f 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000b94 	.word	0x20000b94
 8002afc:	40013800 	.word	0x40013800

08002b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <MX_GPIO_Init+0x2c>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <MX_GPIO_Init+0x2c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_GPIO_Init+0x2c>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <Error_Handler+0x8>
	...

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_MspInit+0x44>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_MspInit+0x44>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_MspInit+0x44>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_MspInit+0x44>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_MspInit+0x44>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_MspInit+0x44>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_SPI_MspInit+0x7c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d128      	bne.n	8002bf8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_SPI_MspInit+0x80>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bd6:	23e0      	movs	r3, #224	; 0xe0
 8002bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be2:	2303      	movs	r3, #3
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be6:	2305      	movs	r3, #5
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf4:	f000 fea2 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40013000 	.word	0x40013000
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0ae      	sub	sp, #184	; 0xb8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	2288      	movs	r2, #136	; 0x88
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 fa7d 	bl	8008128 <memset>
  if(huart->Instance==UART4)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_UART_MspInit+0x158>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d144      	bne.n	8002cc2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fe87 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c50:	f7ff ff6e 	bl	8002b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cac:	f000 fe46 	bl	800393c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2034      	movs	r0, #52	; 0x34
 8002cb6:	f000 faf8 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cba:	2034      	movs	r0, #52	; 0x34
 8002cbc:	f000 fb11 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc0:	e049      	b.n	8002d56 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_UART_MspInit+0x160>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d144      	bne.n	8002d56 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fe3d 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002ce4:	f7ff ff24 	bl	8002b30 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf2:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_UART_MspInit+0x15c>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d32:	2307      	movs	r3, #7
 8002d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d42:	f000 fdfb 	bl	800393c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2025      	movs	r0, #37	; 0x25
 8002d4c:	f000 faad 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d50:	2025      	movs	r0, #37	; 0x25
 8002d52:	f000 fac6 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	37b8      	adds	r7, #184	; 0xb8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40004c00 	.word	0x40004c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40013800 	.word	0x40013800

08002d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <NMI_Handler+0x4>

08002d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <HardFault_Handler+0x4>

08002d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <MemManage_Handler+0x4>

08002d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <BusFault_Handler+0x4>

08002d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <UsageFault_Handler+0x4>

08002d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db8:	f000 f958 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <USART1_IRQHandler+0x10>)
 8002dc6:	f002 fce7 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000b94 	.word	0x20000b94

08002dd4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <UART4_IRQHandler+0x10>)
 8002dda:	f002 fcdd 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000b0c 	.word	0x20000b0c

08002de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return 1;
 8002dec:	2301      	movs	r3, #1
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_kill>:

int _kill(int pid, int sig)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e02:	f005 fa87 	bl	8008314 <__errno>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2216      	movs	r2, #22
 8002e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_exit>:

void _exit (int status)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ffe7 	bl	8002df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2a:	e7fe      	b.n	8002e2a <_exit+0x12>

08002e2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00a      	b.n	8002e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e3e:	f3af 8000 	nop.w
 8002e42:	4601      	mov	r1, r0
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dbf0      	blt.n	8002e3e <_read+0x12>
  }

  return len;
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <_isatty>:

int _isatty(int file)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <_sbrk+0x5c>)
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <_sbrk+0x60>)
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <_sbrk+0x64>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <_sbrk+0x64>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <_sbrk+0x68>)
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f00:	f005 fa08 	bl	8008314 <__errno>
 8002f04:	4603      	mov	r3, r0
 8002f06:	220c      	movs	r2, #12
 8002f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e009      	b.n	8002f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <_sbrk+0x64>)
 8002f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20018000 	.word	0x20018000
 8002f30:	00000400 	.word	0x00000400
 8002f34:	20000c30 	.word	0x20000c30
 8002f38:	20000d88 	.word	0x20000d88

08002f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <SystemInit+0x20>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <SystemInit+0x20>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f64:	f7ff ffea 	bl	8002f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f6a:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <LoopForever+0xe>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f80:	4c0a      	ldr	r4, [pc, #40]	; (8002fac <LoopForever+0x16>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f005 f9c7 	bl	8008320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f92:	f7ff fb07 	bl	80025a4 <main>

08002f96 <LoopForever>:

LoopForever:
    b LoopForever
 8002f96:	e7fe      	b.n	8002f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002fa4:	0800cbb4 	.word	0x0800cbb4
  ldr r2, =_sbss
 8002fa8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002fac:	20000d84 	.word	0x20000d84

08002fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <ADC1_2_IRQHandler>
	...

08002fb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_Init+0x3c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_Init+0x3c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fca:	2003      	movs	r0, #3
 8002fcc:	f000 f962 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f000 f80f 	bl	8002ff4 <HAL_InitTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	e001      	b.n	8002fe6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fe2:	f7ff fdab 	bl	8002b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_InitTick+0x6c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d023      	beq.n	8003050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_InitTick+0x70>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_InitTick+0x6c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003016:	fbb3 f3f1 	udiv	r3, r3, r1
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f96d 	bl	80032fe <HAL_SYSTICK_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d809      	bhi.n	8003044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003030:	2200      	movs	r2, #0
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f000 f937 	bl	80032aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_InitTick+0x74>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e007      	b.n	8003054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e004      	b.n	8003054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e001      	b.n	8003054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000000c 	.word	0x2000000c
 8003064:	20000004 	.word	0x20000004
 8003068:	20000008 	.word	0x20000008

0800306c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x20>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x24>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_IncTick+0x24>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2000000c 	.word	0x2000000c
 8003090:	20000c34 	.word	0x20000c34

08003094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetTick+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000c34 	.word	0x20000c34

080030ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff ffee 	bl	8003094 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d005      	beq.n	80030d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_Delay+0x44>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030d2:	bf00      	nop
 80030d4:	f7ff ffde 	bl	8003094 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d8f7      	bhi.n	80030d4 <HAL_Delay+0x28>
  {
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000000c 	.word	0x2000000c

080030f4 <__NVIC_SetPriorityGrouping>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800311c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_GetPriorityGrouping>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_EnableIRQ>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_SetPriority>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff29 	bl	80030f4 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff3e 	bl	800313c <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff8e 	bl	80031e8 <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5d 	bl	8003194 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff31 	bl	8003158 <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa2 	bl	8003250 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d008      	beq.n	8003340 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e022      	b.n	8003386 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020e 	bic.w	r2, r2, #14
 800334e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 021c 	and.w	r2, r3, #28
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d005      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e029      	b.n	800340a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 020e 	bic.w	r2, r2, #14
 80033c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 021c 	and.w	r2, r3, #28
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
    }
  }
  return status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003426:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_FLASH_Program+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e053      	b.n	80034da <HAL_FLASH_Program+0xc6>
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800343c:	f000 f888 	bl	8003550 <FLASH_WaitForLastOperation>
 8003440:	4603      	mov	r3, r0
 8003442:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d143      	bne.n	80034d2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_FLASH_Program+0xd4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_FLASH_Program+0xd4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_FLASH_Program+0xd4>)
 8003462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003466:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 800346a:	2202      	movs	r2, #2
 800346c:	771a      	strb	r2, [r3, #28]
 800346e:	e002      	b.n	8003476 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 8003472:	2200      	movs	r2, #0
 8003474:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f000 f8bb 	bl	80035fc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003486:	2301      	movs	r3, #1
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e010      	b.n	80034ae <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d002      	beq.n	8003498 <HAL_FLASH_Program+0x84>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d10a      	bne.n	80034ae <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	68b8      	ldr	r0, [r7, #8]
 800349e:	f000 f8d3 	bl	8003648 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d102      	bne.n	80034ae <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80034a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ac:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034b2:	f000 f84d 	bl	8003550 <FLASH_WaitForLastOperation>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_FLASH_Program+0xd4>)
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	4907      	ldr	r1, [pc, #28]	; (80034e8 <HAL_FLASH_Program+0xd4>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80034ce:	f000 f9eb 	bl	80038a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <HAL_FLASH_Program+0xd0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]

  return status;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000010 	.word	0x20000010
 80034e8:	40022000 	.word	0x40022000

080034ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_FLASH_Unlock+0x38>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da0b      	bge.n	8003516 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_FLASH_Unlock+0x38>)
 8003500:	4a09      	ldr	r2, [pc, #36]	; (8003528 <HAL_FLASH_Unlock+0x3c>)
 8003502:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_FLASH_Unlock+0x38>)
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_FLASH_Unlock+0x40>)
 8003508:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_FLASH_Unlock+0x38>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	da01      	bge.n	8003516 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003516:	79fb      	ldrb	r3, [r7, #7]
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40022000 	.word	0x40022000
 8003528:	45670123 	.word	0x45670123
 800352c:	cdef89ab 	.word	0xcdef89ab

08003530 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_FLASH_Lock+0x1c>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_FLASH_Lock+0x1c>)
 800353a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800353e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40022000 	.word	0x40022000

08003550 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003558:	f7ff fd9c 	bl	8003094 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800355e:	e00d      	b.n	800357c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d009      	beq.n	800357c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003568:	f7ff fd94 	bl	8003094 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d801      	bhi.n	800357c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e037      	b.n	80035ec <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1eb      	bne.n	8003560 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01e      	beq.n	80035d8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <FLASH_WaitForLastOperation+0xa8>)
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <FLASH_WaitForLastOperation+0xa8>)
 80035a4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <FLASH_WaitForLastOperation+0x70>
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80035ba:	490e      	ldr	r1, [pc, #56]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	618b      	str	r3, [r1, #24]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <FLASH_WaitForLastOperation+0x84>
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035d2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e009      	b.n	80035ec <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <FLASH_WaitForLastOperation+0xa4>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40022000 	.word	0x40022000
 80035f8:	20000010 	.word	0x20000010

080035fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <FLASH_Program_DoubleWord+0x48>)
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <FLASH_Program_DoubleWord+0x48>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800361a:	f3bf 8f6f 	isb	sy
}
 800361e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	000a      	movs	r2, r1
 800362e:	2300      	movs	r3, #0
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	3104      	adds	r1, #4
 8003634:	4613      	mov	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40022000 	.word	0x40022000

08003648 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003652:	2340      	movs	r3, #64	; 0x40
 8003654:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <FLASH_Program_Fast+0x68>)
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <FLASH_Program_Fast+0x68>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003670:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
}
 8003676:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3304      	adds	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3304      	adds	r3, #4
 800368a:	617b      	str	r3, [r7, #20]
    row_index--;
 800368c:	7ffb      	ldrb	r3, [r7, #31]
 800368e:	3b01      	subs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <FLASH_Program_Fast+0x30>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80036a4:	bf00      	nop
 80036a6:	3724      	adds	r7, #36	; 0x24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_FLASHEx_Erase+0x16>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e087      	b.n	80037da <HAL_FLASHEx_Erase+0x126>
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036d4:	f7ff ff3c 	bl	8003550 <FLASH_WaitForLastOperation>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d177      	bne.n	80037d2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036e2:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036e8:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036f4:	4b3c      	ldr	r3, [pc, #240]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 8003706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 800370e:	2203      	movs	r2, #3
 8003710:	771a      	strb	r2, [r3, #28]
 8003712:	e016      	b.n	8003742 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003714:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 8003716:	2201      	movs	r2, #1
 8003718:	771a      	strb	r2, [r3, #28]
 800371a:	e012      	b.n	8003742 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003728:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 800372e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003732:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 8003736:	2202      	movs	r2, #2
 8003738:	771a      	strb	r2, [r3, #28]
 800373a:	e002      	b.n	8003742 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d113      	bne.n	8003772 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f84c 	bl	80037ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003758:	f7ff fefa 	bl	8003550 <FLASH_WaitForLastOperation>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 8003766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	6153      	str	r3, [r2, #20]
 8003770:	e02d      	b.n	80037ce <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	e01d      	b.n	80037be <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4619      	mov	r1, r3
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f000 f857 	bl	800383c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800378e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003792:	f7ff fedd 	bl	8003550 <FLASH_WaitForLastOperation>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_FLASHEx_Erase+0x134>)
 80037a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	601a      	str	r2, [r3, #0]
          break;
 80037b6:	e00a      	b.n	80037ce <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3d9      	bcc.n	8003782 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80037ce:	f000 f86b 	bl	80038a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_FLASHEx_Erase+0x130>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]

  return status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000010 	.word	0x20000010
 80037e8:	40022000 	.word	0x40022000

080037ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <FLASH_MassErase+0x4c>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <FLASH_MassErase+0x4c>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <FLASH_MassErase+0x4c>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <FLASH_MassErase+0x4c>)
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <FLASH_MassErase+0x4c>)
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <FLASH_MassErase+0x4c>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	6153      	str	r3, [r2, #20]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40022000 	.word	0x40022000

0800383c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <FLASH_PageErase+0x68>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <FLASH_PageErase+0x68>)
 8003856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800385a:	6153      	str	r3, [r2, #20]
 800385c:	e005      	b.n	800386a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <FLASH_PageErase+0x68>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <FLASH_PageErase+0x68>)
 8003864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003868:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <FLASH_PageErase+0x68>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <FLASH_PageErase+0x68>)
 800387c:	4313      	orrs	r3, r2
 800387e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <FLASH_PageErase+0x68>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <FLASH_PageErase+0x68>)
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <FLASH_PageErase+0x68>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <FLASH_PageErase+0x68>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6153      	str	r3, [r2, #20]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40022000 	.word	0x40022000

080038a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <FLASH_FlushCaches+0x8c>)
 80038b0:	7f1b      	ldrb	r3, [r3, #28]
 80038b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <FLASH_FlushCaches+0x18>
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d117      	bne.n	80038f0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a16      	ldr	r2, [pc, #88]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d002      	beq.n	80038fc <FLASH_FlushCaches+0x54>
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d111      	bne.n	8003920 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <FLASH_FlushCaches+0x90>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <FLASH_FlushCaches+0x90>)
 8003902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <FLASH_FlushCaches+0x90>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <FLASH_FlushCaches+0x90>)
 800390e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003912:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <FLASH_FlushCaches+0x90>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	; (8003938 <FLASH_FlushCaches+0x90>)
 800391a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <FLASH_FlushCaches+0x8c>)
 8003922:	2200      	movs	r2, #0
 8003924:	771a      	strb	r2, [r3, #28]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000010 	.word	0x20000010
 8003938:	40022000 	.word	0x40022000

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e17f      	b.n	8003c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8171 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d005      	beq.n	800397c <HAL_GPIO_Init+0x40>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d130      	bne.n	80039de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b2:	2201      	movs	r2, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0201 	and.w	r2, r3, #1
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d118      	bne.n	8003a1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039f0:	2201      	movs	r2, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f003 0201 	and.w	r2, r3, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d017      	beq.n	8003a58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d123      	bne.n	8003aac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0203 	and.w	r2, r3, #3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ac 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6613      	str	r3, [r2, #96]	; 0x60
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b30:	d025      	beq.n	8003b7e <HAL_GPIO_Init+0x242>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <HAL_GPIO_Init+0x338>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01f      	beq.n	8003b7a <HAL_GPIO_Init+0x23e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_GPIO_Init+0x33c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d019      	beq.n	8003b76 <HAL_GPIO_Init+0x23a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_GPIO_Init+0x340>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_GPIO_Init+0x236>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_GPIO_Init+0x344>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_GPIO_Init+0x232>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_GPIO_Init+0x348>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <HAL_GPIO_Init+0x22e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_GPIO_Init+0x22a>
 8003b62:	2306      	movs	r3, #6
 8003b64:	e00c      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b90:	4937      	ldr	r1, [pc, #220]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc2:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f47f ae78 	bne.w	800394c <HAL_GPIO_Init+0x10>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40010000 	.word	0x40010000
 8003c74:	48000400 	.word	0x48000400
 8003c78:	48000800 	.word	0x48000800
 8003c7c:	48000c00 	.word	0x48000c00
 8003c80:	48001000 	.word	0x48001000
 8003c84:	48001400 	.word	0x48001400
 8003c88:	48001800 	.word	0x48001800
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cba:	d130      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d038      	beq.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2232      	movs	r2, #50	; 0x32
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf0:	e002      	b.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d102      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f2      	bne.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d110      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00f      	b.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d007      	beq.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d34:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	20000004 	.word	0x20000004
 8003d54:	431bde83 	.word	0x431bde83

08003d58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e3ca      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4b97      	ldr	r3, [pc, #604]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d74:	4b94      	ldr	r3, [pc, #592]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80e4 	beq.w	8003f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4a>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	f040 808b 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 8087 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da2:	4b89      	ldr	r3, [pc, #548]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_RCC_OscConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e3a2      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1a      	ldr	r2, [r3, #32]
 8003dbe:	4b82      	ldr	r3, [pc, #520]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x7c>
 8003dca:	4b7f      	ldr	r3, [pc, #508]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd2:	e005      	b.n	8003de0 <HAL_RCC_OscConfig+0x88>
 8003dd4:	4b7c      	ldr	r3, [pc, #496]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d223      	bcs.n	8003e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fd55 	bl	8004898 <RCC_SetFlashLatencyFromMSIRange>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e383      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df8:	4b73      	ldr	r3, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a72      	ldr	r2, [pc, #456]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b70      	ldr	r3, [pc, #448]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	496d      	ldr	r1, [pc, #436]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e16:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	4968      	ldr	r1, [pc, #416]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
 8003e2a:	e025      	b.n	8003e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a65      	ldr	r2, [pc, #404]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e32:	f043 0308 	orr.w	r3, r3, #8
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4960      	ldr	r1, [pc, #384]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	495b      	ldr	r1, [pc, #364]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fd15 	bl	8004898 <RCC_SetFlashLatencyFromMSIRange>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e343      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e78:	f000 fc4a 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b52      	ldr	r3, [pc, #328]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	4950      	ldr	r1, [pc, #320]	; (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f8a9 	bl	8002ff4 <HAL_InitTick>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d052      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	e327      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d032      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb8:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a42      	ldr	r2, [pc, #264]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec4:	f7ff f8e6 	bl	8003094 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ecc:	f7ff f8e2 	bl	8003094 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e310      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4931      	ldr	r1, [pc, #196]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e01a      	b.n	8003f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f2a:	f7ff f8b3 	bl	8003094 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f32:	f7ff f8af 	bl	8003094 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e2dd      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x1da>
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d074      	beq.n	800404a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x21a>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d10e      	bne.n	8003f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d064      	beq.n	8004048 <HAL_RCC_OscConfig+0x2f0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d160      	bne.n	8004048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e2ba      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x24a>
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e026      	b.n	8003ff0 <HAL_RCC_OscConfig+0x298>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x280>
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a02      	ldr	r2, [pc, #8]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e014      	b.n	8003ff0 <HAL_RCC_OscConfig+0x298>
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	0800c6c0 	.word	0x0800c6c0
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	4ba0      	ldr	r3, [pc, #640]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a9f      	ldr	r2, [pc, #636]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b9d      	ldr	r3, [pc, #628]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a9c      	ldr	r2, [pc, #624]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7ff f84c 	bl	8003094 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7ff f848 	bl	8003094 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e276      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004012:	4b92      	ldr	r3, [pc, #584]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x2a8>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7ff f838 	bl	8003094 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7ff f834 	bl	8003094 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e262      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x2d0>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d060      	beq.n	8004118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d005      	beq.n	8004068 <HAL_RCC_OscConfig+0x310>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d119      	bne.n	8004096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d116      	bne.n	8004096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004068:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_OscConfig+0x328>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e23f      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	4973      	ldr	r1, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004094:	e040      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409e:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fff3 	bl	8003094 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fe ffef 	bl	8003094 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e21d      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c4:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	495f      	ldr	r1, [pc, #380]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
 80040e4:	e018      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe ffcf 	bl	8003094 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fe ffcb 	bl	8003094 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1f9      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03c      	beq.n	800419e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01c      	beq.n	8004166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412c:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe ffaa 	bl	8003094 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004144:	f7fe ffa6 	bl	8003094 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1d4      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0ef      	beq.n	8004144 <HAL_RCC_OscConfig+0x3ec>
 8004164:	e01b      	b.n	800419e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004166:	4b3d      	ldr	r3, [pc, #244]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416c:	4a3b      	ldr	r2, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe ff8d 	bl	8003094 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe ff89 	bl	8003094 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1b7      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ef      	bne.n	800417e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80a6 	beq.w	80042f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041b0:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d118      	bne.n	8004216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f0:	f7fe ff50 	bl	8003094 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fe ff4c 	bl	8003094 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e17a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d108      	bne.n	8004230 <HAL_RCC_OscConfig+0x4d8>
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422e:	e029      	b.n	8004284 <HAL_RCC_OscConfig+0x52c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b05      	cmp	r3, #5
 8004236:	d115      	bne.n	8004264 <HAL_RCC_OscConfig+0x50c>
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a03      	ldr	r2, [pc, #12]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x52c>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
 8004264:	4b9c      	ldr	r3, [pc, #624]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	4a9b      	ldr	r2, [pc, #620]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004274:	4b98      	ldr	r3, [pc, #608]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a97      	ldr	r2, [pc, #604]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d016      	beq.n	80042ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe ff02 	bl	8003094 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fe fefe 	bl	8003094 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e12a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	4b8b      	ldr	r3, [pc, #556]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ed      	beq.n	8004294 <HAL_RCC_OscConfig+0x53c>
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe feeb 	bl	8003094 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fe fee7 	bl	8003094 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e113      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d8:	4b7f      	ldr	r3, [pc, #508]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ed      	bne.n	80042c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b7a      	ldr	r3, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a79      	ldr	r2, [pc, #484]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80fe 	beq.w	80044fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	2b02      	cmp	r3, #2
 8004308:	f040 80d0 	bne.w	80044ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800430c:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0203 	and.w	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	429a      	cmp	r2, r3
 800431e:	d130      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	3b01      	subs	r3, #1
 800432c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d127      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d11f      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	2a07      	cmp	r2, #7
 800434e:	bf14      	ite	ne
 8004350:	2201      	movne	r2, #1
 8004352:	2200      	moveq	r2, #0
 8004354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004356:	4293      	cmp	r3, r2
 8004358:	d113      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	3b01      	subs	r3, #1
 8004368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d109      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d06e      	beq.n	8004460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d069      	beq.n	800445c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ad      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043b0:	f7fe fe70 	bl	8003094 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fe6c 	bl	8003094 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e09a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_RCC_OscConfig+0x784>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0112      	lsls	r2, r2, #4
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f0:	0212      	lsls	r2, r2, #8
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f8:	0852      	lsrs	r2, r2, #1
 80043fa:	3a01      	subs	r2, #1
 80043fc:	0552      	lsls	r2, r2, #21
 80043fe:	4311      	orrs	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004404:	0852      	lsrs	r2, r2, #1
 8004406:	3a01      	subs	r2, #1
 8004408:	0652      	lsls	r2, r2, #25
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004410:	0912      	lsrs	r2, r2, #4
 8004412:	0452      	lsls	r2, r2, #17
 8004414:	430a      	orrs	r2, r1
 8004416:	4930      	ldr	r1, [pc, #192]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004418:	4313      	orrs	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004434:	f7fe fe2e 	bl	8003094 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fe2a 	bl	8003094 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e058      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445a:	e050      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e04f      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d148      	bne.n	80044fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004484:	f7fe fe06 	bl	8003094 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe fe02 	bl	8003094 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e030      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x734>
 80044aa:	e028      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d023      	beq.n	80044fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fde9 	bl	8003094 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	e00c      	b.n	80044e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe fde5 	bl	8003094 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d905      	bls.n	80044e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e013      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ec      	bne.n	80044c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4905      	ldr	r1, [pc, #20]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCC_OscConfig+0x7b4>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60cb      	str	r3, [r1, #12]
 80044f8:	e001      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	feeefffc 	.word	0xfeeefffc

08004510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0e7      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d910      	bls.n	8004554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	4970      	ldr	r1, [pc, #448]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cf      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456c:	429a      	cmp	r2, r3
 800456e:	d908      	bls.n	8004582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4960      	ldr	r1, [pc, #384]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04c      	beq.n	8004628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0a6      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ae:	4b54      	ldr	r3, [pc, #336]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d115      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e09a      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e08e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d6:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e086      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4943      	ldr	r1, [pc, #268]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fe fd4c 	bl	8003094 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fe fd48 	bl	8003094 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e06e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b31      	ldr	r3, [pc, #196]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004640:	429a      	cmp	r2, r3
 8004642:	d208      	bcs.n	8004656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	492b      	ldr	r1, [pc, #172]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d210      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 0207 	bic.w	r2, r3, #7
 800466c:	4923      	ldr	r1, [pc, #140]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e036      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4918      	ldr	r1, [pc, #96]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4910      	ldr	r1, [pc, #64]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c4:	f000 f824 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	490b      	ldr	r1, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1f4>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1f8>)
 80046e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1fc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fc83 	bl	8002ff4 <HAL_InitTick>
 80046ee:	4603      	mov	r3, r0
 80046f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046f2:	7afb      	ldrb	r3, [r7, #11]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	0800c6c0 	.word	0x0800c6c0
 8004708:	20000004 	.word	0x20000004
 800470c:	20000008 	.word	0x20000008

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x34>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d121      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d11e      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e005      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_RCC_GetSysClockFreq+0x10c>)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d102      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e004      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d101      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 8004796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d134      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d003      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0xac>
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 80047be:	617b      	str	r3, [r7, #20]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	3301      	adds	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	fb03 f202 	mul.w	r2, r3, r2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	0e5b      	lsrs	r3, r3, #25
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	3301      	adds	r3, #1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004808:	69bb      	ldr	r3, [r7, #24]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	0800c6d8 	.word	0x0800c6d8
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000004 	.word	0x20000004

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	0800c6d0 	.word	0x0800c6d0

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004870:	f7ff ffda 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0adb      	lsrs	r3, r3, #11
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	0800c6d0 	.word	0x0800c6d0

08004898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048b0:	f7ff f9ee 	bl	8003c90 <HAL_PWREx_GetVoltageRange>
 80048b4:	6178      	str	r0, [r7, #20]
 80048b6:	e014      	b.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	4a24      	ldr	r2, [pc, #144]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6593      	str	r3, [r2, #88]	; 0x58
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048d0:	f7ff f9de 	bl	8003c90 <HAL_PWREx_GetVoltageRange>
 80048d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d10b      	bne.n	8004902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d919      	bls.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2ba0      	cmp	r3, #160	; 0xa0
 80048f4:	d902      	bls.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f6:	2302      	movs	r3, #2
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e013      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048fc:	2301      	movs	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e010      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d902      	bls.n	800490e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004908:	2303      	movs	r3, #3
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	e00a      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d102      	bne.n	800491a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004914:	2302      	movs	r3, #2
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e004      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d101      	bne.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004920:	2301      	movs	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 0207 	bic.w	r2, r3, #7
 800492c:	4909      	ldr	r1, [pc, #36]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d001      	beq.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	40022000 	.word	0x40022000

08004958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004960:	2300      	movs	r3, #0
 8004962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004964:	2300      	movs	r3, #0
 8004966:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004970:	2b00      	cmp	r3, #0
 8004972:	d041      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004978:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800497c:	d02a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800497e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004982:	d824      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800498a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800498e:	d81e      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004998:	d010      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800499a:	e018      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800499c:	4b86      	ldr	r3, [pc, #536]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a85      	ldr	r2, [pc, #532]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a8:	e015      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fabb 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ba:	e00c      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3320      	adds	r3, #32
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fba6 	bl	8005114 <RCCEx_PLLSAI2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049cc:	e003      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	74fb      	strb	r3, [r7, #19]
      break;
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049dc:	4b76      	ldr	r3, [pc, #472]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ea:	4973      	ldr	r1, [pc, #460]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049f2:	e001      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d041      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a0c:	d02a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a12:	d824      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a18:	d008      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a1e:	d81e      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a28:	d010      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a2c:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a61      	ldr	r2, [pc, #388]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fa73 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a4a:	e00c      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3320      	adds	r3, #32
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb5e 	bl	8005114 <RCCEx_PLLSAI2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	74fb      	strb	r3, [r7, #19]
      break;
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a6c:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a7a:	494f      	ldr	r1, [pc, #316]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a82:	e001      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a0 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
 8004abc:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fadc 	bl	8003094 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ade:	e009      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae0:	f7fe fad8 	bl	8003094 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	74fb      	strb	r3, [r7, #19]
        break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ef      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d15c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d019      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b24:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fe fa97 	bl	8003094 <HAL_GetTick>
 8004b66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b68:	e00b      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe fa93 	bl	8003094 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d902      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ec      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba6:	4904      	ldr	r1, [pc, #16]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc4:	7c7b      	ldrb	r3, [r7, #17]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bca:	4b9e      	ldr	r3, [pc, #632]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	4a9d      	ldr	r2, [pc, #628]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be2:	4b98      	ldr	r3, [pc, #608]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f023 0203 	bic.w	r2, r3, #3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	4994      	ldr	r1, [pc, #592]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 020c 	bic.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	498c      	ldr	r1, [pc, #560]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c26:	4b87      	ldr	r3, [pc, #540]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	4983      	ldr	r1, [pc, #524]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c48:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	497b      	ldr	r1, [pc, #492]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c6a:	4b76      	ldr	r3, [pc, #472]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	4972      	ldr	r1, [pc, #456]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c8c:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	496a      	ldr	r1, [pc, #424]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	4961      	ldr	r1, [pc, #388]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cd0:	4b5c      	ldr	r3, [pc, #368]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	4959      	ldr	r1, [pc, #356]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf2:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	4950      	ldr	r1, [pc, #320]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d14:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4948      	ldr	r1, [pc, #288]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	493f      	ldr	r1, [pc, #252]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d028      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d58:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d66:	4937      	ldr	r1, [pc, #220]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d82:	60d3      	str	r3, [r2, #12]
 8004d84:	e011      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	2101      	movs	r1, #1
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f8c8 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d028      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	491f      	ldr	r1, [pc, #124]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de0:	60d3      	str	r3, [r2, #12]
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f899 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d109      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a02      	ldr	r2, [pc, #8]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
 8004e40:	e014      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f867 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	4928      	ldr	r1, [pc, #160]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e96:	d10d      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f844 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	74bb      	strb	r3, [r7, #18]
 8004eb2:	e011      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f925 	bl	8005114 <RCCEx_PLLSAI2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef2:	490d      	ldr	r1, [pc, #52]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f16:	4904      	ldr	r1, [pc, #16]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000

08004f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f3a:	4b75      	ldr	r3, [pc, #468]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d018      	beq.n	8004f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f46:	4b72      	ldr	r3, [pc, #456]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0203 	and.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d10d      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
       ||
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d047      	beq.n	8005002 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e044      	b.n	8005002 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d018      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0x86>
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d825      	bhi.n	8004fd0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d002      	beq.n	8004f8e <RCCEx_PLLSAI1_Config+0x62>
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d009      	beq.n	8004fa0 <RCCEx_PLLSAI1_Config+0x74>
 8004f8c:	e020      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f8e:	4b60      	ldr	r3, [pc, #384]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11d      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9e:	e01a      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fa0:	4b5b      	ldr	r3, [pc, #364]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb0:	e013      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fb2:	4b57      	ldr	r3, [pc, #348]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10f      	bne.n	8004fde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fbe:	4b54      	ldr	r3, [pc, #336]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fce:	e006      	b.n	8004fde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	e004      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe6:	4b4a      	ldr	r3, [pc, #296]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	4944      	ldr	r1, [pc, #272]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d17d      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005008:	4b41      	ldr	r3, [pc, #260]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a40      	ldr	r2, [pc, #256]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005014:	f7fe f83e 	bl	8003094 <HAL_GetTick>
 8005018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800501a:	e009      	b.n	8005030 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800501c:	f7fe f83a 	bl	8003094 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d902      	bls.n	8005030 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	73fb      	strb	r3, [r7, #15]
        break;
 800502e:	e005      	b.n	800503c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005030:	4b37      	ldr	r3, [pc, #220]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1ef      	bne.n	800501c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d160      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d111      	bne.n	800506c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005048:	4b31      	ldr	r3, [pc, #196]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6892      	ldr	r2, [r2, #8]
 8005058:	0211      	lsls	r1, r2, #8
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	0912      	lsrs	r2, r2, #4
 8005060:	0452      	lsls	r2, r2, #17
 8005062:	430a      	orrs	r2, r1
 8005064:	492a      	ldr	r1, [pc, #168]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]
 800506a:	e027      	b.n	80050bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d112      	bne.n	8005098 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005072:	4b27      	ldr	r3, [pc, #156]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800507a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6892      	ldr	r2, [r2, #8]
 8005082:	0211      	lsls	r1, r2, #8
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6912      	ldr	r2, [r2, #16]
 8005088:	0852      	lsrs	r2, r2, #1
 800508a:	3a01      	subs	r2, #1
 800508c:	0552      	lsls	r2, r2, #21
 800508e:	430a      	orrs	r2, r1
 8005090:	491f      	ldr	r1, [pc, #124]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
 8005096:	e011      	b.n	80050bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005098:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	0211      	lsls	r1, r2, #8
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6952      	ldr	r2, [r2, #20]
 80050ae:	0852      	lsrs	r2, r2, #1
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0652      	lsls	r2, r2, #25
 80050b4:	430a      	orrs	r2, r1
 80050b6:	4916      	ldr	r1, [pc, #88]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fd ffe4 	bl	8003094 <HAL_GetTick>
 80050cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ce:	e009      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d0:	f7fd ffe0 	bl	8003094 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d902      	bls.n	80050e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	73fb      	strb	r3, [r7, #15]
          break;
 80050e2:	e005      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ef      	beq.n	80050d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	4904      	ldr	r1, [pc, #16]	; (8005110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000

08005114 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005122:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800512e:	4b67      	ldr	r3, [pc, #412]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0203 	and.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d10d      	bne.n	800515a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
       ||
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005146:	4b61      	ldr	r3, [pc, #388]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
       ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d047      	beq.n	80051ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	e044      	b.n	80051ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d018      	beq.n	800519a <RCCEx_PLLSAI2_Config+0x86>
 8005168:	2b03      	cmp	r3, #3
 800516a:	d825      	bhi.n	80051b8 <RCCEx_PLLSAI2_Config+0xa4>
 800516c:	2b01      	cmp	r3, #1
 800516e:	d002      	beq.n	8005176 <RCCEx_PLLSAI2_Config+0x62>
 8005170:	2b02      	cmp	r3, #2
 8005172:	d009      	beq.n	8005188 <RCCEx_PLLSAI2_Config+0x74>
 8005174:	e020      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005176:	4b55      	ldr	r3, [pc, #340]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d11d      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005186:	e01a      	b.n	80051be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005188:	4b50      	ldr	r3, [pc, #320]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005198:	e013      	b.n	80051c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800519a:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051a6:	4b49      	ldr	r3, [pc, #292]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051b6:	e006      	b.n	80051c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e004      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10d      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	3b01      	subs	r3, #1
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	430b      	orrs	r3, r1
 80051e4:	4939      	ldr	r1, [pc, #228]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d167      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a35      	ldr	r2, [pc, #212]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fd ff4a 	bl	8003094 <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005202:	e009      	b.n	8005218 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005204:	f7fd ff46 	bl	8003094 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d902      	bls.n	8005218 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	73fb      	strb	r3, [r7, #15]
        break;
 8005216:	e005      	b.n	8005224 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ef      	bne.n	8005204 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d14a      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d111      	bne.n	8005254 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005230:	4b26      	ldr	r3, [pc, #152]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6892      	ldr	r2, [r2, #8]
 8005240:	0211      	lsls	r1, r2, #8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68d2      	ldr	r2, [r2, #12]
 8005246:	0912      	lsrs	r2, r2, #4
 8005248:	0452      	lsls	r2, r2, #17
 800524a:	430a      	orrs	r2, r1
 800524c:	491f      	ldr	r1, [pc, #124]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	614b      	str	r3, [r1, #20]
 8005252:	e011      	b.n	8005278 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800525c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	0211      	lsls	r1, r2, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6912      	ldr	r2, [r2, #16]
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0652      	lsls	r2, r2, #25
 8005270:	430a      	orrs	r2, r1
 8005272:	4916      	ldr	r1, [pc, #88]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fd ff06 	bl	8003094 <HAL_GetTick>
 8005288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800528a:	e009      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800528c:	f7fd ff02 	bl	8003094 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d902      	bls.n	80052a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	73fb      	strb	r3, [r7, #15]
          break;
 800529e:	e005      	b.n	80052ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4904      	ldr	r1, [pc, #16]	; (80052cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e095      	b.n	800540e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f2:	d009      	beq.n	8005308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	61da      	str	r2, [r3, #28]
 80052fa:	e005      	b.n	8005308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fd fc2e 	bl	8002b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d902      	bls.n	8005350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e002      	b.n	8005356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800535e:	d007      	beq.n	8005370 <HAL_SPI_Init+0xa0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005368:	d002      	beq.n	8005370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	ea42 0103 	orr.w	r1, r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	f003 0204 	and.w	r2, r3, #4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e040      	b.n	80054aa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fd fbe5 	bl	8002c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2224      	movs	r2, #36	; 0x24
 8005442:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ff67 	bl	8006330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fcac 	bl	8005dc0 <UART_SetConfig>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e01b      	b.n	80054aa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005480:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005490:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 ffe6 	bl	8006474 <UART_CheckIdleState>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	f040 80b6 	bne.w	800563a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_UART_Receive+0x28>
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e0ae      	b.n	800563c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2222      	movs	r2, #34	; 0x22
 80054ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f4:	f7fd fdce 	bl	8003094 <HAL_GetTick>
 80054f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	d10e      	bne.n	8005532 <HAL_UART_Receive+0x80>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_UART_Receive+0x76>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005526:	e02d      	b.n	8005584 <HAL_UART_Receive+0xd2>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005530:	e028      	b.n	8005584 <HAL_UART_Receive+0xd2>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10d      	bne.n	8005556 <HAL_UART_Receive+0xa4>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Receive+0x9a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554a:	e01b      	b.n	8005584 <HAL_UART_Receive+0xd2>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	227f      	movs	r2, #127	; 0x7f
 8005550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005554:	e016      	b.n	8005584 <HAL_UART_Receive+0xd2>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555e:	d10d      	bne.n	800557c <HAL_UART_Receive+0xca>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <HAL_UART_Receive+0xc0>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	227f      	movs	r2, #127	; 0x7f
 800556c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005570:	e008      	b.n	8005584 <HAL_UART_Receive+0xd2>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	223f      	movs	r2, #63	; 0x3f
 8005576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800557a:	e003      	b.n	8005584 <HAL_UART_Receive+0xd2>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800558a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005594:	d108      	bne.n	80055a8 <HAL_UART_Receive+0xf6>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e003      	b.n	80055b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80055b0:	e037      	b.n	8005622 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2120      	movs	r1, #32
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f001 f801 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e033      	b.n	800563c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10c      	bne.n	80055f4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	4013      	ands	r3, r2
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3302      	adds	r3, #2
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e00d      	b.n	8005610 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	8a7b      	ldrh	r3, [r7, #18]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4013      	ands	r3, r2
 8005604:	b2da      	uxtb	r2, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1c1      	bne.n	80055b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005644:	b480      	push	{r7}
 8005646:	b08b      	sub	sp, #44	; 0x2c
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	2b20      	cmp	r3, #32
 8005658:	d147      	bne.n	80056ea <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_UART_Transmit_IT+0x22>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e040      	b.n	80056ec <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2221      	movs	r2, #33	; 0x21
 8005692:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d107      	bne.n	80056ae <HAL_UART_Transmit_IT+0x6a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <HAL_UART_Transmit_IT+0xb4>)
 80056aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80056ac:	e002      	b.n	80056b4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a12      	ldr	r2, [pc, #72]	; (80056fc <HAL_UART_Transmit_IT+0xb8>)
 80056b2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	613b      	str	r3, [r7, #16]
   return(result);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	372c      	adds	r7, #44	; 0x2c
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	080069cd 	.word	0x080069cd
 80056fc:	08006915 	.word	0x08006915

08005700 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005714:	2b20      	cmp	r3, #32
 8005716:	d137      	bne.n	8005788 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Receive_IT+0x24>
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e030      	b.n	800578a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a18      	ldr	r2, [pc, #96]	; (8005794 <HAL_UART_Receive_IT+0x94>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01f      	beq.n	8005778 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	61bb      	str	r3, [r7, #24]
   return(result);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	461a      	mov	r2, r3
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 ff88 	bl	8006694 <UART_Start_Receive_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	e000      	b.n	800578a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	; 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40008000 	.word	0x40008000

08005798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b0ba      	sub	sp, #232	; 0xe8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80057c6:	4013      	ands	r3, r2
 80057c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d115      	bne.n	8005800 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00f      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 82ae 	beq.w	8005d52 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
      }
      return;
 80057fe:	e2a8      	b.n	8005d52 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8117 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800581a:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_UART_IRQHandler+0x298>)
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 810a 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2201      	movs	r2, #1
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2202      	movs	r2, #2
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	f043 0204 	orr.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2204      	movs	r2, #4
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2208      	movs	r2, #8
 80058de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8214 	beq.w	8005d56 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 ff50 	bl	8006820 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d141      	bne.n	8005a12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1d9      	bne.n	800598e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_UART_IRQHandler+0x29c>)
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fd fccf 	bl	8003392 <HAL_DMA_Abort_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e00f      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9c2 	bl	8005d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	e00b      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9be 	bl	8005d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	e007      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9ba 	bl	8005d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a28:	e195      	b.n	8005d56 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2a:	bf00      	nop
    return;
 8005a2c:	e193      	b.n	8005d56 <HAL_UART_IRQHandler+0x5be>
 8005a2e:	bf00      	nop
 8005a30:	04000120 	.word	0x04000120
 8005a34:	080068e9 	.word	0x080068e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 814e 	bne.w	8005cde <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8147 	beq.w	8005cde <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8140 	beq.w	8005cde <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2210      	movs	r2, #16
 8005a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	f040 80b8 	bne.w	8005be6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8167 	beq.w	8005d5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f080 815f 	bcs.w	8005d5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8086 	bne.w	8005bc4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ae6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1da      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e1      	bne.n	8005b02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e4      	bne.n	8005b84 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fd fba9 	bl	8003316 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8e2 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be4:	e0b9      	b.n	8005d5a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80ab 	beq.w	8005d5e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a6 	beq.w	8005d5e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
 8005c36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e4      	bne.n	8005c12 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	623b      	str	r3, [r7, #32]
   return(result);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c6c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e3      	bne.n	8005c48 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0310 	bic.w	r3, r3, #16
 8005ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e4      	bne.n	8005c94 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f866 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cdc:	e03f      	b.n	8005d5e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <HAL_UART_IRQHandler+0x570>
 8005cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 f8a9 	bl	8006e58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d06:	e02d      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01c      	beq.n	8005d62 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
    }
    return;
 8005d30:	e017      	b.n	8005d62 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d012      	beq.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fe9e 	bl	8006a8c <UART_EndTransmit_IT>
    return;
 8005d50:	e008      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005d52:	bf00      	nop
 8005d54:	e006      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005d56:	bf00      	nop
 8005d58:	e004      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005d5a:	bf00      	nop
 8005d5c:	e002      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005d62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d64:	37e8      	adds	r7, #232	; 0xe8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc4:	b08a      	sub	sp, #40	; 0x28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4ba4      	ldr	r3, [pc, #656]	; (8006080 <UART_SetConfig+0x2c0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a99      	ldr	r2, [pc, #612]	; (8006084 <UART_SetConfig+0x2c4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a90      	ldr	r2, [pc, #576]	; (8006088 <UART_SetConfig+0x2c8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d126      	bne.n	8005e98 <UART_SetConfig+0xd8>
 8005e4a:	4b90      	ldr	r3, [pc, #576]	; (800608c <UART_SetConfig+0x2cc>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d81b      	bhi.n	8005e90 <UART_SetConfig+0xd0>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0xa0>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e116      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7e:	e112      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e86:	e10e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8e:	e10a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e96:	e106      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a7c      	ldr	r2, [pc, #496]	; (8006090 <UART_SetConfig+0x2d0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d138      	bne.n	8005f14 <UART_SetConfig+0x154>
 8005ea2:	4b7a      	ldr	r3, [pc, #488]	; (800608c <UART_SetConfig+0x2cc>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d82d      	bhi.n	8005f0c <UART_SetConfig+0x14c>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0xf8>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005f0d 	.word	0x08005f0d
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f0d 	.word	0x08005f0d
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e0d8      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e0d4      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e0d0      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e0cc      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e0c8      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5e      	ldr	r2, [pc, #376]	; (8006094 <UART_SetConfig+0x2d4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d125      	bne.n	8005f6a <UART_SetConfig+0x1aa>
 8005f1e:	4b5b      	ldr	r3, [pc, #364]	; (800608c <UART_SetConfig+0x2cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f28:	2b30      	cmp	r3, #48	; 0x30
 8005f2a:	d016      	beq.n	8005f5a <UART_SetConfig+0x19a>
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d818      	bhi.n	8005f62 <UART_SetConfig+0x1a2>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d00a      	beq.n	8005f4a <UART_SetConfig+0x18a>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d814      	bhi.n	8005f62 <UART_SetConfig+0x1a2>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <UART_SetConfig+0x182>
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d008      	beq.n	8005f52 <UART_SetConfig+0x192>
 8005f40:	e00f      	b.n	8005f62 <UART_SetConfig+0x1a2>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f48:	e0ad      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f50:	e0a9      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f52:	2304      	movs	r3, #4
 8005f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f58:	e0a5      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f60:	e0a1      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f62:	2310      	movs	r3, #16
 8005f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f68:	e09d      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	; (8006098 <UART_SetConfig+0x2d8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d125      	bne.n	8005fc0 <UART_SetConfig+0x200>
 8005f74:	4b45      	ldr	r3, [pc, #276]	; (800608c <UART_SetConfig+0x2cc>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f80:	d016      	beq.n	8005fb0 <UART_SetConfig+0x1f0>
 8005f82:	2bc0      	cmp	r3, #192	; 0xc0
 8005f84:	d818      	bhi.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d00a      	beq.n	8005fa0 <UART_SetConfig+0x1e0>
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d814      	bhi.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x1d8>
 8005f92:	2b40      	cmp	r3, #64	; 0x40
 8005f94:	d008      	beq.n	8005fa8 <UART_SetConfig+0x1e8>
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e082      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa6:	e07e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fae:	e07a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb6:	e076      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e072      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	; (800609c <UART_SetConfig+0x2dc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d12a      	bne.n	8006020 <UART_SetConfig+0x260>
 8005fca:	4b30      	ldr	r3, [pc, #192]	; (800608c <UART_SetConfig+0x2cc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd8:	d01a      	beq.n	8006010 <UART_SetConfig+0x250>
 8005fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fde:	d81b      	bhi.n	8006018 <UART_SetConfig+0x258>
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d00c      	beq.n	8006000 <UART_SetConfig+0x240>
 8005fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fea:	d815      	bhi.n	8006018 <UART_SetConfig+0x258>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <UART_SetConfig+0x238>
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff4:	d008      	beq.n	8006008 <UART_SetConfig+0x248>
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x258>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e052      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006000:	2302      	movs	r3, #2
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e04e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e04a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e046      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e042      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <UART_SetConfig+0x2c4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d13a      	bne.n	80060a0 <UART_SetConfig+0x2e0>
 800602a:	4b18      	ldr	r3, [pc, #96]	; (800608c <UART_SetConfig+0x2cc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006038:	d01a      	beq.n	8006070 <UART_SetConfig+0x2b0>
 800603a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800603e:	d81b      	bhi.n	8006078 <UART_SetConfig+0x2b8>
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006044:	d00c      	beq.n	8006060 <UART_SetConfig+0x2a0>
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604a:	d815      	bhi.n	8006078 <UART_SetConfig+0x2b8>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <UART_SetConfig+0x298>
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006054:	d008      	beq.n	8006068 <UART_SetConfig+0x2a8>
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x2b8>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e022      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e01e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e01a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e016      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e012      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006080:	efff69f3 	.word	0xefff69f3
 8006084:	40008000 	.word	0x40008000
 8006088:	40013800 	.word	0x40013800
 800608c:	40021000 	.word	0x40021000
 8006090:	40004400 	.word	0x40004400
 8006094:	40004800 	.word	0x40004800
 8006098:	40004c00 	.word	0x40004c00
 800609c:	40005000 	.word	0x40005000
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a9f      	ldr	r2, [pc, #636]	; (8006328 <UART_SetConfig+0x568>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d17a      	bne.n	80061a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d824      	bhi.n	8006102 <UART_SetConfig+0x342>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x300>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	08006103 	.word	0x08006103
 80060d0:	080060f3 	.word	0x080060f3
 80060d4:	08006103 	.word	0x08006103
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006103 	.word	0x08006103
 80060e0:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe fbac 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61f8      	str	r0, [r7, #28]
        break;
 80060ea:	e010      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b8f      	ldr	r3, [pc, #572]	; (800632c <UART_SetConfig+0x56c>)
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e00d      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe fb0d 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80060f6:	61f8      	str	r0, [r7, #28]
        break;
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	61fb      	str	r3, [r7, #28]
        break;
 8006100:	e005      	b.n	800610e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800610c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80fb 	beq.w	800630c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	429a      	cmp	r2, r3
 8006124:	d305      	bcc.n	8006132 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	429a      	cmp	r2, r3
 8006130:	d903      	bls.n	800613a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006138:	e0e8      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2200      	movs	r2, #0
 800613e:	461c      	mov	r4, r3
 8006140:	4615      	mov	r5, r2
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	022b      	lsls	r3, r5, #8
 800614c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006150:	0222      	lsls	r2, r4, #8
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	0849      	lsrs	r1, r1, #1
 8006158:	2000      	movs	r0, #0
 800615a:	4688      	mov	r8, r1
 800615c:	4681      	mov	r9, r0
 800615e:	eb12 0a08 	adds.w	sl, r2, r8
 8006162:	eb43 0b09 	adc.w	fp, r3, r9
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006174:	4650      	mov	r0, sl
 8006176:	4659      	mov	r1, fp
 8006178:	f7fa fd86 	bl	8000c88 <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4613      	mov	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618a:	d308      	bcc.n	800619e <UART_SetConfig+0x3de>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006192:	d204      	bcs.n	800619e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e0b6      	b.n	800630c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061a4:	e0b2      	b.n	800630c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ae:	d15e      	bne.n	800626e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d828      	bhi.n	800620a <UART_SetConfig+0x44a>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x400>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe fb2c 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80061e8:	61f8      	str	r0, [r7, #28]
        break;
 80061ea:	e014      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe fb3e 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e010      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b4d      	ldr	r3, [pc, #308]	; (800632c <UART_SetConfig+0x56c>)
 80061f6:	61fb      	str	r3, [r7, #28]
        break;
 80061f8:	e00d      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fe fa89 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80061fe:	61f8      	str	r0, [r7, #28]
        break;
 8006200:	e009      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006206:	61fb      	str	r3, [r7, #28]
        break;
 8006208:	e005      	b.n	8006216 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d077      	beq.n	800630c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	005a      	lsls	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	441a      	add	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b0f      	cmp	r3, #15
 8006236:	d916      	bls.n	8006266 <UART_SetConfig+0x4a6>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623e:	d212      	bcs.n	8006266 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f023 030f 	bic.w	r3, r3, #15
 8006248:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	b29a      	uxth	r2, r3
 8006256:	8afb      	ldrh	r3, [r7, #22]
 8006258:	4313      	orrs	r3, r2
 800625a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	8afa      	ldrh	r2, [r7, #22]
 8006262:	60da      	str	r2, [r3, #12]
 8006264:	e052      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800626c:	e04e      	b.n	800630c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800626e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006272:	2b08      	cmp	r3, #8
 8006274:	d827      	bhi.n	80062c6 <UART_SetConfig+0x506>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x4bc>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b7 	.word	0x080062b7
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe face 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e014      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fe fae0 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e010      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <UART_SetConfig+0x56c>)
 80062b2:	61fb      	str	r3, [r7, #28]
        break;
 80062b4:	e00d      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fe fa2b 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80062ba:	61f8      	str	r0, [r7, #28]
        break;
 80062bc:	e009      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	61fb      	str	r3, [r7, #28]
        break;
 80062c4:	e005      	b.n	80062d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062d0:	bf00      	nop
    }

    if (pclk != 0U)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d019      	beq.n	800630c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	085a      	lsrs	r2, r3, #1
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d909      	bls.n	8006306 <UART_SetConfig+0x546>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d205      	bcs.n	8006306 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e002      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006318:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006326:	bf00      	nop
 8006328:	40008000 	.word	0x40008000
 800632c:	00f42400 	.word	0x00f42400

08006330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01a      	beq.n	8006446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642e:	d10a      	bne.n	8006446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b098      	sub	sp, #96	; 0x60
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006484:	f7fc fe06 	bl	8003094 <HAL_GetTick>
 8006488:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b08      	cmp	r3, #8
 8006496:	d12e      	bne.n	80064f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a0:	2200      	movs	r2, #0
 80064a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f88c 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d021      	beq.n	80064f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d0:	647b      	str	r3, [r7, #68]	; 0x44
 80064d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e062      	b.n	80065bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d149      	bne.n	8006598 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650c:	2200      	movs	r2, #0
 800650e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f856 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d03c      	beq.n	8006598 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	623b      	str	r3, [r7, #32]
   return(result);
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653c:	633b      	str	r3, [r7, #48]	; 0x30
 800653e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006570:	61fa      	str	r2, [r7, #28]
 8006572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	617b      	str	r3, [r7, #20]
   return(result);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e011      	b.n	80065bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3758      	adds	r7, #88	; 0x58
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d4:	e049      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d045      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fc fd59 	bl	8003094 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e048      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d031      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b08      	cmp	r3, #8
 8006612:	d110      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2208      	movs	r2, #8
 800661a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f8ff 	bl	8006820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2208      	movs	r2, #8
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e029      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006644:	d111      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800664e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f8e5 	bl	8006820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e00f      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4013      	ands	r3, r2
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	429a      	cmp	r2, r3
 8006686:	d0a6      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006694:	b480      	push	{r7}
 8006696:	b097      	sub	sp, #92	; 0x5c
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c6:	d10e      	bne.n	80066e6 <UART_Start_Receive_IT+0x52>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <UART_Start_Receive_IT+0x48>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066da:	e02d      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	22ff      	movs	r2, #255	; 0xff
 80066e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066e4:	e028      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10d      	bne.n	800670a <UART_Start_Receive_IT+0x76>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <UART_Start_Receive_IT+0x6c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	22ff      	movs	r2, #255	; 0xff
 80066fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066fe:	e01b      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	227f      	movs	r2, #127	; 0x7f
 8006704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006708:	e016      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006712:	d10d      	bne.n	8006730 <UART_Start_Receive_IT+0x9c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <UART_Start_Receive_IT+0x92>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	227f      	movs	r2, #127	; 0x7f
 8006720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006724:	e008      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	223f      	movs	r2, #63	; 0x3f
 800672a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800672e:	e003      	b.n	8006738 <UART_Start_Receive_IT+0xa4>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2222      	movs	r2, #34	; 0x22
 8006744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	657b      	str	r3, [r7, #84]	; 0x54
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006768:	64ba      	str	r2, [r7, #72]	; 0x48
 800676a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800676e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	d107      	bne.n	8006796 <UART_Start_Receive_IT+0x102>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a21      	ldr	r2, [pc, #132]	; (8006818 <UART_Start_Receive_IT+0x184>)
 8006792:	669a      	str	r2, [r3, #104]	; 0x68
 8006794:	e002      	b.n	800679c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a20      	ldr	r2, [pc, #128]	; (800681c <UART_Start_Receive_IT+0x188>)
 800679a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d019      	beq.n	80067d8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
 80067c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e6      	bne.n	80067a4 <UART_Start_Receive_IT+0x110>
 80067d6:	e018      	b.n	800680a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	613b      	str	r3, [r7, #16]
   return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f043 0320 	orr.w	r3, r3, #32
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	69f9      	ldr	r1, [r7, #28]
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	61bb      	str	r3, [r7, #24]
   return(result);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	375c      	adds	r7, #92	; 0x5c
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	08006c9d 	.word	0x08006c9d
 800681c:	08006ae1 	.word	0x08006ae1

08006820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b095      	sub	sp, #84	; 0x54
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800683c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006846:	643b      	str	r3, [r7, #64]	; 0x40
 8006848:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800684c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	61fb      	str	r3, [r7, #28]
   return(result);
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800687a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e5      	bne.n	800685a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006892:	2b01      	cmp	r3, #1
 8006894:	d118      	bne.n	80068c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	647b      	str	r3, [r7, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6979      	ldr	r1, [r7, #20]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	613b      	str	r3, [r7, #16]
   return(result);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e6      	bne.n	8006896 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068dc:	bf00      	nop
 80068de:	3754      	adds	r7, #84	; 0x54
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fa44 	bl	8005d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b08f      	sub	sp, #60	; 0x3c
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006920:	2b21      	cmp	r3, #33	; 0x21
 8006922:	d14d      	bne.n	80069c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d132      	bne.n	8006996 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	61fb      	str	r3, [r7, #28]
   return(result);
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006944:	637b      	str	r3, [r7, #52]	; 0x34
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006950:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6979      	ldr	r1, [r7, #20]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e6      	bne.n	8006962 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006994:	e014      	b.n	80069c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b292      	uxth	r2, r2
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069c0:	bf00      	nop
 80069c2:	373c      	adds	r7, #60	; 0x3c
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b091      	sub	sp, #68	; 0x44
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d8:	2b21      	cmp	r3, #33	; 0x21
 80069da:	d151      	bne.n	8006a80 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d132      	bne.n	8006a4e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	623b      	str	r3, [r7, #32]
   return(result);
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
 8006a08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e6      	bne.n	80069e8 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	69b9      	ldr	r1, [r7, #24]
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	617b      	str	r3, [r7, #20]
   return(result);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a4c:	e018      	b.n	8006a80 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a60:	b292      	uxth	r2, r2
 8006a62:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a80:	bf00      	nop
 8006a82:	3744      	adds	r7, #68	; 0x44
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f94a 	bl	8005d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad8:	bf00      	nop
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b09c      	sub	sp, #112	; 0x70
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af8:	2b22      	cmp	r3, #34	; 0x22
 8006afa:	f040 80be 	bne.w	8006c7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006b0c:	b2d9      	uxtb	r1, r3
 8006b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	400a      	ands	r2, r1
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 80a3 	bne.w	8006c8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e6      	bne.n	8006b48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	667b      	str	r3, [r7, #100]	; 0x64
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e5      	bne.n	8006b7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a34      	ldr	r2, [pc, #208]	; (8006c98 <UART_RxISR_8BIT+0x1b8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d01f      	beq.n	8006c0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d018      	beq.n	8006c0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	623b      	str	r3, [r7, #32]
   return(result);
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bee:	663b      	str	r3, [r7, #96]	; 0x60
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d12e      	bne.n	8006c72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d103      	bne.n	8006c62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff f89c 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c70:	e00d      	b.n	8006c8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f884 	bl	8005d80 <HAL_UART_RxCpltCallback>
}
 8006c78:	e009      	b.n	8006c8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	8b1b      	ldrh	r3, [r3, #24]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0208 	orr.w	r2, r2, #8
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	831a      	strh	r2, [r3, #24]
}
 8006c8e:	bf00      	nop
 8006c90:	3770      	adds	r7, #112	; 0x70
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40008000 	.word	0x40008000

08006c9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b09c      	sub	sp, #112	; 0x70
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006caa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb4:	2b22      	cmp	r3, #34	; 0x22
 8006cb6:	f040 80be 	bne.w	8006e36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006cce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	1c9a      	adds	r2, r3, #2
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f040 80a3 	bne.w	8006e4a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d18:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d22:	657b      	str	r3, [r7, #84]	; 0x54
 8006d24:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e6      	bne.n	8006d04 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d56:	643a      	str	r2, [r7, #64]	; 0x40
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a34      	ldr	r2, [pc, #208]	; (8006e54 <UART_RxISR_16BIT+0x1b8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01f      	beq.n	8006dc8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d12e      	bne.n	8006e2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	613b      	str	r3, [r7, #16]
   return(result);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d103      	bne.n	8006e1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe ffbe 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e2c:	e00d      	b.n	8006e4a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe ffa6 	bl	8005d80 <HAL_UART_RxCpltCallback>
}
 8006e34:	e009      	b.n	8006e4a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	8b1b      	ldrh	r3, [r3, #24]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0208 	orr.w	r2, r2, #8
 8006e46:	b292      	uxth	r2, r2
 8006e48:	831a      	strh	r2, [r3, #24]
}
 8006e4a:	bf00      	nop
 8006e4c:	3770      	adds	r7, #112	; 0x70
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40008000 	.word	0x40008000

08006e58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <atoi>:
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f000 b884 	b.w	8006f7c <strtol>

08006e74 <_strtol_l.constprop.0>:
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7a:	d001      	beq.n	8006e80 <_strtol_l.constprop.0+0xc>
 8006e7c:	2b24      	cmp	r3, #36	; 0x24
 8006e7e:	d906      	bls.n	8006e8e <_strtol_l.constprop.0+0x1a>
 8006e80:	f001 fa48 	bl	8008314 <__errno>
 8006e84:	2316      	movs	r3, #22
 8006e86:	6003      	str	r3, [r0, #0]
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f74 <_strtol_l.constprop.0+0x100>
 8006e92:	460d      	mov	r5, r1
 8006e94:	462e      	mov	r6, r5
 8006e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006e9e:	f017 0708 	ands.w	r7, r7, #8
 8006ea2:	d1f7      	bne.n	8006e94 <_strtol_l.constprop.0+0x20>
 8006ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ea6:	d132      	bne.n	8006f0e <_strtol_l.constprop.0+0x9a>
 8006ea8:	782c      	ldrb	r4, [r5, #0]
 8006eaa:	2701      	movs	r7, #1
 8006eac:	1cb5      	adds	r5, r6, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d05b      	beq.n	8006f6a <_strtol_l.constprop.0+0xf6>
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d109      	bne.n	8006eca <_strtol_l.constprop.0+0x56>
 8006eb6:	2c30      	cmp	r4, #48	; 0x30
 8006eb8:	d107      	bne.n	8006eca <_strtol_l.constprop.0+0x56>
 8006eba:	782c      	ldrb	r4, [r5, #0]
 8006ebc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ec0:	2c58      	cmp	r4, #88	; 0x58
 8006ec2:	d14d      	bne.n	8006f60 <_strtol_l.constprop.0+0xec>
 8006ec4:	786c      	ldrb	r4, [r5, #1]
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	3502      	adds	r5, #2
 8006eca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ece:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ed2:	f04f 0e00 	mov.w	lr, #0
 8006ed6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006eda:	4676      	mov	r6, lr
 8006edc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ee0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006ee4:	f1bc 0f09 	cmp.w	ip, #9
 8006ee8:	d816      	bhi.n	8006f18 <_strtol_l.constprop.0+0xa4>
 8006eea:	4664      	mov	r4, ip
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	dd24      	ble.n	8006f3a <_strtol_l.constprop.0+0xc6>
 8006ef0:	f1be 3fff 	cmp.w	lr, #4294967295
 8006ef4:	d008      	beq.n	8006f08 <_strtol_l.constprop.0+0x94>
 8006ef6:	45b1      	cmp	r9, r6
 8006ef8:	d31c      	bcc.n	8006f34 <_strtol_l.constprop.0+0xc0>
 8006efa:	d101      	bne.n	8006f00 <_strtol_l.constprop.0+0x8c>
 8006efc:	45a2      	cmp	sl, r4
 8006efe:	db19      	blt.n	8006f34 <_strtol_l.constprop.0+0xc0>
 8006f00:	fb06 4603 	mla	r6, r6, r3, r4
 8006f04:	f04f 0e01 	mov.w	lr, #1
 8006f08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f0c:	e7e8      	b.n	8006ee0 <_strtol_l.constprop.0+0x6c>
 8006f0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006f10:	bf04      	itt	eq
 8006f12:	782c      	ldrbeq	r4, [r5, #0]
 8006f14:	1cb5      	addeq	r5, r6, #2
 8006f16:	e7ca      	b.n	8006eae <_strtol_l.constprop.0+0x3a>
 8006f18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006f1c:	f1bc 0f19 	cmp.w	ip, #25
 8006f20:	d801      	bhi.n	8006f26 <_strtol_l.constprop.0+0xb2>
 8006f22:	3c37      	subs	r4, #55	; 0x37
 8006f24:	e7e2      	b.n	8006eec <_strtol_l.constprop.0+0x78>
 8006f26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006f2a:	f1bc 0f19 	cmp.w	ip, #25
 8006f2e:	d804      	bhi.n	8006f3a <_strtol_l.constprop.0+0xc6>
 8006f30:	3c57      	subs	r4, #87	; 0x57
 8006f32:	e7db      	b.n	8006eec <_strtol_l.constprop.0+0x78>
 8006f34:	f04f 3eff 	mov.w	lr, #4294967295
 8006f38:	e7e6      	b.n	8006f08 <_strtol_l.constprop.0+0x94>
 8006f3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006f3e:	d105      	bne.n	8006f4c <_strtol_l.constprop.0+0xd8>
 8006f40:	2322      	movs	r3, #34	; 0x22
 8006f42:	6003      	str	r3, [r0, #0]
 8006f44:	4646      	mov	r6, r8
 8006f46:	b942      	cbnz	r2, 8006f5a <_strtol_l.constprop.0+0xe6>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	e79e      	b.n	8006e8a <_strtol_l.constprop.0+0x16>
 8006f4c:	b107      	cbz	r7, 8006f50 <_strtol_l.constprop.0+0xdc>
 8006f4e:	4276      	negs	r6, r6
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d0f9      	beq.n	8006f48 <_strtol_l.constprop.0+0xd4>
 8006f54:	f1be 0f00 	cmp.w	lr, #0
 8006f58:	d000      	beq.n	8006f5c <_strtol_l.constprop.0+0xe8>
 8006f5a:	1e69      	subs	r1, r5, #1
 8006f5c:	6011      	str	r1, [r2, #0]
 8006f5e:	e7f3      	b.n	8006f48 <_strtol_l.constprop.0+0xd4>
 8006f60:	2430      	movs	r4, #48	; 0x30
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1b1      	bne.n	8006eca <_strtol_l.constprop.0+0x56>
 8006f66:	2308      	movs	r3, #8
 8006f68:	e7af      	b.n	8006eca <_strtol_l.constprop.0+0x56>
 8006f6a:	2c30      	cmp	r4, #48	; 0x30
 8006f6c:	d0a5      	beq.n	8006eba <_strtol_l.constprop.0+0x46>
 8006f6e:	230a      	movs	r3, #10
 8006f70:	e7ab      	b.n	8006eca <_strtol_l.constprop.0+0x56>
 8006f72:	bf00      	nop
 8006f74:	0800c709 	.word	0x0800c709

08006f78 <_strtol_r>:
 8006f78:	f7ff bf7c 	b.w	8006e74 <_strtol_l.constprop.0>

08006f7c <strtol>:
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	460a      	mov	r2, r1
 8006f80:	4601      	mov	r1, r0
 8006f82:	4802      	ldr	r0, [pc, #8]	; (8006f8c <strtol+0x10>)
 8006f84:	6800      	ldr	r0, [r0, #0]
 8006f86:	f7ff bf75 	b.w	8006e74 <_strtol_l.constprop.0>
 8006f8a:	bf00      	nop
 8006f8c:	20000088 	.word	0x20000088

08006f90 <__cvt>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	ec55 4b10 	vmov	r4, r5, d0
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	bfbb      	ittet	lt
 8006fa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fa6:	461d      	movlt	r5, r3
 8006fa8:	2300      	movge	r3, #0
 8006faa:	232d      	movlt	r3, #45	; 0x2d
 8006fac:	700b      	strb	r3, [r1, #0]
 8006fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fb4:	4691      	mov	r9, r2
 8006fb6:	f023 0820 	bic.w	r8, r3, #32
 8006fba:	bfbc      	itt	lt
 8006fbc:	4622      	movlt	r2, r4
 8006fbe:	4614      	movlt	r4, r2
 8006fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc4:	d005      	beq.n	8006fd2 <__cvt+0x42>
 8006fc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fca:	d100      	bne.n	8006fce <__cvt+0x3e>
 8006fcc:	3601      	adds	r6, #1
 8006fce:	2102      	movs	r1, #2
 8006fd0:	e000      	b.n	8006fd4 <__cvt+0x44>
 8006fd2:	2103      	movs	r1, #3
 8006fd4:	ab03      	add	r3, sp, #12
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	ab02      	add	r3, sp, #8
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	ec45 4b10 	vmov	d0, r4, r5
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	f001 fa88 	bl	80084f8 <_dtoa_r>
 8006fe8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fec:	4607      	mov	r7, r0
 8006fee:	d102      	bne.n	8006ff6 <__cvt+0x66>
 8006ff0:	f019 0f01 	tst.w	r9, #1
 8006ff4:	d022      	beq.n	800703c <__cvt+0xac>
 8006ff6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ffa:	eb07 0906 	add.w	r9, r7, r6
 8006ffe:	d110      	bne.n	8007022 <__cvt+0x92>
 8007000:	783b      	ldrb	r3, [r7, #0]
 8007002:	2b30      	cmp	r3, #48	; 0x30
 8007004:	d10a      	bne.n	800701c <__cvt+0x8c>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007012:	b918      	cbnz	r0, 800701c <__cvt+0x8c>
 8007014:	f1c6 0601 	rsb	r6, r6, #1
 8007018:	f8ca 6000 	str.w	r6, [sl]
 800701c:	f8da 3000 	ldr.w	r3, [sl]
 8007020:	4499      	add	r9, r3
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800702e:	b108      	cbz	r0, 8007034 <__cvt+0xa4>
 8007030:	f8cd 900c 	str.w	r9, [sp, #12]
 8007034:	2230      	movs	r2, #48	; 0x30
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	454b      	cmp	r3, r9
 800703a:	d307      	bcc.n	800704c <__cvt+0xbc>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007040:	1bdb      	subs	r3, r3, r7
 8007042:	4638      	mov	r0, r7
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	b004      	add	sp, #16
 8007048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	9103      	str	r1, [sp, #12]
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e7f0      	b.n	8007036 <__cvt+0xa6>

08007054 <__exponent>:
 8007054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007056:	4603      	mov	r3, r0
 8007058:	2900      	cmp	r1, #0
 800705a:	bfb8      	it	lt
 800705c:	4249      	neglt	r1, r1
 800705e:	f803 2b02 	strb.w	r2, [r3], #2
 8007062:	bfb4      	ite	lt
 8007064:	222d      	movlt	r2, #45	; 0x2d
 8007066:	222b      	movge	r2, #43	; 0x2b
 8007068:	2909      	cmp	r1, #9
 800706a:	7042      	strb	r2, [r0, #1]
 800706c:	dd2a      	ble.n	80070c4 <__exponent+0x70>
 800706e:	f10d 0207 	add.w	r2, sp, #7
 8007072:	4617      	mov	r7, r2
 8007074:	260a      	movs	r6, #10
 8007076:	4694      	mov	ip, r2
 8007078:	fb91 f5f6 	sdiv	r5, r1, r6
 800707c:	fb06 1415 	mls	r4, r6, r5, r1
 8007080:	3430      	adds	r4, #48	; 0x30
 8007082:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007086:	460c      	mov	r4, r1
 8007088:	2c63      	cmp	r4, #99	; 0x63
 800708a:	f102 32ff 	add.w	r2, r2, #4294967295
 800708e:	4629      	mov	r1, r5
 8007090:	dcf1      	bgt.n	8007076 <__exponent+0x22>
 8007092:	3130      	adds	r1, #48	; 0x30
 8007094:	f1ac 0402 	sub.w	r4, ip, #2
 8007098:	f802 1c01 	strb.w	r1, [r2, #-1]
 800709c:	1c41      	adds	r1, r0, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	42ba      	cmp	r2, r7
 80070a2:	d30a      	bcc.n	80070ba <__exponent+0x66>
 80070a4:	f10d 0209 	add.w	r2, sp, #9
 80070a8:	eba2 020c 	sub.w	r2, r2, ip
 80070ac:	42bc      	cmp	r4, r7
 80070ae:	bf88      	it	hi
 80070b0:	2200      	movhi	r2, #0
 80070b2:	4413      	add	r3, r2
 80070b4:	1a18      	subs	r0, r3, r0
 80070b6:	b003      	add	sp, #12
 80070b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80070c2:	e7ed      	b.n	80070a0 <__exponent+0x4c>
 80070c4:	2330      	movs	r3, #48	; 0x30
 80070c6:	3130      	adds	r1, #48	; 0x30
 80070c8:	7083      	strb	r3, [r0, #2]
 80070ca:	70c1      	strb	r1, [r0, #3]
 80070cc:	1d03      	adds	r3, r0, #4
 80070ce:	e7f1      	b.n	80070b4 <__exponent+0x60>

080070d0 <_printf_float>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	ed2d 8b02 	vpush	{d8}
 80070d8:	b08d      	sub	sp, #52	; 0x34
 80070da:	460c      	mov	r4, r1
 80070dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070e0:	4616      	mov	r6, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	4605      	mov	r5, r0
 80070e6:	f001 f8cb 	bl	8008280 <_localeconv_r>
 80070ea:	f8d0 a000 	ldr.w	sl, [r0]
 80070ee:	4650      	mov	r0, sl
 80070f0:	f7f9 f8be 	bl	8000270 <strlen>
 80070f4:	2300      	movs	r3, #0
 80070f6:	930a      	str	r3, [sp, #40]	; 0x28
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007100:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007104:	3307      	adds	r3, #7
 8007106:	f023 0307 	bic.w	r3, r3, #7
 800710a:	f103 0208 	add.w	r2, r3, #8
 800710e:	f8c8 2000 	str.w	r2, [r8]
 8007112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007120:	ee08 0a10 	vmov	s16, r0
 8007124:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800712c:	4b9e      	ldr	r3, [pc, #632]	; (80073a8 <_printf_float+0x2d8>)
 800712e:	f04f 32ff 	mov.w	r2, #4294967295
 8007132:	f7f9 fcfb 	bl	8000b2c <__aeabi_dcmpun>
 8007136:	bb88      	cbnz	r0, 800719c <_printf_float+0xcc>
 8007138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800713c:	4b9a      	ldr	r3, [pc, #616]	; (80073a8 <_printf_float+0x2d8>)
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	f7f9 fcd5 	bl	8000af0 <__aeabi_dcmple>
 8007146:	bb48      	cbnz	r0, 800719c <_printf_float+0xcc>
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8007154:	b110      	cbz	r0, 800715c <_printf_float+0x8c>
 8007156:	232d      	movs	r3, #45	; 0x2d
 8007158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715c:	4a93      	ldr	r2, [pc, #588]	; (80073ac <_printf_float+0x2dc>)
 800715e:	4b94      	ldr	r3, [pc, #592]	; (80073b0 <_printf_float+0x2e0>)
 8007160:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007164:	bf94      	ite	ls
 8007166:	4690      	movls	r8, r2
 8007168:	4698      	movhi	r8, r3
 800716a:	2303      	movs	r3, #3
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	9b05      	ldr	r3, [sp, #20]
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	f04f 0900 	mov.w	r9, #0
 800717a:	9700      	str	r7, [sp, #0]
 800717c:	4633      	mov	r3, r6
 800717e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f9da 	bl	800753c <_printf_common>
 8007188:	3001      	adds	r0, #1
 800718a:	f040 8090 	bne.w	80072ae <_printf_float+0x1de>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	b00d      	add	sp, #52	; 0x34
 8007194:	ecbd 8b02 	vpop	{d8}
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	f7f9 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80071a8:	b140      	cbz	r0, 80071bc <_printf_float+0xec>
 80071aa:	464b      	mov	r3, r9
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	232d      	movlt	r3, #45	; 0x2d
 80071b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071b6:	4a7f      	ldr	r2, [pc, #508]	; (80073b4 <_printf_float+0x2e4>)
 80071b8:	4b7f      	ldr	r3, [pc, #508]	; (80073b8 <_printf_float+0x2e8>)
 80071ba:	e7d1      	b.n	8007160 <_printf_float+0x90>
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071c2:	9206      	str	r2, [sp, #24]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	d13f      	bne.n	8007248 <_printf_float+0x178>
 80071c8:	2306      	movs	r3, #6
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	6861      	ldr	r1, [r4, #4]
 80071d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071d4:	2300      	movs	r3, #0
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	ab0a      	add	r3, sp, #40	; 0x28
 80071da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071de:	ab09      	add	r3, sp, #36	; 0x24
 80071e0:	ec49 8b10 	vmov	d0, r8, r9
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6022      	str	r2, [r4, #0]
 80071e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7ff fecf 	bl	8006f90 <__cvt>
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f6:	2b47      	cmp	r3, #71	; 0x47
 80071f8:	4680      	mov	r8, r0
 80071fa:	d108      	bne.n	800720e <_printf_float+0x13e>
 80071fc:	1cc8      	adds	r0, r1, #3
 80071fe:	db02      	blt.n	8007206 <_printf_float+0x136>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	4299      	cmp	r1, r3
 8007204:	dd41      	ble.n	800728a <_printf_float+0x1ba>
 8007206:	f1ab 0302 	sub.w	r3, fp, #2
 800720a:	fa5f fb83 	uxtb.w	fp, r3
 800720e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007212:	d820      	bhi.n	8007256 <_printf_float+0x186>
 8007214:	3901      	subs	r1, #1
 8007216:	465a      	mov	r2, fp
 8007218:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800721c:	9109      	str	r1, [sp, #36]	; 0x24
 800721e:	f7ff ff19 	bl	8007054 <__exponent>
 8007222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007224:	1813      	adds	r3, r2, r0
 8007226:	2a01      	cmp	r2, #1
 8007228:	4681      	mov	r9, r0
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	dc02      	bgt.n	8007234 <_printf_float+0x164>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	07d2      	lsls	r2, r2, #31
 8007232:	d501      	bpl.n	8007238 <_printf_float+0x168>
 8007234:	3301      	adds	r3, #1
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800723c:	2b00      	cmp	r3, #0
 800723e:	d09c      	beq.n	800717a <_printf_float+0xaa>
 8007240:	232d      	movs	r3, #45	; 0x2d
 8007242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007246:	e798      	b.n	800717a <_printf_float+0xaa>
 8007248:	9a06      	ldr	r2, [sp, #24]
 800724a:	2a47      	cmp	r2, #71	; 0x47
 800724c:	d1be      	bne.n	80071cc <_printf_float+0xfc>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1bc      	bne.n	80071cc <_printf_float+0xfc>
 8007252:	2301      	movs	r3, #1
 8007254:	e7b9      	b.n	80071ca <_printf_float+0xfa>
 8007256:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800725a:	d118      	bne.n	800728e <_printf_float+0x1be>
 800725c:	2900      	cmp	r1, #0
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	dd0b      	ble.n	800727a <_printf_float+0x1aa>
 8007262:	6121      	str	r1, [r4, #16]
 8007264:	b913      	cbnz	r3, 800726c <_printf_float+0x19c>
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	07d0      	lsls	r0, r2, #31
 800726a:	d502      	bpl.n	8007272 <_printf_float+0x1a2>
 800726c:	3301      	adds	r3, #1
 800726e:	440b      	add	r3, r1
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	65a1      	str	r1, [r4, #88]	; 0x58
 8007274:	f04f 0900 	mov.w	r9, #0
 8007278:	e7de      	b.n	8007238 <_printf_float+0x168>
 800727a:	b913      	cbnz	r3, 8007282 <_printf_float+0x1b2>
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	07d2      	lsls	r2, r2, #31
 8007280:	d501      	bpl.n	8007286 <_printf_float+0x1b6>
 8007282:	3302      	adds	r3, #2
 8007284:	e7f4      	b.n	8007270 <_printf_float+0x1a0>
 8007286:	2301      	movs	r3, #1
 8007288:	e7f2      	b.n	8007270 <_printf_float+0x1a0>
 800728a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007290:	4299      	cmp	r1, r3
 8007292:	db05      	blt.n	80072a0 <_printf_float+0x1d0>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	6121      	str	r1, [r4, #16]
 8007298:	07d8      	lsls	r0, r3, #31
 800729a:	d5ea      	bpl.n	8007272 <_printf_float+0x1a2>
 800729c:	1c4b      	adds	r3, r1, #1
 800729e:	e7e7      	b.n	8007270 <_printf_float+0x1a0>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	bfd4      	ite	le
 80072a4:	f1c1 0202 	rsble	r2, r1, #2
 80072a8:	2201      	movgt	r2, #1
 80072aa:	4413      	add	r3, r2
 80072ac:	e7e0      	b.n	8007270 <_printf_float+0x1a0>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	055a      	lsls	r2, r3, #21
 80072b2:	d407      	bmi.n	80072c4 <_printf_float+0x1f4>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	4642      	mov	r2, r8
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d12c      	bne.n	800731c <_printf_float+0x24c>
 80072c2:	e764      	b.n	800718e <_printf_float+0xbe>
 80072c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072c8:	f240 80e0 	bls.w	800748c <_printf_float+0x3bc>
 80072cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	f7f9 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d034      	beq.n	8007346 <_printf_float+0x276>
 80072dc:	4a37      	ldr	r2, [pc, #220]	; (80073bc <_printf_float+0x2ec>)
 80072de:	2301      	movs	r3, #1
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af51 	beq.w	800718e <_printf_float+0xbe>
 80072ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f0:	429a      	cmp	r2, r3
 80072f2:	db02      	blt.n	80072fa <_printf_float+0x22a>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07d8      	lsls	r0, r3, #31
 80072f8:	d510      	bpl.n	800731c <_printf_float+0x24c>
 80072fa:	ee18 3a10 	vmov	r3, s16
 80072fe:	4652      	mov	r2, sl
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af41 	beq.w	800718e <_printf_float+0xbe>
 800730c:	f04f 0800 	mov.w	r8, #0
 8007310:	f104 091a 	add.w	r9, r4, #26
 8007314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	4543      	cmp	r3, r8
 800731a:	dc09      	bgt.n	8007330 <_printf_float+0x260>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	f100 8107 	bmi.w	8007532 <_printf_float+0x462>
 8007324:	68e0      	ldr	r0, [r4, #12]
 8007326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007328:	4298      	cmp	r0, r3
 800732a:	bfb8      	it	lt
 800732c:	4618      	movlt	r0, r3
 800732e:	e730      	b.n	8007192 <_printf_float+0xc2>
 8007330:	2301      	movs	r3, #1
 8007332:	464a      	mov	r2, r9
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f af27 	beq.w	800718e <_printf_float+0xbe>
 8007340:	f108 0801 	add.w	r8, r8, #1
 8007344:	e7e6      	b.n	8007314 <_printf_float+0x244>
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	dc39      	bgt.n	80073c0 <_printf_float+0x2f0>
 800734c:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <_printf_float+0x2ec>)
 800734e:	2301      	movs	r3, #1
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af19 	beq.w	800718e <_printf_float+0xbe>
 800735c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007360:	4313      	orrs	r3, r2
 8007362:	d102      	bne.n	800736a <_printf_float+0x29a>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07d9      	lsls	r1, r3, #31
 8007368:	d5d8      	bpl.n	800731c <_printf_float+0x24c>
 800736a:	ee18 3a10 	vmov	r3, s16
 800736e:	4652      	mov	r2, sl
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f af09 	beq.w	800718e <_printf_float+0xbe>
 800737c:	f04f 0900 	mov.w	r9, #0
 8007380:	f104 0a1a 	add.w	sl, r4, #26
 8007384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007386:	425b      	negs	r3, r3
 8007388:	454b      	cmp	r3, r9
 800738a:	dc01      	bgt.n	8007390 <_printf_float+0x2c0>
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	e792      	b.n	80072b6 <_printf_float+0x1e6>
 8007390:	2301      	movs	r3, #1
 8007392:	4652      	mov	r2, sl
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f aef7 	beq.w	800718e <_printf_float+0xbe>
 80073a0:	f109 0901 	add.w	r9, r9, #1
 80073a4:	e7ee      	b.n	8007384 <_printf_float+0x2b4>
 80073a6:	bf00      	nop
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	0800c809 	.word	0x0800c809
 80073b0:	0800c80d 	.word	0x0800c80d
 80073b4:	0800c811 	.word	0x0800c811
 80073b8:	0800c815 	.word	0x0800c815
 80073bc:	0800cb37 	.word	0x0800cb37
 80073c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073c4:	429a      	cmp	r2, r3
 80073c6:	bfa8      	it	ge
 80073c8:	461a      	movge	r2, r3
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	4691      	mov	r9, r2
 80073ce:	dc37      	bgt.n	8007440 <_printf_float+0x370>
 80073d0:	f04f 0b00 	mov.w	fp, #0
 80073d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d8:	f104 021a 	add.w	r2, r4, #26
 80073dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	eba3 0309 	sub.w	r3, r3, r9
 80073e4:	455b      	cmp	r3, fp
 80073e6:	dc33      	bgt.n	8007450 <_printf_float+0x380>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	429a      	cmp	r2, r3
 80073ee:	db3b      	blt.n	8007468 <_printf_float+0x398>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	d438      	bmi.n	8007468 <_printf_float+0x398>
 80073f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073fa:	eba2 0903 	sub.w	r9, r2, r3
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	4591      	cmp	r9, r2
 8007404:	bfa8      	it	ge
 8007406:	4691      	movge	r9, r2
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	dc35      	bgt.n	800747a <_printf_float+0x3aa>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007416:	f104 0a1a 	add.w	sl, r4, #26
 800741a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	eba3 0309 	sub.w	r3, r3, r9
 8007424:	4543      	cmp	r3, r8
 8007426:	f77f af79 	ble.w	800731c <_printf_float+0x24c>
 800742a:	2301      	movs	r3, #1
 800742c:	4652      	mov	r2, sl
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f aeaa 	beq.w	800718e <_printf_float+0xbe>
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	e7ec      	b.n	800741a <_printf_float+0x34a>
 8007440:	4613      	mov	r3, r2
 8007442:	4631      	mov	r1, r6
 8007444:	4642      	mov	r2, r8
 8007446:	4628      	mov	r0, r5
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	d1c0      	bne.n	80073d0 <_printf_float+0x300>
 800744e:	e69e      	b.n	800718e <_printf_float+0xbe>
 8007450:	2301      	movs	r3, #1
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	9205      	str	r2, [sp, #20]
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f ae97 	beq.w	800718e <_printf_float+0xbe>
 8007460:	9a05      	ldr	r2, [sp, #20]
 8007462:	f10b 0b01 	add.w	fp, fp, #1
 8007466:	e7b9      	b.n	80073dc <_printf_float+0x30c>
 8007468:	ee18 3a10 	vmov	r3, s16
 800746c:	4652      	mov	r2, sl
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	d1be      	bne.n	80073f6 <_printf_float+0x326>
 8007478:	e689      	b.n	800718e <_printf_float+0xbe>
 800747a:	9a05      	ldr	r2, [sp, #20]
 800747c:	464b      	mov	r3, r9
 800747e:	4442      	add	r2, r8
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	d1c1      	bne.n	800740e <_printf_float+0x33e>
 800748a:	e680      	b.n	800718e <_printf_float+0xbe>
 800748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748e:	2a01      	cmp	r2, #1
 8007490:	dc01      	bgt.n	8007496 <_printf_float+0x3c6>
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d53a      	bpl.n	800750c <_printf_float+0x43c>
 8007496:	2301      	movs	r3, #1
 8007498:	4642      	mov	r2, r8
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f ae74 	beq.w	800718e <_printf_float+0xbe>
 80074a6:	ee18 3a10 	vmov	r3, s16
 80074aa:	4652      	mov	r2, sl
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f ae6b 	beq.w	800718e <_printf_float+0xbe>
 80074b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074bc:	2200      	movs	r2, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80074c4:	f7f9 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c8:	b9d8      	cbnz	r0, 8007502 <_printf_float+0x432>
 80074ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074ce:	f108 0201 	add.w	r2, r8, #1
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d10e      	bne.n	80074fa <_printf_float+0x42a>
 80074dc:	e657      	b.n	800718e <_printf_float+0xbe>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae50 	beq.w	800718e <_printf_float+0xbe>
 80074ee:	f108 0801 	add.w	r8, r8, #1
 80074f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	4543      	cmp	r3, r8
 80074f8:	dcf1      	bgt.n	80074de <_printf_float+0x40e>
 80074fa:	464b      	mov	r3, r9
 80074fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007500:	e6da      	b.n	80072b8 <_printf_float+0x1e8>
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	f104 0a1a 	add.w	sl, r4, #26
 800750a:	e7f2      	b.n	80074f2 <_printf_float+0x422>
 800750c:	2301      	movs	r3, #1
 800750e:	4642      	mov	r2, r8
 8007510:	e7df      	b.n	80074d2 <_printf_float+0x402>
 8007512:	2301      	movs	r3, #1
 8007514:	464a      	mov	r2, r9
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae36 	beq.w	800718e <_printf_float+0xbe>
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800752a:	1a5b      	subs	r3, r3, r1
 800752c:	4543      	cmp	r3, r8
 800752e:	dcf0      	bgt.n	8007512 <_printf_float+0x442>
 8007530:	e6f8      	b.n	8007324 <_printf_float+0x254>
 8007532:	f04f 0800 	mov.w	r8, #0
 8007536:	f104 0919 	add.w	r9, r4, #25
 800753a:	e7f4      	b.n	8007526 <_printf_float+0x456>

0800753c <_printf_common>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	4616      	mov	r6, r2
 8007542:	4699      	mov	r9, r3
 8007544:	688a      	ldr	r2, [r1, #8]
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754c:	4293      	cmp	r3, r2
 800754e:	bfb8      	it	lt
 8007550:	4613      	movlt	r3, r2
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007558:	4607      	mov	r7, r0
 800755a:	460c      	mov	r4, r1
 800755c:	b10a      	cbz	r2, 8007562 <_printf_common+0x26>
 800755e:	3301      	adds	r3, #1
 8007560:	6033      	str	r3, [r6, #0]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	0699      	lsls	r1, r3, #26
 8007566:	bf42      	ittt	mi
 8007568:	6833      	ldrmi	r3, [r6, #0]
 800756a:	3302      	addmi	r3, #2
 800756c:	6033      	strmi	r3, [r6, #0]
 800756e:	6825      	ldr	r5, [r4, #0]
 8007570:	f015 0506 	ands.w	r5, r5, #6
 8007574:	d106      	bne.n	8007584 <_printf_common+0x48>
 8007576:	f104 0a19 	add.w	sl, r4, #25
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	6832      	ldr	r2, [r6, #0]
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	42ab      	cmp	r3, r5
 8007582:	dc26      	bgt.n	80075d2 <_printf_common+0x96>
 8007584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007588:	1e13      	subs	r3, r2, #0
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	bf18      	it	ne
 800758e:	2301      	movne	r3, #1
 8007590:	0692      	lsls	r2, r2, #26
 8007592:	d42b      	bmi.n	80075ec <_printf_common+0xb0>
 8007594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007598:	4649      	mov	r1, r9
 800759a:	4638      	mov	r0, r7
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d01e      	beq.n	80075e0 <_printf_common+0xa4>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	6922      	ldr	r2, [r4, #16]
 80075a6:	f003 0306 	and.w	r3, r3, #6
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	bf02      	ittt	eq
 80075ae:	68e5      	ldreq	r5, [r4, #12]
 80075b0:	6833      	ldreq	r3, [r6, #0]
 80075b2:	1aed      	subeq	r5, r5, r3
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	bf0c      	ite	eq
 80075b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075bc:	2500      	movne	r5, #0
 80075be:	4293      	cmp	r3, r2
 80075c0:	bfc4      	itt	gt
 80075c2:	1a9b      	subgt	r3, r3, r2
 80075c4:	18ed      	addgt	r5, r5, r3
 80075c6:	2600      	movs	r6, #0
 80075c8:	341a      	adds	r4, #26
 80075ca:	42b5      	cmp	r5, r6
 80075cc:	d11a      	bne.n	8007604 <_printf_common+0xc8>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e008      	b.n	80075e4 <_printf_common+0xa8>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4652      	mov	r2, sl
 80075d6:	4649      	mov	r1, r9
 80075d8:	4638      	mov	r0, r7
 80075da:	47c0      	blx	r8
 80075dc:	3001      	adds	r0, #1
 80075de:	d103      	bne.n	80075e8 <_printf_common+0xac>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e8:	3501      	adds	r5, #1
 80075ea:	e7c6      	b.n	800757a <_printf_common+0x3e>
 80075ec:	18e1      	adds	r1, r4, r3
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	2030      	movs	r0, #48	; 0x30
 80075f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f6:	4422      	add	r2, r4
 80075f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007600:	3302      	adds	r3, #2
 8007602:	e7c7      	b.n	8007594 <_printf_common+0x58>
 8007604:	2301      	movs	r3, #1
 8007606:	4622      	mov	r2, r4
 8007608:	4649      	mov	r1, r9
 800760a:	4638      	mov	r0, r7
 800760c:	47c0      	blx	r8
 800760e:	3001      	adds	r0, #1
 8007610:	d0e6      	beq.n	80075e0 <_printf_common+0xa4>
 8007612:	3601      	adds	r6, #1
 8007614:	e7d9      	b.n	80075ca <_printf_common+0x8e>
	...

08007618 <_printf_i>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	7e0f      	ldrb	r7, [r1, #24]
 800761e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007620:	2f78      	cmp	r7, #120	; 0x78
 8007622:	4691      	mov	r9, r2
 8007624:	4680      	mov	r8, r0
 8007626:	460c      	mov	r4, r1
 8007628:	469a      	mov	sl, r3
 800762a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800762e:	d807      	bhi.n	8007640 <_printf_i+0x28>
 8007630:	2f62      	cmp	r7, #98	; 0x62
 8007632:	d80a      	bhi.n	800764a <_printf_i+0x32>
 8007634:	2f00      	cmp	r7, #0
 8007636:	f000 80d4 	beq.w	80077e2 <_printf_i+0x1ca>
 800763a:	2f58      	cmp	r7, #88	; 0x58
 800763c:	f000 80c0 	beq.w	80077c0 <_printf_i+0x1a8>
 8007640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007648:	e03a      	b.n	80076c0 <_printf_i+0xa8>
 800764a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800764e:	2b15      	cmp	r3, #21
 8007650:	d8f6      	bhi.n	8007640 <_printf_i+0x28>
 8007652:	a101      	add	r1, pc, #4	; (adr r1, 8007658 <_printf_i+0x40>)
 8007654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007658:	080076b1 	.word	0x080076b1
 800765c:	080076c5 	.word	0x080076c5
 8007660:	08007641 	.word	0x08007641
 8007664:	08007641 	.word	0x08007641
 8007668:	08007641 	.word	0x08007641
 800766c:	08007641 	.word	0x08007641
 8007670:	080076c5 	.word	0x080076c5
 8007674:	08007641 	.word	0x08007641
 8007678:	08007641 	.word	0x08007641
 800767c:	08007641 	.word	0x08007641
 8007680:	08007641 	.word	0x08007641
 8007684:	080077c9 	.word	0x080077c9
 8007688:	080076f1 	.word	0x080076f1
 800768c:	08007783 	.word	0x08007783
 8007690:	08007641 	.word	0x08007641
 8007694:	08007641 	.word	0x08007641
 8007698:	080077eb 	.word	0x080077eb
 800769c:	08007641 	.word	0x08007641
 80076a0:	080076f1 	.word	0x080076f1
 80076a4:	08007641 	.word	0x08007641
 80076a8:	08007641 	.word	0x08007641
 80076ac:	0800778b 	.word	0x0800778b
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	602a      	str	r2, [r5, #0]
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c0:	2301      	movs	r3, #1
 80076c2:	e09f      	b.n	8007804 <_printf_i+0x1ec>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	0607      	lsls	r7, r0, #24
 80076ca:	f103 0104 	add.w	r1, r3, #4
 80076ce:	6029      	str	r1, [r5, #0]
 80076d0:	d501      	bpl.n	80076d6 <_printf_i+0xbe>
 80076d2:	681e      	ldr	r6, [r3, #0]
 80076d4:	e003      	b.n	80076de <_printf_i+0xc6>
 80076d6:	0646      	lsls	r6, r0, #25
 80076d8:	d5fb      	bpl.n	80076d2 <_printf_i+0xba>
 80076da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076de:	2e00      	cmp	r6, #0
 80076e0:	da03      	bge.n	80076ea <_printf_i+0xd2>
 80076e2:	232d      	movs	r3, #45	; 0x2d
 80076e4:	4276      	negs	r6, r6
 80076e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ea:	485a      	ldr	r0, [pc, #360]	; (8007854 <_printf_i+0x23c>)
 80076ec:	230a      	movs	r3, #10
 80076ee:	e012      	b.n	8007716 <_printf_i+0xfe>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	6820      	ldr	r0, [r4, #0]
 80076f4:	1d19      	adds	r1, r3, #4
 80076f6:	6029      	str	r1, [r5, #0]
 80076f8:	0605      	lsls	r5, r0, #24
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0xe8>
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0xee>
 8007700:	0641      	lsls	r1, r0, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0xe4>
 8007704:	881e      	ldrh	r6, [r3, #0]
 8007706:	4853      	ldr	r0, [pc, #332]	; (8007854 <_printf_i+0x23c>)
 8007708:	2f6f      	cmp	r7, #111	; 0x6f
 800770a:	bf0c      	ite	eq
 800770c:	2308      	moveq	r3, #8
 800770e:	230a      	movne	r3, #10
 8007710:	2100      	movs	r1, #0
 8007712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007716:	6865      	ldr	r5, [r4, #4]
 8007718:	60a5      	str	r5, [r4, #8]
 800771a:	2d00      	cmp	r5, #0
 800771c:	bfa2      	ittt	ge
 800771e:	6821      	ldrge	r1, [r4, #0]
 8007720:	f021 0104 	bicge.w	r1, r1, #4
 8007724:	6021      	strge	r1, [r4, #0]
 8007726:	b90e      	cbnz	r6, 800772c <_printf_i+0x114>
 8007728:	2d00      	cmp	r5, #0
 800772a:	d04b      	beq.n	80077c4 <_printf_i+0x1ac>
 800772c:	4615      	mov	r5, r2
 800772e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007732:	fb03 6711 	mls	r7, r3, r1, r6
 8007736:	5dc7      	ldrb	r7, [r0, r7]
 8007738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800773c:	4637      	mov	r7, r6
 800773e:	42bb      	cmp	r3, r7
 8007740:	460e      	mov	r6, r1
 8007742:	d9f4      	bls.n	800772e <_printf_i+0x116>
 8007744:	2b08      	cmp	r3, #8
 8007746:	d10b      	bne.n	8007760 <_printf_i+0x148>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	07de      	lsls	r6, r3, #31
 800774c:	d508      	bpl.n	8007760 <_printf_i+0x148>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	6861      	ldr	r1, [r4, #4]
 8007752:	4299      	cmp	r1, r3
 8007754:	bfde      	ittt	le
 8007756:	2330      	movle	r3, #48	; 0x30
 8007758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800775c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007760:	1b52      	subs	r2, r2, r5
 8007762:	6122      	str	r2, [r4, #16]
 8007764:	f8cd a000 	str.w	sl, [sp]
 8007768:	464b      	mov	r3, r9
 800776a:	aa03      	add	r2, sp, #12
 800776c:	4621      	mov	r1, r4
 800776e:	4640      	mov	r0, r8
 8007770:	f7ff fee4 	bl	800753c <_printf_common>
 8007774:	3001      	adds	r0, #1
 8007776:	d14a      	bne.n	800780e <_printf_i+0x1f6>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	b004      	add	sp, #16
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f043 0320 	orr.w	r3, r3, #32
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	4833      	ldr	r0, [pc, #204]	; (8007858 <_printf_i+0x240>)
 800778c:	2778      	movs	r7, #120	; 0x78
 800778e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	061f      	lsls	r7, r3, #24
 8007798:	f851 6b04 	ldr.w	r6, [r1], #4
 800779c:	d402      	bmi.n	80077a4 <_printf_i+0x18c>
 800779e:	065f      	lsls	r7, r3, #25
 80077a0:	bf48      	it	mi
 80077a2:	b2b6      	uxthmi	r6, r6
 80077a4:	07df      	lsls	r7, r3, #31
 80077a6:	bf48      	it	mi
 80077a8:	f043 0320 	orrmi.w	r3, r3, #32
 80077ac:	6029      	str	r1, [r5, #0]
 80077ae:	bf48      	it	mi
 80077b0:	6023      	strmi	r3, [r4, #0]
 80077b2:	b91e      	cbnz	r6, 80077bc <_printf_i+0x1a4>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	f023 0320 	bic.w	r3, r3, #32
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	2310      	movs	r3, #16
 80077be:	e7a7      	b.n	8007710 <_printf_i+0xf8>
 80077c0:	4824      	ldr	r0, [pc, #144]	; (8007854 <_printf_i+0x23c>)
 80077c2:	e7e4      	b.n	800778e <_printf_i+0x176>
 80077c4:	4615      	mov	r5, r2
 80077c6:	e7bd      	b.n	8007744 <_printf_i+0x12c>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6826      	ldr	r6, [r4, #0]
 80077cc:	6961      	ldr	r1, [r4, #20]
 80077ce:	1d18      	adds	r0, r3, #4
 80077d0:	6028      	str	r0, [r5, #0]
 80077d2:	0635      	lsls	r5, r6, #24
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0x1c4>
 80077d8:	6019      	str	r1, [r3, #0]
 80077da:	e002      	b.n	80077e2 <_printf_i+0x1ca>
 80077dc:	0670      	lsls	r0, r6, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0x1c0>
 80077e0:	8019      	strh	r1, [r3, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	4615      	mov	r5, r2
 80077e8:	e7bc      	b.n	8007764 <_printf_i+0x14c>
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	2100      	movs	r1, #0
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7f8 fcea 	bl	80001d0 <memchr>
 80077fc:	b108      	cbz	r0, 8007802 <_printf_i+0x1ea>
 80077fe:	1b40      	subs	r0, r0, r5
 8007800:	6060      	str	r0, [r4, #4]
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	2300      	movs	r3, #0
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780c:	e7aa      	b.n	8007764 <_printf_i+0x14c>
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	462a      	mov	r2, r5
 8007812:	4649      	mov	r1, r9
 8007814:	4640      	mov	r0, r8
 8007816:	47d0      	blx	sl
 8007818:	3001      	adds	r0, #1
 800781a:	d0ad      	beq.n	8007778 <_printf_i+0x160>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	079b      	lsls	r3, r3, #30
 8007820:	d413      	bmi.n	800784a <_printf_i+0x232>
 8007822:	68e0      	ldr	r0, [r4, #12]
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	4298      	cmp	r0, r3
 8007828:	bfb8      	it	lt
 800782a:	4618      	movlt	r0, r3
 800782c:	e7a6      	b.n	800777c <_printf_i+0x164>
 800782e:	2301      	movs	r3, #1
 8007830:	4632      	mov	r2, r6
 8007832:	4649      	mov	r1, r9
 8007834:	4640      	mov	r0, r8
 8007836:	47d0      	blx	sl
 8007838:	3001      	adds	r0, #1
 800783a:	d09d      	beq.n	8007778 <_printf_i+0x160>
 800783c:	3501      	adds	r5, #1
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	9903      	ldr	r1, [sp, #12]
 8007842:	1a5b      	subs	r3, r3, r1
 8007844:	42ab      	cmp	r3, r5
 8007846:	dcf2      	bgt.n	800782e <_printf_i+0x216>
 8007848:	e7eb      	b.n	8007822 <_printf_i+0x20a>
 800784a:	2500      	movs	r5, #0
 800784c:	f104 0619 	add.w	r6, r4, #25
 8007850:	e7f5      	b.n	800783e <_printf_i+0x226>
 8007852:	bf00      	nop
 8007854:	0800c819 	.word	0x0800c819
 8007858:	0800c82a 	.word	0x0800c82a

0800785c <_scanf_float>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	b087      	sub	sp, #28
 8007862:	4617      	mov	r7, r2
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	688b      	ldr	r3, [r1, #8]
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800786e:	bf83      	ittte	hi
 8007870:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007874:	195b      	addhi	r3, r3, r5
 8007876:	9302      	strhi	r3, [sp, #8]
 8007878:	2300      	movls	r3, #0
 800787a:	bf86      	itte	hi
 800787c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007880:	608b      	strhi	r3, [r1, #8]
 8007882:	9302      	strls	r3, [sp, #8]
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	468b      	mov	fp, r1
 8007888:	2500      	movs	r5, #0
 800788a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800788e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007892:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007896:	4680      	mov	r8, r0
 8007898:	460c      	mov	r4, r1
 800789a:	465e      	mov	r6, fp
 800789c:	46aa      	mov	sl, r5
 800789e:	46a9      	mov	r9, r5
 80078a0:	9501      	str	r5, [sp, #4]
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	b152      	cbz	r2, 80078bc <_scanf_float+0x60>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b4e      	cmp	r3, #78	; 0x4e
 80078ac:	d864      	bhi.n	8007978 <_scanf_float+0x11c>
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d83c      	bhi.n	800792c <_scanf_float+0xd0>
 80078b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80078b6:	b2c8      	uxtb	r0, r1
 80078b8:	280e      	cmp	r0, #14
 80078ba:	d93a      	bls.n	8007932 <_scanf_float+0xd6>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	d003      	beq.n	80078ca <_scanf_float+0x6e>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ce:	f1ba 0f01 	cmp.w	sl, #1
 80078d2:	f200 8113 	bhi.w	8007afc <_scanf_float+0x2a0>
 80078d6:	455e      	cmp	r6, fp
 80078d8:	f200 8105 	bhi.w	8007ae6 <_scanf_float+0x28a>
 80078dc:	2501      	movs	r5, #1
 80078de:	4628      	mov	r0, r5
 80078e0:	b007      	add	sp, #28
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078ea:	2a0d      	cmp	r2, #13
 80078ec:	d8e6      	bhi.n	80078bc <_scanf_float+0x60>
 80078ee:	a101      	add	r1, pc, #4	; (adr r1, 80078f4 <_scanf_float+0x98>)
 80078f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078f4:	08007a33 	.word	0x08007a33
 80078f8:	080078bd 	.word	0x080078bd
 80078fc:	080078bd 	.word	0x080078bd
 8007900:	080078bd 	.word	0x080078bd
 8007904:	08007a93 	.word	0x08007a93
 8007908:	08007a6b 	.word	0x08007a6b
 800790c:	080078bd 	.word	0x080078bd
 8007910:	080078bd 	.word	0x080078bd
 8007914:	08007a41 	.word	0x08007a41
 8007918:	080078bd 	.word	0x080078bd
 800791c:	080078bd 	.word	0x080078bd
 8007920:	080078bd 	.word	0x080078bd
 8007924:	080078bd 	.word	0x080078bd
 8007928:	080079f9 	.word	0x080079f9
 800792c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007930:	e7db      	b.n	80078ea <_scanf_float+0x8e>
 8007932:	290e      	cmp	r1, #14
 8007934:	d8c2      	bhi.n	80078bc <_scanf_float+0x60>
 8007936:	a001      	add	r0, pc, #4	; (adr r0, 800793c <_scanf_float+0xe0>)
 8007938:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800793c:	080079eb 	.word	0x080079eb
 8007940:	080078bd 	.word	0x080078bd
 8007944:	080079eb 	.word	0x080079eb
 8007948:	08007a7f 	.word	0x08007a7f
 800794c:	080078bd 	.word	0x080078bd
 8007950:	08007999 	.word	0x08007999
 8007954:	080079d5 	.word	0x080079d5
 8007958:	080079d5 	.word	0x080079d5
 800795c:	080079d5 	.word	0x080079d5
 8007960:	080079d5 	.word	0x080079d5
 8007964:	080079d5 	.word	0x080079d5
 8007968:	080079d5 	.word	0x080079d5
 800796c:	080079d5 	.word	0x080079d5
 8007970:	080079d5 	.word	0x080079d5
 8007974:	080079d5 	.word	0x080079d5
 8007978:	2b6e      	cmp	r3, #110	; 0x6e
 800797a:	d809      	bhi.n	8007990 <_scanf_float+0x134>
 800797c:	2b60      	cmp	r3, #96	; 0x60
 800797e:	d8b2      	bhi.n	80078e6 <_scanf_float+0x8a>
 8007980:	2b54      	cmp	r3, #84	; 0x54
 8007982:	d077      	beq.n	8007a74 <_scanf_float+0x218>
 8007984:	2b59      	cmp	r3, #89	; 0x59
 8007986:	d199      	bne.n	80078bc <_scanf_float+0x60>
 8007988:	2d07      	cmp	r5, #7
 800798a:	d197      	bne.n	80078bc <_scanf_float+0x60>
 800798c:	2508      	movs	r5, #8
 800798e:	e029      	b.n	80079e4 <_scanf_float+0x188>
 8007990:	2b74      	cmp	r3, #116	; 0x74
 8007992:	d06f      	beq.n	8007a74 <_scanf_float+0x218>
 8007994:	2b79      	cmp	r3, #121	; 0x79
 8007996:	e7f6      	b.n	8007986 <_scanf_float+0x12a>
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	05c8      	lsls	r0, r1, #23
 800799c:	d51a      	bpl.n	80079d4 <_scanf_float+0x178>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079a4:	6021      	str	r1, [r4, #0]
 80079a6:	f109 0901 	add.w	r9, r9, #1
 80079aa:	b11b      	cbz	r3, 80079b4 <_scanf_float+0x158>
 80079ac:	3b01      	subs	r3, #1
 80079ae:	3201      	adds	r2, #1
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	60a2      	str	r2, [r4, #8]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	f340 8084 	ble.w	8007ad4 <_scanf_float+0x278>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	e766      	b.n	80078a2 <_scanf_float+0x46>
 80079d4:	eb1a 0f05 	cmn.w	sl, r5
 80079d8:	f47f af70 	bne.w	80078bc <_scanf_float+0x60>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	f806 3b01 	strb.w	r3, [r6], #1
 80079e8:	e7e4      	b.n	80079b4 <_scanf_float+0x158>
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	0610      	lsls	r0, r2, #24
 80079ee:	f57f af65 	bpl.w	80078bc <_scanf_float+0x60>
 80079f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f6:	e7f4      	b.n	80079e2 <_scanf_float+0x186>
 80079f8:	f1ba 0f00 	cmp.w	sl, #0
 80079fc:	d10e      	bne.n	8007a1c <_scanf_float+0x1c0>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d10e      	bne.n	8007a22 <_scanf_float+0x1c6>
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a0e:	d108      	bne.n	8007a22 <_scanf_float+0x1c6>
 8007a10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	f04f 0a01 	mov.w	sl, #1
 8007a1a:	e7e3      	b.n	80079e4 <_scanf_float+0x188>
 8007a1c:	f1ba 0f02 	cmp.w	sl, #2
 8007a20:	d055      	beq.n	8007ace <_scanf_float+0x272>
 8007a22:	2d01      	cmp	r5, #1
 8007a24:	d002      	beq.n	8007a2c <_scanf_float+0x1d0>
 8007a26:	2d04      	cmp	r5, #4
 8007a28:	f47f af48 	bne.w	80078bc <_scanf_float+0x60>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	b2ed      	uxtb	r5, r5
 8007a30:	e7d8      	b.n	80079e4 <_scanf_float+0x188>
 8007a32:	f1ba 0f01 	cmp.w	sl, #1
 8007a36:	f47f af41 	bne.w	80078bc <_scanf_float+0x60>
 8007a3a:	f04f 0a02 	mov.w	sl, #2
 8007a3e:	e7d1      	b.n	80079e4 <_scanf_float+0x188>
 8007a40:	b97d      	cbnz	r5, 8007a62 <_scanf_float+0x206>
 8007a42:	f1b9 0f00 	cmp.w	r9, #0
 8007a46:	f47f af3c 	bne.w	80078c2 <_scanf_float+0x66>
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a54:	f47f af39 	bne.w	80078ca <_scanf_float+0x6e>
 8007a58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	2501      	movs	r5, #1
 8007a60:	e7c0      	b.n	80079e4 <_scanf_float+0x188>
 8007a62:	2d03      	cmp	r5, #3
 8007a64:	d0e2      	beq.n	8007a2c <_scanf_float+0x1d0>
 8007a66:	2d05      	cmp	r5, #5
 8007a68:	e7de      	b.n	8007a28 <_scanf_float+0x1cc>
 8007a6a:	2d02      	cmp	r5, #2
 8007a6c:	f47f af26 	bne.w	80078bc <_scanf_float+0x60>
 8007a70:	2503      	movs	r5, #3
 8007a72:	e7b7      	b.n	80079e4 <_scanf_float+0x188>
 8007a74:	2d06      	cmp	r5, #6
 8007a76:	f47f af21 	bne.w	80078bc <_scanf_float+0x60>
 8007a7a:	2507      	movs	r5, #7
 8007a7c:	e7b2      	b.n	80079e4 <_scanf_float+0x188>
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	0591      	lsls	r1, r2, #22
 8007a82:	f57f af1b 	bpl.w	80078bc <_scanf_float+0x60>
 8007a86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a8a:	6022      	str	r2, [r4, #0]
 8007a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a90:	e7a8      	b.n	80079e4 <_scanf_float+0x188>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a9c:	d006      	beq.n	8007aac <_scanf_float+0x250>
 8007a9e:	0550      	lsls	r0, r2, #21
 8007aa0:	f57f af0c 	bpl.w	80078bc <_scanf_float+0x60>
 8007aa4:	f1b9 0f00 	cmp.w	r9, #0
 8007aa8:	f43f af0f 	beq.w	80078ca <_scanf_float+0x6e>
 8007aac:	0591      	lsls	r1, r2, #22
 8007aae:	bf58      	it	pl
 8007ab0:	9901      	ldrpl	r1, [sp, #4]
 8007ab2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ab6:	bf58      	it	pl
 8007ab8:	eba9 0101 	subpl.w	r1, r9, r1
 8007abc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ac0:	bf58      	it	pl
 8007ac2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	f04f 0900 	mov.w	r9, #0
 8007acc:	e78a      	b.n	80079e4 <_scanf_float+0x188>
 8007ace:	f04f 0a03 	mov.w	sl, #3
 8007ad2:	e787      	b.n	80079e4 <_scanf_float+0x188>
 8007ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4640      	mov	r0, r8
 8007adc:	4798      	blx	r3
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aedf 	beq.w	80078a2 <_scanf_float+0x46>
 8007ae4:	e6ea      	b.n	80078bc <_scanf_float+0x60>
 8007ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aee:	463a      	mov	r2, r7
 8007af0:	4640      	mov	r0, r8
 8007af2:	4798      	blx	r3
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	e6ec      	b.n	80078d6 <_scanf_float+0x7a>
 8007afc:	1e6b      	subs	r3, r5, #1
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	d825      	bhi.n	8007b4e <_scanf_float+0x2f2>
 8007b02:	2d02      	cmp	r5, #2
 8007b04:	d836      	bhi.n	8007b74 <_scanf_float+0x318>
 8007b06:	455e      	cmp	r6, fp
 8007b08:	f67f aee8 	bls.w	80078dc <_scanf_float+0x80>
 8007b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b14:	463a      	mov	r2, r7
 8007b16:	4640      	mov	r0, r8
 8007b18:	4798      	blx	r3
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	e7f1      	b.n	8007b06 <_scanf_float+0x2aa>
 8007b22:	9802      	ldr	r0, [sp, #8]
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	463a      	mov	r2, r7
 8007b30:	4640      	mov	r0, r8
 8007b32:	4798      	blx	r3
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b3e:	fa5f fa8a 	uxtb.w	sl, sl
 8007b42:	f1ba 0f02 	cmp.w	sl, #2
 8007b46:	d1ec      	bne.n	8007b22 <_scanf_float+0x2c6>
 8007b48:	3d03      	subs	r5, #3
 8007b4a:	b2ed      	uxtb	r5, r5
 8007b4c:	1b76      	subs	r6, r6, r5
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	05da      	lsls	r2, r3, #23
 8007b52:	d52f      	bpl.n	8007bb4 <_scanf_float+0x358>
 8007b54:	055b      	lsls	r3, r3, #21
 8007b56:	d510      	bpl.n	8007b7a <_scanf_float+0x31e>
 8007b58:	455e      	cmp	r6, fp
 8007b5a:	f67f aebf 	bls.w	80078dc <_scanf_float+0x80>
 8007b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b66:	463a      	mov	r2, r7
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4798      	blx	r3
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	e7f1      	b.n	8007b58 <_scanf_float+0x2fc>
 8007b74:	46aa      	mov	sl, r5
 8007b76:	9602      	str	r6, [sp, #8]
 8007b78:	e7df      	b.n	8007b3a <_scanf_float+0x2de>
 8007b7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	2965      	cmp	r1, #101	; 0x65
 8007b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b86:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	d00c      	beq.n	8007ba8 <_scanf_float+0x34c>
 8007b8e:	2945      	cmp	r1, #69	; 0x45
 8007b90:	d00a      	beq.n	8007ba8 <_scanf_float+0x34c>
 8007b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b96:	463a      	mov	r2, r7
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4798      	blx	r3
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	1eb5      	subs	r5, r6, #2
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bac:	463a      	mov	r2, r7
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4798      	blx	r3
 8007bb2:	462e      	mov	r6, r5
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	f015 0510 	ands.w	r5, r5, #16
 8007bba:	d158      	bne.n	8007c6e <_scanf_float+0x412>
 8007bbc:	7035      	strb	r5, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d11c      	bne.n	8007c04 <_scanf_float+0x3a8>
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	eba3 0209 	sub.w	r2, r3, r9
 8007bd2:	d124      	bne.n	8007c1e <_scanf_float+0x3c2>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f002 fe39 	bl	800a850 <_strtod_r>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f011 0f02 	tst.w	r1, #2
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	f103 0204 	add.w	r2, r3, #4
 8007bf0:	d020      	beq.n	8007c34 <_scanf_float+0x3d8>
 8007bf2:	9903      	ldr	r1, [sp, #12]
 8007bf4:	600a      	str	r2, [r1, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	e9c3 6700 	strd	r6, r7, [r3]
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60e3      	str	r3, [r4, #12]
 8007c02:	e66c      	b.n	80078de <_scanf_float+0x82>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0e4      	beq.n	8007bd4 <_scanf_float+0x378>
 8007c0a:	9905      	ldr	r1, [sp, #20]
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	462a      	mov	r2, r5
 8007c10:	3101      	adds	r1, #1
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff f9b0 	bl	8006f78 <_strtol_r>
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	9e05      	ldr	r6, [sp, #20]
 8007c1c:	1ac2      	subs	r2, r0, r3
 8007c1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c22:	429e      	cmp	r6, r3
 8007c24:	bf28      	it	cs
 8007c26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c2a:	4912      	ldr	r1, [pc, #72]	; (8007c74 <_scanf_float+0x418>)
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f955 	bl	8007edc <siprintf>
 8007c32:	e7cf      	b.n	8007bd4 <_scanf_float+0x378>
 8007c34:	f011 0f04 	tst.w	r1, #4
 8007c38:	9903      	ldr	r1, [sp, #12]
 8007c3a:	600a      	str	r2, [r1, #0]
 8007c3c:	d1db      	bne.n	8007bf6 <_scanf_float+0x39a>
 8007c3e:	f8d3 8000 	ldr.w	r8, [r3]
 8007c42:	ee10 2a10 	vmov	r2, s0
 8007c46:	ee10 0a10 	vmov	r0, s0
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 ff6d 	bl	8000b2c <__aeabi_dcmpun>
 8007c52:	b128      	cbz	r0, 8007c60 <_scanf_float+0x404>
 8007c54:	4808      	ldr	r0, [pc, #32]	; (8007c78 <_scanf_float+0x41c>)
 8007c56:	f000 fba1 	bl	800839c <nanf>
 8007c5a:	ed88 0a00 	vstr	s0, [r8]
 8007c5e:	e7cd      	b.n	8007bfc <_scanf_float+0x3a0>
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ffc0 	bl	8000be8 <__aeabi_d2f>
 8007c68:	f8c8 0000 	str.w	r0, [r8]
 8007c6c:	e7c6      	b.n	8007bfc <_scanf_float+0x3a0>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	e635      	b.n	80078de <_scanf_float+0x82>
 8007c72:	bf00      	nop
 8007c74:	0800c83b 	.word	0x0800c83b
 8007c78:	0800c8ec 	.word	0x0800c8ec

08007c7c <std>:
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	e9c0 3300 	strd	r3, r3, [r0]
 8007c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c8a:	6083      	str	r3, [r0, #8]
 8007c8c:	8181      	strh	r1, [r0, #12]
 8007c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c90:	81c2      	strh	r2, [r0, #14]
 8007c92:	6183      	str	r3, [r0, #24]
 8007c94:	4619      	mov	r1, r3
 8007c96:	2208      	movs	r2, #8
 8007c98:	305c      	adds	r0, #92	; 0x5c
 8007c9a:	f000 fa45 	bl	8008128 <memset>
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <std+0x58>)
 8007ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <std+0x5c>)
 8007ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <std+0x60>)
 8007ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <std+0x64>)
 8007cac:	6323      	str	r3, [r4, #48]	; 0x30
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <std+0x68>)
 8007cb0:	6224      	str	r4, [r4, #32]
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	d006      	beq.n	8007cc4 <std+0x48>
 8007cb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cba:	4294      	cmp	r4, r2
 8007cbc:	d002      	beq.n	8007cc4 <std+0x48>
 8007cbe:	33d0      	adds	r3, #208	; 0xd0
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d105      	bne.n	8007cd0 <std+0x54>
 8007cc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	f000 bb4c 	b.w	8008368 <__retarget_lock_init_recursive>
 8007cd0:	bd10      	pop	{r4, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08007f75 	.word	0x08007f75
 8007cd8:	08007f9b 	.word	0x08007f9b
 8007cdc:	08007fd3 	.word	0x08007fd3
 8007ce0:	08007ff7 	.word	0x08007ff7
 8007ce4:	20000c38 	.word	0x20000c38

08007ce8 <stdio_exit_handler>:
 8007ce8:	4a02      	ldr	r2, [pc, #8]	; (8007cf4 <stdio_exit_handler+0xc>)
 8007cea:	4903      	ldr	r1, [pc, #12]	; (8007cf8 <stdio_exit_handler+0x10>)
 8007cec:	4803      	ldr	r0, [pc, #12]	; (8007cfc <stdio_exit_handler+0x14>)
 8007cee:	f000 b869 	b.w	8007dc4 <_fwalk_sglue>
 8007cf2:	bf00      	nop
 8007cf4:	20000030 	.word	0x20000030
 8007cf8:	0800b4e1 	.word	0x0800b4e1
 8007cfc:	2000003c 	.word	0x2000003c

08007d00 <cleanup_stdio>:
 8007d00:	6841      	ldr	r1, [r0, #4]
 8007d02:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <cleanup_stdio+0x34>)
 8007d04:	4299      	cmp	r1, r3
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	d001      	beq.n	8007d10 <cleanup_stdio+0x10>
 8007d0c:	f003 fbe8 	bl	800b4e0 <_fflush_r>
 8007d10:	68a1      	ldr	r1, [r4, #8]
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <cleanup_stdio+0x38>)
 8007d14:	4299      	cmp	r1, r3
 8007d16:	d002      	beq.n	8007d1e <cleanup_stdio+0x1e>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f003 fbe1 	bl	800b4e0 <_fflush_r>
 8007d1e:	68e1      	ldr	r1, [r4, #12]
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <cleanup_stdio+0x3c>)
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d004      	beq.n	8007d30 <cleanup_stdio+0x30>
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2c:	f003 bbd8 	b.w	800b4e0 <_fflush_r>
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	20000c38 	.word	0x20000c38
 8007d38:	20000ca0 	.word	0x20000ca0
 8007d3c:	20000d08 	.word	0x20000d08

08007d40 <global_stdio_init.part.0>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <global_stdio_init.part.0+0x30>)
 8007d44:	4c0b      	ldr	r4, [pc, #44]	; (8007d74 <global_stdio_init.part.0+0x34>)
 8007d46:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <global_stdio_init.part.0+0x38>)
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2104      	movs	r1, #4
 8007d50:	f7ff ff94 	bl	8007c7c <std>
 8007d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d58:	2201      	movs	r2, #1
 8007d5a:	2109      	movs	r1, #9
 8007d5c:	f7ff ff8e 	bl	8007c7c <std>
 8007d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d64:	2202      	movs	r2, #2
 8007d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6a:	2112      	movs	r1, #18
 8007d6c:	f7ff bf86 	b.w	8007c7c <std>
 8007d70:	20000d70 	.word	0x20000d70
 8007d74:	20000c38 	.word	0x20000c38
 8007d78:	08007ce9 	.word	0x08007ce9

08007d7c <__sfp_lock_acquire>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__sfp_lock_acquire+0x8>)
 8007d7e:	f000 baf4 	b.w	800836a <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20000d79 	.word	0x20000d79

08007d88 <__sfp_lock_release>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__sfp_lock_release+0x8>)
 8007d8a:	f000 baef 	b.w	800836c <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20000d79 	.word	0x20000d79

08007d94 <__sinit>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	f7ff fff0 	bl	8007d7c <__sfp_lock_acquire>
 8007d9c:	6a23      	ldr	r3, [r4, #32]
 8007d9e:	b11b      	cbz	r3, 8007da8 <__sinit+0x14>
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f7ff bff0 	b.w	8007d88 <__sfp_lock_release>
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <__sinit+0x28>)
 8007daa:	6223      	str	r3, [r4, #32]
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <__sinit+0x2c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f5      	bne.n	8007da0 <__sinit+0xc>
 8007db4:	f7ff ffc4 	bl	8007d40 <global_stdio_init.part.0>
 8007db8:	e7f2      	b.n	8007da0 <__sinit+0xc>
 8007dba:	bf00      	nop
 8007dbc:	08007d01 	.word	0x08007d01
 8007dc0:	20000d70 	.word	0x20000d70

08007dc4 <_fwalk_sglue>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4607      	mov	r7, r0
 8007dca:	4688      	mov	r8, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	2600      	movs	r6, #0
 8007dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd8:	d505      	bpl.n	8007de6 <_fwalk_sglue+0x22>
 8007dda:	6824      	ldr	r4, [r4, #0]
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	d1f7      	bne.n	8007dd0 <_fwalk_sglue+0xc>
 8007de0:	4630      	mov	r0, r6
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d907      	bls.n	8007dfc <_fwalk_sglue+0x38>
 8007dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df0:	3301      	adds	r3, #1
 8007df2:	d003      	beq.n	8007dfc <_fwalk_sglue+0x38>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c0      	blx	r8
 8007dfa:	4306      	orrs	r6, r0
 8007dfc:	3568      	adds	r5, #104	; 0x68
 8007dfe:	e7e9      	b.n	8007dd4 <_fwalk_sglue+0x10>

08007e00 <iprintf>:
 8007e00:	b40f      	push	{r0, r1, r2, r3}
 8007e02:	b507      	push	{r0, r1, r2, lr}
 8007e04:	4906      	ldr	r1, [pc, #24]	; (8007e20 <iprintf+0x20>)
 8007e06:	ab04      	add	r3, sp, #16
 8007e08:	6808      	ldr	r0, [r1, #0]
 8007e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0e:	6881      	ldr	r1, [r0, #8]
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f003 f877 	bl	800af04 <_vfiprintf_r>
 8007e16:	b003      	add	sp, #12
 8007e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e1c:	b004      	add	sp, #16
 8007e1e:	4770      	bx	lr
 8007e20:	20000088 	.word	0x20000088

08007e24 <_puts_r>:
 8007e24:	6a03      	ldr	r3, [r0, #32]
 8007e26:	b570      	push	{r4, r5, r6, lr}
 8007e28:	6884      	ldr	r4, [r0, #8]
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	b90b      	cbnz	r3, 8007e34 <_puts_r+0x10>
 8007e30:	f7ff ffb0 	bl	8007d94 <__sinit>
 8007e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e36:	07db      	lsls	r3, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_puts_r+0x22>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	0598      	lsls	r0, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_puts_r+0x22>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 fa92 	bl	800836a <__retarget_lock_acquire_recursive>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	0719      	lsls	r1, r3, #28
 8007e4a:	d513      	bpl.n	8007e74 <_puts_r+0x50>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	b18b      	cbz	r3, 8007e74 <_puts_r+0x50>
 8007e50:	3e01      	subs	r6, #1
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	60a3      	str	r3, [r4, #8]
 8007e5c:	b9e9      	cbnz	r1, 8007e9a <_puts_r+0x76>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da2e      	bge.n	8007ec0 <_puts_r+0x9c>
 8007e62:	4622      	mov	r2, r4
 8007e64:	210a      	movs	r1, #10
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f8c9 	bl	8007ffe <__swbuf_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d007      	beq.n	8007e80 <_puts_r+0x5c>
 8007e70:	250a      	movs	r5, #10
 8007e72:	e007      	b.n	8007e84 <_puts_r+0x60>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 f8fe 	bl	8008078 <__swsetup_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d0e7      	beq.n	8007e50 <_puts_r+0x2c>
 8007e80:	f04f 35ff 	mov.w	r5, #4294967295
 8007e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e86:	07da      	lsls	r2, r3, #31
 8007e88:	d405      	bmi.n	8007e96 <_puts_r+0x72>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	059b      	lsls	r3, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_puts_r+0x72>
 8007e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e92:	f000 fa6b 	bl	800836c <__retarget_lock_release_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da04      	bge.n	8007ea8 <_puts_r+0x84>
 8007e9e:	69a2      	ldr	r2, [r4, #24]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	dc06      	bgt.n	8007eb2 <_puts_r+0x8e>
 8007ea4:	290a      	cmp	r1, #10
 8007ea6:	d004      	beq.n	8007eb2 <_puts_r+0x8e>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	6022      	str	r2, [r4, #0]
 8007eae:	7019      	strb	r1, [r3, #0]
 8007eb0:	e7cf      	b.n	8007e52 <_puts_r+0x2e>
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 f8a2 	bl	8007ffe <__swbuf_r>
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d1c9      	bne.n	8007e52 <_puts_r+0x2e>
 8007ebe:	e7df      	b.n	8007e80 <_puts_r+0x5c>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	250a      	movs	r5, #10
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	701d      	strb	r5, [r3, #0]
 8007eca:	e7db      	b.n	8007e84 <_puts_r+0x60>

08007ecc <puts>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <puts+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bfa7 	b.w	8007e24 <_puts_r>
 8007ed6:	bf00      	nop
 8007ed8:	20000088 	.word	0x20000088

08007edc <siprintf>:
 8007edc:	b40e      	push	{r1, r2, r3}
 8007ede:	b500      	push	{lr}
 8007ee0:	b09c      	sub	sp, #112	; 0x70
 8007ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ee4:	9002      	str	r0, [sp, #8]
 8007ee6:	9006      	str	r0, [sp, #24]
 8007ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <siprintf+0x38>)
 8007eee:	9107      	str	r1, [sp, #28]
 8007ef0:	9104      	str	r1, [sp, #16]
 8007ef2:	4909      	ldr	r1, [pc, #36]	; (8007f18 <siprintf+0x3c>)
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	a902      	add	r1, sp, #8
 8007f00:	f002 fd06 	bl	800a910 <_svfiprintf_r>
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	b01c      	add	sp, #112	; 0x70
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000088 	.word	0x20000088
 8007f18:	ffff0208 	.word	0xffff0208

08007f1c <siscanf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	b09f      	sub	sp, #124	; 0x7c
 8007f22:	ac21      	add	r4, sp, #132	; 0x84
 8007f24:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007f28:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f2c:	9201      	str	r2, [sp, #4]
 8007f2e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007f32:	9004      	str	r0, [sp, #16]
 8007f34:	9008      	str	r0, [sp, #32]
 8007f36:	f7f8 f99b 	bl	8000270 <strlen>
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <siscanf+0x50>)
 8007f3c:	9005      	str	r0, [sp, #20]
 8007f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8007f40:	930d      	str	r3, [sp, #52]	; 0x34
 8007f42:	480b      	ldr	r0, [pc, #44]	; (8007f70 <siscanf+0x54>)
 8007f44:	9a01      	ldr	r2, [sp, #4]
 8007f46:	6800      	ldr	r0, [r0, #0]
 8007f48:	9403      	str	r4, [sp, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9311      	str	r3, [sp, #68]	; 0x44
 8007f4e:	9316      	str	r3, [sp, #88]	; 0x58
 8007f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f54:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007f58:	a904      	add	r1, sp, #16
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	f002 fe30 	bl	800abc0 <__ssvfiscanf_r>
 8007f60:	b01f      	add	sp, #124	; 0x7c
 8007f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f66:	b003      	add	sp, #12
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	08007f97 	.word	0x08007f97
 8007f70:	20000088 	.word	0x20000088

08007f74 <__sread>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	460c      	mov	r4, r1
 8007f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7c:	f000 f9a6 	bl	80082cc <_read_r>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	bfab      	itete	ge
 8007f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f86:	89a3      	ldrhlt	r3, [r4, #12]
 8007f88:	181b      	addge	r3, r3, r0
 8007f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f8e:	bfac      	ite	ge
 8007f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f92:	81a3      	strhlt	r3, [r4, #12]
 8007f94:	bd10      	pop	{r4, pc}

08007f96 <__seofread>:
 8007f96:	2000      	movs	r0, #0
 8007f98:	4770      	bx	lr

08007f9a <__swrite>:
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	05db      	lsls	r3, r3, #23
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4616      	mov	r6, r2
 8007faa:	d505      	bpl.n	8007fb8 <__swrite+0x1e>
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f000 f978 	bl	80082a8 <_lseek_r>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	4628      	mov	r0, r5
 8007fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	f000 b98f 	b.w	80082f0 <_write_r>

08007fd2 <__sseek>:
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 f965 	bl	80082a8 <_lseek_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	bf15      	itete	ne
 8007fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fee:	81a3      	strheq	r3, [r4, #12]
 8007ff0:	bf18      	it	ne
 8007ff2:	81a3      	strhne	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__sclose>:
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 b945 	b.w	8008288 <_close_r>

08007ffe <__swbuf_r>:
 8007ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008000:	460e      	mov	r6, r1
 8008002:	4614      	mov	r4, r2
 8008004:	4605      	mov	r5, r0
 8008006:	b118      	cbz	r0, 8008010 <__swbuf_r+0x12>
 8008008:	6a03      	ldr	r3, [r0, #32]
 800800a:	b90b      	cbnz	r3, 8008010 <__swbuf_r+0x12>
 800800c:	f7ff fec2 	bl	8007d94 <__sinit>
 8008010:	69a3      	ldr	r3, [r4, #24]
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	071a      	lsls	r2, r3, #28
 8008018:	d525      	bpl.n	8008066 <__swbuf_r+0x68>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	b31b      	cbz	r3, 8008066 <__swbuf_r+0x68>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	1a98      	subs	r0, r3, r2
 8008024:	6963      	ldr	r3, [r4, #20]
 8008026:	b2f6      	uxtb	r6, r6
 8008028:	4283      	cmp	r3, r0
 800802a:	4637      	mov	r7, r6
 800802c:	dc04      	bgt.n	8008038 <__swbuf_r+0x3a>
 800802e:	4621      	mov	r1, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f003 fa55 	bl	800b4e0 <_fflush_r>
 8008036:	b9e0      	cbnz	r0, 8008072 <__swbuf_r+0x74>
 8008038:	68a3      	ldr	r3, [r4, #8]
 800803a:	3b01      	subs	r3, #1
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	6022      	str	r2, [r4, #0]
 8008044:	701e      	strb	r6, [r3, #0]
 8008046:	6962      	ldr	r2, [r4, #20]
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	429a      	cmp	r2, r3
 800804c:	d004      	beq.n	8008058 <__swbuf_r+0x5a>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	07db      	lsls	r3, r3, #31
 8008052:	d506      	bpl.n	8008062 <__swbuf_r+0x64>
 8008054:	2e0a      	cmp	r6, #10
 8008056:	d104      	bne.n	8008062 <__swbuf_r+0x64>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f003 fa40 	bl	800b4e0 <_fflush_r>
 8008060:	b938      	cbnz	r0, 8008072 <__swbuf_r+0x74>
 8008062:	4638      	mov	r0, r7
 8008064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f805 	bl	8008078 <__swsetup_r>
 800806e:	2800      	cmp	r0, #0
 8008070:	d0d5      	beq.n	800801e <__swbuf_r+0x20>
 8008072:	f04f 37ff 	mov.w	r7, #4294967295
 8008076:	e7f4      	b.n	8008062 <__swbuf_r+0x64>

08008078 <__swsetup_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4b2a      	ldr	r3, [pc, #168]	; (8008124 <__swsetup_r+0xac>)
 800807c:	4605      	mov	r5, r0
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	460c      	mov	r4, r1
 8008082:	b118      	cbz	r0, 800808c <__swsetup_r+0x14>
 8008084:	6a03      	ldr	r3, [r0, #32]
 8008086:	b90b      	cbnz	r3, 800808c <__swsetup_r+0x14>
 8008088:	f7ff fe84 	bl	8007d94 <__sinit>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008092:	0718      	lsls	r0, r3, #28
 8008094:	d422      	bmi.n	80080dc <__swsetup_r+0x64>
 8008096:	06d9      	lsls	r1, r3, #27
 8008098:	d407      	bmi.n	80080aa <__swsetup_r+0x32>
 800809a:	2309      	movs	r3, #9
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e034      	b.n	8008114 <__swsetup_r+0x9c>
 80080aa:	0758      	lsls	r0, r3, #29
 80080ac:	d512      	bpl.n	80080d4 <__swsetup_r+0x5c>
 80080ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b0:	b141      	cbz	r1, 80080c4 <__swsetup_r+0x4c>
 80080b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b6:	4299      	cmp	r1, r3
 80080b8:	d002      	beq.n	80080c0 <__swsetup_r+0x48>
 80080ba:	4628      	mov	r0, r5
 80080bc:	f001 f80e 	bl	80090dc <_free_r>
 80080c0:	2300      	movs	r3, #0
 80080c2:	6363      	str	r3, [r4, #52]	; 0x34
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	2300      	movs	r3, #0
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f043 0308 	orr.w	r3, r3, #8
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b94b      	cbnz	r3, 80080f4 <__swsetup_r+0x7c>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ea:	d003      	beq.n	80080f4 <__swsetup_r+0x7c>
 80080ec:	4621      	mov	r1, r4
 80080ee:	4628      	mov	r0, r5
 80080f0:	f003 fa56 	bl	800b5a0 <__smakebuf_r>
 80080f4:	89a0      	ldrh	r0, [r4, #12]
 80080f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080fa:	f010 0301 	ands.w	r3, r0, #1
 80080fe:	d00a      	beq.n	8008116 <__swsetup_r+0x9e>
 8008100:	2300      	movs	r3, #0
 8008102:	60a3      	str	r3, [r4, #8]
 8008104:	6963      	ldr	r3, [r4, #20]
 8008106:	425b      	negs	r3, r3
 8008108:	61a3      	str	r3, [r4, #24]
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	b943      	cbnz	r3, 8008120 <__swsetup_r+0xa8>
 800810e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008112:	d1c4      	bne.n	800809e <__swsetup_r+0x26>
 8008114:	bd38      	pop	{r3, r4, r5, pc}
 8008116:	0781      	lsls	r1, r0, #30
 8008118:	bf58      	it	pl
 800811a:	6963      	ldrpl	r3, [r4, #20]
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	e7f4      	b.n	800810a <__swsetup_r+0x92>
 8008120:	2000      	movs	r0, #0
 8008122:	e7f7      	b.n	8008114 <__swsetup_r+0x9c>
 8008124:	20000088 	.word	0x20000088

08008128 <memset>:
 8008128:	4402      	add	r2, r0
 800812a:	4603      	mov	r3, r0
 800812c:	4293      	cmp	r3, r2
 800812e:	d100      	bne.n	8008132 <memset+0xa>
 8008130:	4770      	bx	lr
 8008132:	f803 1b01 	strb.w	r1, [r3], #1
 8008136:	e7f9      	b.n	800812c <memset+0x4>

08008138 <strchr>:
 8008138:	b2c9      	uxtb	r1, r1
 800813a:	4603      	mov	r3, r0
 800813c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008140:	b11a      	cbz	r2, 800814a <strchr+0x12>
 8008142:	428a      	cmp	r2, r1
 8008144:	d1f9      	bne.n	800813a <strchr+0x2>
 8008146:	4618      	mov	r0, r3
 8008148:	4770      	bx	lr
 800814a:	2900      	cmp	r1, #0
 800814c:	bf18      	it	ne
 800814e:	2300      	movne	r3, #0
 8008150:	e7f9      	b.n	8008146 <strchr+0xe>

08008152 <strncmp>:
 8008152:	b510      	push	{r4, lr}
 8008154:	b16a      	cbz	r2, 8008172 <strncmp+0x20>
 8008156:	3901      	subs	r1, #1
 8008158:	1884      	adds	r4, r0, r2
 800815a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800815e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008162:	429a      	cmp	r2, r3
 8008164:	d103      	bne.n	800816e <strncmp+0x1c>
 8008166:	42a0      	cmp	r0, r4
 8008168:	d001      	beq.n	800816e <strncmp+0x1c>
 800816a:	2a00      	cmp	r2, #0
 800816c:	d1f5      	bne.n	800815a <strncmp+0x8>
 800816e:	1ad0      	subs	r0, r2, r3
 8008170:	bd10      	pop	{r4, pc}
 8008172:	4610      	mov	r0, r2
 8008174:	e7fc      	b.n	8008170 <strncmp+0x1e>

08008176 <strncpy>:
 8008176:	b510      	push	{r4, lr}
 8008178:	3901      	subs	r1, #1
 800817a:	4603      	mov	r3, r0
 800817c:	b132      	cbz	r2, 800818c <strncpy+0x16>
 800817e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008182:	f803 4b01 	strb.w	r4, [r3], #1
 8008186:	3a01      	subs	r2, #1
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f7      	bne.n	800817c <strncpy+0x6>
 800818c:	441a      	add	r2, r3
 800818e:	2100      	movs	r1, #0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <strncpy+0x20>
 8008194:	bd10      	pop	{r4, pc}
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <strncpy+0x1a>

0800819c <strtok>:
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <strtok+0x5c>)
 800819e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081a0:	681e      	ldr	r6, [r3, #0]
 80081a2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80081a4:	4605      	mov	r5, r0
 80081a6:	b9fc      	cbnz	r4, 80081e8 <strtok+0x4c>
 80081a8:	2050      	movs	r0, #80	; 0x50
 80081aa:	9101      	str	r1, [sp, #4]
 80081ac:	f000 ffe2 	bl	8009174 <malloc>
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	6470      	str	r0, [r6, #68]	; 0x44
 80081b4:	4602      	mov	r2, r0
 80081b6:	b920      	cbnz	r0, 80081c2 <strtok+0x26>
 80081b8:	4b10      	ldr	r3, [pc, #64]	; (80081fc <strtok+0x60>)
 80081ba:	4811      	ldr	r0, [pc, #68]	; (8008200 <strtok+0x64>)
 80081bc:	215b      	movs	r1, #91	; 0x5b
 80081be:	f000 f8f3 	bl	80083a8 <__assert_func>
 80081c2:	e9c0 4400 	strd	r4, r4, [r0]
 80081c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80081ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80081ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80081d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80081d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80081da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80081de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80081e2:	6184      	str	r4, [r0, #24]
 80081e4:	7704      	strb	r4, [r0, #28]
 80081e6:	6244      	str	r4, [r0, #36]	; 0x24
 80081e8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80081ea:	2301      	movs	r3, #1
 80081ec:	4628      	mov	r0, r5
 80081ee:	b002      	add	sp, #8
 80081f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081f4:	f000 b806 	b.w	8008204 <__strtok_r>
 80081f8:	20000088 	.word	0x20000088
 80081fc:	0800c840 	.word	0x0800c840
 8008200:	0800c857 	.word	0x0800c857

08008204 <__strtok_r>:
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008206:	b908      	cbnz	r0, 800820c <__strtok_r+0x8>
 8008208:	6810      	ldr	r0, [r2, #0]
 800820a:	b188      	cbz	r0, 8008230 <__strtok_r+0x2c>
 800820c:	4604      	mov	r4, r0
 800820e:	4620      	mov	r0, r4
 8008210:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008214:	460f      	mov	r7, r1
 8008216:	f817 6b01 	ldrb.w	r6, [r7], #1
 800821a:	b91e      	cbnz	r6, 8008224 <__strtok_r+0x20>
 800821c:	b965      	cbnz	r5, 8008238 <__strtok_r+0x34>
 800821e:	6015      	str	r5, [r2, #0]
 8008220:	4628      	mov	r0, r5
 8008222:	e005      	b.n	8008230 <__strtok_r+0x2c>
 8008224:	42b5      	cmp	r5, r6
 8008226:	d1f6      	bne.n	8008216 <__strtok_r+0x12>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f0      	bne.n	800820e <__strtok_r+0xa>
 800822c:	6014      	str	r4, [r2, #0]
 800822e:	7003      	strb	r3, [r0, #0]
 8008230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008232:	461c      	mov	r4, r3
 8008234:	e00c      	b.n	8008250 <__strtok_r+0x4c>
 8008236:	b915      	cbnz	r5, 800823e <__strtok_r+0x3a>
 8008238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800823c:	460e      	mov	r6, r1
 800823e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008242:	42ab      	cmp	r3, r5
 8008244:	d1f7      	bne.n	8008236 <__strtok_r+0x32>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f3      	beq.n	8008232 <__strtok_r+0x2e>
 800824a:	2300      	movs	r3, #0
 800824c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	e7ed      	b.n	8008230 <__strtok_r+0x2c>

08008254 <strstr>:
 8008254:	780a      	ldrb	r2, [r1, #0]
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	b96a      	cbnz	r2, 8008276 <strstr+0x22>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	429a      	cmp	r2, r3
 800825e:	d109      	bne.n	8008274 <strstr+0x20>
 8008260:	460c      	mov	r4, r1
 8008262:	4605      	mov	r5, r0
 8008264:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f6      	beq.n	800825a <strstr+0x6>
 800826c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008270:	429e      	cmp	r6, r3
 8008272:	d0f7      	beq.n	8008264 <strstr+0x10>
 8008274:	3001      	adds	r0, #1
 8008276:	7803      	ldrb	r3, [r0, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1ef      	bne.n	800825c <strstr+0x8>
 800827c:	4618      	mov	r0, r3
 800827e:	e7ec      	b.n	800825a <strstr+0x6>

08008280 <_localeconv_r>:
 8008280:	4800      	ldr	r0, [pc, #0]	; (8008284 <_localeconv_r+0x4>)
 8008282:	4770      	bx	lr
 8008284:	2000017c 	.word	0x2000017c

08008288 <_close_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	; (80082a4 <_close_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7fa fde7 	bl	8002e66 <_close>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_close_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_close_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000d74 	.word	0x20000d74

080082a8 <_lseek_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_lseek_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7fa fdfc 	bl	8002eb4 <_lseek>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_lseek_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_lseek_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000d74 	.word	0x20000d74

080082cc <_read_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_read_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7fa fda6 	bl	8002e2c <_read>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_read_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_read_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000d74 	.word	0x20000d74

080082f0 <_write_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_write_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7fa f932 	bl	8002568 <_write>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_write_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_write_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000d74 	.word	0x20000d74

08008314 <__errno>:
 8008314:	4b01      	ldr	r3, [pc, #4]	; (800831c <__errno+0x8>)
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000088 	.word	0x20000088

08008320 <__libc_init_array>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	4d0d      	ldr	r5, [pc, #52]	; (8008358 <__libc_init_array+0x38>)
 8008324:	4c0d      	ldr	r4, [pc, #52]	; (800835c <__libc_init_array+0x3c>)
 8008326:	1b64      	subs	r4, r4, r5
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	2600      	movs	r6, #0
 800832c:	42a6      	cmp	r6, r4
 800832e:	d109      	bne.n	8008344 <__libc_init_array+0x24>
 8008330:	4d0b      	ldr	r5, [pc, #44]	; (8008360 <__libc_init_array+0x40>)
 8008332:	4c0c      	ldr	r4, [pc, #48]	; (8008364 <__libc_init_array+0x44>)
 8008334:	f003 feba 	bl	800c0ac <_init>
 8008338:	1b64      	subs	r4, r4, r5
 800833a:	10a4      	asrs	r4, r4, #2
 800833c:	2600      	movs	r6, #0
 800833e:	42a6      	cmp	r6, r4
 8008340:	d105      	bne.n	800834e <__libc_init_array+0x2e>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f855 3b04 	ldr.w	r3, [r5], #4
 8008348:	4798      	blx	r3
 800834a:	3601      	adds	r6, #1
 800834c:	e7ee      	b.n	800832c <__libc_init_array+0xc>
 800834e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008352:	4798      	blx	r3
 8008354:	3601      	adds	r6, #1
 8008356:	e7f2      	b.n	800833e <__libc_init_array+0x1e>
 8008358:	0800cbac 	.word	0x0800cbac
 800835c:	0800cbac 	.word	0x0800cbac
 8008360:	0800cbac 	.word	0x0800cbac
 8008364:	0800cbb0 	.word	0x0800cbb0

08008368 <__retarget_lock_init_recursive>:
 8008368:	4770      	bx	lr

0800836a <__retarget_lock_acquire_recursive>:
 800836a:	4770      	bx	lr

0800836c <__retarget_lock_release_recursive>:
 800836c:	4770      	bx	lr

0800836e <strcpy>:
 800836e:	4603      	mov	r3, r0
 8008370:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008374:	f803 2b01 	strb.w	r2, [r3], #1
 8008378:	2a00      	cmp	r2, #0
 800837a:	d1f9      	bne.n	8008370 <strcpy+0x2>
 800837c:	4770      	bx	lr

0800837e <memcpy>:
 800837e:	440a      	add	r2, r1
 8008380:	4291      	cmp	r1, r2
 8008382:	f100 33ff 	add.w	r3, r0, #4294967295
 8008386:	d100      	bne.n	800838a <memcpy+0xc>
 8008388:	4770      	bx	lr
 800838a:	b510      	push	{r4, lr}
 800838c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008394:	4291      	cmp	r1, r2
 8008396:	d1f9      	bne.n	800838c <memcpy+0xe>
 8008398:	bd10      	pop	{r4, pc}
	...

0800839c <nanf>:
 800839c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a4 <nanf+0x8>
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	7fc00000 	.word	0x7fc00000

080083a8 <__assert_func>:
 80083a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083aa:	4614      	mov	r4, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <__assert_func+0x2c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4605      	mov	r5, r0
 80083b4:	68d8      	ldr	r0, [r3, #12]
 80083b6:	b14c      	cbz	r4, 80083cc <__assert_func+0x24>
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <__assert_func+0x30>)
 80083ba:	9100      	str	r1, [sp, #0]
 80083bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083c0:	4906      	ldr	r1, [pc, #24]	; (80083dc <__assert_func+0x34>)
 80083c2:	462b      	mov	r3, r5
 80083c4:	f003 f8b4 	bl	800b530 <fiprintf>
 80083c8:	f003 f9ee 	bl	800b7a8 <abort>
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <__assert_func+0x38>)
 80083ce:	461c      	mov	r4, r3
 80083d0:	e7f3      	b.n	80083ba <__assert_func+0x12>
 80083d2:	bf00      	nop
 80083d4:	20000088 	.word	0x20000088
 80083d8:	0800c8b1 	.word	0x0800c8b1
 80083dc:	0800c8be 	.word	0x0800c8be
 80083e0:	0800c8ec 	.word	0x0800c8ec

080083e4 <quorem>:
 80083e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	6903      	ldr	r3, [r0, #16]
 80083ea:	690c      	ldr	r4, [r1, #16]
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	4607      	mov	r7, r0
 80083f0:	db7e      	blt.n	80084f0 <quorem+0x10c>
 80083f2:	3c01      	subs	r4, #1
 80083f4:	f101 0814 	add.w	r8, r1, #20
 80083f8:	f100 0514 	add.w	r5, r0, #20
 80083fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800840a:	3301      	adds	r3, #1
 800840c:	429a      	cmp	r2, r3
 800840e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008412:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008416:	fbb2 f6f3 	udiv	r6, r2, r3
 800841a:	d331      	bcc.n	8008480 <quorem+0x9c>
 800841c:	f04f 0e00 	mov.w	lr, #0
 8008420:	4640      	mov	r0, r8
 8008422:	46ac      	mov	ip, r5
 8008424:	46f2      	mov	sl, lr
 8008426:	f850 2b04 	ldr.w	r2, [r0], #4
 800842a:	b293      	uxth	r3, r2
 800842c:	fb06 e303 	mla	r3, r6, r3, lr
 8008430:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008434:	0c1a      	lsrs	r2, r3, #16
 8008436:	b29b      	uxth	r3, r3
 8008438:	ebaa 0303 	sub.w	r3, sl, r3
 800843c:	f8dc a000 	ldr.w	sl, [ip]
 8008440:	fa13 f38a 	uxtah	r3, r3, sl
 8008444:	fb06 220e 	mla	r2, r6, lr, r2
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	9b00      	ldr	r3, [sp, #0]
 800844c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008450:	b292      	uxth	r2, r2
 8008452:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008456:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800845a:	f8bd 3000 	ldrh.w	r3, [sp]
 800845e:	4581      	cmp	r9, r0
 8008460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008464:	f84c 3b04 	str.w	r3, [ip], #4
 8008468:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800846c:	d2db      	bcs.n	8008426 <quorem+0x42>
 800846e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008472:	b92b      	cbnz	r3, 8008480 <quorem+0x9c>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	3b04      	subs	r3, #4
 8008478:	429d      	cmp	r5, r3
 800847a:	461a      	mov	r2, r3
 800847c:	d32c      	bcc.n	80084d8 <quorem+0xf4>
 800847e:	613c      	str	r4, [r7, #16]
 8008480:	4638      	mov	r0, r7
 8008482:	f001 f9f1 	bl	8009868 <__mcmp>
 8008486:	2800      	cmp	r0, #0
 8008488:	db22      	blt.n	80084d0 <quorem+0xec>
 800848a:	3601      	adds	r6, #1
 800848c:	4629      	mov	r1, r5
 800848e:	2000      	movs	r0, #0
 8008490:	f858 2b04 	ldr.w	r2, [r8], #4
 8008494:	f8d1 c000 	ldr.w	ip, [r1]
 8008498:	b293      	uxth	r3, r2
 800849a:	1ac3      	subs	r3, r0, r3
 800849c:	0c12      	lsrs	r2, r2, #16
 800849e:	fa13 f38c 	uxtah	r3, r3, ip
 80084a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80084a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b0:	45c1      	cmp	r9, r8
 80084b2:	f841 3b04 	str.w	r3, [r1], #4
 80084b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084ba:	d2e9      	bcs.n	8008490 <quorem+0xac>
 80084bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084c4:	b922      	cbnz	r2, 80084d0 <quorem+0xec>
 80084c6:	3b04      	subs	r3, #4
 80084c8:	429d      	cmp	r5, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	d30a      	bcc.n	80084e4 <quorem+0x100>
 80084ce:	613c      	str	r4, [r7, #16]
 80084d0:	4630      	mov	r0, r6
 80084d2:	b003      	add	sp, #12
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	3b04      	subs	r3, #4
 80084dc:	2a00      	cmp	r2, #0
 80084de:	d1ce      	bne.n	800847e <quorem+0x9a>
 80084e0:	3c01      	subs	r4, #1
 80084e2:	e7c9      	b.n	8008478 <quorem+0x94>
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	3b04      	subs	r3, #4
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	d1f0      	bne.n	80084ce <quorem+0xea>
 80084ec:	3c01      	subs	r4, #1
 80084ee:	e7eb      	b.n	80084c8 <quorem+0xe4>
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7ee      	b.n	80084d2 <quorem+0xee>
 80084f4:	0000      	movs	r0, r0
	...

080084f8 <_dtoa_r>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	ed2d 8b04 	vpush	{d8-d9}
 8008500:	69c5      	ldr	r5, [r0, #28]
 8008502:	b093      	sub	sp, #76	; 0x4c
 8008504:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008508:	ec57 6b10 	vmov	r6, r7, d0
 800850c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008510:	9107      	str	r1, [sp, #28]
 8008512:	4604      	mov	r4, r0
 8008514:	920a      	str	r2, [sp, #40]	; 0x28
 8008516:	930d      	str	r3, [sp, #52]	; 0x34
 8008518:	b975      	cbnz	r5, 8008538 <_dtoa_r+0x40>
 800851a:	2010      	movs	r0, #16
 800851c:	f000 fe2a 	bl	8009174 <malloc>
 8008520:	4602      	mov	r2, r0
 8008522:	61e0      	str	r0, [r4, #28]
 8008524:	b920      	cbnz	r0, 8008530 <_dtoa_r+0x38>
 8008526:	4bae      	ldr	r3, [pc, #696]	; (80087e0 <_dtoa_r+0x2e8>)
 8008528:	21ef      	movs	r1, #239	; 0xef
 800852a:	48ae      	ldr	r0, [pc, #696]	; (80087e4 <_dtoa_r+0x2ec>)
 800852c:	f7ff ff3c 	bl	80083a8 <__assert_func>
 8008530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008534:	6005      	str	r5, [r0, #0]
 8008536:	60c5      	str	r5, [r0, #12]
 8008538:	69e3      	ldr	r3, [r4, #28]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	b151      	cbz	r1, 8008554 <_dtoa_r+0x5c>
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	604a      	str	r2, [r1, #4]
 8008542:	2301      	movs	r3, #1
 8008544:	4093      	lsls	r3, r2
 8008546:	608b      	str	r3, [r1, #8]
 8008548:	4620      	mov	r0, r4
 800854a:	f000 ff07 	bl	800935c <_Bfree>
 800854e:	69e3      	ldr	r3, [r4, #28]
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	1e3b      	subs	r3, r7, #0
 8008556:	bfbb      	ittet	lt
 8008558:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800855c:	9303      	strlt	r3, [sp, #12]
 800855e:	2300      	movge	r3, #0
 8008560:	2201      	movlt	r2, #1
 8008562:	bfac      	ite	ge
 8008564:	f8c8 3000 	strge.w	r3, [r8]
 8008568:	f8c8 2000 	strlt.w	r2, [r8]
 800856c:	4b9e      	ldr	r3, [pc, #632]	; (80087e8 <_dtoa_r+0x2f0>)
 800856e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008572:	ea33 0308 	bics.w	r3, r3, r8
 8008576:	d11b      	bne.n	80085b0 <_dtoa_r+0xb8>
 8008578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800857a:	f242 730f 	movw	r3, #9999	; 0x270f
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008584:	4333      	orrs	r3, r6
 8008586:	f000 8593 	beq.w	80090b0 <_dtoa_r+0xbb8>
 800858a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800858c:	b963      	cbnz	r3, 80085a8 <_dtoa_r+0xb0>
 800858e:	4b97      	ldr	r3, [pc, #604]	; (80087ec <_dtoa_r+0x2f4>)
 8008590:	e027      	b.n	80085e2 <_dtoa_r+0xea>
 8008592:	4b97      	ldr	r3, [pc, #604]	; (80087f0 <_dtoa_r+0x2f8>)
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	9800      	ldr	r0, [sp, #0]
 800859e:	b013      	add	sp, #76	; 0x4c
 80085a0:	ecbd 8b04 	vpop	{d8-d9}
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	4b90      	ldr	r3, [pc, #576]	; (80087ec <_dtoa_r+0x2f4>)
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	3303      	adds	r3, #3
 80085ae:	e7f3      	b.n	8008598 <_dtoa_r+0xa0>
 80085b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	ec51 0b17 	vmov	r0, r1, d7
 80085ba:	eeb0 8a47 	vmov.f32	s16, s14
 80085be:	eef0 8a67 	vmov.f32	s17, s15
 80085c2:	2300      	movs	r3, #0
 80085c4:	f7f8 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80085c8:	4681      	mov	r9, r0
 80085ca:	b160      	cbz	r0, 80085e6 <_dtoa_r+0xee>
 80085cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ce:	2301      	movs	r3, #1
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8568 	beq.w	80090aa <_dtoa_r+0xbb2>
 80085da:	4b86      	ldr	r3, [pc, #536]	; (80087f4 <_dtoa_r+0x2fc>)
 80085dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	e7da      	b.n	800859c <_dtoa_r+0xa4>
 80085e6:	aa10      	add	r2, sp, #64	; 0x40
 80085e8:	a911      	add	r1, sp, #68	; 0x44
 80085ea:	4620      	mov	r0, r4
 80085ec:	eeb0 0a48 	vmov.f32	s0, s16
 80085f0:	eef0 0a68 	vmov.f32	s1, s17
 80085f4:	f001 fa4e 	bl	8009a94 <__d2b>
 80085f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085fc:	4682      	mov	sl, r0
 80085fe:	2d00      	cmp	r5, #0
 8008600:	d07f      	beq.n	8008702 <_dtoa_r+0x20a>
 8008602:	ee18 3a90 	vmov	r3, s17
 8008606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800860a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800860e:	ec51 0b18 	vmov	r0, r1, d8
 8008612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800861a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800861e:	4619      	mov	r1, r3
 8008620:	2200      	movs	r2, #0
 8008622:	4b75      	ldr	r3, [pc, #468]	; (80087f8 <_dtoa_r+0x300>)
 8008624:	f7f7 fe30 	bl	8000288 <__aeabi_dsub>
 8008628:	a367      	add	r3, pc, #412	; (adr r3, 80087c8 <_dtoa_r+0x2d0>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	a367      	add	r3, pc, #412	; (adr r3, 80087d0 <_dtoa_r+0x2d8>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe28 	bl	800028c <__adddf3>
 800863c:	4606      	mov	r6, r0
 800863e:	4628      	mov	r0, r5
 8008640:	460f      	mov	r7, r1
 8008642:	f7f7 ff6f 	bl	8000524 <__aeabi_i2d>
 8008646:	a364      	add	r3, pc, #400	; (adr r3, 80087d8 <_dtoa_r+0x2e0>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f7 fe18 	bl	800028c <__adddf3>
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	f7f8 fa7a 	bl	8000b58 <__aeabi_d2iz>
 8008664:	2200      	movs	r2, #0
 8008666:	4683      	mov	fp, r0
 8008668:	2300      	movs	r3, #0
 800866a:	4630      	mov	r0, r6
 800866c:	4639      	mov	r1, r7
 800866e:	f7f8 fa35 	bl	8000adc <__aeabi_dcmplt>
 8008672:	b148      	cbz	r0, 8008688 <_dtoa_r+0x190>
 8008674:	4658      	mov	r0, fp
 8008676:	f7f7 ff55 	bl	8000524 <__aeabi_i2d>
 800867a:	4632      	mov	r2, r6
 800867c:	463b      	mov	r3, r7
 800867e:	f7f8 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008682:	b908      	cbnz	r0, 8008688 <_dtoa_r+0x190>
 8008684:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008688:	f1bb 0f16 	cmp.w	fp, #22
 800868c:	d857      	bhi.n	800873e <_dtoa_r+0x246>
 800868e:	4b5b      	ldr	r3, [pc, #364]	; (80087fc <_dtoa_r+0x304>)
 8008690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	ec51 0b18 	vmov	r0, r1, d8
 800869c:	f7f8 fa1e 	bl	8000adc <__aeabi_dcmplt>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d04e      	beq.n	8008742 <_dtoa_r+0x24a>
 80086a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086a8:	2300      	movs	r3, #0
 80086aa:	930c      	str	r3, [sp, #48]	; 0x30
 80086ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ae:	1b5b      	subs	r3, r3, r5
 80086b0:	1e5a      	subs	r2, r3, #1
 80086b2:	bf45      	ittet	mi
 80086b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80086b8:	9305      	strmi	r3, [sp, #20]
 80086ba:	2300      	movpl	r3, #0
 80086bc:	2300      	movmi	r3, #0
 80086be:	9206      	str	r2, [sp, #24]
 80086c0:	bf54      	ite	pl
 80086c2:	9305      	strpl	r3, [sp, #20]
 80086c4:	9306      	strmi	r3, [sp, #24]
 80086c6:	f1bb 0f00 	cmp.w	fp, #0
 80086ca:	db3c      	blt.n	8008746 <_dtoa_r+0x24e>
 80086cc:	9b06      	ldr	r3, [sp, #24]
 80086ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086d2:	445b      	add	r3, fp
 80086d4:	9306      	str	r3, [sp, #24]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9308      	str	r3, [sp, #32]
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d868      	bhi.n	80087b2 <_dtoa_r+0x2ba>
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	bfc4      	itt	gt
 80086e4:	3b04      	subgt	r3, #4
 80086e6:	9307      	strgt	r3, [sp, #28]
 80086e8:	9b07      	ldr	r3, [sp, #28]
 80086ea:	f1a3 0302 	sub.w	r3, r3, #2
 80086ee:	bfcc      	ite	gt
 80086f0:	2500      	movgt	r5, #0
 80086f2:	2501      	movle	r5, #1
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	f200 8085 	bhi.w	8008804 <_dtoa_r+0x30c>
 80086fa:	e8df f003 	tbb	[pc, r3]
 80086fe:	3b2e      	.short	0x3b2e
 8008700:	5839      	.short	0x5839
 8008702:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008706:	441d      	add	r5, r3
 8008708:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800870c:	2b20      	cmp	r3, #32
 800870e:	bfc1      	itttt	gt
 8008710:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008714:	fa08 f803 	lslgt.w	r8, r8, r3
 8008718:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800871c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008720:	bfd6      	itet	le
 8008722:	f1c3 0320 	rsble	r3, r3, #32
 8008726:	ea48 0003 	orrgt.w	r0, r8, r3
 800872a:	fa06 f003 	lslle.w	r0, r6, r3
 800872e:	f7f7 fee9 	bl	8000504 <__aeabi_ui2d>
 8008732:	2201      	movs	r2, #1
 8008734:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008738:	3d01      	subs	r5, #1
 800873a:	920e      	str	r2, [sp, #56]	; 0x38
 800873c:	e76f      	b.n	800861e <_dtoa_r+0x126>
 800873e:	2301      	movs	r3, #1
 8008740:	e7b3      	b.n	80086aa <_dtoa_r+0x1b2>
 8008742:	900c      	str	r0, [sp, #48]	; 0x30
 8008744:	e7b2      	b.n	80086ac <_dtoa_r+0x1b4>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	eba3 030b 	sub.w	r3, r3, fp
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	f1cb 0300 	rsb	r3, fp, #0
 8008752:	9308      	str	r3, [sp, #32]
 8008754:	2300      	movs	r3, #0
 8008756:	930b      	str	r3, [sp, #44]	; 0x2c
 8008758:	e7bf      	b.n	80086da <_dtoa_r+0x1e2>
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	dc52      	bgt.n	800880a <_dtoa_r+0x312>
 8008764:	2301      	movs	r3, #1
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	461a      	mov	r2, r3
 800876c:	920a      	str	r2, [sp, #40]	; 0x28
 800876e:	e00b      	b.n	8008788 <_dtoa_r+0x290>
 8008770:	2301      	movs	r3, #1
 8008772:	e7f3      	b.n	800875c <_dtoa_r+0x264>
 8008774:	2300      	movs	r3, #0
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	445b      	add	r3, fp
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	3301      	adds	r3, #1
 8008780:	2b01      	cmp	r3, #1
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	bfb8      	it	lt
 8008786:	2301      	movlt	r3, #1
 8008788:	69e0      	ldr	r0, [r4, #28]
 800878a:	2100      	movs	r1, #0
 800878c:	2204      	movs	r2, #4
 800878e:	f102 0614 	add.w	r6, r2, #20
 8008792:	429e      	cmp	r6, r3
 8008794:	d93d      	bls.n	8008812 <_dtoa_r+0x31a>
 8008796:	6041      	str	r1, [r0, #4]
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fd9f 	bl	80092dc <_Balloc>
 800879e:	9000      	str	r0, [sp, #0]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d139      	bne.n	8008818 <_dtoa_r+0x320>
 80087a4:	4b16      	ldr	r3, [pc, #88]	; (8008800 <_dtoa_r+0x308>)
 80087a6:	4602      	mov	r2, r0
 80087a8:	f240 11af 	movw	r1, #431	; 0x1af
 80087ac:	e6bd      	b.n	800852a <_dtoa_r+0x32>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7e1      	b.n	8008776 <_dtoa_r+0x27e>
 80087b2:	2501      	movs	r5, #1
 80087b4:	2300      	movs	r3, #0
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	9509      	str	r5, [sp, #36]	; 0x24
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	2200      	movs	r2, #0
 80087c4:	2312      	movs	r3, #18
 80087c6:	e7d1      	b.n	800876c <_dtoa_r+0x274>
 80087c8:	636f4361 	.word	0x636f4361
 80087cc:	3fd287a7 	.word	0x3fd287a7
 80087d0:	8b60c8b3 	.word	0x8b60c8b3
 80087d4:	3fc68a28 	.word	0x3fc68a28
 80087d8:	509f79fb 	.word	0x509f79fb
 80087dc:	3fd34413 	.word	0x3fd34413
 80087e0:	0800c840 	.word	0x0800c840
 80087e4:	0800c8fa 	.word	0x0800c8fa
 80087e8:	7ff00000 	.word	0x7ff00000
 80087ec:	0800c8f6 	.word	0x0800c8f6
 80087f0:	0800c8ed 	.word	0x0800c8ed
 80087f4:	0800cb38 	.word	0x0800cb38
 80087f8:	3ff80000 	.word	0x3ff80000
 80087fc:	0800c9e8 	.word	0x0800c9e8
 8008800:	0800c952 	.word	0x0800c952
 8008804:	2301      	movs	r3, #1
 8008806:	9309      	str	r3, [sp, #36]	; 0x24
 8008808:	e7d7      	b.n	80087ba <_dtoa_r+0x2c2>
 800880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	e7ba      	b.n	8008788 <_dtoa_r+0x290>
 8008812:	3101      	adds	r1, #1
 8008814:	0052      	lsls	r2, r2, #1
 8008816:	e7ba      	b.n	800878e <_dtoa_r+0x296>
 8008818:	69e3      	ldr	r3, [r4, #28]
 800881a:	9a00      	ldr	r2, [sp, #0]
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	2b0e      	cmp	r3, #14
 8008822:	f200 80a8 	bhi.w	8008976 <_dtoa_r+0x47e>
 8008826:	2d00      	cmp	r5, #0
 8008828:	f000 80a5 	beq.w	8008976 <_dtoa_r+0x47e>
 800882c:	f1bb 0f00 	cmp.w	fp, #0
 8008830:	dd38      	ble.n	80088a4 <_dtoa_r+0x3ac>
 8008832:	4bc0      	ldr	r3, [pc, #768]	; (8008b34 <_dtoa_r+0x63c>)
 8008834:	f00b 020f 	and.w	r2, fp, #15
 8008838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800883c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008840:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008844:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008848:	d019      	beq.n	800887e <_dtoa_r+0x386>
 800884a:	4bbb      	ldr	r3, [pc, #748]	; (8008b38 <_dtoa_r+0x640>)
 800884c:	ec51 0b18 	vmov	r0, r1, d8
 8008850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008854:	f7f7 fffa 	bl	800084c <__aeabi_ddiv>
 8008858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800885c:	f008 080f 	and.w	r8, r8, #15
 8008860:	2503      	movs	r5, #3
 8008862:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008b38 <_dtoa_r+0x640>
 8008866:	f1b8 0f00 	cmp.w	r8, #0
 800886a:	d10a      	bne.n	8008882 <_dtoa_r+0x38a>
 800886c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	f7f7 ffea 	bl	800084c <__aeabi_ddiv>
 8008878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800887c:	e02b      	b.n	80088d6 <_dtoa_r+0x3de>
 800887e:	2502      	movs	r5, #2
 8008880:	e7ef      	b.n	8008862 <_dtoa_r+0x36a>
 8008882:	f018 0f01 	tst.w	r8, #1
 8008886:	d008      	beq.n	800889a <_dtoa_r+0x3a2>
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008890:	f7f7 feb2 	bl	80005f8 <__aeabi_dmul>
 8008894:	3501      	adds	r5, #1
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800889e:	f109 0908 	add.w	r9, r9, #8
 80088a2:	e7e0      	b.n	8008866 <_dtoa_r+0x36e>
 80088a4:	f000 809f 	beq.w	80089e6 <_dtoa_r+0x4ee>
 80088a8:	f1cb 0600 	rsb	r6, fp, #0
 80088ac:	4ba1      	ldr	r3, [pc, #644]	; (8008b34 <_dtoa_r+0x63c>)
 80088ae:	4fa2      	ldr	r7, [pc, #648]	; (8008b38 <_dtoa_r+0x640>)
 80088b0:	f006 020f 	and.w	r2, r6, #15
 80088b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	ec51 0b18 	vmov	r0, r1, d8
 80088c0:	f7f7 fe9a 	bl	80005f8 <__aeabi_dmul>
 80088c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c8:	1136      	asrs	r6, r6, #4
 80088ca:	2300      	movs	r3, #0
 80088cc:	2502      	movs	r5, #2
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d17e      	bne.n	80089d0 <_dtoa_r+0x4d8>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1d0      	bne.n	8008878 <_dtoa_r+0x380>
 80088d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8084 	beq.w	80089ea <_dtoa_r+0x4f2>
 80088e2:	4b96      	ldr	r3, [pc, #600]	; (8008b3c <_dtoa_r+0x644>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f8 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d07b      	beq.n	80089ea <_dtoa_r+0x4f2>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d078      	beq.n	80089ea <_dtoa_r+0x4f2>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd39      	ble.n	8008972 <_dtoa_r+0x47a>
 80088fe:	4b90      	ldr	r3, [pc, #576]	; (8008b40 <_dtoa_r+0x648>)
 8008900:	2200      	movs	r2, #0
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fe77 	bl	80005f8 <__aeabi_dmul>
 800890a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800890e:	9e01      	ldr	r6, [sp, #4]
 8008910:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008914:	3501      	adds	r5, #1
 8008916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800891a:	4628      	mov	r0, r5
 800891c:	f7f7 fe02 	bl	8000524 <__aeabi_i2d>
 8008920:	4642      	mov	r2, r8
 8008922:	464b      	mov	r3, r9
 8008924:	f7f7 fe68 	bl	80005f8 <__aeabi_dmul>
 8008928:	4b86      	ldr	r3, [pc, #536]	; (8008b44 <_dtoa_r+0x64c>)
 800892a:	2200      	movs	r2, #0
 800892c:	f7f7 fcae 	bl	800028c <__adddf3>
 8008930:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008938:	9303      	str	r3, [sp, #12]
 800893a:	2e00      	cmp	r6, #0
 800893c:	d158      	bne.n	80089f0 <_dtoa_r+0x4f8>
 800893e:	4b82      	ldr	r3, [pc, #520]	; (8008b48 <_dtoa_r+0x650>)
 8008940:	2200      	movs	r2, #0
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f7 fc9f 	bl	8000288 <__aeabi_dsub>
 800894a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800894e:	4680      	mov	r8, r0
 8008950:	4689      	mov	r9, r1
 8008952:	f7f8 f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f040 8296 	bne.w	8008e88 <_dtoa_r+0x990>
 800895c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008960:	4640      	mov	r0, r8
 8008962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008966:	4649      	mov	r1, r9
 8008968:	f7f8 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800896c:	2800      	cmp	r0, #0
 800896e:	f040 8289 	bne.w	8008e84 <_dtoa_r+0x98c>
 8008972:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008978:	2b00      	cmp	r3, #0
 800897a:	f2c0 814e 	blt.w	8008c1a <_dtoa_r+0x722>
 800897e:	f1bb 0f0e 	cmp.w	fp, #14
 8008982:	f300 814a 	bgt.w	8008c1a <_dtoa_r+0x722>
 8008986:	4b6b      	ldr	r3, [pc, #428]	; (8008b34 <_dtoa_r+0x63c>)
 8008988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800898c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	f280 80dc 	bge.w	8008b50 <_dtoa_r+0x658>
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f300 80d8 	bgt.w	8008b50 <_dtoa_r+0x658>
 80089a0:	f040 826f 	bne.w	8008e82 <_dtoa_r+0x98a>
 80089a4:	4b68      	ldr	r3, [pc, #416]	; (8008b48 <_dtoa_r+0x650>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	f7f7 fe24 	bl	80005f8 <__aeabi_dmul>
 80089b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b4:	f7f8 f8a6 	bl	8000b04 <__aeabi_dcmpge>
 80089b8:	9e04      	ldr	r6, [sp, #16]
 80089ba:	4637      	mov	r7, r6
 80089bc:	2800      	cmp	r0, #0
 80089be:	f040 8245 	bne.w	8008e4c <_dtoa_r+0x954>
 80089c2:	9d00      	ldr	r5, [sp, #0]
 80089c4:	2331      	movs	r3, #49	; 0x31
 80089c6:	f805 3b01 	strb.w	r3, [r5], #1
 80089ca:	f10b 0b01 	add.w	fp, fp, #1
 80089ce:	e241      	b.n	8008e54 <_dtoa_r+0x95c>
 80089d0:	07f2      	lsls	r2, r6, #31
 80089d2:	d505      	bpl.n	80089e0 <_dtoa_r+0x4e8>
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	f7f7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80089dc:	3501      	adds	r5, #1
 80089de:	2301      	movs	r3, #1
 80089e0:	1076      	asrs	r6, r6, #1
 80089e2:	3708      	adds	r7, #8
 80089e4:	e773      	b.n	80088ce <_dtoa_r+0x3d6>
 80089e6:	2502      	movs	r5, #2
 80089e8:	e775      	b.n	80088d6 <_dtoa_r+0x3de>
 80089ea:	9e04      	ldr	r6, [sp, #16]
 80089ec:	465f      	mov	r7, fp
 80089ee:	e792      	b.n	8008916 <_dtoa_r+0x41e>
 80089f0:	9900      	ldr	r1, [sp, #0]
 80089f2:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <_dtoa_r+0x63c>)
 80089f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089f8:	4431      	add	r1, r6
 80089fa:	9102      	str	r1, [sp, #8]
 80089fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089fe:	eeb0 9a47 	vmov.f32	s18, s14
 8008a02:	eef0 9a67 	vmov.f32	s19, s15
 8008a06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d044      	beq.n	8008a9c <_dtoa_r+0x5a4>
 8008a12:	494e      	ldr	r1, [pc, #312]	; (8008b4c <_dtoa_r+0x654>)
 8008a14:	2000      	movs	r0, #0
 8008a16:	f7f7 ff19 	bl	800084c <__aeabi_ddiv>
 8008a1a:	ec53 2b19 	vmov	r2, r3, d9
 8008a1e:	f7f7 fc33 	bl	8000288 <__aeabi_dsub>
 8008a22:	9d00      	ldr	r5, [sp, #0]
 8008a24:	ec41 0b19 	vmov	d9, r0, r1
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7f8 f894 	bl	8000b58 <__aeabi_d2iz>
 8008a30:	4606      	mov	r6, r0
 8008a32:	f7f7 fd77 	bl	8000524 <__aeabi_i2d>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	3630      	adds	r6, #48	; 0x30
 8008a44:	f805 6b01 	strb.w	r6, [r5], #1
 8008a48:	ec53 2b19 	vmov	r2, r3, d9
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	f7f8 f844 	bl	8000adc <__aeabi_dcmplt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d164      	bne.n	8008b22 <_dtoa_r+0x62a>
 8008a58:	4642      	mov	r2, r8
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	4937      	ldr	r1, [pc, #220]	; (8008b3c <_dtoa_r+0x644>)
 8008a5e:	2000      	movs	r0, #0
 8008a60:	f7f7 fc12 	bl	8000288 <__aeabi_dsub>
 8008a64:	ec53 2b19 	vmov	r2, r3, d9
 8008a68:	f7f8 f838 	bl	8000adc <__aeabi_dcmplt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f040 80b6 	bne.w	8008bde <_dtoa_r+0x6e6>
 8008a72:	9b02      	ldr	r3, [sp, #8]
 8008a74:	429d      	cmp	r5, r3
 8008a76:	f43f af7c 	beq.w	8008972 <_dtoa_r+0x47a>
 8008a7a:	4b31      	ldr	r3, [pc, #196]	; (8008b40 <_dtoa_r+0x648>)
 8008a7c:	ec51 0b19 	vmov	r0, r1, d9
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7f7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8008a86:	4b2e      	ldr	r3, [pc, #184]	; (8008b40 <_dtoa_r+0x648>)
 8008a88:	ec41 0b19 	vmov	d9, r0, r1
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f7 fdb1 	bl	80005f8 <__aeabi_dmul>
 8008a96:	4680      	mov	r8, r0
 8008a98:	4689      	mov	r9, r1
 8008a9a:	e7c5      	b.n	8008a28 <_dtoa_r+0x530>
 8008a9c:	ec51 0b17 	vmov	r0, r1, d7
 8008aa0:	f7f7 fdaa 	bl	80005f8 <__aeabi_dmul>
 8008aa4:	9b02      	ldr	r3, [sp, #8]
 8008aa6:	9d00      	ldr	r5, [sp, #0]
 8008aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aaa:	ec41 0b19 	vmov	d9, r0, r1
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	f7f8 f851 	bl	8000b58 <__aeabi_d2iz>
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	f7f7 fd34 	bl	8000524 <__aeabi_i2d>
 8008abc:	3630      	adds	r6, #48	; 0x30
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	f7f7 fbdf 	bl	8000288 <__aeabi_dsub>
 8008aca:	f805 6b01 	strb.w	r6, [r5], #1
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	429d      	cmp	r5, r3
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4689      	mov	r9, r1
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	d124      	bne.n	8008b26 <_dtoa_r+0x62e>
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <_dtoa_r+0x654>)
 8008ade:	ec51 0b19 	vmov	r0, r1, d9
 8008ae2:	f7f7 fbd3 	bl	800028c <__adddf3>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f8 f813 	bl	8000b18 <__aeabi_dcmpgt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d173      	bne.n	8008bde <_dtoa_r+0x6e6>
 8008af6:	ec53 2b19 	vmov	r2, r3, d9
 8008afa:	4914      	ldr	r1, [pc, #80]	; (8008b4c <_dtoa_r+0x654>)
 8008afc:	2000      	movs	r0, #0
 8008afe:	f7f7 fbc3 	bl	8000288 <__aeabi_dsub>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f43f af2f 	beq.w	8008972 <_dtoa_r+0x47a>
 8008b14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b16:	1e6b      	subs	r3, r5, #1
 8008b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b1e:	2b30      	cmp	r3, #48	; 0x30
 8008b20:	d0f8      	beq.n	8008b14 <_dtoa_r+0x61c>
 8008b22:	46bb      	mov	fp, r7
 8008b24:	e04a      	b.n	8008bbc <_dtoa_r+0x6c4>
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <_dtoa_r+0x648>)
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	e7bd      	b.n	8008aae <_dtoa_r+0x5b6>
 8008b32:	bf00      	nop
 8008b34:	0800c9e8 	.word	0x0800c9e8
 8008b38:	0800c9c0 	.word	0x0800c9c0
 8008b3c:	3ff00000 	.word	0x3ff00000
 8008b40:	40240000 	.word	0x40240000
 8008b44:	401c0000 	.word	0x401c0000
 8008b48:	40140000 	.word	0x40140000
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b54:	9d00      	ldr	r5, [sp, #0]
 8008b56:	4642      	mov	r2, r8
 8008b58:	464b      	mov	r3, r9
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 fe75 	bl	800084c <__aeabi_ddiv>
 8008b62:	f7f7 fff9 	bl	8000b58 <__aeabi_d2iz>
 8008b66:	9001      	str	r0, [sp, #4]
 8008b68:	f7f7 fcdc 	bl	8000524 <__aeabi_i2d>
 8008b6c:	4642      	mov	r2, r8
 8008b6e:	464b      	mov	r3, r9
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fb84 	bl	8000288 <__aeabi_dsub>
 8008b80:	9e01      	ldr	r6, [sp, #4]
 8008b82:	9f04      	ldr	r7, [sp, #16]
 8008b84:	3630      	adds	r6, #48	; 0x30
 8008b86:	f805 6b01 	strb.w	r6, [r5], #1
 8008b8a:	9e00      	ldr	r6, [sp, #0]
 8008b8c:	1bae      	subs	r6, r5, r6
 8008b8e:	42b7      	cmp	r7, r6
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	d134      	bne.n	8008c00 <_dtoa_r+0x708>
 8008b96:	f7f7 fb79 	bl	800028c <__adddf3>
 8008b9a:	4642      	mov	r2, r8
 8008b9c:	464b      	mov	r3, r9
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	f7f7 ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008ba6:	b9c8      	cbnz	r0, 8008bdc <_dtoa_r+0x6e4>
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bb4:	b110      	cbz	r0, 8008bbc <_dtoa_r+0x6c4>
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	07db      	lsls	r3, r3, #31
 8008bba:	d40f      	bmi.n	8008bdc <_dtoa_r+0x6e4>
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fbcc 	bl	800935c <_Bfree>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bc8:	702b      	strb	r3, [r5, #0]
 8008bca:	f10b 0301 	add.w	r3, fp, #1
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f43f ace2 	beq.w	800859c <_dtoa_r+0xa4>
 8008bd8:	601d      	str	r5, [r3, #0]
 8008bda:	e4df      	b.n	800859c <_dtoa_r+0xa4>
 8008bdc:	465f      	mov	r7, fp
 8008bde:	462b      	mov	r3, r5
 8008be0:	461d      	mov	r5, r3
 8008be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008be6:	2a39      	cmp	r2, #57	; 0x39
 8008be8:	d106      	bne.n	8008bf8 <_dtoa_r+0x700>
 8008bea:	9a00      	ldr	r2, [sp, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d1f7      	bne.n	8008be0 <_dtoa_r+0x6e8>
 8008bf0:	9900      	ldr	r1, [sp, #0]
 8008bf2:	2230      	movs	r2, #48	; 0x30
 8008bf4:	3701      	adds	r7, #1
 8008bf6:	700a      	strb	r2, [r1, #0]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e790      	b.n	8008b22 <_dtoa_r+0x62a>
 8008c00:	4ba3      	ldr	r3, [pc, #652]	; (8008e90 <_dtoa_r+0x998>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	f7f7 fcf8 	bl	80005f8 <__aeabi_dmul>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460f      	mov	r7, r1
 8008c10:	f7f7 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d09e      	beq.n	8008b56 <_dtoa_r+0x65e>
 8008c18:	e7d0      	b.n	8008bbc <_dtoa_r+0x6c4>
 8008c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	f000 80ca 	beq.w	8008db6 <_dtoa_r+0x8be>
 8008c22:	9a07      	ldr	r2, [sp, #28]
 8008c24:	2a01      	cmp	r2, #1
 8008c26:	f300 80ad 	bgt.w	8008d84 <_dtoa_r+0x88c>
 8008c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	f000 80a5 	beq.w	8008d7c <_dtoa_r+0x884>
 8008c32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c36:	9e08      	ldr	r6, [sp, #32]
 8008c38:	9d05      	ldr	r5, [sp, #20]
 8008c3a:	9a05      	ldr	r2, [sp, #20]
 8008c3c:	441a      	add	r2, r3
 8008c3e:	9205      	str	r2, [sp, #20]
 8008c40:	9a06      	ldr	r2, [sp, #24]
 8008c42:	2101      	movs	r1, #1
 8008c44:	441a      	add	r2, r3
 8008c46:	4620      	mov	r0, r4
 8008c48:	9206      	str	r2, [sp, #24]
 8008c4a:	f000 fc87 	bl	800955c <__i2b>
 8008c4e:	4607      	mov	r7, r0
 8008c50:	b165      	cbz	r5, 8008c6c <_dtoa_r+0x774>
 8008c52:	9b06      	ldr	r3, [sp, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd09      	ble.n	8008c6c <_dtoa_r+0x774>
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	9a05      	ldr	r2, [sp, #20]
 8008c5c:	bfa8      	it	ge
 8008c5e:	462b      	movge	r3, r5
 8008c60:	1ad2      	subs	r2, r2, r3
 8008c62:	9205      	str	r2, [sp, #20]
 8008c64:	9a06      	ldr	r2, [sp, #24]
 8008c66:	1aed      	subs	r5, r5, r3
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	9306      	str	r3, [sp, #24]
 8008c6c:	9b08      	ldr	r3, [sp, #32]
 8008c6e:	b1f3      	cbz	r3, 8008cae <_dtoa_r+0x7b6>
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80a3 	beq.w	8008dbe <_dtoa_r+0x8c6>
 8008c78:	2e00      	cmp	r6, #0
 8008c7a:	dd10      	ble.n	8008c9e <_dtoa_r+0x7a6>
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	4632      	mov	r2, r6
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fd2b 	bl	80096dc <__pow5mult>
 8008c86:	4652      	mov	r2, sl
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fc7b 	bl	8009588 <__multiply>
 8008c92:	4651      	mov	r1, sl
 8008c94:	4680      	mov	r8, r0
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fb60 	bl	800935c <_Bfree>
 8008c9c:	46c2      	mov	sl, r8
 8008c9e:	9b08      	ldr	r3, [sp, #32]
 8008ca0:	1b9a      	subs	r2, r3, r6
 8008ca2:	d004      	beq.n	8008cae <_dtoa_r+0x7b6>
 8008ca4:	4651      	mov	r1, sl
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fd18 	bl	80096dc <__pow5mult>
 8008cac:	4682      	mov	sl, r0
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fc53 	bl	800955c <__i2b>
 8008cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	f340 8081 	ble.w	8008dc2 <_dtoa_r+0x8ca>
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fd09 	bl	80096dc <__pow5mult>
 8008cca:	9b07      	ldr	r3, [sp, #28]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	4606      	mov	r6, r0
 8008cd0:	dd7a      	ble.n	8008dc8 <_dtoa_r+0x8d0>
 8008cd2:	f04f 0800 	mov.w	r8, #0
 8008cd6:	6933      	ldr	r3, [r6, #16]
 8008cd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008cdc:	6918      	ldr	r0, [r3, #16]
 8008cde:	f000 fbef 	bl	80094c0 <__hi0bits>
 8008ce2:	f1c0 0020 	rsb	r0, r0, #32
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	4418      	add	r0, r3
 8008cea:	f010 001f 	ands.w	r0, r0, #31
 8008cee:	f000 8094 	beq.w	8008e1a <_dtoa_r+0x922>
 8008cf2:	f1c0 0320 	rsb	r3, r0, #32
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	f340 8085 	ble.w	8008e06 <_dtoa_r+0x90e>
 8008cfc:	9b05      	ldr	r3, [sp, #20]
 8008cfe:	f1c0 001c 	rsb	r0, r0, #28
 8008d02:	4403      	add	r3, r0
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	9b06      	ldr	r3, [sp, #24]
 8008d08:	4403      	add	r3, r0
 8008d0a:	4405      	add	r5, r0
 8008d0c:	9306      	str	r3, [sp, #24]
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x828>
 8008d14:	4651      	mov	r1, sl
 8008d16:	461a      	mov	r2, r3
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fd39 	bl	8009790 <__lshift>
 8008d1e:	4682      	mov	sl, r0
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dd05      	ble.n	8008d32 <_dtoa_r+0x83a>
 8008d26:	4631      	mov	r1, r6
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 fd30 	bl	8009790 <__lshift>
 8008d30:	4606      	mov	r6, r0
 8008d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d072      	beq.n	8008e1e <_dtoa_r+0x926>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	f000 fd94 	bl	8009868 <__mcmp>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	da6c      	bge.n	8008e1e <_dtoa_r+0x926>
 8008d44:	2300      	movs	r3, #0
 8008d46:	4651      	mov	r1, sl
 8008d48:	220a      	movs	r2, #10
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fb28 	bl	80093a0 <__multadd>
 8008d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d56:	4682      	mov	sl, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 81b0 	beq.w	80090be <_dtoa_r+0xbc6>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4639      	mov	r1, r7
 8008d62:	220a      	movs	r2, #10
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 fb1b 	bl	80093a0 <__multadd>
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	4607      	mov	r7, r0
 8008d70:	f300 8096 	bgt.w	8008ea0 <_dtoa_r+0x9a8>
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	dc59      	bgt.n	8008e2e <_dtoa_r+0x936>
 8008d7a:	e091      	b.n	8008ea0 <_dtoa_r+0x9a8>
 8008d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d82:	e758      	b.n	8008c36 <_dtoa_r+0x73e>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	1e5e      	subs	r6, r3, #1
 8008d88:	9b08      	ldr	r3, [sp, #32]
 8008d8a:	42b3      	cmp	r3, r6
 8008d8c:	bfbf      	itttt	lt
 8008d8e:	9b08      	ldrlt	r3, [sp, #32]
 8008d90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008d92:	9608      	strlt	r6, [sp, #32]
 8008d94:	1af3      	sublt	r3, r6, r3
 8008d96:	bfb4      	ite	lt
 8008d98:	18d2      	addlt	r2, r2, r3
 8008d9a:	1b9e      	subge	r6, r3, r6
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	bfbc      	itt	lt
 8008da0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008da2:	2600      	movlt	r6, #0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfb7      	itett	lt
 8008da8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008dac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008db0:	1a9d      	sublt	r5, r3, r2
 8008db2:	2300      	movlt	r3, #0
 8008db4:	e741      	b.n	8008c3a <_dtoa_r+0x742>
 8008db6:	9e08      	ldr	r6, [sp, #32]
 8008db8:	9d05      	ldr	r5, [sp, #20]
 8008dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008dbc:	e748      	b.n	8008c50 <_dtoa_r+0x758>
 8008dbe:	9a08      	ldr	r2, [sp, #32]
 8008dc0:	e770      	b.n	8008ca4 <_dtoa_r+0x7ac>
 8008dc2:	9b07      	ldr	r3, [sp, #28]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	dc19      	bgt.n	8008dfc <_dtoa_r+0x904>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	b9bb      	cbnz	r3, 8008dfc <_dtoa_r+0x904>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd2:	b99b      	cbnz	r3, 8008dfc <_dtoa_r+0x904>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dda:	0d1b      	lsrs	r3, r3, #20
 8008ddc:	051b      	lsls	r3, r3, #20
 8008dde:	b183      	cbz	r3, 8008e02 <_dtoa_r+0x90a>
 8008de0:	9b05      	ldr	r3, [sp, #20]
 8008de2:	3301      	adds	r3, #1
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	3301      	adds	r3, #1
 8008dea:	9306      	str	r3, [sp, #24]
 8008dec:	f04f 0801 	mov.w	r8, #1
 8008df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f47f af6f 	bne.w	8008cd6 <_dtoa_r+0x7de>
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e774      	b.n	8008ce6 <_dtoa_r+0x7ee>
 8008dfc:	f04f 0800 	mov.w	r8, #0
 8008e00:	e7f6      	b.n	8008df0 <_dtoa_r+0x8f8>
 8008e02:	4698      	mov	r8, r3
 8008e04:	e7f4      	b.n	8008df0 <_dtoa_r+0x8f8>
 8008e06:	d082      	beq.n	8008d0e <_dtoa_r+0x816>
 8008e08:	9a05      	ldr	r2, [sp, #20]
 8008e0a:	331c      	adds	r3, #28
 8008e0c:	441a      	add	r2, r3
 8008e0e:	9205      	str	r2, [sp, #20]
 8008e10:	9a06      	ldr	r2, [sp, #24]
 8008e12:	441a      	add	r2, r3
 8008e14:	441d      	add	r5, r3
 8008e16:	9206      	str	r2, [sp, #24]
 8008e18:	e779      	b.n	8008d0e <_dtoa_r+0x816>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	e7f4      	b.n	8008e08 <_dtoa_r+0x910>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dc37      	bgt.n	8008e94 <_dtoa_r+0x99c>
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	dd34      	ble.n	8008e94 <_dtoa_r+0x99c>
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	b963      	cbnz	r3, 8008e4c <_dtoa_r+0x954>
 8008e32:	4631      	mov	r1, r6
 8008e34:	2205      	movs	r2, #5
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 fab2 	bl	80093a0 <__multadd>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	4606      	mov	r6, r0
 8008e40:	4650      	mov	r0, sl
 8008e42:	f000 fd11 	bl	8009868 <__mcmp>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f73f adbb 	bgt.w	80089c2 <_dtoa_r+0x4ca>
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4e:	9d00      	ldr	r5, [sp, #0]
 8008e50:	ea6f 0b03 	mvn.w	fp, r3
 8008e54:	f04f 0800 	mov.w	r8, #0
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fa7e 	bl	800935c <_Bfree>
 8008e60:	2f00      	cmp	r7, #0
 8008e62:	f43f aeab 	beq.w	8008bbc <_dtoa_r+0x6c4>
 8008e66:	f1b8 0f00 	cmp.w	r8, #0
 8008e6a:	d005      	beq.n	8008e78 <_dtoa_r+0x980>
 8008e6c:	45b8      	cmp	r8, r7
 8008e6e:	d003      	beq.n	8008e78 <_dtoa_r+0x980>
 8008e70:	4641      	mov	r1, r8
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fa72 	bl	800935c <_Bfree>
 8008e78:	4639      	mov	r1, r7
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fa6e 	bl	800935c <_Bfree>
 8008e80:	e69c      	b.n	8008bbc <_dtoa_r+0x6c4>
 8008e82:	2600      	movs	r6, #0
 8008e84:	4637      	mov	r7, r6
 8008e86:	e7e1      	b.n	8008e4c <_dtoa_r+0x954>
 8008e88:	46bb      	mov	fp, r7
 8008e8a:	4637      	mov	r7, r6
 8008e8c:	e599      	b.n	80089c2 <_dtoa_r+0x4ca>
 8008e8e:	bf00      	nop
 8008e90:	40240000 	.word	0x40240000
 8008e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 80c8 	beq.w	800902c <_dtoa_r+0xb34>
 8008e9c:	9b04      	ldr	r3, [sp, #16]
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	dd05      	ble.n	8008eb0 <_dtoa_r+0x9b8>
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fc71 	bl	8009790 <__lshift>
 8008eae:	4607      	mov	r7, r0
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	d05b      	beq.n	8008f6e <_dtoa_r+0xa76>
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fa0f 	bl	80092dc <_Balloc>
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	b928      	cbnz	r0, 8008ece <_dtoa_r+0x9d6>
 8008ec2:	4b83      	ldr	r3, [pc, #524]	; (80090d0 <_dtoa_r+0xbd8>)
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008eca:	f7ff bb2e 	b.w	800852a <_dtoa_r+0x32>
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	3202      	adds	r2, #2
 8008ed2:	0092      	lsls	r2, r2, #2
 8008ed4:	f107 010c 	add.w	r1, r7, #12
 8008ed8:	300c      	adds	r0, #12
 8008eda:	f7ff fa50 	bl	800837e <memcpy>
 8008ede:	2201      	movs	r2, #1
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fc54 	bl	8009790 <__lshift>
 8008ee8:	9b00      	ldr	r3, [sp, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	46b8      	mov	r8, r7
 8008efe:	9306      	str	r3, [sp, #24]
 8008f00:	4607      	mov	r7, r0
 8008f02:	9b04      	ldr	r3, [sp, #16]
 8008f04:	4631      	mov	r1, r6
 8008f06:	3b01      	subs	r3, #1
 8008f08:	4650      	mov	r0, sl
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	f7ff fa6a 	bl	80083e4 <quorem>
 8008f10:	4641      	mov	r1, r8
 8008f12:	9002      	str	r0, [sp, #8]
 8008f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f18:	4650      	mov	r0, sl
 8008f1a:	f000 fca5 	bl	8009868 <__mcmp>
 8008f1e:	463a      	mov	r2, r7
 8008f20:	9005      	str	r0, [sp, #20]
 8008f22:	4631      	mov	r1, r6
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fcbb 	bl	80098a0 <__mdiff>
 8008f2a:	68c2      	ldr	r2, [r0, #12]
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	bb02      	cbnz	r2, 8008f72 <_dtoa_r+0xa7a>
 8008f30:	4601      	mov	r1, r0
 8008f32:	4650      	mov	r0, sl
 8008f34:	f000 fc98 	bl	8009868 <__mcmp>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	f000 fa0c 	bl	800935c <_Bfree>
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f48:	9d04      	ldr	r5, [sp, #16]
 8008f4a:	ea43 0102 	orr.w	r1, r3, r2
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	4319      	orrs	r1, r3
 8008f52:	d110      	bne.n	8008f76 <_dtoa_r+0xa7e>
 8008f54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f58:	d029      	beq.n	8008fae <_dtoa_r+0xab6>
 8008f5a:	9b05      	ldr	r3, [sp, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd02      	ble.n	8008f66 <_dtoa_r+0xa6e>
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	f883 9000 	strb.w	r9, [r3]
 8008f6c:	e774      	b.n	8008e58 <_dtoa_r+0x960>
 8008f6e:	4638      	mov	r0, r7
 8008f70:	e7ba      	b.n	8008ee8 <_dtoa_r+0x9f0>
 8008f72:	2201      	movs	r2, #1
 8008f74:	e7e1      	b.n	8008f3a <_dtoa_r+0xa42>
 8008f76:	9b05      	ldr	r3, [sp, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	db04      	blt.n	8008f86 <_dtoa_r+0xa8e>
 8008f7c:	9907      	ldr	r1, [sp, #28]
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	9906      	ldr	r1, [sp, #24]
 8008f82:	430b      	orrs	r3, r1
 8008f84:	d120      	bne.n	8008fc8 <_dtoa_r+0xad0>
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	dded      	ble.n	8008f66 <_dtoa_r+0xa6e>
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fbfe 	bl	8009790 <__lshift>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4682      	mov	sl, r0
 8008f98:	f000 fc66 	bl	8009868 <__mcmp>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	dc03      	bgt.n	8008fa8 <_dtoa_r+0xab0>
 8008fa0:	d1e1      	bne.n	8008f66 <_dtoa_r+0xa6e>
 8008fa2:	f019 0f01 	tst.w	r9, #1
 8008fa6:	d0de      	beq.n	8008f66 <_dtoa_r+0xa6e>
 8008fa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fac:	d1d8      	bne.n	8008f60 <_dtoa_r+0xa68>
 8008fae:	9a01      	ldr	r2, [sp, #4]
 8008fb0:	2339      	movs	r3, #57	; 0x39
 8008fb2:	7013      	strb	r3, [r2, #0]
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	461d      	mov	r5, r3
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fbe:	2a39      	cmp	r2, #57	; 0x39
 8008fc0:	d06c      	beq.n	800909c <_dtoa_r+0xba4>
 8008fc2:	3201      	adds	r2, #1
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e747      	b.n	8008e58 <_dtoa_r+0x960>
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	dd07      	ble.n	8008fdc <_dtoa_r+0xae4>
 8008fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fd0:	d0ed      	beq.n	8008fae <_dtoa_r+0xab6>
 8008fd2:	9a01      	ldr	r2, [sp, #4]
 8008fd4:	f109 0301 	add.w	r3, r9, #1
 8008fd8:	7013      	strb	r3, [r2, #0]
 8008fda:	e73d      	b.n	8008e58 <_dtoa_r+0x960>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	9a08      	ldr	r2, [sp, #32]
 8008fe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d043      	beq.n	8009070 <_dtoa_r+0xb78>
 8008fe8:	4651      	mov	r1, sl
 8008fea:	2300      	movs	r3, #0
 8008fec:	220a      	movs	r2, #10
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 f9d6 	bl	80093a0 <__multadd>
 8008ff4:	45b8      	cmp	r8, r7
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	f04f 020a 	mov.w	r2, #10
 8009000:	4641      	mov	r1, r8
 8009002:	4620      	mov	r0, r4
 8009004:	d107      	bne.n	8009016 <_dtoa_r+0xb1e>
 8009006:	f000 f9cb 	bl	80093a0 <__multadd>
 800900a:	4680      	mov	r8, r0
 800900c:	4607      	mov	r7, r0
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	3301      	adds	r3, #1
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	e775      	b.n	8008f02 <_dtoa_r+0xa0a>
 8009016:	f000 f9c3 	bl	80093a0 <__multadd>
 800901a:	4639      	mov	r1, r7
 800901c:	4680      	mov	r8, r0
 800901e:	2300      	movs	r3, #0
 8009020:	220a      	movs	r2, #10
 8009022:	4620      	mov	r0, r4
 8009024:	f000 f9bc 	bl	80093a0 <__multadd>
 8009028:	4607      	mov	r7, r0
 800902a:	e7f0      	b.n	800900e <_dtoa_r+0xb16>
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	9d00      	ldr	r5, [sp, #0]
 8009032:	4631      	mov	r1, r6
 8009034:	4650      	mov	r0, sl
 8009036:	f7ff f9d5 	bl	80083e4 <quorem>
 800903a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	f805 9b01 	strb.w	r9, [r5], #1
 8009044:	1aea      	subs	r2, r5, r3
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	4293      	cmp	r3, r2
 800904a:	dd07      	ble.n	800905c <_dtoa_r+0xb64>
 800904c:	4651      	mov	r1, sl
 800904e:	2300      	movs	r3, #0
 8009050:	220a      	movs	r2, #10
 8009052:	4620      	mov	r0, r4
 8009054:	f000 f9a4 	bl	80093a0 <__multadd>
 8009058:	4682      	mov	sl, r0
 800905a:	e7ea      	b.n	8009032 <_dtoa_r+0xb3a>
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfc8      	it	gt
 8009062:	461d      	movgt	r5, r3
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	bfd8      	it	le
 8009068:	2501      	movle	r5, #1
 800906a:	441d      	add	r5, r3
 800906c:	f04f 0800 	mov.w	r8, #0
 8009070:	4651      	mov	r1, sl
 8009072:	2201      	movs	r2, #1
 8009074:	4620      	mov	r0, r4
 8009076:	f000 fb8b 	bl	8009790 <__lshift>
 800907a:	4631      	mov	r1, r6
 800907c:	4682      	mov	sl, r0
 800907e:	f000 fbf3 	bl	8009868 <__mcmp>
 8009082:	2800      	cmp	r0, #0
 8009084:	dc96      	bgt.n	8008fb4 <_dtoa_r+0xabc>
 8009086:	d102      	bne.n	800908e <_dtoa_r+0xb96>
 8009088:	f019 0f01 	tst.w	r9, #1
 800908c:	d192      	bne.n	8008fb4 <_dtoa_r+0xabc>
 800908e:	462b      	mov	r3, r5
 8009090:	461d      	mov	r5, r3
 8009092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009096:	2a30      	cmp	r2, #48	; 0x30
 8009098:	d0fa      	beq.n	8009090 <_dtoa_r+0xb98>
 800909a:	e6dd      	b.n	8008e58 <_dtoa_r+0x960>
 800909c:	9a00      	ldr	r2, [sp, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d189      	bne.n	8008fb6 <_dtoa_r+0xabe>
 80090a2:	f10b 0b01 	add.w	fp, fp, #1
 80090a6:	2331      	movs	r3, #49	; 0x31
 80090a8:	e796      	b.n	8008fd8 <_dtoa_r+0xae0>
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <_dtoa_r+0xbdc>)
 80090ac:	f7ff ba99 	b.w	80085e2 <_dtoa_r+0xea>
 80090b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f47f aa6d 	bne.w	8008592 <_dtoa_r+0x9a>
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <_dtoa_r+0xbe0>)
 80090ba:	f7ff ba92 	b.w	80085e2 <_dtoa_r+0xea>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dcb5      	bgt.n	8009030 <_dtoa_r+0xb38>
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	f73f aeb1 	bgt.w	8008e2e <_dtoa_r+0x936>
 80090cc:	e7b0      	b.n	8009030 <_dtoa_r+0xb38>
 80090ce:	bf00      	nop
 80090d0:	0800c952 	.word	0x0800c952
 80090d4:	0800cb37 	.word	0x0800cb37
 80090d8:	0800c8ed 	.word	0x0800c8ed

080090dc <_free_r>:
 80090dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090de:	2900      	cmp	r1, #0
 80090e0:	d044      	beq.n	800916c <_free_r+0x90>
 80090e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e6:	9001      	str	r0, [sp, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f1a1 0404 	sub.w	r4, r1, #4
 80090ee:	bfb8      	it	lt
 80090f0:	18e4      	addlt	r4, r4, r3
 80090f2:	f000 f8e7 	bl	80092c4 <__malloc_lock>
 80090f6:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <_free_r+0x94>)
 80090f8:	9801      	ldr	r0, [sp, #4]
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	b933      	cbnz	r3, 800910c <_free_r+0x30>
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6014      	str	r4, [r2, #0]
 8009102:	b003      	add	sp, #12
 8009104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009108:	f000 b8e2 	b.w	80092d0 <__malloc_unlock>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d908      	bls.n	8009122 <_free_r+0x46>
 8009110:	6825      	ldr	r5, [r4, #0]
 8009112:	1961      	adds	r1, r4, r5
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1949      	addeq	r1, r1, r5
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	e7ed      	b.n	80090fe <_free_r+0x22>
 8009122:	461a      	mov	r2, r3
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b10b      	cbz	r3, 800912c <_free_r+0x50>
 8009128:	42a3      	cmp	r3, r4
 800912a:	d9fa      	bls.n	8009122 <_free_r+0x46>
 800912c:	6811      	ldr	r1, [r2, #0]
 800912e:	1855      	adds	r5, r2, r1
 8009130:	42a5      	cmp	r5, r4
 8009132:	d10b      	bne.n	800914c <_free_r+0x70>
 8009134:	6824      	ldr	r4, [r4, #0]
 8009136:	4421      	add	r1, r4
 8009138:	1854      	adds	r4, r2, r1
 800913a:	42a3      	cmp	r3, r4
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	d1e0      	bne.n	8009102 <_free_r+0x26>
 8009140:	681c      	ldr	r4, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	440c      	add	r4, r1
 8009148:	6014      	str	r4, [r2, #0]
 800914a:	e7da      	b.n	8009102 <_free_r+0x26>
 800914c:	d902      	bls.n	8009154 <_free_r+0x78>
 800914e:	230c      	movs	r3, #12
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	e7d6      	b.n	8009102 <_free_r+0x26>
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	1961      	adds	r1, r4, r5
 8009158:	428b      	cmp	r3, r1
 800915a:	bf04      	itt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	bf04      	itt	eq
 8009164:	1949      	addeq	r1, r1, r5
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	6054      	str	r4, [r2, #4]
 800916a:	e7ca      	b.n	8009102 <_free_r+0x26>
 800916c:	b003      	add	sp, #12
 800916e:	bd30      	pop	{r4, r5, pc}
 8009170:	20000d7c 	.word	0x20000d7c

08009174 <malloc>:
 8009174:	4b02      	ldr	r3, [pc, #8]	; (8009180 <malloc+0xc>)
 8009176:	4601      	mov	r1, r0
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	f000 b823 	b.w	80091c4 <_malloc_r>
 800917e:	bf00      	nop
 8009180:	20000088 	.word	0x20000088

08009184 <sbrk_aligned>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4e0e      	ldr	r6, [pc, #56]	; (80091c0 <sbrk_aligned+0x3c>)
 8009188:	460c      	mov	r4, r1
 800918a:	6831      	ldr	r1, [r6, #0]
 800918c:	4605      	mov	r5, r0
 800918e:	b911      	cbnz	r1, 8009196 <sbrk_aligned+0x12>
 8009190:	f002 faf2 	bl	800b778 <_sbrk_r>
 8009194:	6030      	str	r0, [r6, #0]
 8009196:	4621      	mov	r1, r4
 8009198:	4628      	mov	r0, r5
 800919a:	f002 faed 	bl	800b778 <_sbrk_r>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	d00a      	beq.n	80091b8 <sbrk_aligned+0x34>
 80091a2:	1cc4      	adds	r4, r0, #3
 80091a4:	f024 0403 	bic.w	r4, r4, #3
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d007      	beq.n	80091bc <sbrk_aligned+0x38>
 80091ac:	1a21      	subs	r1, r4, r0
 80091ae:	4628      	mov	r0, r5
 80091b0:	f002 fae2 	bl	800b778 <_sbrk_r>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d101      	bne.n	80091bc <sbrk_aligned+0x38>
 80091b8:	f04f 34ff 	mov.w	r4, #4294967295
 80091bc:	4620      	mov	r0, r4
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	20000d80 	.word	0x20000d80

080091c4 <_malloc_r>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	1ccd      	adds	r5, r1, #3
 80091ca:	f025 0503 	bic.w	r5, r5, #3
 80091ce:	3508      	adds	r5, #8
 80091d0:	2d0c      	cmp	r5, #12
 80091d2:	bf38      	it	cc
 80091d4:	250c      	movcc	r5, #12
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	4607      	mov	r7, r0
 80091da:	db01      	blt.n	80091e0 <_malloc_r+0x1c>
 80091dc:	42a9      	cmp	r1, r5
 80091de:	d905      	bls.n	80091ec <_malloc_r+0x28>
 80091e0:	230c      	movs	r3, #12
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	2600      	movs	r6, #0
 80091e6:	4630      	mov	r0, r6
 80091e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092c0 <_malloc_r+0xfc>
 80091f0:	f000 f868 	bl	80092c4 <__malloc_lock>
 80091f4:	f8d8 3000 	ldr.w	r3, [r8]
 80091f8:	461c      	mov	r4, r3
 80091fa:	bb5c      	cbnz	r4, 8009254 <_malloc_r+0x90>
 80091fc:	4629      	mov	r1, r5
 80091fe:	4638      	mov	r0, r7
 8009200:	f7ff ffc0 	bl	8009184 <sbrk_aligned>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	4604      	mov	r4, r0
 8009208:	d155      	bne.n	80092b6 <_malloc_r+0xf2>
 800920a:	f8d8 4000 	ldr.w	r4, [r8]
 800920e:	4626      	mov	r6, r4
 8009210:	2e00      	cmp	r6, #0
 8009212:	d145      	bne.n	80092a0 <_malloc_r+0xdc>
 8009214:	2c00      	cmp	r4, #0
 8009216:	d048      	beq.n	80092aa <_malloc_r+0xe6>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	4631      	mov	r1, r6
 800921c:	4638      	mov	r0, r7
 800921e:	eb04 0903 	add.w	r9, r4, r3
 8009222:	f002 faa9 	bl	800b778 <_sbrk_r>
 8009226:	4581      	cmp	r9, r0
 8009228:	d13f      	bne.n	80092aa <_malloc_r+0xe6>
 800922a:	6821      	ldr	r1, [r4, #0]
 800922c:	1a6d      	subs	r5, r5, r1
 800922e:	4629      	mov	r1, r5
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff ffa7 	bl	8009184 <sbrk_aligned>
 8009236:	3001      	adds	r0, #1
 8009238:	d037      	beq.n	80092aa <_malloc_r+0xe6>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	442b      	add	r3, r5
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	f8d8 3000 	ldr.w	r3, [r8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d038      	beq.n	80092ba <_malloc_r+0xf6>
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	42a2      	cmp	r2, r4
 800924c:	d12b      	bne.n	80092a6 <_malloc_r+0xe2>
 800924e:	2200      	movs	r2, #0
 8009250:	605a      	str	r2, [r3, #4]
 8009252:	e00f      	b.n	8009274 <_malloc_r+0xb0>
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	1b52      	subs	r2, r2, r5
 8009258:	d41f      	bmi.n	800929a <_malloc_r+0xd6>
 800925a:	2a0b      	cmp	r2, #11
 800925c:	d917      	bls.n	800928e <_malloc_r+0xca>
 800925e:	1961      	adds	r1, r4, r5
 8009260:	42a3      	cmp	r3, r4
 8009262:	6025      	str	r5, [r4, #0]
 8009264:	bf18      	it	ne
 8009266:	6059      	strne	r1, [r3, #4]
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	bf08      	it	eq
 800926c:	f8c8 1000 	streq.w	r1, [r8]
 8009270:	5162      	str	r2, [r4, r5]
 8009272:	604b      	str	r3, [r1, #4]
 8009274:	4638      	mov	r0, r7
 8009276:	f104 060b 	add.w	r6, r4, #11
 800927a:	f000 f829 	bl	80092d0 <__malloc_unlock>
 800927e:	f026 0607 	bic.w	r6, r6, #7
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	1af2      	subs	r2, r6, r3
 8009286:	d0ae      	beq.n	80091e6 <_malloc_r+0x22>
 8009288:	1b9b      	subs	r3, r3, r6
 800928a:	50a3      	str	r3, [r4, r2]
 800928c:	e7ab      	b.n	80091e6 <_malloc_r+0x22>
 800928e:	42a3      	cmp	r3, r4
 8009290:	6862      	ldr	r2, [r4, #4]
 8009292:	d1dd      	bne.n	8009250 <_malloc_r+0x8c>
 8009294:	f8c8 2000 	str.w	r2, [r8]
 8009298:	e7ec      	b.n	8009274 <_malloc_r+0xb0>
 800929a:	4623      	mov	r3, r4
 800929c:	6864      	ldr	r4, [r4, #4]
 800929e:	e7ac      	b.n	80091fa <_malloc_r+0x36>
 80092a0:	4634      	mov	r4, r6
 80092a2:	6876      	ldr	r6, [r6, #4]
 80092a4:	e7b4      	b.n	8009210 <_malloc_r+0x4c>
 80092a6:	4613      	mov	r3, r2
 80092a8:	e7cc      	b.n	8009244 <_malloc_r+0x80>
 80092aa:	230c      	movs	r3, #12
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	4638      	mov	r0, r7
 80092b0:	f000 f80e 	bl	80092d0 <__malloc_unlock>
 80092b4:	e797      	b.n	80091e6 <_malloc_r+0x22>
 80092b6:	6025      	str	r5, [r4, #0]
 80092b8:	e7dc      	b.n	8009274 <_malloc_r+0xb0>
 80092ba:	605b      	str	r3, [r3, #4]
 80092bc:	deff      	udf	#255	; 0xff
 80092be:	bf00      	nop
 80092c0:	20000d7c 	.word	0x20000d7c

080092c4 <__malloc_lock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__malloc_lock+0x8>)
 80092c6:	f7ff b850 	b.w	800836a <__retarget_lock_acquire_recursive>
 80092ca:	bf00      	nop
 80092cc:	20000d78 	.word	0x20000d78

080092d0 <__malloc_unlock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__malloc_unlock+0x8>)
 80092d2:	f7ff b84b 	b.w	800836c <__retarget_lock_release_recursive>
 80092d6:	bf00      	nop
 80092d8:	20000d78 	.word	0x20000d78

080092dc <_Balloc>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	69c6      	ldr	r6, [r0, #28]
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	b976      	cbnz	r6, 8009304 <_Balloc+0x28>
 80092e6:	2010      	movs	r0, #16
 80092e8:	f7ff ff44 	bl	8009174 <malloc>
 80092ec:	4602      	mov	r2, r0
 80092ee:	61e0      	str	r0, [r4, #28]
 80092f0:	b920      	cbnz	r0, 80092fc <_Balloc+0x20>
 80092f2:	4b18      	ldr	r3, [pc, #96]	; (8009354 <_Balloc+0x78>)
 80092f4:	4818      	ldr	r0, [pc, #96]	; (8009358 <_Balloc+0x7c>)
 80092f6:	216b      	movs	r1, #107	; 0x6b
 80092f8:	f7ff f856 	bl	80083a8 <__assert_func>
 80092fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009300:	6006      	str	r6, [r0, #0]
 8009302:	60c6      	str	r6, [r0, #12]
 8009304:	69e6      	ldr	r6, [r4, #28]
 8009306:	68f3      	ldr	r3, [r6, #12]
 8009308:	b183      	cbz	r3, 800932c <_Balloc+0x50>
 800930a:	69e3      	ldr	r3, [r4, #28]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009312:	b9b8      	cbnz	r0, 8009344 <_Balloc+0x68>
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f605 	lsl.w	r6, r1, r5
 800931a:	1d72      	adds	r2, r6, #5
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	4620      	mov	r0, r4
 8009320:	f002 fa49 	bl	800b7b6 <_calloc_r>
 8009324:	b160      	cbz	r0, 8009340 <_Balloc+0x64>
 8009326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800932a:	e00e      	b.n	800934a <_Balloc+0x6e>
 800932c:	2221      	movs	r2, #33	; 0x21
 800932e:	2104      	movs	r1, #4
 8009330:	4620      	mov	r0, r4
 8009332:	f002 fa40 	bl	800b7b6 <_calloc_r>
 8009336:	69e3      	ldr	r3, [r4, #28]
 8009338:	60f0      	str	r0, [r6, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e4      	bne.n	800930a <_Balloc+0x2e>
 8009340:	2000      	movs	r0, #0
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	6802      	ldr	r2, [r0, #0]
 8009346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800934a:	2300      	movs	r3, #0
 800934c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009350:	e7f7      	b.n	8009342 <_Balloc+0x66>
 8009352:	bf00      	nop
 8009354:	0800c840 	.word	0x0800c840
 8009358:	0800c963 	.word	0x0800c963

0800935c <_Bfree>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	69c6      	ldr	r6, [r0, #28]
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b976      	cbnz	r6, 8009384 <_Bfree+0x28>
 8009366:	2010      	movs	r0, #16
 8009368:	f7ff ff04 	bl	8009174 <malloc>
 800936c:	4602      	mov	r2, r0
 800936e:	61e8      	str	r0, [r5, #28]
 8009370:	b920      	cbnz	r0, 800937c <_Bfree+0x20>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <_Bfree+0x3c>)
 8009374:	4809      	ldr	r0, [pc, #36]	; (800939c <_Bfree+0x40>)
 8009376:	218f      	movs	r1, #143	; 0x8f
 8009378:	f7ff f816 	bl	80083a8 <__assert_func>
 800937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009380:	6006      	str	r6, [r0, #0]
 8009382:	60c6      	str	r6, [r0, #12]
 8009384:	b13c      	cbz	r4, 8009396 <_Bfree+0x3a>
 8009386:	69eb      	ldr	r3, [r5, #28]
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009390:	6021      	str	r1, [r4, #0]
 8009392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	0800c840 	.word	0x0800c840
 800939c:	0800c963 	.word	0x0800c963

080093a0 <__multadd>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	690d      	ldr	r5, [r1, #16]
 80093a6:	4607      	mov	r7, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	461e      	mov	r6, r3
 80093ac:	f101 0c14 	add.w	ip, r1, #20
 80093b0:	2000      	movs	r0, #0
 80093b2:	f8dc 3000 	ldr.w	r3, [ip]
 80093b6:	b299      	uxth	r1, r3
 80093b8:	fb02 6101 	mla	r1, r2, r1, r6
 80093bc:	0c1e      	lsrs	r6, r3, #16
 80093be:	0c0b      	lsrs	r3, r1, #16
 80093c0:	fb02 3306 	mla	r3, r2, r6, r3
 80093c4:	b289      	uxth	r1, r1
 80093c6:	3001      	adds	r0, #1
 80093c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093cc:	4285      	cmp	r5, r0
 80093ce:	f84c 1b04 	str.w	r1, [ip], #4
 80093d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093d6:	dcec      	bgt.n	80093b2 <__multadd+0x12>
 80093d8:	b30e      	cbz	r6, 800941e <__multadd+0x7e>
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	42ab      	cmp	r3, r5
 80093de:	dc19      	bgt.n	8009414 <__multadd+0x74>
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	4638      	mov	r0, r7
 80093e4:	3101      	adds	r1, #1
 80093e6:	f7ff ff79 	bl	80092dc <_Balloc>
 80093ea:	4680      	mov	r8, r0
 80093ec:	b928      	cbnz	r0, 80093fa <__multadd+0x5a>
 80093ee:	4602      	mov	r2, r0
 80093f0:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <__multadd+0x84>)
 80093f2:	480d      	ldr	r0, [pc, #52]	; (8009428 <__multadd+0x88>)
 80093f4:	21ba      	movs	r1, #186	; 0xba
 80093f6:	f7fe ffd7 	bl	80083a8 <__assert_func>
 80093fa:	6922      	ldr	r2, [r4, #16]
 80093fc:	3202      	adds	r2, #2
 80093fe:	f104 010c 	add.w	r1, r4, #12
 8009402:	0092      	lsls	r2, r2, #2
 8009404:	300c      	adds	r0, #12
 8009406:	f7fe ffba 	bl	800837e <memcpy>
 800940a:	4621      	mov	r1, r4
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ffa5 	bl	800935c <_Bfree>
 8009412:	4644      	mov	r4, r8
 8009414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009418:	3501      	adds	r5, #1
 800941a:	615e      	str	r6, [r3, #20]
 800941c:	6125      	str	r5, [r4, #16]
 800941e:	4620      	mov	r0, r4
 8009420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009424:	0800c952 	.word	0x0800c952
 8009428:	0800c963 	.word	0x0800c963

0800942c <__s2b>:
 800942c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	4615      	mov	r5, r2
 8009434:	461f      	mov	r7, r3
 8009436:	2209      	movs	r2, #9
 8009438:	3308      	adds	r3, #8
 800943a:	4606      	mov	r6, r0
 800943c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009440:	2100      	movs	r1, #0
 8009442:	2201      	movs	r2, #1
 8009444:	429a      	cmp	r2, r3
 8009446:	db09      	blt.n	800945c <__s2b+0x30>
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff ff47 	bl	80092dc <_Balloc>
 800944e:	b940      	cbnz	r0, 8009462 <__s2b+0x36>
 8009450:	4602      	mov	r2, r0
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <__s2b+0x8c>)
 8009454:	4819      	ldr	r0, [pc, #100]	; (80094bc <__s2b+0x90>)
 8009456:	21d3      	movs	r1, #211	; 0xd3
 8009458:	f7fe ffa6 	bl	80083a8 <__assert_func>
 800945c:	0052      	lsls	r2, r2, #1
 800945e:	3101      	adds	r1, #1
 8009460:	e7f0      	b.n	8009444 <__s2b+0x18>
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	6143      	str	r3, [r0, #20]
 8009466:	2d09      	cmp	r5, #9
 8009468:	f04f 0301 	mov.w	r3, #1
 800946c:	6103      	str	r3, [r0, #16]
 800946e:	dd16      	ble.n	800949e <__s2b+0x72>
 8009470:	f104 0909 	add.w	r9, r4, #9
 8009474:	46c8      	mov	r8, r9
 8009476:	442c      	add	r4, r5
 8009478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800947c:	4601      	mov	r1, r0
 800947e:	3b30      	subs	r3, #48	; 0x30
 8009480:	220a      	movs	r2, #10
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ff8c 	bl	80093a0 <__multadd>
 8009488:	45a0      	cmp	r8, r4
 800948a:	d1f5      	bne.n	8009478 <__s2b+0x4c>
 800948c:	f1a5 0408 	sub.w	r4, r5, #8
 8009490:	444c      	add	r4, r9
 8009492:	1b2d      	subs	r5, r5, r4
 8009494:	1963      	adds	r3, r4, r5
 8009496:	42bb      	cmp	r3, r7
 8009498:	db04      	blt.n	80094a4 <__s2b+0x78>
 800949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949e:	340a      	adds	r4, #10
 80094a0:	2509      	movs	r5, #9
 80094a2:	e7f6      	b.n	8009492 <__s2b+0x66>
 80094a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094a8:	4601      	mov	r1, r0
 80094aa:	3b30      	subs	r3, #48	; 0x30
 80094ac:	220a      	movs	r2, #10
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ff76 	bl	80093a0 <__multadd>
 80094b4:	e7ee      	b.n	8009494 <__s2b+0x68>
 80094b6:	bf00      	nop
 80094b8:	0800c952 	.word	0x0800c952
 80094bc:	0800c963 	.word	0x0800c963

080094c0 <__hi0bits>:
 80094c0:	0c03      	lsrs	r3, r0, #16
 80094c2:	041b      	lsls	r3, r3, #16
 80094c4:	b9d3      	cbnz	r3, 80094fc <__hi0bits+0x3c>
 80094c6:	0400      	lsls	r0, r0, #16
 80094c8:	2310      	movs	r3, #16
 80094ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094ce:	bf04      	itt	eq
 80094d0:	0200      	lsleq	r0, r0, #8
 80094d2:	3308      	addeq	r3, #8
 80094d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094d8:	bf04      	itt	eq
 80094da:	0100      	lsleq	r0, r0, #4
 80094dc:	3304      	addeq	r3, #4
 80094de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094e2:	bf04      	itt	eq
 80094e4:	0080      	lsleq	r0, r0, #2
 80094e6:	3302      	addeq	r3, #2
 80094e8:	2800      	cmp	r0, #0
 80094ea:	db05      	blt.n	80094f8 <__hi0bits+0x38>
 80094ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094f0:	f103 0301 	add.w	r3, r3, #1
 80094f4:	bf08      	it	eq
 80094f6:	2320      	moveq	r3, #32
 80094f8:	4618      	mov	r0, r3
 80094fa:	4770      	bx	lr
 80094fc:	2300      	movs	r3, #0
 80094fe:	e7e4      	b.n	80094ca <__hi0bits+0xa>

08009500 <__lo0bits>:
 8009500:	6803      	ldr	r3, [r0, #0]
 8009502:	f013 0207 	ands.w	r2, r3, #7
 8009506:	d00c      	beq.n	8009522 <__lo0bits+0x22>
 8009508:	07d9      	lsls	r1, r3, #31
 800950a:	d422      	bmi.n	8009552 <__lo0bits+0x52>
 800950c:	079a      	lsls	r2, r3, #30
 800950e:	bf49      	itett	mi
 8009510:	085b      	lsrmi	r3, r3, #1
 8009512:	089b      	lsrpl	r3, r3, #2
 8009514:	6003      	strmi	r3, [r0, #0]
 8009516:	2201      	movmi	r2, #1
 8009518:	bf5c      	itt	pl
 800951a:	6003      	strpl	r3, [r0, #0]
 800951c:	2202      	movpl	r2, #2
 800951e:	4610      	mov	r0, r2
 8009520:	4770      	bx	lr
 8009522:	b299      	uxth	r1, r3
 8009524:	b909      	cbnz	r1, 800952a <__lo0bits+0x2a>
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	2210      	movs	r2, #16
 800952a:	b2d9      	uxtb	r1, r3
 800952c:	b909      	cbnz	r1, 8009532 <__lo0bits+0x32>
 800952e:	3208      	adds	r2, #8
 8009530:	0a1b      	lsrs	r3, r3, #8
 8009532:	0719      	lsls	r1, r3, #28
 8009534:	bf04      	itt	eq
 8009536:	091b      	lsreq	r3, r3, #4
 8009538:	3204      	addeq	r2, #4
 800953a:	0799      	lsls	r1, r3, #30
 800953c:	bf04      	itt	eq
 800953e:	089b      	lsreq	r3, r3, #2
 8009540:	3202      	addeq	r2, #2
 8009542:	07d9      	lsls	r1, r3, #31
 8009544:	d403      	bmi.n	800954e <__lo0bits+0x4e>
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	f102 0201 	add.w	r2, r2, #1
 800954c:	d003      	beq.n	8009556 <__lo0bits+0x56>
 800954e:	6003      	str	r3, [r0, #0]
 8009550:	e7e5      	b.n	800951e <__lo0bits+0x1e>
 8009552:	2200      	movs	r2, #0
 8009554:	e7e3      	b.n	800951e <__lo0bits+0x1e>
 8009556:	2220      	movs	r2, #32
 8009558:	e7e1      	b.n	800951e <__lo0bits+0x1e>
	...

0800955c <__i2b>:
 800955c:	b510      	push	{r4, lr}
 800955e:	460c      	mov	r4, r1
 8009560:	2101      	movs	r1, #1
 8009562:	f7ff febb 	bl	80092dc <_Balloc>
 8009566:	4602      	mov	r2, r0
 8009568:	b928      	cbnz	r0, 8009576 <__i2b+0x1a>
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <__i2b+0x24>)
 800956c:	4805      	ldr	r0, [pc, #20]	; (8009584 <__i2b+0x28>)
 800956e:	f240 1145 	movw	r1, #325	; 0x145
 8009572:	f7fe ff19 	bl	80083a8 <__assert_func>
 8009576:	2301      	movs	r3, #1
 8009578:	6144      	str	r4, [r0, #20]
 800957a:	6103      	str	r3, [r0, #16]
 800957c:	bd10      	pop	{r4, pc}
 800957e:	bf00      	nop
 8009580:	0800c952 	.word	0x0800c952
 8009584:	0800c963 	.word	0x0800c963

08009588 <__multiply>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	4691      	mov	r9, r2
 800958e:	690a      	ldr	r2, [r1, #16]
 8009590:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009594:	429a      	cmp	r2, r3
 8009596:	bfb8      	it	lt
 8009598:	460b      	movlt	r3, r1
 800959a:	460c      	mov	r4, r1
 800959c:	bfbc      	itt	lt
 800959e:	464c      	movlt	r4, r9
 80095a0:	4699      	movlt	r9, r3
 80095a2:	6927      	ldr	r7, [r4, #16]
 80095a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	6861      	ldr	r1, [r4, #4]
 80095ac:	eb07 060a 	add.w	r6, r7, sl
 80095b0:	42b3      	cmp	r3, r6
 80095b2:	b085      	sub	sp, #20
 80095b4:	bfb8      	it	lt
 80095b6:	3101      	addlt	r1, #1
 80095b8:	f7ff fe90 	bl	80092dc <_Balloc>
 80095bc:	b930      	cbnz	r0, 80095cc <__multiply+0x44>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b44      	ldr	r3, [pc, #272]	; (80096d4 <__multiply+0x14c>)
 80095c2:	4845      	ldr	r0, [pc, #276]	; (80096d8 <__multiply+0x150>)
 80095c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80095c8:	f7fe feee 	bl	80083a8 <__assert_func>
 80095cc:	f100 0514 	add.w	r5, r0, #20
 80095d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095d4:	462b      	mov	r3, r5
 80095d6:	2200      	movs	r2, #0
 80095d8:	4543      	cmp	r3, r8
 80095da:	d321      	bcc.n	8009620 <__multiply+0x98>
 80095dc:	f104 0314 	add.w	r3, r4, #20
 80095e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095e4:	f109 0314 	add.w	r3, r9, #20
 80095e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095ec:	9202      	str	r2, [sp, #8]
 80095ee:	1b3a      	subs	r2, r7, r4
 80095f0:	3a15      	subs	r2, #21
 80095f2:	f022 0203 	bic.w	r2, r2, #3
 80095f6:	3204      	adds	r2, #4
 80095f8:	f104 0115 	add.w	r1, r4, #21
 80095fc:	428f      	cmp	r7, r1
 80095fe:	bf38      	it	cc
 8009600:	2204      	movcc	r2, #4
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9a02      	ldr	r2, [sp, #8]
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d80c      	bhi.n	8009626 <__multiply+0x9e>
 800960c:	2e00      	cmp	r6, #0
 800960e:	dd03      	ble.n	8009618 <__multiply+0x90>
 8009610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05b      	beq.n	80096d0 <__multiply+0x148>
 8009618:	6106      	str	r6, [r0, #16]
 800961a:	b005      	add	sp, #20
 800961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009620:	f843 2b04 	str.w	r2, [r3], #4
 8009624:	e7d8      	b.n	80095d8 <__multiply+0x50>
 8009626:	f8b3 a000 	ldrh.w	sl, [r3]
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d024      	beq.n	800967a <__multiply+0xf2>
 8009630:	f104 0e14 	add.w	lr, r4, #20
 8009634:	46a9      	mov	r9, r5
 8009636:	f04f 0c00 	mov.w	ip, #0
 800963a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800963e:	f8d9 1000 	ldr.w	r1, [r9]
 8009642:	fa1f fb82 	uxth.w	fp, r2
 8009646:	b289      	uxth	r1, r1
 8009648:	fb0a 110b 	mla	r1, sl, fp, r1
 800964c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009650:	f8d9 2000 	ldr.w	r2, [r9]
 8009654:	4461      	add	r1, ip
 8009656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800965a:	fb0a c20b 	mla	r2, sl, fp, ip
 800965e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009662:	b289      	uxth	r1, r1
 8009664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009668:	4577      	cmp	r7, lr
 800966a:	f849 1b04 	str.w	r1, [r9], #4
 800966e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009672:	d8e2      	bhi.n	800963a <__multiply+0xb2>
 8009674:	9a01      	ldr	r2, [sp, #4]
 8009676:	f845 c002 	str.w	ip, [r5, r2]
 800967a:	9a03      	ldr	r2, [sp, #12]
 800967c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009680:	3304      	adds	r3, #4
 8009682:	f1b9 0f00 	cmp.w	r9, #0
 8009686:	d021      	beq.n	80096cc <__multiply+0x144>
 8009688:	6829      	ldr	r1, [r5, #0]
 800968a:	f104 0c14 	add.w	ip, r4, #20
 800968e:	46ae      	mov	lr, r5
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	f8bc b000 	ldrh.w	fp, [ip]
 8009698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800969c:	fb09 220b 	mla	r2, r9, fp, r2
 80096a0:	4452      	add	r2, sl
 80096a2:	b289      	uxth	r1, r1
 80096a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096a8:	f84e 1b04 	str.w	r1, [lr], #4
 80096ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b4:	f8be 1000 	ldrh.w	r1, [lr]
 80096b8:	fb09 110a 	mla	r1, r9, sl, r1
 80096bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80096c0:	4567      	cmp	r7, ip
 80096c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096c6:	d8e5      	bhi.n	8009694 <__multiply+0x10c>
 80096c8:	9a01      	ldr	r2, [sp, #4]
 80096ca:	50a9      	str	r1, [r5, r2]
 80096cc:	3504      	adds	r5, #4
 80096ce:	e799      	b.n	8009604 <__multiply+0x7c>
 80096d0:	3e01      	subs	r6, #1
 80096d2:	e79b      	b.n	800960c <__multiply+0x84>
 80096d4:	0800c952 	.word	0x0800c952
 80096d8:	0800c963 	.word	0x0800c963

080096dc <__pow5mult>:
 80096dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e0:	4615      	mov	r5, r2
 80096e2:	f012 0203 	ands.w	r2, r2, #3
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	d007      	beq.n	80096fc <__pow5mult+0x20>
 80096ec:	4c25      	ldr	r4, [pc, #148]	; (8009784 <__pow5mult+0xa8>)
 80096ee:	3a01      	subs	r2, #1
 80096f0:	2300      	movs	r3, #0
 80096f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f6:	f7ff fe53 	bl	80093a0 <__multadd>
 80096fa:	4607      	mov	r7, r0
 80096fc:	10ad      	asrs	r5, r5, #2
 80096fe:	d03d      	beq.n	800977c <__pow5mult+0xa0>
 8009700:	69f4      	ldr	r4, [r6, #28]
 8009702:	b97c      	cbnz	r4, 8009724 <__pow5mult+0x48>
 8009704:	2010      	movs	r0, #16
 8009706:	f7ff fd35 	bl	8009174 <malloc>
 800970a:	4602      	mov	r2, r0
 800970c:	61f0      	str	r0, [r6, #28]
 800970e:	b928      	cbnz	r0, 800971c <__pow5mult+0x40>
 8009710:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <__pow5mult+0xac>)
 8009712:	481e      	ldr	r0, [pc, #120]	; (800978c <__pow5mult+0xb0>)
 8009714:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009718:	f7fe fe46 	bl	80083a8 <__assert_func>
 800971c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009720:	6004      	str	r4, [r0, #0]
 8009722:	60c4      	str	r4, [r0, #12]
 8009724:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800972c:	b94c      	cbnz	r4, 8009742 <__pow5mult+0x66>
 800972e:	f240 2171 	movw	r1, #625	; 0x271
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff ff12 	bl	800955c <__i2b>
 8009738:	2300      	movs	r3, #0
 800973a:	f8c8 0008 	str.w	r0, [r8, #8]
 800973e:	4604      	mov	r4, r0
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	f04f 0900 	mov.w	r9, #0
 8009746:	07eb      	lsls	r3, r5, #31
 8009748:	d50a      	bpl.n	8009760 <__pow5mult+0x84>
 800974a:	4639      	mov	r1, r7
 800974c:	4622      	mov	r2, r4
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ff1a 	bl	8009588 <__multiply>
 8009754:	4639      	mov	r1, r7
 8009756:	4680      	mov	r8, r0
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff fdff 	bl	800935c <_Bfree>
 800975e:	4647      	mov	r7, r8
 8009760:	106d      	asrs	r5, r5, #1
 8009762:	d00b      	beq.n	800977c <__pow5mult+0xa0>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	b938      	cbnz	r0, 8009778 <__pow5mult+0x9c>
 8009768:	4622      	mov	r2, r4
 800976a:	4621      	mov	r1, r4
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff ff0b 	bl	8009588 <__multiply>
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	f8c0 9000 	str.w	r9, [r0]
 8009778:	4604      	mov	r4, r0
 800977a:	e7e4      	b.n	8009746 <__pow5mult+0x6a>
 800977c:	4638      	mov	r0, r7
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009782:	bf00      	nop
 8009784:	0800cab0 	.word	0x0800cab0
 8009788:	0800c840 	.word	0x0800c840
 800978c:	0800c963 	.word	0x0800c963

08009790 <__lshift>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	6849      	ldr	r1, [r1, #4]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	4607      	mov	r7, r0
 80097a2:	4691      	mov	r9, r2
 80097a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a8:	f108 0601 	add.w	r6, r8, #1
 80097ac:	42b3      	cmp	r3, r6
 80097ae:	db0b      	blt.n	80097c8 <__lshift+0x38>
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff fd93 	bl	80092dc <_Balloc>
 80097b6:	4605      	mov	r5, r0
 80097b8:	b948      	cbnz	r0, 80097ce <__lshift+0x3e>
 80097ba:	4602      	mov	r2, r0
 80097bc:	4b28      	ldr	r3, [pc, #160]	; (8009860 <__lshift+0xd0>)
 80097be:	4829      	ldr	r0, [pc, #164]	; (8009864 <__lshift+0xd4>)
 80097c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80097c4:	f7fe fdf0 	bl	80083a8 <__assert_func>
 80097c8:	3101      	adds	r1, #1
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	e7ee      	b.n	80097ac <__lshift+0x1c>
 80097ce:	2300      	movs	r3, #0
 80097d0:	f100 0114 	add.w	r1, r0, #20
 80097d4:	f100 0210 	add.w	r2, r0, #16
 80097d8:	4618      	mov	r0, r3
 80097da:	4553      	cmp	r3, sl
 80097dc:	db33      	blt.n	8009846 <__lshift+0xb6>
 80097de:	6920      	ldr	r0, [r4, #16]
 80097e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e4:	f104 0314 	add.w	r3, r4, #20
 80097e8:	f019 091f 	ands.w	r9, r9, #31
 80097ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f4:	d02b      	beq.n	800984e <__lshift+0xbe>
 80097f6:	f1c9 0e20 	rsb	lr, r9, #32
 80097fa:	468a      	mov	sl, r1
 80097fc:	2200      	movs	r2, #0
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	fa00 f009 	lsl.w	r0, r0, r9
 8009804:	4310      	orrs	r0, r2
 8009806:	f84a 0b04 	str.w	r0, [sl], #4
 800980a:	f853 2b04 	ldr.w	r2, [r3], #4
 800980e:	459c      	cmp	ip, r3
 8009810:	fa22 f20e 	lsr.w	r2, r2, lr
 8009814:	d8f3      	bhi.n	80097fe <__lshift+0x6e>
 8009816:	ebac 0304 	sub.w	r3, ip, r4
 800981a:	3b15      	subs	r3, #21
 800981c:	f023 0303 	bic.w	r3, r3, #3
 8009820:	3304      	adds	r3, #4
 8009822:	f104 0015 	add.w	r0, r4, #21
 8009826:	4584      	cmp	ip, r0
 8009828:	bf38      	it	cc
 800982a:	2304      	movcc	r3, #4
 800982c:	50ca      	str	r2, [r1, r3]
 800982e:	b10a      	cbz	r2, 8009834 <__lshift+0xa4>
 8009830:	f108 0602 	add.w	r6, r8, #2
 8009834:	3e01      	subs	r6, #1
 8009836:	4638      	mov	r0, r7
 8009838:	612e      	str	r6, [r5, #16]
 800983a:	4621      	mov	r1, r4
 800983c:	f7ff fd8e 	bl	800935c <_Bfree>
 8009840:	4628      	mov	r0, r5
 8009842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009846:	f842 0f04 	str.w	r0, [r2, #4]!
 800984a:	3301      	adds	r3, #1
 800984c:	e7c5      	b.n	80097da <__lshift+0x4a>
 800984e:	3904      	subs	r1, #4
 8009850:	f853 2b04 	ldr.w	r2, [r3], #4
 8009854:	f841 2f04 	str.w	r2, [r1, #4]!
 8009858:	459c      	cmp	ip, r3
 800985a:	d8f9      	bhi.n	8009850 <__lshift+0xc0>
 800985c:	e7ea      	b.n	8009834 <__lshift+0xa4>
 800985e:	bf00      	nop
 8009860:	0800c952 	.word	0x0800c952
 8009864:	0800c963 	.word	0x0800c963

08009868 <__mcmp>:
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	6902      	ldr	r2, [r0, #16]
 800986c:	690c      	ldr	r4, [r1, #16]
 800986e:	1b12      	subs	r2, r2, r4
 8009870:	d10e      	bne.n	8009890 <__mcmp+0x28>
 8009872:	f100 0314 	add.w	r3, r0, #20
 8009876:	3114      	adds	r1, #20
 8009878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800987c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009888:	42a5      	cmp	r5, r4
 800988a:	d003      	beq.n	8009894 <__mcmp+0x2c>
 800988c:	d305      	bcc.n	800989a <__mcmp+0x32>
 800988e:	2201      	movs	r2, #1
 8009890:	4610      	mov	r0, r2
 8009892:	bd30      	pop	{r4, r5, pc}
 8009894:	4283      	cmp	r3, r0
 8009896:	d3f3      	bcc.n	8009880 <__mcmp+0x18>
 8009898:	e7fa      	b.n	8009890 <__mcmp+0x28>
 800989a:	f04f 32ff 	mov.w	r2, #4294967295
 800989e:	e7f7      	b.n	8009890 <__mcmp+0x28>

080098a0 <__mdiff>:
 80098a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	4606      	mov	r6, r0
 80098a8:	4611      	mov	r1, r2
 80098aa:	4620      	mov	r0, r4
 80098ac:	4690      	mov	r8, r2
 80098ae:	f7ff ffdb 	bl	8009868 <__mcmp>
 80098b2:	1e05      	subs	r5, r0, #0
 80098b4:	d110      	bne.n	80098d8 <__mdiff+0x38>
 80098b6:	4629      	mov	r1, r5
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff fd0f 	bl	80092dc <_Balloc>
 80098be:	b930      	cbnz	r0, 80098ce <__mdiff+0x2e>
 80098c0:	4b3a      	ldr	r3, [pc, #232]	; (80099ac <__mdiff+0x10c>)
 80098c2:	4602      	mov	r2, r0
 80098c4:	f240 2137 	movw	r1, #567	; 0x237
 80098c8:	4839      	ldr	r0, [pc, #228]	; (80099b0 <__mdiff+0x110>)
 80098ca:	f7fe fd6d 	bl	80083a8 <__assert_func>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	bfa4      	itt	ge
 80098da:	4643      	movge	r3, r8
 80098dc:	46a0      	movge	r8, r4
 80098de:	4630      	mov	r0, r6
 80098e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098e4:	bfa6      	itte	ge
 80098e6:	461c      	movge	r4, r3
 80098e8:	2500      	movge	r5, #0
 80098ea:	2501      	movlt	r5, #1
 80098ec:	f7ff fcf6 	bl	80092dc <_Balloc>
 80098f0:	b920      	cbnz	r0, 80098fc <__mdiff+0x5c>
 80098f2:	4b2e      	ldr	r3, [pc, #184]	; (80099ac <__mdiff+0x10c>)
 80098f4:	4602      	mov	r2, r0
 80098f6:	f240 2145 	movw	r1, #581	; 0x245
 80098fa:	e7e5      	b.n	80098c8 <__mdiff+0x28>
 80098fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009900:	6926      	ldr	r6, [r4, #16]
 8009902:	60c5      	str	r5, [r0, #12]
 8009904:	f104 0914 	add.w	r9, r4, #20
 8009908:	f108 0514 	add.w	r5, r8, #20
 800990c:	f100 0e14 	add.w	lr, r0, #20
 8009910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009918:	f108 0210 	add.w	r2, r8, #16
 800991c:	46f2      	mov	sl, lr
 800991e:	2100      	movs	r1, #0
 8009920:	f859 3b04 	ldr.w	r3, [r9], #4
 8009924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009928:	fa11 f88b 	uxtah	r8, r1, fp
 800992c:	b299      	uxth	r1, r3
 800992e:	0c1b      	lsrs	r3, r3, #16
 8009930:	eba8 0801 	sub.w	r8, r8, r1
 8009934:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009938:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800993c:	fa1f f888 	uxth.w	r8, r8
 8009940:	1419      	asrs	r1, r3, #16
 8009942:	454e      	cmp	r6, r9
 8009944:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009948:	f84a 3b04 	str.w	r3, [sl], #4
 800994c:	d8e8      	bhi.n	8009920 <__mdiff+0x80>
 800994e:	1b33      	subs	r3, r6, r4
 8009950:	3b15      	subs	r3, #21
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	3304      	adds	r3, #4
 8009958:	3415      	adds	r4, #21
 800995a:	42a6      	cmp	r6, r4
 800995c:	bf38      	it	cc
 800995e:	2304      	movcc	r3, #4
 8009960:	441d      	add	r5, r3
 8009962:	4473      	add	r3, lr
 8009964:	469e      	mov	lr, r3
 8009966:	462e      	mov	r6, r5
 8009968:	4566      	cmp	r6, ip
 800996a:	d30e      	bcc.n	800998a <__mdiff+0xea>
 800996c:	f10c 0203 	add.w	r2, ip, #3
 8009970:	1b52      	subs	r2, r2, r5
 8009972:	f022 0203 	bic.w	r2, r2, #3
 8009976:	3d03      	subs	r5, #3
 8009978:	45ac      	cmp	ip, r5
 800997a:	bf38      	it	cc
 800997c:	2200      	movcc	r2, #0
 800997e:	4413      	add	r3, r2
 8009980:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009984:	b17a      	cbz	r2, 80099a6 <__mdiff+0x106>
 8009986:	6107      	str	r7, [r0, #16]
 8009988:	e7a4      	b.n	80098d4 <__mdiff+0x34>
 800998a:	f856 8b04 	ldr.w	r8, [r6], #4
 800998e:	fa11 f288 	uxtah	r2, r1, r8
 8009992:	1414      	asrs	r4, r2, #16
 8009994:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009998:	b292      	uxth	r2, r2
 800999a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800999e:	f84e 2b04 	str.w	r2, [lr], #4
 80099a2:	1421      	asrs	r1, r4, #16
 80099a4:	e7e0      	b.n	8009968 <__mdiff+0xc8>
 80099a6:	3f01      	subs	r7, #1
 80099a8:	e7ea      	b.n	8009980 <__mdiff+0xe0>
 80099aa:	bf00      	nop
 80099ac:	0800c952 	.word	0x0800c952
 80099b0:	0800c963 	.word	0x0800c963

080099b4 <__ulp>:
 80099b4:	b082      	sub	sp, #8
 80099b6:	ed8d 0b00 	vstr	d0, [sp]
 80099ba:	9a01      	ldr	r2, [sp, #4]
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <__ulp+0x48>)
 80099be:	4013      	ands	r3, r2
 80099c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dc08      	bgt.n	80099da <__ulp+0x26>
 80099c8:	425b      	negs	r3, r3
 80099ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80099ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099d2:	da04      	bge.n	80099de <__ulp+0x2a>
 80099d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099d8:	4113      	asrs	r3, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	e008      	b.n	80099f0 <__ulp+0x3c>
 80099de:	f1a2 0314 	sub.w	r3, r2, #20
 80099e2:	2b1e      	cmp	r3, #30
 80099e4:	bfda      	itte	le
 80099e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80099ea:	40da      	lsrle	r2, r3
 80099ec:	2201      	movgt	r2, #1
 80099ee:	2300      	movs	r3, #0
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	ec41 0b10 	vmov	d0, r0, r1
 80099f8:	b002      	add	sp, #8
 80099fa:	4770      	bx	lr
 80099fc:	7ff00000 	.word	0x7ff00000

08009a00 <__b2d>:
 8009a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a04:	6906      	ldr	r6, [r0, #16]
 8009a06:	f100 0814 	add.w	r8, r0, #20
 8009a0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a0e:	1f37      	subs	r7, r6, #4
 8009a10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a14:	4610      	mov	r0, r2
 8009a16:	f7ff fd53 	bl	80094c0 <__hi0bits>
 8009a1a:	f1c0 0320 	rsb	r3, r0, #32
 8009a1e:	280a      	cmp	r0, #10
 8009a20:	600b      	str	r3, [r1, #0]
 8009a22:	491b      	ldr	r1, [pc, #108]	; (8009a90 <__b2d+0x90>)
 8009a24:	dc15      	bgt.n	8009a52 <__b2d+0x52>
 8009a26:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a2e:	45b8      	cmp	r8, r7
 8009a30:	ea43 0501 	orr.w	r5, r3, r1
 8009a34:	bf34      	ite	cc
 8009a36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a3a:	2300      	movcs	r3, #0
 8009a3c:	3015      	adds	r0, #21
 8009a3e:	fa02 f000 	lsl.w	r0, r2, r0
 8009a42:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a46:	4303      	orrs	r3, r0
 8009a48:	461c      	mov	r4, r3
 8009a4a:	ec45 4b10 	vmov	d0, r4, r5
 8009a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a52:	45b8      	cmp	r8, r7
 8009a54:	bf3a      	itte	cc
 8009a56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a5e:	2300      	movcs	r3, #0
 8009a60:	380b      	subs	r0, #11
 8009a62:	d012      	beq.n	8009a8a <__b2d+0x8a>
 8009a64:	f1c0 0120 	rsb	r1, r0, #32
 8009a68:	fa23 f401 	lsr.w	r4, r3, r1
 8009a6c:	4082      	lsls	r2, r0
 8009a6e:	4322      	orrs	r2, r4
 8009a70:	4547      	cmp	r7, r8
 8009a72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009a76:	bf8c      	ite	hi
 8009a78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a7c:	2200      	movls	r2, #0
 8009a7e:	4083      	lsls	r3, r0
 8009a80:	40ca      	lsrs	r2, r1
 8009a82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a86:	4313      	orrs	r3, r2
 8009a88:	e7de      	b.n	8009a48 <__b2d+0x48>
 8009a8a:	ea42 0501 	orr.w	r5, r2, r1
 8009a8e:	e7db      	b.n	8009a48 <__b2d+0x48>
 8009a90:	3ff00000 	.word	0x3ff00000

08009a94 <__d2b>:
 8009a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	460f      	mov	r7, r1
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	ec59 8b10 	vmov	r8, r9, d0
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	f7ff fc1b 	bl	80092dc <_Balloc>
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	b930      	cbnz	r0, 8009ab8 <__d2b+0x24>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b24      	ldr	r3, [pc, #144]	; (8009b40 <__d2b+0xac>)
 8009aae:	4825      	ldr	r0, [pc, #148]	; (8009b44 <__d2b+0xb0>)
 8009ab0:	f240 310f 	movw	r1, #783	; 0x30f
 8009ab4:	f7fe fc78 	bl	80083a8 <__assert_func>
 8009ab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009abc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ac0:	bb2d      	cbnz	r5, 8009b0e <__d2b+0x7a>
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ac8:	d026      	beq.n	8009b18 <__d2b+0x84>
 8009aca:	4668      	mov	r0, sp
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	f7ff fd17 	bl	8009500 <__lo0bits>
 8009ad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ad6:	b1e8      	cbz	r0, 8009b14 <__d2b+0x80>
 8009ad8:	f1c0 0320 	rsb	r3, r0, #32
 8009adc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	40c2      	lsrs	r2, r0
 8009ae4:	6163      	str	r3, [r4, #20]
 8009ae6:	9201      	str	r2, [sp, #4]
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	61a3      	str	r3, [r4, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bf14      	ite	ne
 8009af0:	2202      	movne	r2, #2
 8009af2:	2201      	moveq	r2, #1
 8009af4:	6122      	str	r2, [r4, #16]
 8009af6:	b1bd      	cbz	r5, 8009b28 <__d2b+0x94>
 8009af8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009afc:	4405      	add	r5, r0
 8009afe:	603d      	str	r5, [r7, #0]
 8009b00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b04:	6030      	str	r0, [r6, #0]
 8009b06:	4620      	mov	r0, r4
 8009b08:	b003      	add	sp, #12
 8009b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b12:	e7d6      	b.n	8009ac2 <__d2b+0x2e>
 8009b14:	6161      	str	r1, [r4, #20]
 8009b16:	e7e7      	b.n	8009ae8 <__d2b+0x54>
 8009b18:	a801      	add	r0, sp, #4
 8009b1a:	f7ff fcf1 	bl	8009500 <__lo0bits>
 8009b1e:	9b01      	ldr	r3, [sp, #4]
 8009b20:	6163      	str	r3, [r4, #20]
 8009b22:	3020      	adds	r0, #32
 8009b24:	2201      	movs	r2, #1
 8009b26:	e7e5      	b.n	8009af4 <__d2b+0x60>
 8009b28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b30:	6038      	str	r0, [r7, #0]
 8009b32:	6918      	ldr	r0, [r3, #16]
 8009b34:	f7ff fcc4 	bl	80094c0 <__hi0bits>
 8009b38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b3c:	e7e2      	b.n	8009b04 <__d2b+0x70>
 8009b3e:	bf00      	nop
 8009b40:	0800c952 	.word	0x0800c952
 8009b44:	0800c963 	.word	0x0800c963

08009b48 <__ratio>:
 8009b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	4688      	mov	r8, r1
 8009b4e:	4669      	mov	r1, sp
 8009b50:	4681      	mov	r9, r0
 8009b52:	f7ff ff55 	bl	8009a00 <__b2d>
 8009b56:	a901      	add	r1, sp, #4
 8009b58:	4640      	mov	r0, r8
 8009b5a:	ec55 4b10 	vmov	r4, r5, d0
 8009b5e:	f7ff ff4f 	bl	8009a00 <__b2d>
 8009b62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b6a:	eba3 0c02 	sub.w	ip, r3, r2
 8009b6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b72:	1a9b      	subs	r3, r3, r2
 8009b74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b78:	ec51 0b10 	vmov	r0, r1, d0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfd6      	itet	le
 8009b80:	460a      	movle	r2, r1
 8009b82:	462a      	movgt	r2, r5
 8009b84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b88:	468b      	mov	fp, r1
 8009b8a:	462f      	mov	r7, r5
 8009b8c:	bfd4      	ite	le
 8009b8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b96:	4620      	mov	r0, r4
 8009b98:	ee10 2a10 	vmov	r2, s0
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 fe54 	bl	800084c <__aeabi_ddiv>
 8009ba4:	ec41 0b10 	vmov	d0, r0, r1
 8009ba8:	b003      	add	sp, #12
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bae <__copybits>:
 8009bae:	3901      	subs	r1, #1
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	1149      	asrs	r1, r1, #5
 8009bb4:	6914      	ldr	r4, [r2, #16]
 8009bb6:	3101      	adds	r1, #1
 8009bb8:	f102 0314 	add.w	r3, r2, #20
 8009bbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bc4:	1f05      	subs	r5, r0, #4
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	d30c      	bcc.n	8009be4 <__copybits+0x36>
 8009bca:	1aa3      	subs	r3, r4, r2
 8009bcc:	3b11      	subs	r3, #17
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	3211      	adds	r2, #17
 8009bd4:	42a2      	cmp	r2, r4
 8009bd6:	bf88      	it	hi
 8009bd8:	2300      	movhi	r3, #0
 8009bda:	4418      	add	r0, r3
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4288      	cmp	r0, r1
 8009be0:	d305      	bcc.n	8009bee <__copybits+0x40>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009be8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bec:	e7eb      	b.n	8009bc6 <__copybits+0x18>
 8009bee:	f840 3b04 	str.w	r3, [r0], #4
 8009bf2:	e7f4      	b.n	8009bde <__copybits+0x30>

08009bf4 <__any_on>:
 8009bf4:	f100 0214 	add.w	r2, r0, #20
 8009bf8:	6900      	ldr	r0, [r0, #16]
 8009bfa:	114b      	asrs	r3, r1, #5
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	b510      	push	{r4, lr}
 8009c00:	db11      	blt.n	8009c26 <__any_on+0x32>
 8009c02:	dd0a      	ble.n	8009c1a <__any_on+0x26>
 8009c04:	f011 011f 	ands.w	r1, r1, #31
 8009c08:	d007      	beq.n	8009c1a <__any_on+0x26>
 8009c0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c0e:	fa24 f001 	lsr.w	r0, r4, r1
 8009c12:	fa00 f101 	lsl.w	r1, r0, r1
 8009c16:	428c      	cmp	r4, r1
 8009c18:	d10b      	bne.n	8009c32 <__any_on+0x3e>
 8009c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d803      	bhi.n	8009c2a <__any_on+0x36>
 8009c22:	2000      	movs	r0, #0
 8009c24:	bd10      	pop	{r4, pc}
 8009c26:	4603      	mov	r3, r0
 8009c28:	e7f7      	b.n	8009c1a <__any_on+0x26>
 8009c2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c2e:	2900      	cmp	r1, #0
 8009c30:	d0f5      	beq.n	8009c1e <__any_on+0x2a>
 8009c32:	2001      	movs	r0, #1
 8009c34:	e7f6      	b.n	8009c24 <__any_on+0x30>

08009c36 <sulp>:
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	4604      	mov	r4, r0
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	ec45 4b10 	vmov	d0, r4, r5
 8009c40:	4616      	mov	r6, r2
 8009c42:	f7ff feb7 	bl	80099b4 <__ulp>
 8009c46:	ec51 0b10 	vmov	r0, r1, d0
 8009c4a:	b17e      	cbz	r6, 8009c6c <sulp+0x36>
 8009c4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd09      	ble.n	8009c6c <sulp+0x36>
 8009c58:	051b      	lsls	r3, r3, #20
 8009c5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c5e:	2400      	movs	r4, #0
 8009c60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c64:	4622      	mov	r2, r4
 8009c66:	462b      	mov	r3, r5
 8009c68:	f7f6 fcc6 	bl	80005f8 <__aeabi_dmul>
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c70 <_strtod_l>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	ed2d 8b02 	vpush	{d8}
 8009c78:	b09b      	sub	sp, #108	; 0x6c
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c7e:	2200      	movs	r2, #0
 8009c80:	9216      	str	r2, [sp, #88]	; 0x58
 8009c82:	460d      	mov	r5, r1
 8009c84:	f04f 0800 	mov.w	r8, #0
 8009c88:	f04f 0900 	mov.w	r9, #0
 8009c8c:	460a      	mov	r2, r1
 8009c8e:	9215      	str	r2, [sp, #84]	; 0x54
 8009c90:	7811      	ldrb	r1, [r2, #0]
 8009c92:	292b      	cmp	r1, #43	; 0x2b
 8009c94:	d04c      	beq.n	8009d30 <_strtod_l+0xc0>
 8009c96:	d83a      	bhi.n	8009d0e <_strtod_l+0x9e>
 8009c98:	290d      	cmp	r1, #13
 8009c9a:	d834      	bhi.n	8009d06 <_strtod_l+0x96>
 8009c9c:	2908      	cmp	r1, #8
 8009c9e:	d834      	bhi.n	8009d0a <_strtod_l+0x9a>
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	d03d      	beq.n	8009d20 <_strtod_l+0xb0>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ca8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009caa:	7832      	ldrb	r2, [r6, #0]
 8009cac:	2a30      	cmp	r2, #48	; 0x30
 8009cae:	f040 80b4 	bne.w	8009e1a <_strtod_l+0x1aa>
 8009cb2:	7872      	ldrb	r2, [r6, #1]
 8009cb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009cb8:	2a58      	cmp	r2, #88	; 0x58
 8009cba:	d170      	bne.n	8009d9e <_strtod_l+0x12e>
 8009cbc:	9302      	str	r3, [sp, #8]
 8009cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	ab16      	add	r3, sp, #88	; 0x58
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4a8e      	ldr	r2, [pc, #568]	; (8009f00 <_strtod_l+0x290>)
 8009cc8:	ab17      	add	r3, sp, #92	; 0x5c
 8009cca:	a915      	add	r1, sp, #84	; 0x54
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f001 fdef 	bl	800b8b0 <__gethex>
 8009cd2:	f010 070f 	ands.w	r7, r0, #15
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	d005      	beq.n	8009ce6 <_strtod_l+0x76>
 8009cda:	2f06      	cmp	r7, #6
 8009cdc:	d12a      	bne.n	8009d34 <_strtod_l+0xc4>
 8009cde:	3601      	adds	r6, #1
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9615      	str	r6, [sp, #84]	; 0x54
 8009ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 857f 	bne.w	800a7ec <_strtod_l+0xb7c>
 8009cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf0:	b1db      	cbz	r3, 8009d2a <_strtod_l+0xba>
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cf8:	ec43 2b10 	vmov	d0, r2, r3
 8009cfc:	b01b      	add	sp, #108	; 0x6c
 8009cfe:	ecbd 8b02 	vpop	{d8}
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	2920      	cmp	r1, #32
 8009d08:	d1cc      	bne.n	8009ca4 <_strtod_l+0x34>
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	e7bf      	b.n	8009c8e <_strtod_l+0x1e>
 8009d0e:	292d      	cmp	r1, #45	; 0x2d
 8009d10:	d1c8      	bne.n	8009ca4 <_strtod_l+0x34>
 8009d12:	2101      	movs	r1, #1
 8009d14:	910a      	str	r1, [sp, #40]	; 0x28
 8009d16:	1c51      	adds	r1, r2, #1
 8009d18:	9115      	str	r1, [sp, #84]	; 0x54
 8009d1a:	7852      	ldrb	r2, [r2, #1]
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	d1c3      	bne.n	8009ca8 <_strtod_l+0x38>
 8009d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d22:	9515      	str	r5, [sp, #84]	; 0x54
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 855f 	bne.w	800a7e8 <_strtod_l+0xb78>
 8009d2a:	4642      	mov	r2, r8
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	e7e3      	b.n	8009cf8 <_strtod_l+0x88>
 8009d30:	2100      	movs	r1, #0
 8009d32:	e7ef      	b.n	8009d14 <_strtod_l+0xa4>
 8009d34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d36:	b13a      	cbz	r2, 8009d48 <_strtod_l+0xd8>
 8009d38:	2135      	movs	r1, #53	; 0x35
 8009d3a:	a818      	add	r0, sp, #96	; 0x60
 8009d3c:	f7ff ff37 	bl	8009bae <__copybits>
 8009d40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fb0a 	bl	800935c <_Bfree>
 8009d48:	3f01      	subs	r7, #1
 8009d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d4c:	2f04      	cmp	r7, #4
 8009d4e:	d806      	bhi.n	8009d5e <_strtod_l+0xee>
 8009d50:	e8df f007 	tbb	[pc, r7]
 8009d54:	201d0314 	.word	0x201d0314
 8009d58:	14          	.byte	0x14
 8009d59:	00          	.byte	0x00
 8009d5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009d5e:	05e9      	lsls	r1, r5, #23
 8009d60:	bf48      	it	mi
 8009d62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d6a:	0d1b      	lsrs	r3, r3, #20
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1b9      	bne.n	8009ce6 <_strtod_l+0x76>
 8009d72:	f7fe facf 	bl	8008314 <__errno>
 8009d76:	2322      	movs	r3, #34	; 0x22
 8009d78:	6003      	str	r3, [r0, #0]
 8009d7a:	e7b4      	b.n	8009ce6 <_strtod_l+0x76>
 8009d7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009d80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009d8c:	e7e7      	b.n	8009d5e <_strtod_l+0xee>
 8009d8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f08 <_strtod_l+0x298>
 8009d92:	e7e4      	b.n	8009d5e <_strtod_l+0xee>
 8009d94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d98:	f04f 38ff 	mov.w	r8, #4294967295
 8009d9c:	e7df      	b.n	8009d5e <_strtod_l+0xee>
 8009d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	9215      	str	r2, [sp, #84]	; 0x54
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b30      	cmp	r3, #48	; 0x30
 8009da8:	d0f9      	beq.n	8009d9e <_strtod_l+0x12e>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d09b      	beq.n	8009ce6 <_strtod_l+0x76>
 8009dae:	2301      	movs	r3, #1
 8009db0:	f04f 0a00 	mov.w	sl, #0
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009dbe:	46d3      	mov	fp, sl
 8009dc0:	220a      	movs	r2, #10
 8009dc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009dc4:	7806      	ldrb	r6, [r0, #0]
 8009dc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009dca:	b2d9      	uxtb	r1, r3
 8009dcc:	2909      	cmp	r1, #9
 8009dce:	d926      	bls.n	8009e1e <_strtod_l+0x1ae>
 8009dd0:	494c      	ldr	r1, [pc, #304]	; (8009f04 <_strtod_l+0x294>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f7fe f9bd 	bl	8008152 <strncmp>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d030      	beq.n	8009e3e <_strtod_l+0x1ce>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	4632      	mov	r2, r6
 8009de0:	9005      	str	r0, [sp, #20]
 8009de2:	465e      	mov	r6, fp
 8009de4:	4603      	mov	r3, r0
 8009de6:	2a65      	cmp	r2, #101	; 0x65
 8009de8:	d001      	beq.n	8009dee <_strtod_l+0x17e>
 8009dea:	2a45      	cmp	r2, #69	; 0x45
 8009dec:	d113      	bne.n	8009e16 <_strtod_l+0x1a6>
 8009dee:	b91e      	cbnz	r6, 8009df8 <_strtod_l+0x188>
 8009df0:	9a04      	ldr	r2, [sp, #16]
 8009df2:	4302      	orrs	r2, r0
 8009df4:	d094      	beq.n	8009d20 <_strtod_l+0xb0>
 8009df6:	2600      	movs	r6, #0
 8009df8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009dfa:	1c6a      	adds	r2, r5, #1
 8009dfc:	9215      	str	r2, [sp, #84]	; 0x54
 8009dfe:	786a      	ldrb	r2, [r5, #1]
 8009e00:	2a2b      	cmp	r2, #43	; 0x2b
 8009e02:	d074      	beq.n	8009eee <_strtod_l+0x27e>
 8009e04:	2a2d      	cmp	r2, #45	; 0x2d
 8009e06:	d078      	beq.n	8009efa <_strtod_l+0x28a>
 8009e08:	f04f 0c00 	mov.w	ip, #0
 8009e0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e10:	2909      	cmp	r1, #9
 8009e12:	d97f      	bls.n	8009f14 <_strtod_l+0x2a4>
 8009e14:	9515      	str	r5, [sp, #84]	; 0x54
 8009e16:	2700      	movs	r7, #0
 8009e18:	e09e      	b.n	8009f58 <_strtod_l+0x2e8>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e7c8      	b.n	8009db0 <_strtod_l+0x140>
 8009e1e:	f1bb 0f08 	cmp.w	fp, #8
 8009e22:	bfd8      	it	le
 8009e24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009e26:	f100 0001 	add.w	r0, r0, #1
 8009e2a:	bfda      	itte	le
 8009e2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e30:	9309      	strle	r3, [sp, #36]	; 0x24
 8009e32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009e36:	f10b 0b01 	add.w	fp, fp, #1
 8009e3a:	9015      	str	r0, [sp, #84]	; 0x54
 8009e3c:	e7c1      	b.n	8009dc2 <_strtod_l+0x152>
 8009e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	9215      	str	r2, [sp, #84]	; 0x54
 8009e44:	785a      	ldrb	r2, [r3, #1]
 8009e46:	f1bb 0f00 	cmp.w	fp, #0
 8009e4a:	d037      	beq.n	8009ebc <_strtod_l+0x24c>
 8009e4c:	9005      	str	r0, [sp, #20]
 8009e4e:	465e      	mov	r6, fp
 8009e50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	d912      	bls.n	8009e7e <_strtod_l+0x20e>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7c4      	b.n	8009de6 <_strtod_l+0x176>
 8009e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	9215      	str	r2, [sp, #84]	; 0x54
 8009e62:	785a      	ldrb	r2, [r3, #1]
 8009e64:	3001      	adds	r0, #1
 8009e66:	2a30      	cmp	r2, #48	; 0x30
 8009e68:	d0f8      	beq.n	8009e5c <_strtod_l+0x1ec>
 8009e6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e6e:	2b08      	cmp	r3, #8
 8009e70:	f200 84c1 	bhi.w	800a7f6 <_strtod_l+0xb86>
 8009e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e76:	9005      	str	r0, [sp, #20]
 8009e78:	2000      	movs	r0, #0
 8009e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	3a30      	subs	r2, #48	; 0x30
 8009e80:	f100 0301 	add.w	r3, r0, #1
 8009e84:	d014      	beq.n	8009eb0 <_strtod_l+0x240>
 8009e86:	9905      	ldr	r1, [sp, #20]
 8009e88:	4419      	add	r1, r3
 8009e8a:	9105      	str	r1, [sp, #20]
 8009e8c:	4633      	mov	r3, r6
 8009e8e:	eb00 0c06 	add.w	ip, r0, r6
 8009e92:	210a      	movs	r1, #10
 8009e94:	4563      	cmp	r3, ip
 8009e96:	d113      	bne.n	8009ec0 <_strtod_l+0x250>
 8009e98:	1833      	adds	r3, r6, r0
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	f106 0601 	add.w	r6, r6, #1
 8009ea0:	4406      	add	r6, r0
 8009ea2:	dc1a      	bgt.n	8009eda <_strtod_l+0x26a>
 8009ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ea6:	230a      	movs	r3, #10
 8009ea8:	fb03 2301 	mla	r3, r3, r1, r2
 8009eac:	9309      	str	r3, [sp, #36]	; 0x24
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009eb2:	1c51      	adds	r1, r2, #1
 8009eb4:	9115      	str	r1, [sp, #84]	; 0x54
 8009eb6:	7852      	ldrb	r2, [r2, #1]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	e7c9      	b.n	8009e50 <_strtod_l+0x1e0>
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	e7d2      	b.n	8009e66 <_strtod_l+0x1f6>
 8009ec0:	2b08      	cmp	r3, #8
 8009ec2:	f103 0301 	add.w	r3, r3, #1
 8009ec6:	dc03      	bgt.n	8009ed0 <_strtod_l+0x260>
 8009ec8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009eca:	434f      	muls	r7, r1
 8009ecc:	9709      	str	r7, [sp, #36]	; 0x24
 8009ece:	e7e1      	b.n	8009e94 <_strtod_l+0x224>
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	bfd8      	it	le
 8009ed4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009ed8:	e7dc      	b.n	8009e94 <_strtod_l+0x224>
 8009eda:	2e10      	cmp	r6, #16
 8009edc:	bfdc      	itt	le
 8009ede:	230a      	movle	r3, #10
 8009ee0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009ee4:	e7e3      	b.n	8009eae <_strtod_l+0x23e>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	2301      	movs	r3, #1
 8009eec:	e780      	b.n	8009df0 <_strtod_l+0x180>
 8009eee:	f04f 0c00 	mov.w	ip, #0
 8009ef2:	1caa      	adds	r2, r5, #2
 8009ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8009ef6:	78aa      	ldrb	r2, [r5, #2]
 8009ef8:	e788      	b.n	8009e0c <_strtod_l+0x19c>
 8009efa:	f04f 0c01 	mov.w	ip, #1
 8009efe:	e7f8      	b.n	8009ef2 <_strtod_l+0x282>
 8009f00:	0800cac0 	.word	0x0800cac0
 8009f04:	0800cabc 	.word	0x0800cabc
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f0e:	1c51      	adds	r1, r2, #1
 8009f10:	9115      	str	r1, [sp, #84]	; 0x54
 8009f12:	7852      	ldrb	r2, [r2, #1]
 8009f14:	2a30      	cmp	r2, #48	; 0x30
 8009f16:	d0f9      	beq.n	8009f0c <_strtod_l+0x29c>
 8009f18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f1c:	2908      	cmp	r1, #8
 8009f1e:	f63f af7a 	bhi.w	8009e16 <_strtod_l+0x1a6>
 8009f22:	3a30      	subs	r2, #48	; 0x30
 8009f24:	9208      	str	r2, [sp, #32]
 8009f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f28:	920c      	str	r2, [sp, #48]	; 0x30
 8009f2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f2c:	1c57      	adds	r7, r2, #1
 8009f2e:	9715      	str	r7, [sp, #84]	; 0x54
 8009f30:	7852      	ldrb	r2, [r2, #1]
 8009f32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009f36:	f1be 0f09 	cmp.w	lr, #9
 8009f3a:	d938      	bls.n	8009fae <_strtod_l+0x33e>
 8009f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f3e:	1a7f      	subs	r7, r7, r1
 8009f40:	2f08      	cmp	r7, #8
 8009f42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009f46:	dc03      	bgt.n	8009f50 <_strtod_l+0x2e0>
 8009f48:	9908      	ldr	r1, [sp, #32]
 8009f4a:	428f      	cmp	r7, r1
 8009f4c:	bfa8      	it	ge
 8009f4e:	460f      	movge	r7, r1
 8009f50:	f1bc 0f00 	cmp.w	ip, #0
 8009f54:	d000      	beq.n	8009f58 <_strtod_l+0x2e8>
 8009f56:	427f      	negs	r7, r7
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	d14f      	bne.n	8009ffc <_strtod_l+0x38c>
 8009f5c:	9904      	ldr	r1, [sp, #16]
 8009f5e:	4301      	orrs	r1, r0
 8009f60:	f47f aec1 	bne.w	8009ce6 <_strtod_l+0x76>
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f47f aedb 	bne.w	8009d20 <_strtod_l+0xb0>
 8009f6a:	2a69      	cmp	r2, #105	; 0x69
 8009f6c:	d029      	beq.n	8009fc2 <_strtod_l+0x352>
 8009f6e:	dc26      	bgt.n	8009fbe <_strtod_l+0x34e>
 8009f70:	2a49      	cmp	r2, #73	; 0x49
 8009f72:	d026      	beq.n	8009fc2 <_strtod_l+0x352>
 8009f74:	2a4e      	cmp	r2, #78	; 0x4e
 8009f76:	f47f aed3 	bne.w	8009d20 <_strtod_l+0xb0>
 8009f7a:	499b      	ldr	r1, [pc, #620]	; (800a1e8 <_strtod_l+0x578>)
 8009f7c:	a815      	add	r0, sp, #84	; 0x54
 8009f7e:	f001 fed7 	bl	800bd30 <__match>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f43f aecc 	beq.w	8009d20 <_strtod_l+0xb0>
 8009f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b28      	cmp	r3, #40	; 0x28
 8009f8e:	d12f      	bne.n	8009ff0 <_strtod_l+0x380>
 8009f90:	4996      	ldr	r1, [pc, #600]	; (800a1ec <_strtod_l+0x57c>)
 8009f92:	aa18      	add	r2, sp, #96	; 0x60
 8009f94:	a815      	add	r0, sp, #84	; 0x54
 8009f96:	f001 fedf 	bl	800bd58 <__hexnan>
 8009f9a:	2805      	cmp	r0, #5
 8009f9c:	d128      	bne.n	8009ff0 <_strtod_l+0x380>
 8009f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009fa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009fac:	e69b      	b.n	8009ce6 <_strtod_l+0x76>
 8009fae:	9f08      	ldr	r7, [sp, #32]
 8009fb0:	210a      	movs	r1, #10
 8009fb2:	fb01 2107 	mla	r1, r1, r7, r2
 8009fb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009fba:	9208      	str	r2, [sp, #32]
 8009fbc:	e7b5      	b.n	8009f2a <_strtod_l+0x2ba>
 8009fbe:	2a6e      	cmp	r2, #110	; 0x6e
 8009fc0:	e7d9      	b.n	8009f76 <_strtod_l+0x306>
 8009fc2:	498b      	ldr	r1, [pc, #556]	; (800a1f0 <_strtod_l+0x580>)
 8009fc4:	a815      	add	r0, sp, #84	; 0x54
 8009fc6:	f001 feb3 	bl	800bd30 <__match>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f43f aea8 	beq.w	8009d20 <_strtod_l+0xb0>
 8009fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fd2:	4988      	ldr	r1, [pc, #544]	; (800a1f4 <_strtod_l+0x584>)
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	a815      	add	r0, sp, #84	; 0x54
 8009fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8009fda:	f001 fea9 	bl	800bd30 <__match>
 8009fde:	b910      	cbnz	r0, 8009fe6 <_strtod_l+0x376>
 8009fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	9315      	str	r3, [sp, #84]	; 0x54
 8009fe6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a204 <_strtod_l+0x594>
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	e67a      	b.n	8009ce6 <_strtod_l+0x76>
 8009ff0:	4881      	ldr	r0, [pc, #516]	; (800a1f8 <_strtod_l+0x588>)
 8009ff2:	f001 fbd1 	bl	800b798 <nan>
 8009ff6:	ec59 8b10 	vmov	r8, r9, d0
 8009ffa:	e674      	b.n	8009ce6 <_strtod_l+0x76>
 8009ffc:	9b05      	ldr	r3, [sp, #20]
 8009ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a000:	1afb      	subs	r3, r7, r3
 800a002:	f1bb 0f00 	cmp.w	fp, #0
 800a006:	bf08      	it	eq
 800a008:	46b3      	moveq	fp, r6
 800a00a:	2e10      	cmp	r6, #16
 800a00c:	9308      	str	r3, [sp, #32]
 800a00e:	4635      	mov	r5, r6
 800a010:	bfa8      	it	ge
 800a012:	2510      	movge	r5, #16
 800a014:	f7f6 fa76 	bl	8000504 <__aeabi_ui2d>
 800a018:	2e09      	cmp	r6, #9
 800a01a:	4680      	mov	r8, r0
 800a01c:	4689      	mov	r9, r1
 800a01e:	dd13      	ble.n	800a048 <_strtod_l+0x3d8>
 800a020:	4b76      	ldr	r3, [pc, #472]	; (800a1fc <_strtod_l+0x58c>)
 800a022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a02a:	f7f6 fae5 	bl	80005f8 <__aeabi_dmul>
 800a02e:	4680      	mov	r8, r0
 800a030:	4650      	mov	r0, sl
 800a032:	4689      	mov	r9, r1
 800a034:	f7f6 fa66 	bl	8000504 <__aeabi_ui2d>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4640      	mov	r0, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	f7f6 f924 	bl	800028c <__adddf3>
 800a044:	4680      	mov	r8, r0
 800a046:	4689      	mov	r9, r1
 800a048:	2e0f      	cmp	r6, #15
 800a04a:	dc38      	bgt.n	800a0be <_strtod_l+0x44e>
 800a04c:	9b08      	ldr	r3, [sp, #32]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f43f ae49 	beq.w	8009ce6 <_strtod_l+0x76>
 800a054:	dd24      	ble.n	800a0a0 <_strtod_l+0x430>
 800a056:	2b16      	cmp	r3, #22
 800a058:	dc0b      	bgt.n	800a072 <_strtod_l+0x402>
 800a05a:	4968      	ldr	r1, [pc, #416]	; (800a1fc <_strtod_l+0x58c>)
 800a05c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	f7f6 fac6 	bl	80005f8 <__aeabi_dmul>
 800a06c:	4680      	mov	r8, r0
 800a06e:	4689      	mov	r9, r1
 800a070:	e639      	b.n	8009ce6 <_strtod_l+0x76>
 800a072:	9a08      	ldr	r2, [sp, #32]
 800a074:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a078:	4293      	cmp	r3, r2
 800a07a:	db20      	blt.n	800a0be <_strtod_l+0x44e>
 800a07c:	4c5f      	ldr	r4, [pc, #380]	; (800a1fc <_strtod_l+0x58c>)
 800a07e:	f1c6 060f 	rsb	r6, r6, #15
 800a082:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a086:	4642      	mov	r2, r8
 800a088:	464b      	mov	r3, r9
 800a08a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a08e:	f7f6 fab3 	bl	80005f8 <__aeabi_dmul>
 800a092:	9b08      	ldr	r3, [sp, #32]
 800a094:	1b9e      	subs	r6, r3, r6
 800a096:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a09a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a09e:	e7e3      	b.n	800a068 <_strtod_l+0x3f8>
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	3316      	adds	r3, #22
 800a0a4:	db0b      	blt.n	800a0be <_strtod_l+0x44e>
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	1bdf      	subs	r7, r3, r7
 800a0aa:	4b54      	ldr	r3, [pc, #336]	; (800a1fc <_strtod_l+0x58c>)
 800a0ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	f7f6 fbc8 	bl	800084c <__aeabi_ddiv>
 800a0bc:	e7d6      	b.n	800a06c <_strtod_l+0x3fc>
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	1b75      	subs	r5, r6, r5
 800a0c2:	441d      	add	r5, r3
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	dd70      	ble.n	800a1aa <_strtod_l+0x53a>
 800a0c8:	f015 030f 	ands.w	r3, r5, #15
 800a0cc:	d00a      	beq.n	800a0e4 <_strtod_l+0x474>
 800a0ce:	494b      	ldr	r1, [pc, #300]	; (800a1fc <_strtod_l+0x58c>)
 800a0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0dc:	f7f6 fa8c 	bl	80005f8 <__aeabi_dmul>
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4689      	mov	r9, r1
 800a0e4:	f035 050f 	bics.w	r5, r5, #15
 800a0e8:	d04d      	beq.n	800a186 <_strtod_l+0x516>
 800a0ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a0ee:	dd22      	ble.n	800a136 <_strtod_l+0x4c6>
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	46ab      	mov	fp, r5
 800a0f4:	9509      	str	r5, [sp, #36]	; 0x24
 800a0f6:	9505      	str	r5, [sp, #20]
 800a0f8:	2322      	movs	r3, #34	; 0x22
 800a0fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a204 <_strtod_l+0x594>
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	f04f 0800 	mov.w	r8, #0
 800a104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	f43f aded 	beq.w	8009ce6 <_strtod_l+0x76>
 800a10c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff f924 	bl	800935c <_Bfree>
 800a114:	9905      	ldr	r1, [sp, #20]
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff f920 	bl	800935c <_Bfree>
 800a11c:	4659      	mov	r1, fp
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff f91c 	bl	800935c <_Bfree>
 800a124:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a126:	4620      	mov	r0, r4
 800a128:	f7ff f918 	bl	800935c <_Bfree>
 800a12c:	4629      	mov	r1, r5
 800a12e:	4620      	mov	r0, r4
 800a130:	f7ff f914 	bl	800935c <_Bfree>
 800a134:	e5d7      	b.n	8009ce6 <_strtod_l+0x76>
 800a136:	4b32      	ldr	r3, [pc, #200]	; (800a200 <_strtod_l+0x590>)
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	2300      	movs	r3, #0
 800a13c:	112d      	asrs	r5, r5, #4
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	469a      	mov	sl, r3
 800a144:	2d01      	cmp	r5, #1
 800a146:	dc21      	bgt.n	800a18c <_strtod_l+0x51c>
 800a148:	b10b      	cbz	r3, 800a14e <_strtod_l+0x4de>
 800a14a:	4680      	mov	r8, r0
 800a14c:	4689      	mov	r9, r1
 800a14e:	492c      	ldr	r1, [pc, #176]	; (800a200 <_strtod_l+0x590>)
 800a150:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a154:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a158:	4642      	mov	r2, r8
 800a15a:	464b      	mov	r3, r9
 800a15c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <_strtod_l+0x594>)
 800a166:	460a      	mov	r2, r1
 800a168:	400b      	ands	r3, r1
 800a16a:	4927      	ldr	r1, [pc, #156]	; (800a208 <_strtod_l+0x598>)
 800a16c:	428b      	cmp	r3, r1
 800a16e:	4680      	mov	r8, r0
 800a170:	d8be      	bhi.n	800a0f0 <_strtod_l+0x480>
 800a172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a176:	428b      	cmp	r3, r1
 800a178:	bf86      	itte	hi
 800a17a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a20c <_strtod_l+0x59c>
 800a17e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a182:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a186:	2300      	movs	r3, #0
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	e07b      	b.n	800a284 <_strtod_l+0x614>
 800a18c:	07ea      	lsls	r2, r5, #31
 800a18e:	d505      	bpl.n	800a19c <_strtod_l+0x52c>
 800a190:	9b04      	ldr	r3, [sp, #16]
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	2301      	movs	r3, #1
 800a19c:	9a04      	ldr	r2, [sp, #16]
 800a19e:	3208      	adds	r2, #8
 800a1a0:	f10a 0a01 	add.w	sl, sl, #1
 800a1a4:	106d      	asrs	r5, r5, #1
 800a1a6:	9204      	str	r2, [sp, #16]
 800a1a8:	e7cc      	b.n	800a144 <_strtod_l+0x4d4>
 800a1aa:	d0ec      	beq.n	800a186 <_strtod_l+0x516>
 800a1ac:	426d      	negs	r5, r5
 800a1ae:	f015 020f 	ands.w	r2, r5, #15
 800a1b2:	d00a      	beq.n	800a1ca <_strtod_l+0x55a>
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <_strtod_l+0x58c>)
 800a1b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f7f6 fb43 	bl	800084c <__aeabi_ddiv>
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	4689      	mov	r9, r1
 800a1ca:	112d      	asrs	r5, r5, #4
 800a1cc:	d0db      	beq.n	800a186 <_strtod_l+0x516>
 800a1ce:	2d1f      	cmp	r5, #31
 800a1d0:	dd1e      	ble.n	800a210 <_strtod_l+0x5a0>
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	46ab      	mov	fp, r5
 800a1d6:	9509      	str	r5, [sp, #36]	; 0x24
 800a1d8:	9505      	str	r5, [sp, #20]
 800a1da:	2322      	movs	r3, #34	; 0x22
 800a1dc:	f04f 0800 	mov.w	r8, #0
 800a1e0:	f04f 0900 	mov.w	r9, #0
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	e78d      	b.n	800a104 <_strtod_l+0x494>
 800a1e8:	0800c816 	.word	0x0800c816
 800a1ec:	0800cad4 	.word	0x0800cad4
 800a1f0:	0800c80e 	.word	0x0800c80e
 800a1f4:	0800c8f0 	.word	0x0800c8f0
 800a1f8:	0800c8ec 	.word	0x0800c8ec
 800a1fc:	0800c9e8 	.word	0x0800c9e8
 800a200:	0800c9c0 	.word	0x0800c9c0
 800a204:	7ff00000 	.word	0x7ff00000
 800a208:	7ca00000 	.word	0x7ca00000
 800a20c:	7fefffff 	.word	0x7fefffff
 800a210:	f015 0310 	ands.w	r3, r5, #16
 800a214:	bf18      	it	ne
 800a216:	236a      	movne	r3, #106	; 0x6a
 800a218:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a5bc <_strtod_l+0x94c>
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	2300      	movs	r3, #0
 800a224:	07ea      	lsls	r2, r5, #31
 800a226:	d504      	bpl.n	800a232 <_strtod_l+0x5c2>
 800a228:	e9da 2300 	ldrd	r2, r3, [sl]
 800a22c:	f7f6 f9e4 	bl	80005f8 <__aeabi_dmul>
 800a230:	2301      	movs	r3, #1
 800a232:	106d      	asrs	r5, r5, #1
 800a234:	f10a 0a08 	add.w	sl, sl, #8
 800a238:	d1f4      	bne.n	800a224 <_strtod_l+0x5b4>
 800a23a:	b10b      	cbz	r3, 800a240 <_strtod_l+0x5d0>
 800a23c:	4680      	mov	r8, r0
 800a23e:	4689      	mov	r9, r1
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	b1bb      	cbz	r3, 800a274 <_strtod_l+0x604>
 800a244:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a248:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	4649      	mov	r1, r9
 800a250:	dd10      	ble.n	800a274 <_strtod_l+0x604>
 800a252:	2b1f      	cmp	r3, #31
 800a254:	f340 811e 	ble.w	800a494 <_strtod_l+0x824>
 800a258:	2b34      	cmp	r3, #52	; 0x34
 800a25a:	bfde      	ittt	le
 800a25c:	f04f 33ff 	movle.w	r3, #4294967295
 800a260:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a264:	4093      	lslle	r3, r2
 800a266:	f04f 0800 	mov.w	r8, #0
 800a26a:	bfcc      	ite	gt
 800a26c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a270:	ea03 0901 	andle.w	r9, r3, r1
 800a274:	2200      	movs	r2, #0
 800a276:	2300      	movs	r3, #0
 800a278:	4640      	mov	r0, r8
 800a27a:	4649      	mov	r1, r9
 800a27c:	f7f6 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 800a280:	2800      	cmp	r0, #0
 800a282:	d1a6      	bne.n	800a1d2 <_strtod_l+0x562>
 800a284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a28a:	4633      	mov	r3, r6
 800a28c:	465a      	mov	r2, fp
 800a28e:	4620      	mov	r0, r4
 800a290:	f7ff f8cc 	bl	800942c <__s2b>
 800a294:	9009      	str	r0, [sp, #36]	; 0x24
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f af2a 	beq.w	800a0f0 <_strtod_l+0x480>
 800a29c:	9a08      	ldr	r2, [sp, #32]
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	eba3 0307 	sub.w	r3, r3, r7
 800a2a6:	bfa8      	it	ge
 800a2a8:	2300      	movge	r3, #0
 800a2aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a2b2:	9312      	str	r3, [sp, #72]	; 0x48
 800a2b4:	46ab      	mov	fp, r5
 800a2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	6859      	ldr	r1, [r3, #4]
 800a2bc:	f7ff f80e 	bl	80092dc <_Balloc>
 800a2c0:	9005      	str	r0, [sp, #20]
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f af18 	beq.w	800a0f8 <_strtod_l+0x488>
 800a2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	3202      	adds	r2, #2
 800a2ce:	f103 010c 	add.w	r1, r3, #12
 800a2d2:	0092      	lsls	r2, r2, #2
 800a2d4:	300c      	adds	r0, #12
 800a2d6:	f7fe f852 	bl	800837e <memcpy>
 800a2da:	ec49 8b10 	vmov	d0, r8, r9
 800a2de:	aa18      	add	r2, sp, #96	; 0x60
 800a2e0:	a917      	add	r1, sp, #92	; 0x5c
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f7ff fbd6 	bl	8009a94 <__d2b>
 800a2e8:	ec49 8b18 	vmov	d8, r8, r9
 800a2ec:	9016      	str	r0, [sp, #88]	; 0x58
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	f43f af02 	beq.w	800a0f8 <_strtod_l+0x488>
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff f930 	bl	800955c <__i2b>
 800a2fc:	4683      	mov	fp, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f aefa 	beq.w	800a0f8 <_strtod_l+0x488>
 800a304:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a308:	2e00      	cmp	r6, #0
 800a30a:	bfab      	itete	ge
 800a30c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a30e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a312:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a316:	bfac      	ite	ge
 800a318:	eb06 0a03 	addge.w	sl, r6, r3
 800a31c:	1b9f      	sublt	r7, r3, r6
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	1af6      	subs	r6, r6, r3
 800a322:	4416      	add	r6, r2
 800a324:	4ba0      	ldr	r3, [pc, #640]	; (800a5a8 <_strtod_l+0x938>)
 800a326:	3e01      	subs	r6, #1
 800a328:	429e      	cmp	r6, r3
 800a32a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a32e:	f280 80c4 	bge.w	800a4ba <_strtod_l+0x84a>
 800a332:	1b9b      	subs	r3, r3, r6
 800a334:	2b1f      	cmp	r3, #31
 800a336:	eba2 0203 	sub.w	r2, r2, r3
 800a33a:	f04f 0101 	mov.w	r1, #1
 800a33e:	f300 80b0 	bgt.w	800a4a2 <_strtod_l+0x832>
 800a342:	fa01 f303 	lsl.w	r3, r1, r3
 800a346:	930e      	str	r3, [sp, #56]	; 0x38
 800a348:	2300      	movs	r3, #0
 800a34a:	930d      	str	r3, [sp, #52]	; 0x34
 800a34c:	eb0a 0602 	add.w	r6, sl, r2
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	45b2      	cmp	sl, r6
 800a354:	4417      	add	r7, r2
 800a356:	441f      	add	r7, r3
 800a358:	4653      	mov	r3, sl
 800a35a:	bfa8      	it	ge
 800a35c:	4633      	movge	r3, r6
 800a35e:	42bb      	cmp	r3, r7
 800a360:	bfa8      	it	ge
 800a362:	463b      	movge	r3, r7
 800a364:	2b00      	cmp	r3, #0
 800a366:	bfc2      	ittt	gt
 800a368:	1af6      	subgt	r6, r6, r3
 800a36a:	1aff      	subgt	r7, r7, r3
 800a36c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd17      	ble.n	800a3a6 <_strtod_l+0x736>
 800a376:	4659      	mov	r1, fp
 800a378:	461a      	mov	r2, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7ff f9ae 	bl	80096dc <__pow5mult>
 800a380:	4683      	mov	fp, r0
 800a382:	2800      	cmp	r0, #0
 800a384:	f43f aeb8 	beq.w	800a0f8 <_strtod_l+0x488>
 800a388:	4601      	mov	r1, r0
 800a38a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a38c:	4620      	mov	r0, r4
 800a38e:	f7ff f8fb 	bl	8009588 <__multiply>
 800a392:	900b      	str	r0, [sp, #44]	; 0x2c
 800a394:	2800      	cmp	r0, #0
 800a396:	f43f aeaf 	beq.w	800a0f8 <_strtod_l+0x488>
 800a39a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a39c:	4620      	mov	r0, r4
 800a39e:	f7fe ffdd 	bl	800935c <_Bfree>
 800a3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a4:	9316      	str	r3, [sp, #88]	; 0x58
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	f300 808c 	bgt.w	800a4c4 <_strtod_l+0x854>
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dd08      	ble.n	800a3c4 <_strtod_l+0x754>
 800a3b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3b4:	9905      	ldr	r1, [sp, #20]
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f7ff f990 	bl	80096dc <__pow5mult>
 800a3bc:	9005      	str	r0, [sp, #20]
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	f43f ae9a 	beq.w	800a0f8 <_strtod_l+0x488>
 800a3c4:	2f00      	cmp	r7, #0
 800a3c6:	dd08      	ble.n	800a3da <_strtod_l+0x76a>
 800a3c8:	9905      	ldr	r1, [sp, #20]
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7ff f9df 	bl	8009790 <__lshift>
 800a3d2:	9005      	str	r0, [sp, #20]
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	f43f ae8f 	beq.w	800a0f8 <_strtod_l+0x488>
 800a3da:	f1ba 0f00 	cmp.w	sl, #0
 800a3de:	dd08      	ble.n	800a3f2 <_strtod_l+0x782>
 800a3e0:	4659      	mov	r1, fp
 800a3e2:	4652      	mov	r2, sl
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7ff f9d3 	bl	8009790 <__lshift>
 800a3ea:	4683      	mov	fp, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	f43f ae83 	beq.w	800a0f8 <_strtod_l+0x488>
 800a3f2:	9a05      	ldr	r2, [sp, #20]
 800a3f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff fa52 	bl	80098a0 <__mdiff>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f ae7a 	beq.w	800a0f8 <_strtod_l+0x488>
 800a404:	68c3      	ldr	r3, [r0, #12]
 800a406:	930b      	str	r3, [sp, #44]	; 0x2c
 800a408:	2300      	movs	r3, #0
 800a40a:	60c3      	str	r3, [r0, #12]
 800a40c:	4659      	mov	r1, fp
 800a40e:	f7ff fa2b 	bl	8009868 <__mcmp>
 800a412:	2800      	cmp	r0, #0
 800a414:	da60      	bge.n	800a4d8 <_strtod_l+0x868>
 800a416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a418:	ea53 0308 	orrs.w	r3, r3, r8
 800a41c:	f040 8084 	bne.w	800a528 <_strtod_l+0x8b8>
 800a420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a424:	2b00      	cmp	r3, #0
 800a426:	d17f      	bne.n	800a528 <_strtod_l+0x8b8>
 800a428:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a42c:	0d1b      	lsrs	r3, r3, #20
 800a42e:	051b      	lsls	r3, r3, #20
 800a430:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a434:	d978      	bls.n	800a528 <_strtod_l+0x8b8>
 800a436:	696b      	ldr	r3, [r5, #20]
 800a438:	b913      	cbnz	r3, 800a440 <_strtod_l+0x7d0>
 800a43a:	692b      	ldr	r3, [r5, #16]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	dd73      	ble.n	800a528 <_strtod_l+0x8b8>
 800a440:	4629      	mov	r1, r5
 800a442:	2201      	movs	r2, #1
 800a444:	4620      	mov	r0, r4
 800a446:	f7ff f9a3 	bl	8009790 <__lshift>
 800a44a:	4659      	mov	r1, fp
 800a44c:	4605      	mov	r5, r0
 800a44e:	f7ff fa0b 	bl	8009868 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	dd68      	ble.n	800a528 <_strtod_l+0x8b8>
 800a456:	9904      	ldr	r1, [sp, #16]
 800a458:	4a54      	ldr	r2, [pc, #336]	; (800a5ac <_strtod_l+0x93c>)
 800a45a:	464b      	mov	r3, r9
 800a45c:	2900      	cmp	r1, #0
 800a45e:	f000 8084 	beq.w	800a56a <_strtod_l+0x8fa>
 800a462:	ea02 0109 	and.w	r1, r2, r9
 800a466:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a46a:	dc7e      	bgt.n	800a56a <_strtod_l+0x8fa>
 800a46c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a470:	f77f aeb3 	ble.w	800a1da <_strtod_l+0x56a>
 800a474:	4b4e      	ldr	r3, [pc, #312]	; (800a5b0 <_strtod_l+0x940>)
 800a476:	4640      	mov	r0, r8
 800a478:	4649      	mov	r1, r9
 800a47a:	2200      	movs	r2, #0
 800a47c:	f7f6 f8bc 	bl	80005f8 <__aeabi_dmul>
 800a480:	4b4a      	ldr	r3, [pc, #296]	; (800a5ac <_strtod_l+0x93c>)
 800a482:	400b      	ands	r3, r1
 800a484:	4680      	mov	r8, r0
 800a486:	4689      	mov	r9, r1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f ae3f 	bne.w	800a10c <_strtod_l+0x49c>
 800a48e:	2322      	movs	r3, #34	; 0x22
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	e63b      	b.n	800a10c <_strtod_l+0x49c>
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	fa02 f303 	lsl.w	r3, r2, r3
 800a49c:	ea03 0808 	and.w	r8, r3, r8
 800a4a0:	e6e8      	b.n	800a274 <_strtod_l+0x604>
 800a4a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a4a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a4aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a4ae:	36e2      	adds	r6, #226	; 0xe2
 800a4b0:	fa01 f306 	lsl.w	r3, r1, r6
 800a4b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a4b8:	e748      	b.n	800a34c <_strtod_l+0x6dc>
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a4c2:	e743      	b.n	800a34c <_strtod_l+0x6dc>
 800a4c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7ff f961 	bl	8009790 <__lshift>
 800a4ce:	9016      	str	r0, [sp, #88]	; 0x58
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	f47f af6b 	bne.w	800a3ac <_strtod_l+0x73c>
 800a4d6:	e60f      	b.n	800a0f8 <_strtod_l+0x488>
 800a4d8:	46ca      	mov	sl, r9
 800a4da:	d171      	bne.n	800a5c0 <_strtod_l+0x950>
 800a4dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4e2:	b352      	cbz	r2, 800a53a <_strtod_l+0x8ca>
 800a4e4:	4a33      	ldr	r2, [pc, #204]	; (800a5b4 <_strtod_l+0x944>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d12a      	bne.n	800a540 <_strtod_l+0x8d0>
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	4641      	mov	r1, r8
 800a4ee:	b1fb      	cbz	r3, 800a530 <_strtod_l+0x8c0>
 800a4f0:	4b2e      	ldr	r3, [pc, #184]	; (800a5ac <_strtod_l+0x93c>)
 800a4f2:	ea09 0303 	and.w	r3, r9, r3
 800a4f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fe:	d81a      	bhi.n	800a536 <_strtod_l+0x8c6>
 800a500:	0d1b      	lsrs	r3, r3, #20
 800a502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a506:	fa02 f303 	lsl.w	r3, r2, r3
 800a50a:	4299      	cmp	r1, r3
 800a50c:	d118      	bne.n	800a540 <_strtod_l+0x8d0>
 800a50e:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <_strtod_l+0x948>)
 800a510:	459a      	cmp	sl, r3
 800a512:	d102      	bne.n	800a51a <_strtod_l+0x8aa>
 800a514:	3101      	adds	r1, #1
 800a516:	f43f adef 	beq.w	800a0f8 <_strtod_l+0x488>
 800a51a:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <_strtod_l+0x93c>)
 800a51c:	ea0a 0303 	and.w	r3, sl, r3
 800a520:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a524:	f04f 0800 	mov.w	r8, #0
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1a2      	bne.n	800a474 <_strtod_l+0x804>
 800a52e:	e5ed      	b.n	800a10c <_strtod_l+0x49c>
 800a530:	f04f 33ff 	mov.w	r3, #4294967295
 800a534:	e7e9      	b.n	800a50a <_strtod_l+0x89a>
 800a536:	4613      	mov	r3, r2
 800a538:	e7e7      	b.n	800a50a <_strtod_l+0x89a>
 800a53a:	ea53 0308 	orrs.w	r3, r3, r8
 800a53e:	d08a      	beq.n	800a456 <_strtod_l+0x7e6>
 800a540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a542:	b1e3      	cbz	r3, 800a57e <_strtod_l+0x90e>
 800a544:	ea13 0f0a 	tst.w	r3, sl
 800a548:	d0ee      	beq.n	800a528 <_strtod_l+0x8b8>
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	b1c3      	cbz	r3, 800a586 <_strtod_l+0x916>
 800a554:	f7ff fb6f 	bl	8009c36 <sulp>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	ec51 0b18 	vmov	r0, r1, d8
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	e7de      	b.n	800a528 <_strtod_l+0x8b8>
 800a56a:	4013      	ands	r3, r2
 800a56c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a570:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a574:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a578:	f04f 38ff 	mov.w	r8, #4294967295
 800a57c:	e7d4      	b.n	800a528 <_strtod_l+0x8b8>
 800a57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a580:	ea13 0f08 	tst.w	r3, r8
 800a584:	e7e0      	b.n	800a548 <_strtod_l+0x8d8>
 800a586:	f7ff fb56 	bl	8009c36 <sulp>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	ec51 0b18 	vmov	r0, r1, d8
 800a592:	f7f5 fe79 	bl	8000288 <__aeabi_dsub>
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	4680      	mov	r8, r0
 800a59c:	4689      	mov	r9, r1
 800a59e:	f7f6 fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0c0      	beq.n	800a528 <_strtod_l+0x8b8>
 800a5a6:	e618      	b.n	800a1da <_strtod_l+0x56a>
 800a5a8:	fffffc02 	.word	0xfffffc02
 800a5ac:	7ff00000 	.word	0x7ff00000
 800a5b0:	39500000 	.word	0x39500000
 800a5b4:	000fffff 	.word	0x000fffff
 800a5b8:	7fefffff 	.word	0x7fefffff
 800a5bc:	0800cae8 	.word	0x0800cae8
 800a5c0:	4659      	mov	r1, fp
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7ff fac0 	bl	8009b48 <__ratio>
 800a5c8:	ec57 6b10 	vmov	r6, r7, d0
 800a5cc:	ee10 0a10 	vmov	r0, s0
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 fa8a 	bl	8000af0 <__aeabi_dcmple>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d071      	beq.n	800a6c4 <_strtod_l+0xa54>
 800a5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d17c      	bne.n	800a6e0 <_strtod_l+0xa70>
 800a5e6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ea:	d15a      	bne.n	800a6a2 <_strtod_l+0xa32>
 800a5ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d15d      	bne.n	800a6b0 <_strtod_l+0xa40>
 800a5f4:	4b90      	ldr	r3, [pc, #576]	; (800a838 <_strtod_l+0xbc8>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f6 fa6e 	bl	8000adc <__aeabi_dcmplt>
 800a600:	2800      	cmp	r0, #0
 800a602:	d15c      	bne.n	800a6be <_strtod_l+0xa4e>
 800a604:	4630      	mov	r0, r6
 800a606:	4639      	mov	r1, r7
 800a608:	4b8c      	ldr	r3, [pc, #560]	; (800a83c <_strtod_l+0xbcc>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a618:	9606      	str	r6, [sp, #24]
 800a61a:	9307      	str	r3, [sp, #28]
 800a61c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a620:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a624:	4b86      	ldr	r3, [pc, #536]	; (800a840 <_strtod_l+0xbd0>)
 800a626:	ea0a 0303 	and.w	r3, sl, r3
 800a62a:	930d      	str	r3, [sp, #52]	; 0x34
 800a62c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a62e:	4b85      	ldr	r3, [pc, #532]	; (800a844 <_strtod_l+0xbd4>)
 800a630:	429a      	cmp	r2, r3
 800a632:	f040 8090 	bne.w	800a756 <_strtod_l+0xae6>
 800a636:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a63a:	ec49 8b10 	vmov	d0, r8, r9
 800a63e:	f7ff f9b9 	bl	80099b4 <__ulp>
 800a642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a646:	ec51 0b10 	vmov	r0, r1, d0
 800a64a:	f7f5 ffd5 	bl	80005f8 <__aeabi_dmul>
 800a64e:	4642      	mov	r2, r8
 800a650:	464b      	mov	r3, r9
 800a652:	f7f5 fe1b 	bl	800028c <__adddf3>
 800a656:	460b      	mov	r3, r1
 800a658:	4979      	ldr	r1, [pc, #484]	; (800a840 <_strtod_l+0xbd0>)
 800a65a:	4a7b      	ldr	r2, [pc, #492]	; (800a848 <_strtod_l+0xbd8>)
 800a65c:	4019      	ands	r1, r3
 800a65e:	4291      	cmp	r1, r2
 800a660:	4680      	mov	r8, r0
 800a662:	d944      	bls.n	800a6ee <_strtod_l+0xa7e>
 800a664:	ee18 2a90 	vmov	r2, s17
 800a668:	4b78      	ldr	r3, [pc, #480]	; (800a84c <_strtod_l+0xbdc>)
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d104      	bne.n	800a678 <_strtod_l+0xa08>
 800a66e:	ee18 3a10 	vmov	r3, s16
 800a672:	3301      	adds	r3, #1
 800a674:	f43f ad40 	beq.w	800a0f8 <_strtod_l+0x488>
 800a678:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a84c <_strtod_l+0xbdc>
 800a67c:	f04f 38ff 	mov.w	r8, #4294967295
 800a680:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a682:	4620      	mov	r0, r4
 800a684:	f7fe fe6a 	bl	800935c <_Bfree>
 800a688:	9905      	ldr	r1, [sp, #20]
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7fe fe66 	bl	800935c <_Bfree>
 800a690:	4659      	mov	r1, fp
 800a692:	4620      	mov	r0, r4
 800a694:	f7fe fe62 	bl	800935c <_Bfree>
 800a698:	4629      	mov	r1, r5
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7fe fe5e 	bl	800935c <_Bfree>
 800a6a0:	e609      	b.n	800a2b6 <_strtod_l+0x646>
 800a6a2:	f1b8 0f01 	cmp.w	r8, #1
 800a6a6:	d103      	bne.n	800a6b0 <_strtod_l+0xa40>
 800a6a8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ac:	f43f ad95 	beq.w	800a1da <_strtod_l+0x56a>
 800a6b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a808 <_strtod_l+0xb98>
 800a6b4:	4f60      	ldr	r7, [pc, #384]	; (800a838 <_strtod_l+0xbc8>)
 800a6b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e7ae      	b.n	800a61c <_strtod_l+0x9ac>
 800a6be:	4f5f      	ldr	r7, [pc, #380]	; (800a83c <_strtod_l+0xbcc>)
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	e7a7      	b.n	800a614 <_strtod_l+0x9a4>
 800a6c4:	4b5d      	ldr	r3, [pc, #372]	; (800a83c <_strtod_l+0xbcc>)
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f7f5 ff94 	bl	80005f8 <__aeabi_dmul>
 800a6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d09c      	beq.n	800a614 <_strtod_l+0x9a4>
 800a6da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6de:	e79d      	b.n	800a61c <_strtod_l+0x9ac>
 800a6e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a810 <_strtod_l+0xba0>
 800a6e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6e8:	ec57 6b17 	vmov	r6, r7, d7
 800a6ec:	e796      	b.n	800a61c <_strtod_l+0x9ac>
 800a6ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	46ca      	mov	sl, r9
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1c2      	bne.n	800a680 <_strtod_l+0xa10>
 800a6fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a700:	0d1b      	lsrs	r3, r3, #20
 800a702:	051b      	lsls	r3, r3, #20
 800a704:	429a      	cmp	r2, r3
 800a706:	d1bb      	bne.n	800a680 <_strtod_l+0xa10>
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f6 fad4 	bl	8000cb8 <__aeabi_d2lz>
 800a710:	f7f5 ff44 	bl	800059c <__aeabi_l2d>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4630      	mov	r0, r6
 800a71a:	4639      	mov	r1, r7
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a726:	ea43 0308 	orr.w	r3, r3, r8
 800a72a:	4313      	orrs	r3, r2
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	d054      	beq.n	800a7dc <_strtod_l+0xb6c>
 800a732:	a339      	add	r3, pc, #228	; (adr r3, 800a818 <_strtod_l+0xba8>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f6 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f47f ace5 	bne.w	800a10c <_strtod_l+0x49c>
 800a742:	a337      	add	r3, pc, #220	; (adr r3, 800a820 <_strtod_l+0xbb0>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800a750:	2800      	cmp	r0, #0
 800a752:	d095      	beq.n	800a680 <_strtod_l+0xa10>
 800a754:	e4da      	b.n	800a10c <_strtod_l+0x49c>
 800a756:	9b04      	ldr	r3, [sp, #16]
 800a758:	b333      	cbz	r3, 800a7a8 <_strtod_l+0xb38>
 800a75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a75c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a760:	d822      	bhi.n	800a7a8 <_strtod_l+0xb38>
 800a762:	a331      	add	r3, pc, #196	; (adr r3, 800a828 <_strtod_l+0xbb8>)
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f6 f9c0 	bl	8000af0 <__aeabi_dcmple>
 800a770:	b1a0      	cbz	r0, 800a79c <_strtod_l+0xb2c>
 800a772:	4639      	mov	r1, r7
 800a774:	4630      	mov	r0, r6
 800a776:	f7f6 fa17 	bl	8000ba8 <__aeabi_d2uiz>
 800a77a:	2801      	cmp	r0, #1
 800a77c:	bf38      	it	cc
 800a77e:	2001      	movcc	r0, #1
 800a780:	f7f5 fec0 	bl	8000504 <__aeabi_ui2d>
 800a784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a786:	4606      	mov	r6, r0
 800a788:	460f      	mov	r7, r1
 800a78a:	bb23      	cbnz	r3, 800a7d6 <_strtod_l+0xb66>
 800a78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a790:	9010      	str	r0, [sp, #64]	; 0x40
 800a792:	9311      	str	r3, [sp, #68]	; 0x44
 800a794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a798:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a79c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a7a4:	1a9b      	subs	r3, r3, r2
 800a7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a7ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a7b0:	eef0 0a68 	vmov.f32	s1, s17
 800a7b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a7b8:	f7ff f8fc 	bl	80099b4 <__ulp>
 800a7bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a7c0:	ec53 2b10 	vmov	r2, r3, d0
 800a7c4:	f7f5 ff18 	bl	80005f8 <__aeabi_dmul>
 800a7c8:	ec53 2b18 	vmov	r2, r3, d8
 800a7cc:	f7f5 fd5e 	bl	800028c <__adddf3>
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	e78d      	b.n	800a6f2 <_strtod_l+0xa82>
 800a7d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a7da:	e7db      	b.n	800a794 <_strtod_l+0xb24>
 800a7dc:	a314      	add	r3, pc, #80	; (adr r3, 800a830 <_strtod_l+0xbc0>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f6 f97b 	bl	8000adc <__aeabi_dcmplt>
 800a7e6:	e7b3      	b.n	800a750 <_strtod_l+0xae0>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	f7ff ba7c 	b.w	8009cee <_strtod_l+0x7e>
 800a7f6:	2a65      	cmp	r2, #101	; 0x65
 800a7f8:	f43f ab75 	beq.w	8009ee6 <_strtod_l+0x276>
 800a7fc:	2a45      	cmp	r2, #69	; 0x45
 800a7fe:	f43f ab72 	beq.w	8009ee6 <_strtod_l+0x276>
 800a802:	2301      	movs	r3, #1
 800a804:	f7ff bbaa 	b.w	8009f5c <_strtod_l+0x2ec>
 800a808:	00000000 	.word	0x00000000
 800a80c:	bff00000 	.word	0xbff00000
 800a810:	00000000 	.word	0x00000000
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	94a03595 	.word	0x94a03595
 800a81c:	3fdfffff 	.word	0x3fdfffff
 800a820:	35afe535 	.word	0x35afe535
 800a824:	3fe00000 	.word	0x3fe00000
 800a828:	ffc00000 	.word	0xffc00000
 800a82c:	41dfffff 	.word	0x41dfffff
 800a830:	94a03595 	.word	0x94a03595
 800a834:	3fcfffff 	.word	0x3fcfffff
 800a838:	3ff00000 	.word	0x3ff00000
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	7ff00000 	.word	0x7ff00000
 800a844:	7fe00000 	.word	0x7fe00000
 800a848:	7c9fffff 	.word	0x7c9fffff
 800a84c:	7fefffff 	.word	0x7fefffff

0800a850 <_strtod_r>:
 800a850:	4b01      	ldr	r3, [pc, #4]	; (800a858 <_strtod_r+0x8>)
 800a852:	f7ff ba0d 	b.w	8009c70 <_strtod_l>
 800a856:	bf00      	nop
 800a858:	2000008c 	.word	0x2000008c

0800a85c <__ssputs_r>:
 800a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	688e      	ldr	r6, [r1, #8]
 800a862:	461f      	mov	r7, r3
 800a864:	42be      	cmp	r6, r7
 800a866:	680b      	ldr	r3, [r1, #0]
 800a868:	4682      	mov	sl, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	4690      	mov	r8, r2
 800a86e:	d82c      	bhi.n	800a8ca <__ssputs_r+0x6e>
 800a870:	898a      	ldrh	r2, [r1, #12]
 800a872:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a876:	d026      	beq.n	800a8c6 <__ssputs_r+0x6a>
 800a878:	6965      	ldr	r5, [r4, #20]
 800a87a:	6909      	ldr	r1, [r1, #16]
 800a87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a880:	eba3 0901 	sub.w	r9, r3, r1
 800a884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a888:	1c7b      	adds	r3, r7, #1
 800a88a:	444b      	add	r3, r9
 800a88c:	106d      	asrs	r5, r5, #1
 800a88e:	429d      	cmp	r5, r3
 800a890:	bf38      	it	cc
 800a892:	461d      	movcc	r5, r3
 800a894:	0553      	lsls	r3, r2, #21
 800a896:	d527      	bpl.n	800a8e8 <__ssputs_r+0x8c>
 800a898:	4629      	mov	r1, r5
 800a89a:	f7fe fc93 	bl	80091c4 <_malloc_r>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	b360      	cbz	r0, 800a8fc <__ssputs_r+0xa0>
 800a8a2:	6921      	ldr	r1, [r4, #16]
 800a8a4:	464a      	mov	r2, r9
 800a8a6:	f7fd fd6a 	bl	800837e <memcpy>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	6126      	str	r6, [r4, #16]
 800a8b8:	6165      	str	r5, [r4, #20]
 800a8ba:	444e      	add	r6, r9
 800a8bc:	eba5 0509 	sub.w	r5, r5, r9
 800a8c0:	6026      	str	r6, [r4, #0]
 800a8c2:	60a5      	str	r5, [r4, #8]
 800a8c4:	463e      	mov	r6, r7
 800a8c6:	42be      	cmp	r6, r7
 800a8c8:	d900      	bls.n	800a8cc <__ssputs_r+0x70>
 800a8ca:	463e      	mov	r6, r7
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	4641      	mov	r1, r8
 800a8d2:	f000 ff14 	bl	800b6fe <memmove>
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	1b9b      	subs	r3, r3, r6
 800a8da:	60a3      	str	r3, [r4, #8]
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	4433      	add	r3, r6
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	f001 fae2 	bl	800beb2 <_realloc_r>
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d1e0      	bne.n	800a8b6 <__ssputs_r+0x5a>
 800a8f4:	6921      	ldr	r1, [r4, #16]
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	f7fe fbf0 	bl	80090dc <_free_r>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	f8ca 3000 	str.w	r3, [sl]
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	e7e9      	b.n	800a8e4 <__ssputs_r+0x88>

0800a910 <_svfiprintf_r>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	4698      	mov	r8, r3
 800a916:	898b      	ldrh	r3, [r1, #12]
 800a918:	061b      	lsls	r3, r3, #24
 800a91a:	b09d      	sub	sp, #116	; 0x74
 800a91c:	4607      	mov	r7, r0
 800a91e:	460d      	mov	r5, r1
 800a920:	4614      	mov	r4, r2
 800a922:	d50e      	bpl.n	800a942 <_svfiprintf_r+0x32>
 800a924:	690b      	ldr	r3, [r1, #16]
 800a926:	b963      	cbnz	r3, 800a942 <_svfiprintf_r+0x32>
 800a928:	2140      	movs	r1, #64	; 0x40
 800a92a:	f7fe fc4b 	bl	80091c4 <_malloc_r>
 800a92e:	6028      	str	r0, [r5, #0]
 800a930:	6128      	str	r0, [r5, #16]
 800a932:	b920      	cbnz	r0, 800a93e <_svfiprintf_r+0x2e>
 800a934:	230c      	movs	r3, #12
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	e0d0      	b.n	800aae0 <_svfiprintf_r+0x1d0>
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	616b      	str	r3, [r5, #20]
 800a942:	2300      	movs	r3, #0
 800a944:	9309      	str	r3, [sp, #36]	; 0x24
 800a946:	2320      	movs	r3, #32
 800a948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a950:	2330      	movs	r3, #48	; 0x30
 800a952:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aaf8 <_svfiprintf_r+0x1e8>
 800a956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a95a:	f04f 0901 	mov.w	r9, #1
 800a95e:	4623      	mov	r3, r4
 800a960:	469a      	mov	sl, r3
 800a962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a966:	b10a      	cbz	r2, 800a96c <_svfiprintf_r+0x5c>
 800a968:	2a25      	cmp	r2, #37	; 0x25
 800a96a:	d1f9      	bne.n	800a960 <_svfiprintf_r+0x50>
 800a96c:	ebba 0b04 	subs.w	fp, sl, r4
 800a970:	d00b      	beq.n	800a98a <_svfiprintf_r+0x7a>
 800a972:	465b      	mov	r3, fp
 800a974:	4622      	mov	r2, r4
 800a976:	4629      	mov	r1, r5
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff ff6f 	bl	800a85c <__ssputs_r>
 800a97e:	3001      	adds	r0, #1
 800a980:	f000 80a9 	beq.w	800aad6 <_svfiprintf_r+0x1c6>
 800a984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a986:	445a      	add	r2, fp
 800a988:	9209      	str	r2, [sp, #36]	; 0x24
 800a98a:	f89a 3000 	ldrb.w	r3, [sl]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 80a1 	beq.w	800aad6 <_svfiprintf_r+0x1c6>
 800a994:	2300      	movs	r3, #0
 800a996:	f04f 32ff 	mov.w	r2, #4294967295
 800a99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a99e:	f10a 0a01 	add.w	sl, sl, #1
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	9307      	str	r3, [sp, #28]
 800a9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a9ac:	4654      	mov	r4, sl
 800a9ae:	2205      	movs	r2, #5
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	4850      	ldr	r0, [pc, #320]	; (800aaf8 <_svfiprintf_r+0x1e8>)
 800a9b6:	f7f5 fc0b 	bl	80001d0 <memchr>
 800a9ba:	9a04      	ldr	r2, [sp, #16]
 800a9bc:	b9d8      	cbnz	r0, 800a9f6 <_svfiprintf_r+0xe6>
 800a9be:	06d0      	lsls	r0, r2, #27
 800a9c0:	bf44      	itt	mi
 800a9c2:	2320      	movmi	r3, #32
 800a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c8:	0711      	lsls	r1, r2, #28
 800a9ca:	bf44      	itt	mi
 800a9cc:	232b      	movmi	r3, #43	; 0x2b
 800a9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d8:	d015      	beq.n	800aa06 <_svfiprintf_r+0xf6>
 800a9da:	9a07      	ldr	r2, [sp, #28]
 800a9dc:	4654      	mov	r4, sl
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f04f 0c0a 	mov.w	ip, #10
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ea:	3b30      	subs	r3, #48	; 0x30
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d94d      	bls.n	800aa8c <_svfiprintf_r+0x17c>
 800a9f0:	b1b0      	cbz	r0, 800aa20 <_svfiprintf_r+0x110>
 800a9f2:	9207      	str	r2, [sp, #28]
 800a9f4:	e014      	b.n	800aa20 <_svfiprintf_r+0x110>
 800a9f6:	eba0 0308 	sub.w	r3, r0, r8
 800a9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	46a2      	mov	sl, r4
 800aa04:	e7d2      	b.n	800a9ac <_svfiprintf_r+0x9c>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d19      	adds	r1, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9103      	str	r1, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfbb      	ittet	lt
 800aa12:	425b      	neglt	r3, r3
 800aa14:	f042 0202 	orrlt.w	r2, r2, #2
 800aa18:	9307      	strge	r3, [sp, #28]
 800aa1a:	9307      	strlt	r3, [sp, #28]
 800aa1c:	bfb8      	it	lt
 800aa1e:	9204      	strlt	r2, [sp, #16]
 800aa20:	7823      	ldrb	r3, [r4, #0]
 800aa22:	2b2e      	cmp	r3, #46	; 0x2e
 800aa24:	d10c      	bne.n	800aa40 <_svfiprintf_r+0x130>
 800aa26:	7863      	ldrb	r3, [r4, #1]
 800aa28:	2b2a      	cmp	r3, #42	; 0x2a
 800aa2a:	d134      	bne.n	800aa96 <_svfiprintf_r+0x186>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	9203      	str	r2, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfb8      	it	lt
 800aa38:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa3c:	3402      	adds	r4, #2
 800aa3e:	9305      	str	r3, [sp, #20]
 800aa40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ab08 <_svfiprintf_r+0x1f8>
 800aa44:	7821      	ldrb	r1, [r4, #0]
 800aa46:	2203      	movs	r2, #3
 800aa48:	4650      	mov	r0, sl
 800aa4a:	f7f5 fbc1 	bl	80001d0 <memchr>
 800aa4e:	b138      	cbz	r0, 800aa60 <_svfiprintf_r+0x150>
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	eba0 000a 	sub.w	r0, r0, sl
 800aa56:	2240      	movs	r2, #64	; 0x40
 800aa58:	4082      	lsls	r2, r0
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	3401      	adds	r4, #1
 800aa5e:	9304      	str	r3, [sp, #16]
 800aa60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa64:	4825      	ldr	r0, [pc, #148]	; (800aafc <_svfiprintf_r+0x1ec>)
 800aa66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa6a:	2206      	movs	r2, #6
 800aa6c:	f7f5 fbb0 	bl	80001d0 <memchr>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d038      	beq.n	800aae6 <_svfiprintf_r+0x1d6>
 800aa74:	4b22      	ldr	r3, [pc, #136]	; (800ab00 <_svfiprintf_r+0x1f0>)
 800aa76:	bb1b      	cbnz	r3, 800aac0 <_svfiprintf_r+0x1b0>
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	3307      	adds	r3, #7
 800aa7c:	f023 0307 	bic.w	r3, r3, #7
 800aa80:	3308      	adds	r3, #8
 800aa82:	9303      	str	r3, [sp, #12]
 800aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa86:	4433      	add	r3, r6
 800aa88:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8a:	e768      	b.n	800a95e <_svfiprintf_r+0x4e>
 800aa8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa90:	460c      	mov	r4, r1
 800aa92:	2001      	movs	r0, #1
 800aa94:	e7a6      	b.n	800a9e4 <_svfiprintf_r+0xd4>
 800aa96:	2300      	movs	r3, #0
 800aa98:	3401      	adds	r4, #1
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f04f 0c0a 	mov.w	ip, #10
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa8:	3a30      	subs	r2, #48	; 0x30
 800aaaa:	2a09      	cmp	r2, #9
 800aaac:	d903      	bls.n	800aab6 <_svfiprintf_r+0x1a6>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0c6      	beq.n	800aa40 <_svfiprintf_r+0x130>
 800aab2:	9105      	str	r1, [sp, #20]
 800aab4:	e7c4      	b.n	800aa40 <_svfiprintf_r+0x130>
 800aab6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaba:	4604      	mov	r4, r0
 800aabc:	2301      	movs	r3, #1
 800aabe:	e7f0      	b.n	800aaa2 <_svfiprintf_r+0x192>
 800aac0:	ab03      	add	r3, sp, #12
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	462a      	mov	r2, r5
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <_svfiprintf_r+0x1f4>)
 800aac8:	a904      	add	r1, sp, #16
 800aaca:	4638      	mov	r0, r7
 800aacc:	f7fc fb00 	bl	80070d0 <_printf_float>
 800aad0:	1c42      	adds	r2, r0, #1
 800aad2:	4606      	mov	r6, r0
 800aad4:	d1d6      	bne.n	800aa84 <_svfiprintf_r+0x174>
 800aad6:	89ab      	ldrh	r3, [r5, #12]
 800aad8:	065b      	lsls	r3, r3, #25
 800aada:	f53f af2d 	bmi.w	800a938 <_svfiprintf_r+0x28>
 800aade:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aae0:	b01d      	add	sp, #116	; 0x74
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <_svfiprintf_r+0x1f4>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7fc fd91 	bl	8007618 <_printf_i>
 800aaf6:	e7eb      	b.n	800aad0 <_svfiprintf_r+0x1c0>
 800aaf8:	0800cb10 	.word	0x0800cb10
 800aafc:	0800cb1a 	.word	0x0800cb1a
 800ab00:	080070d1 	.word	0x080070d1
 800ab04:	0800a85d 	.word	0x0800a85d
 800ab08:	0800cb16 	.word	0x0800cb16

0800ab0c <_sungetc_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	1c4b      	adds	r3, r1, #1
 800ab10:	4614      	mov	r4, r2
 800ab12:	d103      	bne.n	800ab1c <_sungetc_r+0x10>
 800ab14:	f04f 35ff 	mov.w	r5, #4294967295
 800ab18:	4628      	mov	r0, r5
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	8993      	ldrh	r3, [r2, #12]
 800ab1e:	f023 0320 	bic.w	r3, r3, #32
 800ab22:	8193      	strh	r3, [r2, #12]
 800ab24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab26:	6852      	ldr	r2, [r2, #4]
 800ab28:	b2cd      	uxtb	r5, r1
 800ab2a:	b18b      	cbz	r3, 800ab50 <_sungetc_r+0x44>
 800ab2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	dd08      	ble.n	800ab44 <_sungetc_r+0x38>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	1e5a      	subs	r2, r3, #1
 800ab36:	6022      	str	r2, [r4, #0]
 800ab38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	e7e9      	b.n	800ab18 <_sungetc_r+0xc>
 800ab44:	4621      	mov	r1, r4
 800ab46:	f000 fda0 	bl	800b68a <__submore>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d0f1      	beq.n	800ab32 <_sungetc_r+0x26>
 800ab4e:	e7e1      	b.n	800ab14 <_sungetc_r+0x8>
 800ab50:	6921      	ldr	r1, [r4, #16]
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	b151      	cbz	r1, 800ab6c <_sungetc_r+0x60>
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d208      	bcs.n	800ab6c <_sungetc_r+0x60>
 800ab5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab5e:	42a9      	cmp	r1, r5
 800ab60:	d104      	bne.n	800ab6c <_sungetc_r+0x60>
 800ab62:	3b01      	subs	r3, #1
 800ab64:	3201      	adds	r2, #1
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	6062      	str	r2, [r4, #4]
 800ab6a:	e7d5      	b.n	800ab18 <_sungetc_r+0xc>
 800ab6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab74:	6363      	str	r3, [r4, #52]	; 0x34
 800ab76:	2303      	movs	r3, #3
 800ab78:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7dc      	b.n	800ab40 <_sungetc_r+0x34>

0800ab86 <__ssrefill_r>:
 800ab86:	b510      	push	{r4, lr}
 800ab88:	460c      	mov	r4, r1
 800ab8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ab8c:	b169      	cbz	r1, 800abaa <__ssrefill_r+0x24>
 800ab8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab92:	4299      	cmp	r1, r3
 800ab94:	d001      	beq.n	800ab9a <__ssrefill_r+0x14>
 800ab96:	f7fe faa1 	bl	80090dc <_free_r>
 800ab9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab9c:	6063      	str	r3, [r4, #4]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	6360      	str	r0, [r4, #52]	; 0x34
 800aba2:	b113      	cbz	r3, 800abaa <__ssrefill_r+0x24>
 800aba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aba6:	6023      	str	r3, [r4, #0]
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	6063      	str	r3, [r4, #4]
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	f04f 30ff 	mov.w	r0, #4294967295
 800abbe:	e7f3      	b.n	800aba8 <__ssrefill_r+0x22>

0800abc0 <__ssvfiscanf_r>:
 800abc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	460c      	mov	r4, r1
 800abc6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800abca:	2100      	movs	r1, #0
 800abcc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800abd0:	49a6      	ldr	r1, [pc, #664]	; (800ae6c <__ssvfiscanf_r+0x2ac>)
 800abd2:	91a0      	str	r1, [sp, #640]	; 0x280
 800abd4:	f10d 0804 	add.w	r8, sp, #4
 800abd8:	49a5      	ldr	r1, [pc, #660]	; (800ae70 <__ssvfiscanf_r+0x2b0>)
 800abda:	4fa6      	ldr	r7, [pc, #664]	; (800ae74 <__ssvfiscanf_r+0x2b4>)
 800abdc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ae78 <__ssvfiscanf_r+0x2b8>
 800abe0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800abe4:	4606      	mov	r6, r0
 800abe6:	91a1      	str	r1, [sp, #644]	; 0x284
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	7813      	ldrb	r3, [r2, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 815a 	beq.w	800aea6 <__ssvfiscanf_r+0x2e6>
 800abf2:	5cf9      	ldrb	r1, [r7, r3]
 800abf4:	f011 0108 	ands.w	r1, r1, #8
 800abf8:	f102 0501 	add.w	r5, r2, #1
 800abfc:	d019      	beq.n	800ac32 <__ssvfiscanf_r+0x72>
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dd0f      	ble.n	800ac24 <__ssvfiscanf_r+0x64>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	5cba      	ldrb	r2, [r7, r2]
 800ac0a:	0712      	lsls	r2, r2, #28
 800ac0c:	d401      	bmi.n	800ac12 <__ssvfiscanf_r+0x52>
 800ac0e:	462a      	mov	r2, r5
 800ac10:	e7eb      	b.n	800abea <__ssvfiscanf_r+0x2a>
 800ac12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac14:	3201      	adds	r2, #1
 800ac16:	9245      	str	r2, [sp, #276]	; 0x114
 800ac18:	6862      	ldr	r2, [r4, #4]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	3a01      	subs	r2, #1
 800ac1e:	6062      	str	r2, [r4, #4]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	e7ec      	b.n	800abfe <__ssvfiscanf_r+0x3e>
 800ac24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac26:	4621      	mov	r1, r4
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4798      	blx	r3
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d0e9      	beq.n	800ac04 <__ssvfiscanf_r+0x44>
 800ac30:	e7ed      	b.n	800ac0e <__ssvfiscanf_r+0x4e>
 800ac32:	2b25      	cmp	r3, #37	; 0x25
 800ac34:	d012      	beq.n	800ac5c <__ssvfiscanf_r+0x9c>
 800ac36:	469a      	mov	sl, r3
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f340 8091 	ble.w	800ad62 <__ssvfiscanf_r+0x1a2>
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	7813      	ldrb	r3, [r2, #0]
 800ac44:	4553      	cmp	r3, sl
 800ac46:	f040 812e 	bne.w	800aea6 <__ssvfiscanf_r+0x2e6>
 800ac4a:	6863      	ldr	r3, [r4, #4]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ac52:	3201      	adds	r2, #1
 800ac54:	3301      	adds	r3, #1
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	9345      	str	r3, [sp, #276]	; 0x114
 800ac5a:	e7d8      	b.n	800ac0e <__ssvfiscanf_r+0x4e>
 800ac5c:	9141      	str	r1, [sp, #260]	; 0x104
 800ac5e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ac60:	7853      	ldrb	r3, [r2, #1]
 800ac62:	2b2a      	cmp	r3, #42	; 0x2a
 800ac64:	bf02      	ittt	eq
 800ac66:	2310      	moveq	r3, #16
 800ac68:	1c95      	addeq	r5, r2, #2
 800ac6a:	9341      	streq	r3, [sp, #260]	; 0x104
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	46aa      	mov	sl, r5
 800ac70:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ac74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ac78:	2b09      	cmp	r3, #9
 800ac7a:	d91c      	bls.n	800acb6 <__ssvfiscanf_r+0xf6>
 800ac7c:	487e      	ldr	r0, [pc, #504]	; (800ae78 <__ssvfiscanf_r+0x2b8>)
 800ac7e:	2203      	movs	r2, #3
 800ac80:	f7f5 faa6 	bl	80001d0 <memchr>
 800ac84:	b138      	cbz	r0, 800ac96 <__ssvfiscanf_r+0xd6>
 800ac86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac88:	eba0 0009 	sub.w	r0, r0, r9
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4083      	lsls	r3, r0
 800ac90:	4313      	orrs	r3, r2
 800ac92:	9341      	str	r3, [sp, #260]	; 0x104
 800ac94:	4655      	mov	r5, sl
 800ac96:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac9a:	2b78      	cmp	r3, #120	; 0x78
 800ac9c:	d806      	bhi.n	800acac <__ssvfiscanf_r+0xec>
 800ac9e:	2b57      	cmp	r3, #87	; 0x57
 800aca0:	d810      	bhi.n	800acc4 <__ssvfiscanf_r+0x104>
 800aca2:	2b25      	cmp	r3, #37	; 0x25
 800aca4:	d0c7      	beq.n	800ac36 <__ssvfiscanf_r+0x76>
 800aca6:	d857      	bhi.n	800ad58 <__ssvfiscanf_r+0x198>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d065      	beq.n	800ad78 <__ssvfiscanf_r+0x1b8>
 800acac:	2303      	movs	r3, #3
 800acae:	9347      	str	r3, [sp, #284]	; 0x11c
 800acb0:	230a      	movs	r3, #10
 800acb2:	9342      	str	r3, [sp, #264]	; 0x108
 800acb4:	e076      	b.n	800ada4 <__ssvfiscanf_r+0x1e4>
 800acb6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800acb8:	fb02 1103 	mla	r1, r2, r3, r1
 800acbc:	3930      	subs	r1, #48	; 0x30
 800acbe:	9143      	str	r1, [sp, #268]	; 0x10c
 800acc0:	4655      	mov	r5, sl
 800acc2:	e7d4      	b.n	800ac6e <__ssvfiscanf_r+0xae>
 800acc4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800acc8:	2a20      	cmp	r2, #32
 800acca:	d8ef      	bhi.n	800acac <__ssvfiscanf_r+0xec>
 800accc:	a101      	add	r1, pc, #4	; (adr r1, 800acd4 <__ssvfiscanf_r+0x114>)
 800acce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800ad87 	.word	0x0800ad87
 800acd8:	0800acad 	.word	0x0800acad
 800acdc:	0800acad 	.word	0x0800acad
 800ace0:	0800ade5 	.word	0x0800ade5
 800ace4:	0800acad 	.word	0x0800acad
 800ace8:	0800acad 	.word	0x0800acad
 800acec:	0800acad 	.word	0x0800acad
 800acf0:	0800acad 	.word	0x0800acad
 800acf4:	0800acad 	.word	0x0800acad
 800acf8:	0800acad 	.word	0x0800acad
 800acfc:	0800acad 	.word	0x0800acad
 800ad00:	0800adfb 	.word	0x0800adfb
 800ad04:	0800ade1 	.word	0x0800ade1
 800ad08:	0800ad5f 	.word	0x0800ad5f
 800ad0c:	0800ad5f 	.word	0x0800ad5f
 800ad10:	0800ad5f 	.word	0x0800ad5f
 800ad14:	0800acad 	.word	0x0800acad
 800ad18:	0800ad9d 	.word	0x0800ad9d
 800ad1c:	0800acad 	.word	0x0800acad
 800ad20:	0800acad 	.word	0x0800acad
 800ad24:	0800acad 	.word	0x0800acad
 800ad28:	0800acad 	.word	0x0800acad
 800ad2c:	0800ae0b 	.word	0x0800ae0b
 800ad30:	0800add9 	.word	0x0800add9
 800ad34:	0800ad7f 	.word	0x0800ad7f
 800ad38:	0800acad 	.word	0x0800acad
 800ad3c:	0800acad 	.word	0x0800acad
 800ad40:	0800ae07 	.word	0x0800ae07
 800ad44:	0800acad 	.word	0x0800acad
 800ad48:	0800ade1 	.word	0x0800ade1
 800ad4c:	0800acad 	.word	0x0800acad
 800ad50:	0800acad 	.word	0x0800acad
 800ad54:	0800ad87 	.word	0x0800ad87
 800ad58:	3b45      	subs	r3, #69	; 0x45
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d8a6      	bhi.n	800acac <__ssvfiscanf_r+0xec>
 800ad5e:	2305      	movs	r3, #5
 800ad60:	e01f      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800ad62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad64:	4621      	mov	r1, r4
 800ad66:	4630      	mov	r0, r6
 800ad68:	4798      	blx	r3
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f43f af68 	beq.w	800ac40 <__ssvfiscanf_r+0x80>
 800ad70:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f040 808d 	bne.w	800ae92 <__ssvfiscanf_r+0x2d2>
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7c:	e08f      	b.n	800ae9e <__ssvfiscanf_r+0x2de>
 800ad7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad80:	f042 0220 	orr.w	r2, r2, #32
 800ad84:	9241      	str	r2, [sp, #260]	; 0x104
 800ad86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad8c:	9241      	str	r2, [sp, #260]	; 0x104
 800ad8e:	2210      	movs	r2, #16
 800ad90:	2b6f      	cmp	r3, #111	; 0x6f
 800ad92:	9242      	str	r2, [sp, #264]	; 0x108
 800ad94:	bf34      	ite	cc
 800ad96:	2303      	movcc	r3, #3
 800ad98:	2304      	movcs	r3, #4
 800ad9a:	e002      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9342      	str	r3, [sp, #264]	; 0x108
 800ada0:	2303      	movs	r3, #3
 800ada2:	9347      	str	r3, [sp, #284]	; 0x11c
 800ada4:	6863      	ldr	r3, [r4, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd3d      	ble.n	800ae26 <__ssvfiscanf_r+0x266>
 800adaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adac:	0659      	lsls	r1, r3, #25
 800adae:	d404      	bmi.n	800adba <__ssvfiscanf_r+0x1fa>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	5cba      	ldrb	r2, [r7, r2]
 800adb6:	0712      	lsls	r2, r2, #28
 800adb8:	d43c      	bmi.n	800ae34 <__ssvfiscanf_r+0x274>
 800adba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	dc4b      	bgt.n	800ae58 <__ssvfiscanf_r+0x298>
 800adc0:	466b      	mov	r3, sp
 800adc2:	4622      	mov	r2, r4
 800adc4:	a941      	add	r1, sp, #260	; 0x104
 800adc6:	4630      	mov	r0, r6
 800adc8:	f000 f9b6 	bl	800b138 <_scanf_chars>
 800adcc:	2801      	cmp	r0, #1
 800adce:	d06a      	beq.n	800aea6 <__ssvfiscanf_r+0x2e6>
 800add0:	2802      	cmp	r0, #2
 800add2:	f47f af1c 	bne.w	800ac0e <__ssvfiscanf_r+0x4e>
 800add6:	e7cb      	b.n	800ad70 <__ssvfiscanf_r+0x1b0>
 800add8:	2308      	movs	r3, #8
 800adda:	9342      	str	r3, [sp, #264]	; 0x108
 800addc:	2304      	movs	r3, #4
 800adde:	e7e0      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800ade0:	220a      	movs	r2, #10
 800ade2:	e7d5      	b.n	800ad90 <__ssvfiscanf_r+0x1d0>
 800ade4:	4629      	mov	r1, r5
 800ade6:	4640      	mov	r0, r8
 800ade8:	f000 fc16 	bl	800b618 <__sccl>
 800adec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf2:	9341      	str	r3, [sp, #260]	; 0x104
 800adf4:	4605      	mov	r5, r0
 800adf6:	2301      	movs	r3, #1
 800adf8:	e7d3      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800adfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae00:	9341      	str	r3, [sp, #260]	; 0x104
 800ae02:	2300      	movs	r3, #0
 800ae04:	e7cd      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800ae06:	2302      	movs	r3, #2
 800ae08:	e7cb      	b.n	800ada2 <__ssvfiscanf_r+0x1e2>
 800ae0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae0c:	06c3      	lsls	r3, r0, #27
 800ae0e:	f53f aefe 	bmi.w	800ac0e <__ssvfiscanf_r+0x4e>
 800ae12:	9b00      	ldr	r3, [sp, #0]
 800ae14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae16:	1d19      	adds	r1, r3, #4
 800ae18:	9100      	str	r1, [sp, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	07c0      	lsls	r0, r0, #31
 800ae1e:	bf4c      	ite	mi
 800ae20:	801a      	strhmi	r2, [r3, #0]
 800ae22:	601a      	strpl	r2, [r3, #0]
 800ae24:	e6f3      	b.n	800ac0e <__ssvfiscanf_r+0x4e>
 800ae26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	4798      	blx	r3
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d0bb      	beq.n	800adaa <__ssvfiscanf_r+0x1ea>
 800ae32:	e79d      	b.n	800ad70 <__ssvfiscanf_r+0x1b0>
 800ae34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae36:	3201      	adds	r2, #1
 800ae38:	9245      	str	r2, [sp, #276]	; 0x114
 800ae3a:	6862      	ldr	r2, [r4, #4]
 800ae3c:	3a01      	subs	r2, #1
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	6062      	str	r2, [r4, #4]
 800ae42:	dd02      	ble.n	800ae4a <__ssvfiscanf_r+0x28a>
 800ae44:	3301      	adds	r3, #1
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	e7b2      	b.n	800adb0 <__ssvfiscanf_r+0x1f0>
 800ae4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4798      	blx	r3
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0ac      	beq.n	800adb0 <__ssvfiscanf_r+0x1f0>
 800ae56:	e78b      	b.n	800ad70 <__ssvfiscanf_r+0x1b0>
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	dc0f      	bgt.n	800ae7c <__ssvfiscanf_r+0x2bc>
 800ae5c:	466b      	mov	r3, sp
 800ae5e:	4622      	mov	r2, r4
 800ae60:	a941      	add	r1, sp, #260	; 0x104
 800ae62:	4630      	mov	r0, r6
 800ae64:	f000 f9c2 	bl	800b1ec <_scanf_i>
 800ae68:	e7b0      	b.n	800adcc <__ssvfiscanf_r+0x20c>
 800ae6a:	bf00      	nop
 800ae6c:	0800ab0d 	.word	0x0800ab0d
 800ae70:	0800ab87 	.word	0x0800ab87
 800ae74:	0800c709 	.word	0x0800c709
 800ae78:	0800cb16 	.word	0x0800cb16
 800ae7c:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <__ssvfiscanf_r+0x2ec>)
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f aec5 	beq.w	800ac0e <__ssvfiscanf_r+0x4e>
 800ae84:	466b      	mov	r3, sp
 800ae86:	4622      	mov	r2, r4
 800ae88:	a941      	add	r1, sp, #260	; 0x104
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7fc fce6 	bl	800785c <_scanf_float>
 800ae90:	e79c      	b.n	800adcc <__ssvfiscanf_r+0x20c>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae98:	bf18      	it	ne
 800ae9a:	f04f 30ff 	movne.w	r0, #4294967295
 800ae9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aea8:	e7f9      	b.n	800ae9e <__ssvfiscanf_r+0x2de>
 800aeaa:	bf00      	nop
 800aeac:	0800785d 	.word	0x0800785d

0800aeb0 <__sfputc_r>:
 800aeb0:	6893      	ldr	r3, [r2, #8]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	b410      	push	{r4}
 800aeb8:	6093      	str	r3, [r2, #8]
 800aeba:	da08      	bge.n	800aece <__sfputc_r+0x1e>
 800aebc:	6994      	ldr	r4, [r2, #24]
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	db01      	blt.n	800aec6 <__sfputc_r+0x16>
 800aec2:	290a      	cmp	r1, #10
 800aec4:	d103      	bne.n	800aece <__sfputc_r+0x1e>
 800aec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeca:	f7fd b898 	b.w	8007ffe <__swbuf_r>
 800aece:	6813      	ldr	r3, [r2, #0]
 800aed0:	1c58      	adds	r0, r3, #1
 800aed2:	6010      	str	r0, [r2, #0]
 800aed4:	7019      	strb	r1, [r3, #0]
 800aed6:	4608      	mov	r0, r1
 800aed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <__sfputs_r>:
 800aede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee0:	4606      	mov	r6, r0
 800aee2:	460f      	mov	r7, r1
 800aee4:	4614      	mov	r4, r2
 800aee6:	18d5      	adds	r5, r2, r3
 800aee8:	42ac      	cmp	r4, r5
 800aeea:	d101      	bne.n	800aef0 <__sfputs_r+0x12>
 800aeec:	2000      	movs	r0, #0
 800aeee:	e007      	b.n	800af00 <__sfputs_r+0x22>
 800aef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef4:	463a      	mov	r2, r7
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ffda 	bl	800aeb0 <__sfputc_r>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d1f3      	bne.n	800aee8 <__sfputs_r+0xa>
 800af00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af04 <_vfiprintf_r>:
 800af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af08:	460d      	mov	r5, r1
 800af0a:	b09d      	sub	sp, #116	; 0x74
 800af0c:	4614      	mov	r4, r2
 800af0e:	4698      	mov	r8, r3
 800af10:	4606      	mov	r6, r0
 800af12:	b118      	cbz	r0, 800af1c <_vfiprintf_r+0x18>
 800af14:	6a03      	ldr	r3, [r0, #32]
 800af16:	b90b      	cbnz	r3, 800af1c <_vfiprintf_r+0x18>
 800af18:	f7fc ff3c 	bl	8007d94 <__sinit>
 800af1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af1e:	07d9      	lsls	r1, r3, #31
 800af20:	d405      	bmi.n	800af2e <_vfiprintf_r+0x2a>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	059a      	lsls	r2, r3, #22
 800af26:	d402      	bmi.n	800af2e <_vfiprintf_r+0x2a>
 800af28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2a:	f7fd fa1e 	bl	800836a <__retarget_lock_acquire_recursive>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	071b      	lsls	r3, r3, #28
 800af32:	d501      	bpl.n	800af38 <_vfiprintf_r+0x34>
 800af34:	692b      	ldr	r3, [r5, #16]
 800af36:	b99b      	cbnz	r3, 800af60 <_vfiprintf_r+0x5c>
 800af38:	4629      	mov	r1, r5
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7fd f89c 	bl	8008078 <__swsetup_r>
 800af40:	b170      	cbz	r0, 800af60 <_vfiprintf_r+0x5c>
 800af42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af44:	07dc      	lsls	r4, r3, #31
 800af46:	d504      	bpl.n	800af52 <_vfiprintf_r+0x4e>
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	b01d      	add	sp, #116	; 0x74
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	0598      	lsls	r0, r3, #22
 800af56:	d4f7      	bmi.n	800af48 <_vfiprintf_r+0x44>
 800af58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5a:	f7fd fa07 	bl	800836c <__retarget_lock_release_recursive>
 800af5e:	e7f3      	b.n	800af48 <_vfiprintf_r+0x44>
 800af60:	2300      	movs	r3, #0
 800af62:	9309      	str	r3, [sp, #36]	; 0x24
 800af64:	2320      	movs	r3, #32
 800af66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af6e:	2330      	movs	r3, #48	; 0x30
 800af70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b124 <_vfiprintf_r+0x220>
 800af74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af78:	f04f 0901 	mov.w	r9, #1
 800af7c:	4623      	mov	r3, r4
 800af7e:	469a      	mov	sl, r3
 800af80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af84:	b10a      	cbz	r2, 800af8a <_vfiprintf_r+0x86>
 800af86:	2a25      	cmp	r2, #37	; 0x25
 800af88:	d1f9      	bne.n	800af7e <_vfiprintf_r+0x7a>
 800af8a:	ebba 0b04 	subs.w	fp, sl, r4
 800af8e:	d00b      	beq.n	800afa8 <_vfiprintf_r+0xa4>
 800af90:	465b      	mov	r3, fp
 800af92:	4622      	mov	r2, r4
 800af94:	4629      	mov	r1, r5
 800af96:	4630      	mov	r0, r6
 800af98:	f7ff ffa1 	bl	800aede <__sfputs_r>
 800af9c:	3001      	adds	r0, #1
 800af9e:	f000 80a9 	beq.w	800b0f4 <_vfiprintf_r+0x1f0>
 800afa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa4:	445a      	add	r2, fp
 800afa6:	9209      	str	r2, [sp, #36]	; 0x24
 800afa8:	f89a 3000 	ldrb.w	r3, [sl]
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80a1 	beq.w	800b0f4 <_vfiprintf_r+0x1f0>
 800afb2:	2300      	movs	r3, #0
 800afb4:	f04f 32ff 	mov.w	r2, #4294967295
 800afb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afbc:	f10a 0a01 	add.w	sl, sl, #1
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	9307      	str	r3, [sp, #28]
 800afc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc8:	931a      	str	r3, [sp, #104]	; 0x68
 800afca:	4654      	mov	r4, sl
 800afcc:	2205      	movs	r2, #5
 800afce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd2:	4854      	ldr	r0, [pc, #336]	; (800b124 <_vfiprintf_r+0x220>)
 800afd4:	f7f5 f8fc 	bl	80001d0 <memchr>
 800afd8:	9a04      	ldr	r2, [sp, #16]
 800afda:	b9d8      	cbnz	r0, 800b014 <_vfiprintf_r+0x110>
 800afdc:	06d1      	lsls	r1, r2, #27
 800afde:	bf44      	itt	mi
 800afe0:	2320      	movmi	r3, #32
 800afe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe6:	0713      	lsls	r3, r2, #28
 800afe8:	bf44      	itt	mi
 800afea:	232b      	movmi	r3, #43	; 0x2b
 800afec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff0:	f89a 3000 	ldrb.w	r3, [sl]
 800aff4:	2b2a      	cmp	r3, #42	; 0x2a
 800aff6:	d015      	beq.n	800b024 <_vfiprintf_r+0x120>
 800aff8:	9a07      	ldr	r2, [sp, #28]
 800affa:	4654      	mov	r4, sl
 800affc:	2000      	movs	r0, #0
 800affe:	f04f 0c0a 	mov.w	ip, #10
 800b002:	4621      	mov	r1, r4
 800b004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b008:	3b30      	subs	r3, #48	; 0x30
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d94d      	bls.n	800b0aa <_vfiprintf_r+0x1a6>
 800b00e:	b1b0      	cbz	r0, 800b03e <_vfiprintf_r+0x13a>
 800b010:	9207      	str	r2, [sp, #28]
 800b012:	e014      	b.n	800b03e <_vfiprintf_r+0x13a>
 800b014:	eba0 0308 	sub.w	r3, r0, r8
 800b018:	fa09 f303 	lsl.w	r3, r9, r3
 800b01c:	4313      	orrs	r3, r2
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	46a2      	mov	sl, r4
 800b022:	e7d2      	b.n	800afca <_vfiprintf_r+0xc6>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	1d19      	adds	r1, r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	9103      	str	r1, [sp, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bfbb      	ittet	lt
 800b030:	425b      	neglt	r3, r3
 800b032:	f042 0202 	orrlt.w	r2, r2, #2
 800b036:	9307      	strge	r3, [sp, #28]
 800b038:	9307      	strlt	r3, [sp, #28]
 800b03a:	bfb8      	it	lt
 800b03c:	9204      	strlt	r2, [sp, #16]
 800b03e:	7823      	ldrb	r3, [r4, #0]
 800b040:	2b2e      	cmp	r3, #46	; 0x2e
 800b042:	d10c      	bne.n	800b05e <_vfiprintf_r+0x15a>
 800b044:	7863      	ldrb	r3, [r4, #1]
 800b046:	2b2a      	cmp	r3, #42	; 0x2a
 800b048:	d134      	bne.n	800b0b4 <_vfiprintf_r+0x1b0>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	1d1a      	adds	r2, r3, #4
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	9203      	str	r2, [sp, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfb8      	it	lt
 800b056:	f04f 33ff 	movlt.w	r3, #4294967295
 800b05a:	3402      	adds	r4, #2
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b134 <_vfiprintf_r+0x230>
 800b062:	7821      	ldrb	r1, [r4, #0]
 800b064:	2203      	movs	r2, #3
 800b066:	4650      	mov	r0, sl
 800b068:	f7f5 f8b2 	bl	80001d0 <memchr>
 800b06c:	b138      	cbz	r0, 800b07e <_vfiprintf_r+0x17a>
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	eba0 000a 	sub.w	r0, r0, sl
 800b074:	2240      	movs	r2, #64	; 0x40
 800b076:	4082      	lsls	r2, r0
 800b078:	4313      	orrs	r3, r2
 800b07a:	3401      	adds	r4, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b082:	4829      	ldr	r0, [pc, #164]	; (800b128 <_vfiprintf_r+0x224>)
 800b084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b088:	2206      	movs	r2, #6
 800b08a:	f7f5 f8a1 	bl	80001d0 <memchr>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d03f      	beq.n	800b112 <_vfiprintf_r+0x20e>
 800b092:	4b26      	ldr	r3, [pc, #152]	; (800b12c <_vfiprintf_r+0x228>)
 800b094:	bb1b      	cbnz	r3, 800b0de <_vfiprintf_r+0x1da>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	3307      	adds	r3, #7
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	3308      	adds	r3, #8
 800b0a0:	9303      	str	r3, [sp, #12]
 800b0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a4:	443b      	add	r3, r7
 800b0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a8:	e768      	b.n	800af7c <_vfiprintf_r+0x78>
 800b0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	e7a6      	b.n	800b002 <_vfiprintf_r+0xfe>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	3401      	adds	r4, #1
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f04f 0c0a 	mov.w	ip, #10
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c6:	3a30      	subs	r2, #48	; 0x30
 800b0c8:	2a09      	cmp	r2, #9
 800b0ca:	d903      	bls.n	800b0d4 <_vfiprintf_r+0x1d0>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0c6      	beq.n	800b05e <_vfiprintf_r+0x15a>
 800b0d0:	9105      	str	r1, [sp, #20]
 800b0d2:	e7c4      	b.n	800b05e <_vfiprintf_r+0x15a>
 800b0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d8:	4604      	mov	r4, r0
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e7f0      	b.n	800b0c0 <_vfiprintf_r+0x1bc>
 800b0de:	ab03      	add	r3, sp, #12
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	462a      	mov	r2, r5
 800b0e4:	4b12      	ldr	r3, [pc, #72]	; (800b130 <_vfiprintf_r+0x22c>)
 800b0e6:	a904      	add	r1, sp, #16
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7fb fff1 	bl	80070d0 <_printf_float>
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	1c78      	adds	r0, r7, #1
 800b0f2:	d1d6      	bne.n	800b0a2 <_vfiprintf_r+0x19e>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x202>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x202>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7fd f933 	bl	800836c <__retarget_lock_release_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	065b      	lsls	r3, r3, #25
 800b10a:	f53f af1d 	bmi.w	800af48 <_vfiprintf_r+0x44>
 800b10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b110:	e71c      	b.n	800af4c <_vfiprintf_r+0x48>
 800b112:	ab03      	add	r3, sp, #12
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	462a      	mov	r2, r5
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <_vfiprintf_r+0x22c>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7fc fa7b 	bl	8007618 <_printf_i>
 800b122:	e7e4      	b.n	800b0ee <_vfiprintf_r+0x1ea>
 800b124:	0800cb10 	.word	0x0800cb10
 800b128:	0800cb1a 	.word	0x0800cb1a
 800b12c:	080070d1 	.word	0x080070d1
 800b130:	0800aedf 	.word	0x0800aedf
 800b134:	0800cb16 	.word	0x0800cb16

0800b138 <_scanf_chars>:
 800b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b13c:	4615      	mov	r5, r2
 800b13e:	688a      	ldr	r2, [r1, #8]
 800b140:	4680      	mov	r8, r0
 800b142:	460c      	mov	r4, r1
 800b144:	b932      	cbnz	r2, 800b154 <_scanf_chars+0x1c>
 800b146:	698a      	ldr	r2, [r1, #24]
 800b148:	2a00      	cmp	r2, #0
 800b14a:	bf0c      	ite	eq
 800b14c:	2201      	moveq	r2, #1
 800b14e:	f04f 32ff 	movne.w	r2, #4294967295
 800b152:	608a      	str	r2, [r1, #8]
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b1e8 <_scanf_chars+0xb0>
 800b15a:	06d1      	lsls	r1, r2, #27
 800b15c:	bf5f      	itttt	pl
 800b15e:	681a      	ldrpl	r2, [r3, #0]
 800b160:	1d11      	addpl	r1, r2, #4
 800b162:	6019      	strpl	r1, [r3, #0]
 800b164:	6816      	ldrpl	r6, [r2, #0]
 800b166:	2700      	movs	r7, #0
 800b168:	69a0      	ldr	r0, [r4, #24]
 800b16a:	b188      	cbz	r0, 800b190 <_scanf_chars+0x58>
 800b16c:	2801      	cmp	r0, #1
 800b16e:	d107      	bne.n	800b180 <_scanf_chars+0x48>
 800b170:	682a      	ldr	r2, [r5, #0]
 800b172:	7811      	ldrb	r1, [r2, #0]
 800b174:	6962      	ldr	r2, [r4, #20]
 800b176:	5c52      	ldrb	r2, [r2, r1]
 800b178:	b952      	cbnz	r2, 800b190 <_scanf_chars+0x58>
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	d031      	beq.n	800b1e2 <_scanf_chars+0xaa>
 800b17e:	e022      	b.n	800b1c6 <_scanf_chars+0x8e>
 800b180:	2802      	cmp	r0, #2
 800b182:	d120      	bne.n	800b1c6 <_scanf_chars+0x8e>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b18c:	071b      	lsls	r3, r3, #28
 800b18e:	d41a      	bmi.n	800b1c6 <_scanf_chars+0x8e>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	06da      	lsls	r2, r3, #27
 800b194:	bf5e      	ittt	pl
 800b196:	682b      	ldrpl	r3, [r5, #0]
 800b198:	781b      	ldrbpl	r3, [r3, #0]
 800b19a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b19e:	682a      	ldr	r2, [r5, #0]
 800b1a0:	686b      	ldr	r3, [r5, #4]
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	68a2      	ldr	r2, [r4, #8]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	3a01      	subs	r2, #1
 800b1ac:	606b      	str	r3, [r5, #4]
 800b1ae:	3701      	adds	r7, #1
 800b1b0:	60a2      	str	r2, [r4, #8]
 800b1b2:	b142      	cbz	r2, 800b1c6 <_scanf_chars+0x8e>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dcd7      	bgt.n	800b168 <_scanf_chars+0x30>
 800b1b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b1bc:	4629      	mov	r1, r5
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4798      	blx	r3
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d0d0      	beq.n	800b168 <_scanf_chars+0x30>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f013 0310 	ands.w	r3, r3, #16
 800b1cc:	d105      	bne.n	800b1da <_scanf_chars+0xa2>
 800b1ce:	68e2      	ldr	r2, [r4, #12]
 800b1d0:	3201      	adds	r2, #1
 800b1d2:	60e2      	str	r2, [r4, #12]
 800b1d4:	69a2      	ldr	r2, [r4, #24]
 800b1d6:	b102      	cbz	r2, 800b1da <_scanf_chars+0xa2>
 800b1d8:	7033      	strb	r3, [r6, #0]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	443b      	add	r3, r7
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800c709 	.word	0x0800c709

0800b1ec <_scanf_i>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	4b74      	ldr	r3, [pc, #464]	; (800b3c4 <_scanf_i+0x1d8>)
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	4616      	mov	r6, r2
 800b1fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b1fe:	b087      	sub	sp, #28
 800b200:	ab03      	add	r3, sp, #12
 800b202:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b206:	4b70      	ldr	r3, [pc, #448]	; (800b3c8 <_scanf_i+0x1dc>)
 800b208:	69a1      	ldr	r1, [r4, #24]
 800b20a:	4a70      	ldr	r2, [pc, #448]	; (800b3cc <_scanf_i+0x1e0>)
 800b20c:	2903      	cmp	r1, #3
 800b20e:	bf18      	it	ne
 800b210:	461a      	movne	r2, r3
 800b212:	68a3      	ldr	r3, [r4, #8]
 800b214:	9201      	str	r2, [sp, #4]
 800b216:	1e5a      	subs	r2, r3, #1
 800b218:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b21c:	bf88      	it	hi
 800b21e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b222:	4627      	mov	r7, r4
 800b224:	bf82      	ittt	hi
 800b226:	eb03 0905 	addhi.w	r9, r3, r5
 800b22a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b22e:	60a3      	strhi	r3, [r4, #8]
 800b230:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b234:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b238:	bf98      	it	ls
 800b23a:	f04f 0900 	movls.w	r9, #0
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	463d      	mov	r5, r7
 800b242:	f04f 0b00 	mov.w	fp, #0
 800b246:	6831      	ldr	r1, [r6, #0]
 800b248:	ab03      	add	r3, sp, #12
 800b24a:	7809      	ldrb	r1, [r1, #0]
 800b24c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b250:	2202      	movs	r2, #2
 800b252:	f7f4 ffbd 	bl	80001d0 <memchr>
 800b256:	b328      	cbz	r0, 800b2a4 <_scanf_i+0xb8>
 800b258:	f1bb 0f01 	cmp.w	fp, #1
 800b25c:	d159      	bne.n	800b312 <_scanf_i+0x126>
 800b25e:	6862      	ldr	r2, [r4, #4]
 800b260:	b92a      	cbnz	r2, 800b26e <_scanf_i+0x82>
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	2308      	movs	r3, #8
 800b266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	6022      	str	r2, [r4, #0]
 800b26e:	6822      	ldr	r2, [r4, #0]
 800b270:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b274:	6022      	str	r2, [r4, #0]
 800b276:	68a2      	ldr	r2, [r4, #8]
 800b278:	1e51      	subs	r1, r2, #1
 800b27a:	60a1      	str	r1, [r4, #8]
 800b27c:	b192      	cbz	r2, 800b2a4 <_scanf_i+0xb8>
 800b27e:	6832      	ldr	r2, [r6, #0]
 800b280:	1c51      	adds	r1, r2, #1
 800b282:	6031      	str	r1, [r6, #0]
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	f805 2b01 	strb.w	r2, [r5], #1
 800b28a:	6872      	ldr	r2, [r6, #4]
 800b28c:	3a01      	subs	r2, #1
 800b28e:	2a00      	cmp	r2, #0
 800b290:	6072      	str	r2, [r6, #4]
 800b292:	dc07      	bgt.n	800b2a4 <_scanf_i+0xb8>
 800b294:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b298:	4631      	mov	r1, r6
 800b29a:	4650      	mov	r0, sl
 800b29c:	4790      	blx	r2
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f040 8085 	bne.w	800b3ae <_scanf_i+0x1c2>
 800b2a4:	f10b 0b01 	add.w	fp, fp, #1
 800b2a8:	f1bb 0f03 	cmp.w	fp, #3
 800b2ac:	d1cb      	bne.n	800b246 <_scanf_i+0x5a>
 800b2ae:	6863      	ldr	r3, [r4, #4]
 800b2b0:	b90b      	cbnz	r3, 800b2b6 <_scanf_i+0xca>
 800b2b2:	230a      	movs	r3, #10
 800b2b4:	6063      	str	r3, [r4, #4]
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	4945      	ldr	r1, [pc, #276]	; (800b3d0 <_scanf_i+0x1e4>)
 800b2ba:	6960      	ldr	r0, [r4, #20]
 800b2bc:	1ac9      	subs	r1, r1, r3
 800b2be:	f000 f9ab 	bl	800b618 <__sccl>
 800b2c2:	f04f 0b00 	mov.w	fp, #0
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	6822      	ldr	r2, [r4, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d03d      	beq.n	800b34a <_scanf_i+0x15e>
 800b2ce:	6831      	ldr	r1, [r6, #0]
 800b2d0:	6960      	ldr	r0, [r4, #20]
 800b2d2:	f891 c000 	ldrb.w	ip, [r1]
 800b2d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d035      	beq.n	800b34a <_scanf_i+0x15e>
 800b2de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b2e2:	d124      	bne.n	800b32e <_scanf_i+0x142>
 800b2e4:	0510      	lsls	r0, r2, #20
 800b2e6:	d522      	bpl.n	800b32e <_scanf_i+0x142>
 800b2e8:	f10b 0b01 	add.w	fp, fp, #1
 800b2ec:	f1b9 0f00 	cmp.w	r9, #0
 800b2f0:	d003      	beq.n	800b2fa <_scanf_i+0x10e>
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	6873      	ldr	r3, [r6, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	6073      	str	r3, [r6, #4]
 800b302:	dd1b      	ble.n	800b33c <_scanf_i+0x150>
 800b304:	6833      	ldr	r3, [r6, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	6033      	str	r3, [r6, #0]
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	60a3      	str	r3, [r4, #8]
 800b310:	e7d9      	b.n	800b2c6 <_scanf_i+0xda>
 800b312:	f1bb 0f02 	cmp.w	fp, #2
 800b316:	d1ae      	bne.n	800b276 <_scanf_i+0x8a>
 800b318:	6822      	ldr	r2, [r4, #0]
 800b31a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b31e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b322:	d1bf      	bne.n	800b2a4 <_scanf_i+0xb8>
 800b324:	2310      	movs	r3, #16
 800b326:	6063      	str	r3, [r4, #4]
 800b328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b32c:	e7a2      	b.n	800b274 <_scanf_i+0x88>
 800b32e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	780b      	ldrb	r3, [r1, #0]
 800b336:	f805 3b01 	strb.w	r3, [r5], #1
 800b33a:	e7de      	b.n	800b2fa <_scanf_i+0x10e>
 800b33c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b340:	4631      	mov	r1, r6
 800b342:	4650      	mov	r0, sl
 800b344:	4798      	blx	r3
 800b346:	2800      	cmp	r0, #0
 800b348:	d0df      	beq.n	800b30a <_scanf_i+0x11e>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	05d9      	lsls	r1, r3, #23
 800b34e:	d50d      	bpl.n	800b36c <_scanf_i+0x180>
 800b350:	42bd      	cmp	r5, r7
 800b352:	d909      	bls.n	800b368 <_scanf_i+0x17c>
 800b354:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b35c:	4632      	mov	r2, r6
 800b35e:	4650      	mov	r0, sl
 800b360:	4798      	blx	r3
 800b362:	f105 39ff 	add.w	r9, r5, #4294967295
 800b366:	464d      	mov	r5, r9
 800b368:	42bd      	cmp	r5, r7
 800b36a:	d028      	beq.n	800b3be <_scanf_i+0x1d2>
 800b36c:	6822      	ldr	r2, [r4, #0]
 800b36e:	f012 0210 	ands.w	r2, r2, #16
 800b372:	d113      	bne.n	800b39c <_scanf_i+0x1b0>
 800b374:	702a      	strb	r2, [r5, #0]
 800b376:	6863      	ldr	r3, [r4, #4]
 800b378:	9e01      	ldr	r6, [sp, #4]
 800b37a:	4639      	mov	r1, r7
 800b37c:	4650      	mov	r0, sl
 800b37e:	47b0      	blx	r6
 800b380:	f8d8 3000 	ldr.w	r3, [r8]
 800b384:	6821      	ldr	r1, [r4, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	f8c8 2000 	str.w	r2, [r8]
 800b38c:	f011 0f20 	tst.w	r1, #32
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	d00f      	beq.n	800b3b4 <_scanf_i+0x1c8>
 800b394:	6018      	str	r0, [r3, #0]
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60e3      	str	r3, [r4, #12]
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	1bed      	subs	r5, r5, r7
 800b3a0:	445d      	add	r5, fp
 800b3a2:	442b      	add	r3, r5
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	b007      	add	sp, #28
 800b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ae:	f04f 0b00 	mov.w	fp, #0
 800b3b2:	e7ca      	b.n	800b34a <_scanf_i+0x15e>
 800b3b4:	07ca      	lsls	r2, r1, #31
 800b3b6:	bf4c      	ite	mi
 800b3b8:	8018      	strhmi	r0, [r3, #0]
 800b3ba:	6018      	strpl	r0, [r3, #0]
 800b3bc:	e7eb      	b.n	800b396 <_scanf_i+0x1aa>
 800b3be:	2001      	movs	r0, #1
 800b3c0:	e7f2      	b.n	800b3a8 <_scanf_i+0x1bc>
 800b3c2:	bf00      	nop
 800b3c4:	0800c6b4 	.word	0x0800c6b4
 800b3c8:	0800bff5 	.word	0x0800bff5
 800b3cc:	08006f79 	.word	0x08006f79
 800b3d0:	0800cb31 	.word	0x0800cb31

0800b3d4 <__sflush_r>:
 800b3d4:	898a      	ldrh	r2, [r1, #12]
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	4605      	mov	r5, r0
 800b3dc:	0710      	lsls	r0, r2, #28
 800b3de:	460c      	mov	r4, r1
 800b3e0:	d458      	bmi.n	800b494 <__sflush_r+0xc0>
 800b3e2:	684b      	ldr	r3, [r1, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc05      	bgt.n	800b3f4 <__sflush_r+0x20>
 800b3e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	dc02      	bgt.n	800b3f4 <__sflush_r+0x20>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	d0f9      	beq.n	800b3ee <__sflush_r+0x1a>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b400:	682f      	ldr	r7, [r5, #0]
 800b402:	6a21      	ldr	r1, [r4, #32]
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	d032      	beq.n	800b46e <__sflush_r+0x9a>
 800b408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	075a      	lsls	r2, r3, #29
 800b40e:	d505      	bpl.n	800b41c <__sflush_r+0x48>
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	1ac0      	subs	r0, r0, r3
 800b414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b416:	b10b      	cbz	r3, 800b41c <__sflush_r+0x48>
 800b418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b41a:	1ac0      	subs	r0, r0, r3
 800b41c:	2300      	movs	r3, #0
 800b41e:	4602      	mov	r2, r0
 800b420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b422:	6a21      	ldr	r1, [r4, #32]
 800b424:	4628      	mov	r0, r5
 800b426:	47b0      	blx	r6
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	d106      	bne.n	800b43c <__sflush_r+0x68>
 800b42e:	6829      	ldr	r1, [r5, #0]
 800b430:	291d      	cmp	r1, #29
 800b432:	d82b      	bhi.n	800b48c <__sflush_r+0xb8>
 800b434:	4a29      	ldr	r2, [pc, #164]	; (800b4dc <__sflush_r+0x108>)
 800b436:	410a      	asrs	r2, r1
 800b438:	07d6      	lsls	r6, r2, #31
 800b43a:	d427      	bmi.n	800b48c <__sflush_r+0xb8>
 800b43c:	2200      	movs	r2, #0
 800b43e:	6062      	str	r2, [r4, #4]
 800b440:	04d9      	lsls	r1, r3, #19
 800b442:	6922      	ldr	r2, [r4, #16]
 800b444:	6022      	str	r2, [r4, #0]
 800b446:	d504      	bpl.n	800b452 <__sflush_r+0x7e>
 800b448:	1c42      	adds	r2, r0, #1
 800b44a:	d101      	bne.n	800b450 <__sflush_r+0x7c>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b903      	cbnz	r3, 800b452 <__sflush_r+0x7e>
 800b450:	6560      	str	r0, [r4, #84]	; 0x54
 800b452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b454:	602f      	str	r7, [r5, #0]
 800b456:	2900      	cmp	r1, #0
 800b458:	d0c9      	beq.n	800b3ee <__sflush_r+0x1a>
 800b45a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b45e:	4299      	cmp	r1, r3
 800b460:	d002      	beq.n	800b468 <__sflush_r+0x94>
 800b462:	4628      	mov	r0, r5
 800b464:	f7fd fe3a 	bl	80090dc <_free_r>
 800b468:	2000      	movs	r0, #0
 800b46a:	6360      	str	r0, [r4, #52]	; 0x34
 800b46c:	e7c0      	b.n	800b3f0 <__sflush_r+0x1c>
 800b46e:	2301      	movs	r3, #1
 800b470:	4628      	mov	r0, r5
 800b472:	47b0      	blx	r6
 800b474:	1c41      	adds	r1, r0, #1
 800b476:	d1c8      	bne.n	800b40a <__sflush_r+0x36>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0c5      	beq.n	800b40a <__sflush_r+0x36>
 800b47e:	2b1d      	cmp	r3, #29
 800b480:	d001      	beq.n	800b486 <__sflush_r+0xb2>
 800b482:	2b16      	cmp	r3, #22
 800b484:	d101      	bne.n	800b48a <__sflush_r+0xb6>
 800b486:	602f      	str	r7, [r5, #0]
 800b488:	e7b1      	b.n	800b3ee <__sflush_r+0x1a>
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	e7ad      	b.n	800b3f0 <__sflush_r+0x1c>
 800b494:	690f      	ldr	r7, [r1, #16]
 800b496:	2f00      	cmp	r7, #0
 800b498:	d0a9      	beq.n	800b3ee <__sflush_r+0x1a>
 800b49a:	0793      	lsls	r3, r2, #30
 800b49c:	680e      	ldr	r6, [r1, #0]
 800b49e:	bf08      	it	eq
 800b4a0:	694b      	ldreq	r3, [r1, #20]
 800b4a2:	600f      	str	r7, [r1, #0]
 800b4a4:	bf18      	it	ne
 800b4a6:	2300      	movne	r3, #0
 800b4a8:	eba6 0807 	sub.w	r8, r6, r7
 800b4ac:	608b      	str	r3, [r1, #8]
 800b4ae:	f1b8 0f00 	cmp.w	r8, #0
 800b4b2:	dd9c      	ble.n	800b3ee <__sflush_r+0x1a>
 800b4b4:	6a21      	ldr	r1, [r4, #32]
 800b4b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4b8:	4643      	mov	r3, r8
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b0      	blx	r6
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dc06      	bgt.n	800b4d2 <__sflush_r+0xfe>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ca:	81a3      	strh	r3, [r4, #12]
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	e78e      	b.n	800b3f0 <__sflush_r+0x1c>
 800b4d2:	4407      	add	r7, r0
 800b4d4:	eba8 0800 	sub.w	r8, r8, r0
 800b4d8:	e7e9      	b.n	800b4ae <__sflush_r+0xda>
 800b4da:	bf00      	nop
 800b4dc:	dfbffffe 	.word	0xdfbffffe

0800b4e0 <_fflush_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	690b      	ldr	r3, [r1, #16]
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	b913      	cbnz	r3, 800b4f0 <_fflush_r+0x10>
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	b118      	cbz	r0, 800b4fa <_fflush_r+0x1a>
 800b4f2:	6a03      	ldr	r3, [r0, #32]
 800b4f4:	b90b      	cbnz	r3, 800b4fa <_fflush_r+0x1a>
 800b4f6:	f7fc fc4d 	bl	8007d94 <__sinit>
 800b4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0f3      	beq.n	800b4ea <_fflush_r+0xa>
 800b502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b504:	07d0      	lsls	r0, r2, #31
 800b506:	d404      	bmi.n	800b512 <_fflush_r+0x32>
 800b508:	0599      	lsls	r1, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_fflush_r+0x32>
 800b50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50e:	f7fc ff2c 	bl	800836a <__retarget_lock_acquire_recursive>
 800b512:	4628      	mov	r0, r5
 800b514:	4621      	mov	r1, r4
 800b516:	f7ff ff5d 	bl	800b3d4 <__sflush_r>
 800b51a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b51c:	07da      	lsls	r2, r3, #31
 800b51e:	4605      	mov	r5, r0
 800b520:	d4e4      	bmi.n	800b4ec <_fflush_r+0xc>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	059b      	lsls	r3, r3, #22
 800b526:	d4e1      	bmi.n	800b4ec <_fflush_r+0xc>
 800b528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b52a:	f7fc ff1f 	bl	800836c <__retarget_lock_release_recursive>
 800b52e:	e7dd      	b.n	800b4ec <_fflush_r+0xc>

0800b530 <fiprintf>:
 800b530:	b40e      	push	{r1, r2, r3}
 800b532:	b503      	push	{r0, r1, lr}
 800b534:	4601      	mov	r1, r0
 800b536:	ab03      	add	r3, sp, #12
 800b538:	4805      	ldr	r0, [pc, #20]	; (800b550 <fiprintf+0x20>)
 800b53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53e:	6800      	ldr	r0, [r0, #0]
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	f7ff fcdf 	bl	800af04 <_vfiprintf_r>
 800b546:	b002      	add	sp, #8
 800b548:	f85d eb04 	ldr.w	lr, [sp], #4
 800b54c:	b003      	add	sp, #12
 800b54e:	4770      	bx	lr
 800b550:	20000088 	.word	0x20000088

0800b554 <__swhatbuf_r>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55c:	2900      	cmp	r1, #0
 800b55e:	b096      	sub	sp, #88	; 0x58
 800b560:	4615      	mov	r5, r2
 800b562:	461e      	mov	r6, r3
 800b564:	da0d      	bge.n	800b582 <__swhatbuf_r+0x2e>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b56c:	f04f 0100 	mov.w	r1, #0
 800b570:	bf0c      	ite	eq
 800b572:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b576:	2340      	movne	r3, #64	; 0x40
 800b578:	2000      	movs	r0, #0
 800b57a:	6031      	str	r1, [r6, #0]
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	b016      	add	sp, #88	; 0x58
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	466a      	mov	r2, sp
 800b584:	f000 f8d6 	bl	800b734 <_fstat_r>
 800b588:	2800      	cmp	r0, #0
 800b58a:	dbec      	blt.n	800b566 <__swhatbuf_r+0x12>
 800b58c:	9901      	ldr	r1, [sp, #4]
 800b58e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b592:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b596:	4259      	negs	r1, r3
 800b598:	4159      	adcs	r1, r3
 800b59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59e:	e7eb      	b.n	800b578 <__swhatbuf_r+0x24>

0800b5a0 <__smakebuf_r>:
 800b5a0:	898b      	ldrh	r3, [r1, #12]
 800b5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5a4:	079d      	lsls	r5, r3, #30
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	d507      	bpl.n	800b5bc <__smakebuf_r+0x1c>
 800b5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	6123      	str	r3, [r4, #16]
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	6163      	str	r3, [r4, #20]
 800b5b8:	b002      	add	sp, #8
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	ab01      	add	r3, sp, #4
 800b5be:	466a      	mov	r2, sp
 800b5c0:	f7ff ffc8 	bl	800b554 <__swhatbuf_r>
 800b5c4:	9900      	ldr	r1, [sp, #0]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7fd fdfb 	bl	80091c4 <_malloc_r>
 800b5ce:	b948      	cbnz	r0, 800b5e4 <__smakebuf_r+0x44>
 800b5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d4:	059a      	lsls	r2, r3, #22
 800b5d6:	d4ef      	bmi.n	800b5b8 <__smakebuf_r+0x18>
 800b5d8:	f023 0303 	bic.w	r3, r3, #3
 800b5dc:	f043 0302 	orr.w	r3, r3, #2
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	e7e3      	b.n	800b5ac <__smakebuf_r+0xc>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	6020      	str	r0, [r4, #0]
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	9b00      	ldr	r3, [sp, #0]
 800b5f0:	6163      	str	r3, [r4, #20]
 800b5f2:	9b01      	ldr	r3, [sp, #4]
 800b5f4:	6120      	str	r0, [r4, #16]
 800b5f6:	b15b      	cbz	r3, 800b610 <__smakebuf_r+0x70>
 800b5f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f000 f8ab 	bl	800b758 <_isatty_r>
 800b602:	b128      	cbz	r0, 800b610 <__smakebuf_r+0x70>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f023 0303 	bic.w	r3, r3, #3
 800b60a:	f043 0301 	orr.w	r3, r3, #1
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	431d      	orrs	r5, r3
 800b614:	81a5      	strh	r5, [r4, #12]
 800b616:	e7cf      	b.n	800b5b8 <__smakebuf_r+0x18>

0800b618 <__sccl>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	780b      	ldrb	r3, [r1, #0]
 800b61c:	4604      	mov	r4, r0
 800b61e:	2b5e      	cmp	r3, #94	; 0x5e
 800b620:	bf0b      	itete	eq
 800b622:	784b      	ldrbeq	r3, [r1, #1]
 800b624:	1c4a      	addne	r2, r1, #1
 800b626:	1c8a      	addeq	r2, r1, #2
 800b628:	2100      	movne	r1, #0
 800b62a:	bf08      	it	eq
 800b62c:	2101      	moveq	r1, #1
 800b62e:	3801      	subs	r0, #1
 800b630:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b634:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b638:	42a8      	cmp	r0, r5
 800b63a:	d1fb      	bne.n	800b634 <__sccl+0x1c>
 800b63c:	b90b      	cbnz	r3, 800b642 <__sccl+0x2a>
 800b63e:	1e50      	subs	r0, r2, #1
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	f081 0101 	eor.w	r1, r1, #1
 800b646:	54e1      	strb	r1, [r4, r3]
 800b648:	4610      	mov	r0, r2
 800b64a:	4602      	mov	r2, r0
 800b64c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b650:	2d2d      	cmp	r5, #45	; 0x2d
 800b652:	d005      	beq.n	800b660 <__sccl+0x48>
 800b654:	2d5d      	cmp	r5, #93	; 0x5d
 800b656:	d016      	beq.n	800b686 <__sccl+0x6e>
 800b658:	2d00      	cmp	r5, #0
 800b65a:	d0f1      	beq.n	800b640 <__sccl+0x28>
 800b65c:	462b      	mov	r3, r5
 800b65e:	e7f2      	b.n	800b646 <__sccl+0x2e>
 800b660:	7846      	ldrb	r6, [r0, #1]
 800b662:	2e5d      	cmp	r6, #93	; 0x5d
 800b664:	d0fa      	beq.n	800b65c <__sccl+0x44>
 800b666:	42b3      	cmp	r3, r6
 800b668:	dcf8      	bgt.n	800b65c <__sccl+0x44>
 800b66a:	3002      	adds	r0, #2
 800b66c:	461a      	mov	r2, r3
 800b66e:	3201      	adds	r2, #1
 800b670:	4296      	cmp	r6, r2
 800b672:	54a1      	strb	r1, [r4, r2]
 800b674:	dcfb      	bgt.n	800b66e <__sccl+0x56>
 800b676:	1af2      	subs	r2, r6, r3
 800b678:	3a01      	subs	r2, #1
 800b67a:	1c5d      	adds	r5, r3, #1
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	bfa8      	it	ge
 800b680:	2200      	movge	r2, #0
 800b682:	18ab      	adds	r3, r5, r2
 800b684:	e7e1      	b.n	800b64a <__sccl+0x32>
 800b686:	4610      	mov	r0, r2
 800b688:	e7da      	b.n	800b640 <__sccl+0x28>

0800b68a <__submore>:
 800b68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	460c      	mov	r4, r1
 800b690:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b696:	4299      	cmp	r1, r3
 800b698:	d11d      	bne.n	800b6d6 <__submore+0x4c>
 800b69a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b69e:	f7fd fd91 	bl	80091c4 <_malloc_r>
 800b6a2:	b918      	cbnz	r0, 800b6ac <__submore+0x22>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6b2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b6b6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6b8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b6bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b6c0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b6c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b6c8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b6cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b6d0:	6020      	str	r0, [r4, #0]
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e7e8      	b.n	800b6a8 <__submore+0x1e>
 800b6d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b6d8:	0077      	lsls	r7, r6, #1
 800b6da:	463a      	mov	r2, r7
 800b6dc:	f000 fbe9 	bl	800beb2 <_realloc_r>
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d0de      	beq.n	800b6a4 <__submore+0x1a>
 800b6e6:	eb00 0806 	add.w	r8, r0, r6
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	f7fc fe45 	bl	800837e <memcpy>
 800b6f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b6f8:	f8c4 8000 	str.w	r8, [r4]
 800b6fc:	e7e9      	b.n	800b6d2 <__submore+0x48>

0800b6fe <memmove>:
 800b6fe:	4288      	cmp	r0, r1
 800b700:	b510      	push	{r4, lr}
 800b702:	eb01 0402 	add.w	r4, r1, r2
 800b706:	d902      	bls.n	800b70e <memmove+0x10>
 800b708:	4284      	cmp	r4, r0
 800b70a:	4623      	mov	r3, r4
 800b70c:	d807      	bhi.n	800b71e <memmove+0x20>
 800b70e:	1e43      	subs	r3, r0, #1
 800b710:	42a1      	cmp	r1, r4
 800b712:	d008      	beq.n	800b726 <memmove+0x28>
 800b714:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b718:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b71c:	e7f8      	b.n	800b710 <memmove+0x12>
 800b71e:	4402      	add	r2, r0
 800b720:	4601      	mov	r1, r0
 800b722:	428a      	cmp	r2, r1
 800b724:	d100      	bne.n	800b728 <memmove+0x2a>
 800b726:	bd10      	pop	{r4, pc}
 800b728:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b72c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b730:	e7f7      	b.n	800b722 <memmove+0x24>
	...

0800b734 <_fstat_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d07      	ldr	r5, [pc, #28]	; (800b754 <_fstat_r+0x20>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	4611      	mov	r1, r2
 800b740:	602b      	str	r3, [r5, #0]
 800b742:	f7f7 fb9c 	bl	8002e7e <_fstat>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d102      	bne.n	800b750 <_fstat_r+0x1c>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b103      	cbz	r3, 800b750 <_fstat_r+0x1c>
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	bd38      	pop	{r3, r4, r5, pc}
 800b752:	bf00      	nop
 800b754:	20000d74 	.word	0x20000d74

0800b758 <_isatty_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d06      	ldr	r5, [pc, #24]	; (800b774 <_isatty_r+0x1c>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	602b      	str	r3, [r5, #0]
 800b764:	f7f7 fb9b 	bl	8002e9e <_isatty>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d102      	bne.n	800b772 <_isatty_r+0x1a>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	b103      	cbz	r3, 800b772 <_isatty_r+0x1a>
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	20000d74 	.word	0x20000d74

0800b778 <_sbrk_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d06      	ldr	r5, [pc, #24]	; (800b794 <_sbrk_r+0x1c>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f7 fba4 	bl	8002ed0 <_sbrk>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_sbrk_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_sbrk_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	20000d74 	.word	0x20000d74

0800b798 <nan>:
 800b798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b7a0 <nan+0x8>
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	7ff80000 	.word	0x7ff80000

0800b7a8 <abort>:
 800b7a8:	b508      	push	{r3, lr}
 800b7aa:	2006      	movs	r0, #6
 800b7ac:	f000 fc5a 	bl	800c064 <raise>
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	f7f7 fb31 	bl	8002e18 <_exit>

0800b7b6 <_calloc_r>:
 800b7b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7b8:	fba1 2402 	umull	r2, r4, r1, r2
 800b7bc:	b94c      	cbnz	r4, 800b7d2 <_calloc_r+0x1c>
 800b7be:	4611      	mov	r1, r2
 800b7c0:	9201      	str	r2, [sp, #4]
 800b7c2:	f7fd fcff 	bl	80091c4 <_malloc_r>
 800b7c6:	9a01      	ldr	r2, [sp, #4]
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	b930      	cbnz	r0, 800b7da <_calloc_r+0x24>
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	b003      	add	sp, #12
 800b7d0:	bd30      	pop	{r4, r5, pc}
 800b7d2:	220c      	movs	r2, #12
 800b7d4:	6002      	str	r2, [r0, #0]
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	e7f8      	b.n	800b7cc <_calloc_r+0x16>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	f7fc fca4 	bl	8008128 <memset>
 800b7e0:	e7f4      	b.n	800b7cc <_calloc_r+0x16>

0800b7e2 <rshift>:
 800b7e2:	6903      	ldr	r3, [r0, #16]
 800b7e4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7ec:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7f0:	f100 0414 	add.w	r4, r0, #20
 800b7f4:	dd45      	ble.n	800b882 <rshift+0xa0>
 800b7f6:	f011 011f 	ands.w	r1, r1, #31
 800b7fa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7fe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b802:	d10c      	bne.n	800b81e <rshift+0x3c>
 800b804:	f100 0710 	add.w	r7, r0, #16
 800b808:	4629      	mov	r1, r5
 800b80a:	42b1      	cmp	r1, r6
 800b80c:	d334      	bcc.n	800b878 <rshift+0x96>
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	1eea      	subs	r2, r5, #3
 800b814:	4296      	cmp	r6, r2
 800b816:	bf38      	it	cc
 800b818:	2300      	movcc	r3, #0
 800b81a:	4423      	add	r3, r4
 800b81c:	e015      	b.n	800b84a <rshift+0x68>
 800b81e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b822:	f1c1 0820 	rsb	r8, r1, #32
 800b826:	40cf      	lsrs	r7, r1
 800b828:	f105 0e04 	add.w	lr, r5, #4
 800b82c:	46a1      	mov	r9, r4
 800b82e:	4576      	cmp	r6, lr
 800b830:	46f4      	mov	ip, lr
 800b832:	d815      	bhi.n	800b860 <rshift+0x7e>
 800b834:	1a9a      	subs	r2, r3, r2
 800b836:	0092      	lsls	r2, r2, #2
 800b838:	3a04      	subs	r2, #4
 800b83a:	3501      	adds	r5, #1
 800b83c:	42ae      	cmp	r6, r5
 800b83e:	bf38      	it	cc
 800b840:	2200      	movcc	r2, #0
 800b842:	18a3      	adds	r3, r4, r2
 800b844:	50a7      	str	r7, [r4, r2]
 800b846:	b107      	cbz	r7, 800b84a <rshift+0x68>
 800b848:	3304      	adds	r3, #4
 800b84a:	1b1a      	subs	r2, r3, r4
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b852:	bf08      	it	eq
 800b854:	2300      	moveq	r3, #0
 800b856:	6102      	str	r2, [r0, #16]
 800b858:	bf08      	it	eq
 800b85a:	6143      	streq	r3, [r0, #20]
 800b85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b860:	f8dc c000 	ldr.w	ip, [ip]
 800b864:	fa0c fc08 	lsl.w	ip, ip, r8
 800b868:	ea4c 0707 	orr.w	r7, ip, r7
 800b86c:	f849 7b04 	str.w	r7, [r9], #4
 800b870:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b874:	40cf      	lsrs	r7, r1
 800b876:	e7da      	b.n	800b82e <rshift+0x4c>
 800b878:	f851 cb04 	ldr.w	ip, [r1], #4
 800b87c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b880:	e7c3      	b.n	800b80a <rshift+0x28>
 800b882:	4623      	mov	r3, r4
 800b884:	e7e1      	b.n	800b84a <rshift+0x68>

0800b886 <__hexdig_fun>:
 800b886:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d802      	bhi.n	800b894 <__hexdig_fun+0xe>
 800b88e:	3820      	subs	r0, #32
 800b890:	b2c0      	uxtb	r0, r0
 800b892:	4770      	bx	lr
 800b894:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b898:	2b05      	cmp	r3, #5
 800b89a:	d801      	bhi.n	800b8a0 <__hexdig_fun+0x1a>
 800b89c:	3847      	subs	r0, #71	; 0x47
 800b89e:	e7f7      	b.n	800b890 <__hexdig_fun+0xa>
 800b8a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8a4:	2b05      	cmp	r3, #5
 800b8a6:	d801      	bhi.n	800b8ac <__hexdig_fun+0x26>
 800b8a8:	3827      	subs	r0, #39	; 0x27
 800b8aa:	e7f1      	b.n	800b890 <__hexdig_fun+0xa>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	4770      	bx	lr

0800b8b0 <__gethex>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	4617      	mov	r7, r2
 800b8b6:	680a      	ldr	r2, [r1, #0]
 800b8b8:	b085      	sub	sp, #20
 800b8ba:	f102 0b02 	add.w	fp, r2, #2
 800b8be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8c6:	4681      	mov	r9, r0
 800b8c8:	468a      	mov	sl, r1
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	32fe      	adds	r2, #254	; 0xfe
 800b8ce:	eb02 030b 	add.w	r3, r2, fp
 800b8d2:	46d8      	mov	r8, fp
 800b8d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	2830      	cmp	r0, #48	; 0x30
 800b8dc:	d0f7      	beq.n	800b8ce <__gethex+0x1e>
 800b8de:	f7ff ffd2 	bl	800b886 <__hexdig_fun>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d138      	bne.n	800b95a <__gethex+0xaa>
 800b8e8:	49a7      	ldr	r1, [pc, #668]	; (800bb88 <__gethex+0x2d8>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	f7fc fc30 	bl	8008152 <strncmp>
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d169      	bne.n	800b9cc <__gethex+0x11c>
 800b8f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b8fc:	465d      	mov	r5, fp
 800b8fe:	f7ff ffc2 	bl	800b886 <__hexdig_fun>
 800b902:	2800      	cmp	r0, #0
 800b904:	d064      	beq.n	800b9d0 <__gethex+0x120>
 800b906:	465a      	mov	r2, fp
 800b908:	7810      	ldrb	r0, [r2, #0]
 800b90a:	2830      	cmp	r0, #48	; 0x30
 800b90c:	4690      	mov	r8, r2
 800b90e:	f102 0201 	add.w	r2, r2, #1
 800b912:	d0f9      	beq.n	800b908 <__gethex+0x58>
 800b914:	f7ff ffb7 	bl	800b886 <__hexdig_fun>
 800b918:	2301      	movs	r3, #1
 800b91a:	fab0 f480 	clz	r4, r0
 800b91e:	0964      	lsrs	r4, r4, #5
 800b920:	465e      	mov	r6, fp
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	4642      	mov	r2, r8
 800b926:	4615      	mov	r5, r2
 800b928:	3201      	adds	r2, #1
 800b92a:	7828      	ldrb	r0, [r5, #0]
 800b92c:	f7ff ffab 	bl	800b886 <__hexdig_fun>
 800b930:	2800      	cmp	r0, #0
 800b932:	d1f8      	bne.n	800b926 <__gethex+0x76>
 800b934:	4994      	ldr	r1, [pc, #592]	; (800bb88 <__gethex+0x2d8>)
 800b936:	2201      	movs	r2, #1
 800b938:	4628      	mov	r0, r5
 800b93a:	f7fc fc0a 	bl	8008152 <strncmp>
 800b93e:	b978      	cbnz	r0, 800b960 <__gethex+0xb0>
 800b940:	b946      	cbnz	r6, 800b954 <__gethex+0xa4>
 800b942:	1c6e      	adds	r6, r5, #1
 800b944:	4632      	mov	r2, r6
 800b946:	4615      	mov	r5, r2
 800b948:	3201      	adds	r2, #1
 800b94a:	7828      	ldrb	r0, [r5, #0]
 800b94c:	f7ff ff9b 	bl	800b886 <__hexdig_fun>
 800b950:	2800      	cmp	r0, #0
 800b952:	d1f8      	bne.n	800b946 <__gethex+0x96>
 800b954:	1b73      	subs	r3, r6, r5
 800b956:	009e      	lsls	r6, r3, #2
 800b958:	e004      	b.n	800b964 <__gethex+0xb4>
 800b95a:	2400      	movs	r4, #0
 800b95c:	4626      	mov	r6, r4
 800b95e:	e7e1      	b.n	800b924 <__gethex+0x74>
 800b960:	2e00      	cmp	r6, #0
 800b962:	d1f7      	bne.n	800b954 <__gethex+0xa4>
 800b964:	782b      	ldrb	r3, [r5, #0]
 800b966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b96a:	2b50      	cmp	r3, #80	; 0x50
 800b96c:	d13d      	bne.n	800b9ea <__gethex+0x13a>
 800b96e:	786b      	ldrb	r3, [r5, #1]
 800b970:	2b2b      	cmp	r3, #43	; 0x2b
 800b972:	d02f      	beq.n	800b9d4 <__gethex+0x124>
 800b974:	2b2d      	cmp	r3, #45	; 0x2d
 800b976:	d031      	beq.n	800b9dc <__gethex+0x12c>
 800b978:	1c69      	adds	r1, r5, #1
 800b97a:	f04f 0b00 	mov.w	fp, #0
 800b97e:	7808      	ldrb	r0, [r1, #0]
 800b980:	f7ff ff81 	bl	800b886 <__hexdig_fun>
 800b984:	1e42      	subs	r2, r0, #1
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	2a18      	cmp	r2, #24
 800b98a:	d82e      	bhi.n	800b9ea <__gethex+0x13a>
 800b98c:	f1a0 0210 	sub.w	r2, r0, #16
 800b990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b994:	f7ff ff77 	bl	800b886 <__hexdig_fun>
 800b998:	f100 3cff 	add.w	ip, r0, #4294967295
 800b99c:	fa5f fc8c 	uxtb.w	ip, ip
 800b9a0:	f1bc 0f18 	cmp.w	ip, #24
 800b9a4:	d91d      	bls.n	800b9e2 <__gethex+0x132>
 800b9a6:	f1bb 0f00 	cmp.w	fp, #0
 800b9aa:	d000      	beq.n	800b9ae <__gethex+0xfe>
 800b9ac:	4252      	negs	r2, r2
 800b9ae:	4416      	add	r6, r2
 800b9b0:	f8ca 1000 	str.w	r1, [sl]
 800b9b4:	b1dc      	cbz	r4, 800b9ee <__gethex+0x13e>
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bf14      	ite	ne
 800b9bc:	f04f 0800 	movne.w	r8, #0
 800b9c0:	f04f 0806 	moveq.w	r8, #6
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	b005      	add	sp, #20
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	4645      	mov	r5, r8
 800b9ce:	4626      	mov	r6, r4
 800b9d0:	2401      	movs	r4, #1
 800b9d2:	e7c7      	b.n	800b964 <__gethex+0xb4>
 800b9d4:	f04f 0b00 	mov.w	fp, #0
 800b9d8:	1ca9      	adds	r1, r5, #2
 800b9da:	e7d0      	b.n	800b97e <__gethex+0xce>
 800b9dc:	f04f 0b01 	mov.w	fp, #1
 800b9e0:	e7fa      	b.n	800b9d8 <__gethex+0x128>
 800b9e2:	230a      	movs	r3, #10
 800b9e4:	fb03 0002 	mla	r0, r3, r2, r0
 800b9e8:	e7d0      	b.n	800b98c <__gethex+0xdc>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	e7e0      	b.n	800b9b0 <__gethex+0x100>
 800b9ee:	eba5 0308 	sub.w	r3, r5, r8
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	2b07      	cmp	r3, #7
 800b9f8:	dc0a      	bgt.n	800ba10 <__gethex+0x160>
 800b9fa:	4648      	mov	r0, r9
 800b9fc:	f7fd fc6e 	bl	80092dc <_Balloc>
 800ba00:	4604      	mov	r4, r0
 800ba02:	b940      	cbnz	r0, 800ba16 <__gethex+0x166>
 800ba04:	4b61      	ldr	r3, [pc, #388]	; (800bb8c <__gethex+0x2dc>)
 800ba06:	4602      	mov	r2, r0
 800ba08:	21e4      	movs	r1, #228	; 0xe4
 800ba0a:	4861      	ldr	r0, [pc, #388]	; (800bb90 <__gethex+0x2e0>)
 800ba0c:	f7fc fccc 	bl	80083a8 <__assert_func>
 800ba10:	3101      	adds	r1, #1
 800ba12:	105b      	asrs	r3, r3, #1
 800ba14:	e7ef      	b.n	800b9f6 <__gethex+0x146>
 800ba16:	f100 0a14 	add.w	sl, r0, #20
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	495a      	ldr	r1, [pc, #360]	; (800bb88 <__gethex+0x2d8>)
 800ba1e:	f8cd a004 	str.w	sl, [sp, #4]
 800ba22:	469b      	mov	fp, r3
 800ba24:	45a8      	cmp	r8, r5
 800ba26:	d342      	bcc.n	800baae <__gethex+0x1fe>
 800ba28:	9801      	ldr	r0, [sp, #4]
 800ba2a:	f840 bb04 	str.w	fp, [r0], #4
 800ba2e:	eba0 000a 	sub.w	r0, r0, sl
 800ba32:	1080      	asrs	r0, r0, #2
 800ba34:	6120      	str	r0, [r4, #16]
 800ba36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ba3a:	4658      	mov	r0, fp
 800ba3c:	f7fd fd40 	bl	80094c0 <__hi0bits>
 800ba40:	683d      	ldr	r5, [r7, #0]
 800ba42:	eba8 0000 	sub.w	r0, r8, r0
 800ba46:	42a8      	cmp	r0, r5
 800ba48:	dd59      	ble.n	800bafe <__gethex+0x24e>
 800ba4a:	eba0 0805 	sub.w	r8, r0, r5
 800ba4e:	4641      	mov	r1, r8
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7fe f8cf 	bl	8009bf4 <__any_on>
 800ba56:	4683      	mov	fp, r0
 800ba58:	b1b8      	cbz	r0, 800ba8a <__gethex+0x1da>
 800ba5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ba5e:	1159      	asrs	r1, r3, #5
 800ba60:	f003 021f 	and.w	r2, r3, #31
 800ba64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba68:	f04f 0b01 	mov.w	fp, #1
 800ba6c:	fa0b f202 	lsl.w	r2, fp, r2
 800ba70:	420a      	tst	r2, r1
 800ba72:	d00a      	beq.n	800ba8a <__gethex+0x1da>
 800ba74:	455b      	cmp	r3, fp
 800ba76:	dd06      	ble.n	800ba86 <__gethex+0x1d6>
 800ba78:	f1a8 0102 	sub.w	r1, r8, #2
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7fe f8b9 	bl	8009bf4 <__any_on>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d138      	bne.n	800baf8 <__gethex+0x248>
 800ba86:	f04f 0b02 	mov.w	fp, #2
 800ba8a:	4641      	mov	r1, r8
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7ff fea8 	bl	800b7e2 <rshift>
 800ba92:	4446      	add	r6, r8
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	42b3      	cmp	r3, r6
 800ba98:	da41      	bge.n	800bb1e <__gethex+0x26e>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4648      	mov	r0, r9
 800ba9e:	f7fd fc5d 	bl	800935c <_Bfree>
 800baa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa4:	2300      	movs	r3, #0
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800baac:	e78a      	b.n	800b9c4 <__gethex+0x114>
 800baae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bab2:	2a2e      	cmp	r2, #46	; 0x2e
 800bab4:	d014      	beq.n	800bae0 <__gethex+0x230>
 800bab6:	2b20      	cmp	r3, #32
 800bab8:	d106      	bne.n	800bac8 <__gethex+0x218>
 800baba:	9b01      	ldr	r3, [sp, #4]
 800babc:	f843 bb04 	str.w	fp, [r3], #4
 800bac0:	f04f 0b00 	mov.w	fp, #0
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	465b      	mov	r3, fp
 800bac8:	7828      	ldrb	r0, [r5, #0]
 800baca:	9303      	str	r3, [sp, #12]
 800bacc:	f7ff fedb 	bl	800b886 <__hexdig_fun>
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	f000 000f 	and.w	r0, r0, #15
 800bad6:	4098      	lsls	r0, r3
 800bad8:	ea4b 0b00 	orr.w	fp, fp, r0
 800badc:	3304      	adds	r3, #4
 800bade:	e7a1      	b.n	800ba24 <__gethex+0x174>
 800bae0:	45a8      	cmp	r8, r5
 800bae2:	d8e8      	bhi.n	800bab6 <__gethex+0x206>
 800bae4:	2201      	movs	r2, #1
 800bae6:	4628      	mov	r0, r5
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	f7fc fb32 	bl	8008152 <strncmp>
 800baee:	4926      	ldr	r1, [pc, #152]	; (800bb88 <__gethex+0x2d8>)
 800baf0:	9b03      	ldr	r3, [sp, #12]
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d1df      	bne.n	800bab6 <__gethex+0x206>
 800baf6:	e795      	b.n	800ba24 <__gethex+0x174>
 800baf8:	f04f 0b03 	mov.w	fp, #3
 800bafc:	e7c5      	b.n	800ba8a <__gethex+0x1da>
 800bafe:	da0b      	bge.n	800bb18 <__gethex+0x268>
 800bb00:	eba5 0800 	sub.w	r8, r5, r0
 800bb04:	4621      	mov	r1, r4
 800bb06:	4642      	mov	r2, r8
 800bb08:	4648      	mov	r0, r9
 800bb0a:	f7fd fe41 	bl	8009790 <__lshift>
 800bb0e:	eba6 0608 	sub.w	r6, r6, r8
 800bb12:	4604      	mov	r4, r0
 800bb14:	f100 0a14 	add.w	sl, r0, #20
 800bb18:	f04f 0b00 	mov.w	fp, #0
 800bb1c:	e7ba      	b.n	800ba94 <__gethex+0x1e4>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	42b3      	cmp	r3, r6
 800bb22:	dd73      	ble.n	800bc0c <__gethex+0x35c>
 800bb24:	1b9e      	subs	r6, r3, r6
 800bb26:	42b5      	cmp	r5, r6
 800bb28:	dc34      	bgt.n	800bb94 <__gethex+0x2e4>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d023      	beq.n	800bb78 <__gethex+0x2c8>
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d025      	beq.n	800bb80 <__gethex+0x2d0>
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d115      	bne.n	800bb64 <__gethex+0x2b4>
 800bb38:	42b5      	cmp	r5, r6
 800bb3a:	d113      	bne.n	800bb64 <__gethex+0x2b4>
 800bb3c:	2d01      	cmp	r5, #1
 800bb3e:	d10b      	bne.n	800bb58 <__gethex+0x2a8>
 800bb40:	9a02      	ldr	r2, [sp, #8]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	2301      	movs	r3, #1
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	f8ca 3000 	str.w	r3, [sl]
 800bb4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb50:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bb54:	601c      	str	r4, [r3, #0]
 800bb56:	e735      	b.n	800b9c4 <__gethex+0x114>
 800bb58:	1e69      	subs	r1, r5, #1
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f7fe f84a 	bl	8009bf4 <__any_on>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d1ed      	bne.n	800bb40 <__gethex+0x290>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4648      	mov	r0, r9
 800bb68:	f7fd fbf8 	bl	800935c <_Bfree>
 800bb6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bb76:	e725      	b.n	800b9c4 <__gethex+0x114>
 800bb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f2      	bne.n	800bb64 <__gethex+0x2b4>
 800bb7e:	e7df      	b.n	800bb40 <__gethex+0x290>
 800bb80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1dc      	bne.n	800bb40 <__gethex+0x290>
 800bb86:	e7ed      	b.n	800bb64 <__gethex+0x2b4>
 800bb88:	0800cabc 	.word	0x0800cabc
 800bb8c:	0800c952 	.word	0x0800c952
 800bb90:	0800cb44 	.word	0x0800cb44
 800bb94:	f106 38ff 	add.w	r8, r6, #4294967295
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	d133      	bne.n	800bc06 <__gethex+0x356>
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d004      	beq.n	800bbae <__gethex+0x2fe>
 800bba4:	4641      	mov	r1, r8
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7fe f824 	bl	8009bf4 <__any_on>
 800bbac:	4683      	mov	fp, r0
 800bbae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bbb8:	f008 081f 	and.w	r8, r8, #31
 800bbbc:	fa03 f308 	lsl.w	r3, r3, r8
 800bbc0:	4213      	tst	r3, r2
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	bf18      	it	ne
 800bbc8:	f04b 0b02 	orrne.w	fp, fp, #2
 800bbcc:	1bad      	subs	r5, r5, r6
 800bbce:	f7ff fe08 	bl	800b7e2 <rshift>
 800bbd2:	687e      	ldr	r6, [r7, #4]
 800bbd4:	f04f 0802 	mov.w	r8, #2
 800bbd8:	f1bb 0f00 	cmp.w	fp, #0
 800bbdc:	d04a      	beq.n	800bc74 <__gethex+0x3c4>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d016      	beq.n	800bc12 <__gethex+0x362>
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d018      	beq.n	800bc1a <__gethex+0x36a>
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d109      	bne.n	800bc00 <__gethex+0x350>
 800bbec:	f01b 0f02 	tst.w	fp, #2
 800bbf0:	d006      	beq.n	800bc00 <__gethex+0x350>
 800bbf2:	f8da 3000 	ldr.w	r3, [sl]
 800bbf6:	ea4b 0b03 	orr.w	fp, fp, r3
 800bbfa:	f01b 0f01 	tst.w	fp, #1
 800bbfe:	d10f      	bne.n	800bc20 <__gethex+0x370>
 800bc00:	f048 0810 	orr.w	r8, r8, #16
 800bc04:	e036      	b.n	800bc74 <__gethex+0x3c4>
 800bc06:	f04f 0b01 	mov.w	fp, #1
 800bc0a:	e7d0      	b.n	800bbae <__gethex+0x2fe>
 800bc0c:	f04f 0801 	mov.w	r8, #1
 800bc10:	e7e2      	b.n	800bbd8 <__gethex+0x328>
 800bc12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc14:	f1c3 0301 	rsb	r3, r3, #1
 800bc18:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0ef      	beq.n	800bc00 <__gethex+0x350>
 800bc20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc24:	f104 0214 	add.w	r2, r4, #20
 800bc28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bc32:	2300      	movs	r3, #0
 800bc34:	4694      	mov	ip, r2
 800bc36:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bc3e:	d01e      	beq.n	800bc7e <__gethex+0x3ce>
 800bc40:	3101      	adds	r1, #1
 800bc42:	f8cc 1000 	str.w	r1, [ip]
 800bc46:	f1b8 0f02 	cmp.w	r8, #2
 800bc4a:	f104 0214 	add.w	r2, r4, #20
 800bc4e:	d13d      	bne.n	800bccc <__gethex+0x41c>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	42ab      	cmp	r3, r5
 800bc56:	d10b      	bne.n	800bc70 <__gethex+0x3c0>
 800bc58:	1169      	asrs	r1, r5, #5
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f005 051f 	and.w	r5, r5, #31
 800bc60:	fa03 f505 	lsl.w	r5, r3, r5
 800bc64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc68:	421d      	tst	r5, r3
 800bc6a:	bf18      	it	ne
 800bc6c:	f04f 0801 	movne.w	r8, #1
 800bc70:	f048 0820 	orr.w	r8, r8, #32
 800bc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc76:	601c      	str	r4, [r3, #0]
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	601e      	str	r6, [r3, #0]
 800bc7c:	e6a2      	b.n	800b9c4 <__gethex+0x114>
 800bc7e:	4290      	cmp	r0, r2
 800bc80:	f842 3c04 	str.w	r3, [r2, #-4]
 800bc84:	d8d6      	bhi.n	800bc34 <__gethex+0x384>
 800bc86:	68a2      	ldr	r2, [r4, #8]
 800bc88:	4593      	cmp	fp, r2
 800bc8a:	db17      	blt.n	800bcbc <__gethex+0x40c>
 800bc8c:	6861      	ldr	r1, [r4, #4]
 800bc8e:	4648      	mov	r0, r9
 800bc90:	3101      	adds	r1, #1
 800bc92:	f7fd fb23 	bl	80092dc <_Balloc>
 800bc96:	4682      	mov	sl, r0
 800bc98:	b918      	cbnz	r0, 800bca2 <__gethex+0x3f2>
 800bc9a:	4b1b      	ldr	r3, [pc, #108]	; (800bd08 <__gethex+0x458>)
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	2184      	movs	r1, #132	; 0x84
 800bca0:	e6b3      	b.n	800ba0a <__gethex+0x15a>
 800bca2:	6922      	ldr	r2, [r4, #16]
 800bca4:	3202      	adds	r2, #2
 800bca6:	f104 010c 	add.w	r1, r4, #12
 800bcaa:	0092      	lsls	r2, r2, #2
 800bcac:	300c      	adds	r0, #12
 800bcae:	f7fc fb66 	bl	800837e <memcpy>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4648      	mov	r0, r9
 800bcb6:	f7fd fb51 	bl	800935c <_Bfree>
 800bcba:	4654      	mov	r4, sl
 800bcbc:	6922      	ldr	r2, [r4, #16]
 800bcbe:	1c51      	adds	r1, r2, #1
 800bcc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bcc4:	6121      	str	r1, [r4, #16]
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	6151      	str	r1, [r2, #20]
 800bcca:	e7bc      	b.n	800bc46 <__gethex+0x396>
 800bccc:	6921      	ldr	r1, [r4, #16]
 800bcce:	4559      	cmp	r1, fp
 800bcd0:	dd0b      	ble.n	800bcea <__gethex+0x43a>
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f7ff fd84 	bl	800b7e2 <rshift>
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	3601      	adds	r6, #1
 800bcde:	42b3      	cmp	r3, r6
 800bce0:	f6ff aedb 	blt.w	800ba9a <__gethex+0x1ea>
 800bce4:	f04f 0801 	mov.w	r8, #1
 800bce8:	e7c2      	b.n	800bc70 <__gethex+0x3c0>
 800bcea:	f015 051f 	ands.w	r5, r5, #31
 800bcee:	d0f9      	beq.n	800bce4 <__gethex+0x434>
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	f1c5 0520 	rsb	r5, r5, #32
 800bcf8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bcfc:	f7fd fbe0 	bl	80094c0 <__hi0bits>
 800bd00:	42a8      	cmp	r0, r5
 800bd02:	dbe6      	blt.n	800bcd2 <__gethex+0x422>
 800bd04:	e7ee      	b.n	800bce4 <__gethex+0x434>
 800bd06:	bf00      	nop
 800bd08:	0800c952 	.word	0x0800c952

0800bd0c <L_shift>:
 800bd0c:	f1c2 0208 	rsb	r2, r2, #8
 800bd10:	0092      	lsls	r2, r2, #2
 800bd12:	b570      	push	{r4, r5, r6, lr}
 800bd14:	f1c2 0620 	rsb	r6, r2, #32
 800bd18:	6843      	ldr	r3, [r0, #4]
 800bd1a:	6804      	ldr	r4, [r0, #0]
 800bd1c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd20:	432c      	orrs	r4, r5
 800bd22:	40d3      	lsrs	r3, r2
 800bd24:	6004      	str	r4, [r0, #0]
 800bd26:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd2a:	4288      	cmp	r0, r1
 800bd2c:	d3f4      	bcc.n	800bd18 <L_shift+0xc>
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}

0800bd30 <__match>:
 800bd30:	b530      	push	{r4, r5, lr}
 800bd32:	6803      	ldr	r3, [r0, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd3a:	b914      	cbnz	r4, 800bd42 <__match+0x12>
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	2001      	movs	r0, #1
 800bd40:	bd30      	pop	{r4, r5, pc}
 800bd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd4a:	2d19      	cmp	r5, #25
 800bd4c:	bf98      	it	ls
 800bd4e:	3220      	addls	r2, #32
 800bd50:	42a2      	cmp	r2, r4
 800bd52:	d0f0      	beq.n	800bd36 <__match+0x6>
 800bd54:	2000      	movs	r0, #0
 800bd56:	e7f3      	b.n	800bd40 <__match+0x10>

0800bd58 <__hexnan>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	680b      	ldr	r3, [r1, #0]
 800bd5e:	6801      	ldr	r1, [r0, #0]
 800bd60:	115e      	asrs	r6, r3, #5
 800bd62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd66:	f013 031f 	ands.w	r3, r3, #31
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	bf18      	it	ne
 800bd6e:	3604      	addne	r6, #4
 800bd70:	2500      	movs	r5, #0
 800bd72:	1f37      	subs	r7, r6, #4
 800bd74:	4682      	mov	sl, r0
 800bd76:	4690      	mov	r8, r2
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd7e:	46b9      	mov	r9, r7
 800bd80:	463c      	mov	r4, r7
 800bd82:	9502      	str	r5, [sp, #8]
 800bd84:	46ab      	mov	fp, r5
 800bd86:	784a      	ldrb	r2, [r1, #1]
 800bd88:	1c4b      	adds	r3, r1, #1
 800bd8a:	9303      	str	r3, [sp, #12]
 800bd8c:	b342      	cbz	r2, 800bde0 <__hexnan+0x88>
 800bd8e:	4610      	mov	r0, r2
 800bd90:	9105      	str	r1, [sp, #20]
 800bd92:	9204      	str	r2, [sp, #16]
 800bd94:	f7ff fd77 	bl	800b886 <__hexdig_fun>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d14f      	bne.n	800be3c <__hexnan+0xe4>
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	9905      	ldr	r1, [sp, #20]
 800bda0:	2a20      	cmp	r2, #32
 800bda2:	d818      	bhi.n	800bdd6 <__hexnan+0x7e>
 800bda4:	9b02      	ldr	r3, [sp, #8]
 800bda6:	459b      	cmp	fp, r3
 800bda8:	dd13      	ble.n	800bdd2 <__hexnan+0x7a>
 800bdaa:	454c      	cmp	r4, r9
 800bdac:	d206      	bcs.n	800bdbc <__hexnan+0x64>
 800bdae:	2d07      	cmp	r5, #7
 800bdb0:	dc04      	bgt.n	800bdbc <__hexnan+0x64>
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f7ff ffa8 	bl	800bd0c <L_shift>
 800bdbc:	4544      	cmp	r4, r8
 800bdbe:	d950      	bls.n	800be62 <__hexnan+0x10a>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f1a4 0904 	sub.w	r9, r4, #4
 800bdc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdca:	f8cd b008 	str.w	fp, [sp, #8]
 800bdce:	464c      	mov	r4, r9
 800bdd0:	461d      	mov	r5, r3
 800bdd2:	9903      	ldr	r1, [sp, #12]
 800bdd4:	e7d7      	b.n	800bd86 <__hexnan+0x2e>
 800bdd6:	2a29      	cmp	r2, #41	; 0x29
 800bdd8:	d155      	bne.n	800be86 <__hexnan+0x12e>
 800bdda:	3102      	adds	r1, #2
 800bddc:	f8ca 1000 	str.w	r1, [sl]
 800bde0:	f1bb 0f00 	cmp.w	fp, #0
 800bde4:	d04f      	beq.n	800be86 <__hexnan+0x12e>
 800bde6:	454c      	cmp	r4, r9
 800bde8:	d206      	bcs.n	800bdf8 <__hexnan+0xa0>
 800bdea:	2d07      	cmp	r5, #7
 800bdec:	dc04      	bgt.n	800bdf8 <__hexnan+0xa0>
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f7ff ff8a 	bl	800bd0c <L_shift>
 800bdf8:	4544      	cmp	r4, r8
 800bdfa:	d934      	bls.n	800be66 <__hexnan+0x10e>
 800bdfc:	f1a8 0204 	sub.w	r2, r8, #4
 800be00:	4623      	mov	r3, r4
 800be02:	f853 1b04 	ldr.w	r1, [r3], #4
 800be06:	f842 1f04 	str.w	r1, [r2, #4]!
 800be0a:	429f      	cmp	r7, r3
 800be0c:	d2f9      	bcs.n	800be02 <__hexnan+0xaa>
 800be0e:	1b3b      	subs	r3, r7, r4
 800be10:	f023 0303 	bic.w	r3, r3, #3
 800be14:	3304      	adds	r3, #4
 800be16:	3e03      	subs	r6, #3
 800be18:	3401      	adds	r4, #1
 800be1a:	42a6      	cmp	r6, r4
 800be1c:	bf38      	it	cc
 800be1e:	2304      	movcc	r3, #4
 800be20:	4443      	add	r3, r8
 800be22:	2200      	movs	r2, #0
 800be24:	f843 2b04 	str.w	r2, [r3], #4
 800be28:	429f      	cmp	r7, r3
 800be2a:	d2fb      	bcs.n	800be24 <__hexnan+0xcc>
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	b91b      	cbnz	r3, 800be38 <__hexnan+0xe0>
 800be30:	4547      	cmp	r7, r8
 800be32:	d126      	bne.n	800be82 <__hexnan+0x12a>
 800be34:	2301      	movs	r3, #1
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	2005      	movs	r0, #5
 800be3a:	e025      	b.n	800be88 <__hexnan+0x130>
 800be3c:	3501      	adds	r5, #1
 800be3e:	2d08      	cmp	r5, #8
 800be40:	f10b 0b01 	add.w	fp, fp, #1
 800be44:	dd06      	ble.n	800be54 <__hexnan+0xfc>
 800be46:	4544      	cmp	r4, r8
 800be48:	d9c3      	bls.n	800bdd2 <__hexnan+0x7a>
 800be4a:	2300      	movs	r3, #0
 800be4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800be50:	2501      	movs	r5, #1
 800be52:	3c04      	subs	r4, #4
 800be54:	6822      	ldr	r2, [r4, #0]
 800be56:	f000 000f 	and.w	r0, r0, #15
 800be5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be5e:	6020      	str	r0, [r4, #0]
 800be60:	e7b7      	b.n	800bdd2 <__hexnan+0x7a>
 800be62:	2508      	movs	r5, #8
 800be64:	e7b5      	b.n	800bdd2 <__hexnan+0x7a>
 800be66:	9b01      	ldr	r3, [sp, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0df      	beq.n	800be2c <__hexnan+0xd4>
 800be6c:	f1c3 0320 	rsb	r3, r3, #32
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	40da      	lsrs	r2, r3
 800be76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be7a:	4013      	ands	r3, r2
 800be7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800be80:	e7d4      	b.n	800be2c <__hexnan+0xd4>
 800be82:	3f04      	subs	r7, #4
 800be84:	e7d2      	b.n	800be2c <__hexnan+0xd4>
 800be86:	2004      	movs	r0, #4
 800be88:	b007      	add	sp, #28
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8e <__ascii_mbtowc>:
 800be8e:	b082      	sub	sp, #8
 800be90:	b901      	cbnz	r1, 800be94 <__ascii_mbtowc+0x6>
 800be92:	a901      	add	r1, sp, #4
 800be94:	b142      	cbz	r2, 800bea8 <__ascii_mbtowc+0x1a>
 800be96:	b14b      	cbz	r3, 800beac <__ascii_mbtowc+0x1e>
 800be98:	7813      	ldrb	r3, [r2, #0]
 800be9a:	600b      	str	r3, [r1, #0]
 800be9c:	7812      	ldrb	r2, [r2, #0]
 800be9e:	1e10      	subs	r0, r2, #0
 800bea0:	bf18      	it	ne
 800bea2:	2001      	movne	r0, #1
 800bea4:	b002      	add	sp, #8
 800bea6:	4770      	bx	lr
 800bea8:	4610      	mov	r0, r2
 800beaa:	e7fb      	b.n	800bea4 <__ascii_mbtowc+0x16>
 800beac:	f06f 0001 	mvn.w	r0, #1
 800beb0:	e7f8      	b.n	800bea4 <__ascii_mbtowc+0x16>

0800beb2 <_realloc_r>:
 800beb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	4680      	mov	r8, r0
 800beb8:	4614      	mov	r4, r2
 800beba:	460e      	mov	r6, r1
 800bebc:	b921      	cbnz	r1, 800bec8 <_realloc_r+0x16>
 800bebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec2:	4611      	mov	r1, r2
 800bec4:	f7fd b97e 	b.w	80091c4 <_malloc_r>
 800bec8:	b92a      	cbnz	r2, 800bed6 <_realloc_r+0x24>
 800beca:	f7fd f907 	bl	80090dc <_free_r>
 800bece:	4625      	mov	r5, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed6:	f000 f8e1 	bl	800c09c <_malloc_usable_size_r>
 800beda:	4284      	cmp	r4, r0
 800bedc:	4607      	mov	r7, r0
 800bede:	d802      	bhi.n	800bee6 <_realloc_r+0x34>
 800bee0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bee4:	d812      	bhi.n	800bf0c <_realloc_r+0x5a>
 800bee6:	4621      	mov	r1, r4
 800bee8:	4640      	mov	r0, r8
 800beea:	f7fd f96b 	bl	80091c4 <_malloc_r>
 800beee:	4605      	mov	r5, r0
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d0ed      	beq.n	800bed0 <_realloc_r+0x1e>
 800bef4:	42bc      	cmp	r4, r7
 800bef6:	4622      	mov	r2, r4
 800bef8:	4631      	mov	r1, r6
 800befa:	bf28      	it	cs
 800befc:	463a      	movcs	r2, r7
 800befe:	f7fc fa3e 	bl	800837e <memcpy>
 800bf02:	4631      	mov	r1, r6
 800bf04:	4640      	mov	r0, r8
 800bf06:	f7fd f8e9 	bl	80090dc <_free_r>
 800bf0a:	e7e1      	b.n	800bed0 <_realloc_r+0x1e>
 800bf0c:	4635      	mov	r5, r6
 800bf0e:	e7df      	b.n	800bed0 <_realloc_r+0x1e>

0800bf10 <_strtoul_l.constprop.0>:
 800bf10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf14:	4f36      	ldr	r7, [pc, #216]	; (800bff0 <_strtoul_l.constprop.0+0xe0>)
 800bf16:	4686      	mov	lr, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf20:	5d3e      	ldrb	r6, [r7, r4]
 800bf22:	f016 0608 	ands.w	r6, r6, #8
 800bf26:	d1f8      	bne.n	800bf1a <_strtoul_l.constprop.0+0xa>
 800bf28:	2c2d      	cmp	r4, #45	; 0x2d
 800bf2a:	d130      	bne.n	800bf8e <_strtoul_l.constprop.0+0x7e>
 800bf2c:	782c      	ldrb	r4, [r5, #0]
 800bf2e:	2601      	movs	r6, #1
 800bf30:	1c85      	adds	r5, r0, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d057      	beq.n	800bfe6 <_strtoul_l.constprop.0+0xd6>
 800bf36:	2b10      	cmp	r3, #16
 800bf38:	d109      	bne.n	800bf4e <_strtoul_l.constprop.0+0x3e>
 800bf3a:	2c30      	cmp	r4, #48	; 0x30
 800bf3c:	d107      	bne.n	800bf4e <_strtoul_l.constprop.0+0x3e>
 800bf3e:	7828      	ldrb	r0, [r5, #0]
 800bf40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bf44:	2858      	cmp	r0, #88	; 0x58
 800bf46:	d149      	bne.n	800bfdc <_strtoul_l.constprop.0+0xcc>
 800bf48:	786c      	ldrb	r4, [r5, #1]
 800bf4a:	2310      	movs	r3, #16
 800bf4c:	3502      	adds	r5, #2
 800bf4e:	f04f 38ff 	mov.w	r8, #4294967295
 800bf52:	2700      	movs	r7, #0
 800bf54:	fbb8 f8f3 	udiv	r8, r8, r3
 800bf58:	fb03 f908 	mul.w	r9, r3, r8
 800bf5c:	ea6f 0909 	mvn.w	r9, r9
 800bf60:	4638      	mov	r0, r7
 800bf62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf66:	f1bc 0f09 	cmp.w	ip, #9
 800bf6a:	d815      	bhi.n	800bf98 <_strtoul_l.constprop.0+0x88>
 800bf6c:	4664      	mov	r4, ip
 800bf6e:	42a3      	cmp	r3, r4
 800bf70:	dd23      	ble.n	800bfba <_strtoul_l.constprop.0+0xaa>
 800bf72:	f1b7 3fff 	cmp.w	r7, #4294967295
 800bf76:	d007      	beq.n	800bf88 <_strtoul_l.constprop.0+0x78>
 800bf78:	4580      	cmp	r8, r0
 800bf7a:	d31b      	bcc.n	800bfb4 <_strtoul_l.constprop.0+0xa4>
 800bf7c:	d101      	bne.n	800bf82 <_strtoul_l.constprop.0+0x72>
 800bf7e:	45a1      	cmp	r9, r4
 800bf80:	db18      	blt.n	800bfb4 <_strtoul_l.constprop.0+0xa4>
 800bf82:	fb00 4003 	mla	r0, r0, r3, r4
 800bf86:	2701      	movs	r7, #1
 800bf88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf8c:	e7e9      	b.n	800bf62 <_strtoul_l.constprop.0+0x52>
 800bf8e:	2c2b      	cmp	r4, #43	; 0x2b
 800bf90:	bf04      	itt	eq
 800bf92:	782c      	ldrbeq	r4, [r5, #0]
 800bf94:	1c85      	addeq	r5, r0, #2
 800bf96:	e7cc      	b.n	800bf32 <_strtoul_l.constprop.0+0x22>
 800bf98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf9c:	f1bc 0f19 	cmp.w	ip, #25
 800bfa0:	d801      	bhi.n	800bfa6 <_strtoul_l.constprop.0+0x96>
 800bfa2:	3c37      	subs	r4, #55	; 0x37
 800bfa4:	e7e3      	b.n	800bf6e <_strtoul_l.constprop.0+0x5e>
 800bfa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfaa:	f1bc 0f19 	cmp.w	ip, #25
 800bfae:	d804      	bhi.n	800bfba <_strtoul_l.constprop.0+0xaa>
 800bfb0:	3c57      	subs	r4, #87	; 0x57
 800bfb2:	e7dc      	b.n	800bf6e <_strtoul_l.constprop.0+0x5e>
 800bfb4:	f04f 37ff 	mov.w	r7, #4294967295
 800bfb8:	e7e6      	b.n	800bf88 <_strtoul_l.constprop.0+0x78>
 800bfba:	1c7b      	adds	r3, r7, #1
 800bfbc:	d106      	bne.n	800bfcc <_strtoul_l.constprop.0+0xbc>
 800bfbe:	2322      	movs	r3, #34	; 0x22
 800bfc0:	f8ce 3000 	str.w	r3, [lr]
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	b932      	cbnz	r2, 800bfd6 <_strtoul_l.constprop.0+0xc6>
 800bfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfcc:	b106      	cbz	r6, 800bfd0 <_strtoul_l.constprop.0+0xc0>
 800bfce:	4240      	negs	r0, r0
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	d0f9      	beq.n	800bfc8 <_strtoul_l.constprop.0+0xb8>
 800bfd4:	b107      	cbz	r7, 800bfd8 <_strtoul_l.constprop.0+0xc8>
 800bfd6:	1e69      	subs	r1, r5, #1
 800bfd8:	6011      	str	r1, [r2, #0]
 800bfda:	e7f5      	b.n	800bfc8 <_strtoul_l.constprop.0+0xb8>
 800bfdc:	2430      	movs	r4, #48	; 0x30
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1b5      	bne.n	800bf4e <_strtoul_l.constprop.0+0x3e>
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	e7b3      	b.n	800bf4e <_strtoul_l.constprop.0+0x3e>
 800bfe6:	2c30      	cmp	r4, #48	; 0x30
 800bfe8:	d0a9      	beq.n	800bf3e <_strtoul_l.constprop.0+0x2e>
 800bfea:	230a      	movs	r3, #10
 800bfec:	e7af      	b.n	800bf4e <_strtoul_l.constprop.0+0x3e>
 800bfee:	bf00      	nop
 800bff0:	0800c709 	.word	0x0800c709

0800bff4 <_strtoul_r>:
 800bff4:	f7ff bf8c 	b.w	800bf10 <_strtoul_l.constprop.0>

0800bff8 <__ascii_wctomb>:
 800bff8:	b149      	cbz	r1, 800c00e <__ascii_wctomb+0x16>
 800bffa:	2aff      	cmp	r2, #255	; 0xff
 800bffc:	bf85      	ittet	hi
 800bffe:	238a      	movhi	r3, #138	; 0x8a
 800c000:	6003      	strhi	r3, [r0, #0]
 800c002:	700a      	strbls	r2, [r1, #0]
 800c004:	f04f 30ff 	movhi.w	r0, #4294967295
 800c008:	bf98      	it	ls
 800c00a:	2001      	movls	r0, #1
 800c00c:	4770      	bx	lr
 800c00e:	4608      	mov	r0, r1
 800c010:	4770      	bx	lr

0800c012 <_raise_r>:
 800c012:	291f      	cmp	r1, #31
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	d904      	bls.n	800c026 <_raise_r+0x14>
 800c01c:	2316      	movs	r3, #22
 800c01e:	6003      	str	r3, [r0, #0]
 800c020:	f04f 30ff 	mov.w	r0, #4294967295
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c028:	b112      	cbz	r2, 800c030 <_raise_r+0x1e>
 800c02a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c02e:	b94b      	cbnz	r3, 800c044 <_raise_r+0x32>
 800c030:	4620      	mov	r0, r4
 800c032:	f000 f831 	bl	800c098 <_getpid_r>
 800c036:	462a      	mov	r2, r5
 800c038:	4601      	mov	r1, r0
 800c03a:	4620      	mov	r0, r4
 800c03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c040:	f000 b818 	b.w	800c074 <_kill_r>
 800c044:	2b01      	cmp	r3, #1
 800c046:	d00a      	beq.n	800c05e <_raise_r+0x4c>
 800c048:	1c59      	adds	r1, r3, #1
 800c04a:	d103      	bne.n	800c054 <_raise_r+0x42>
 800c04c:	2316      	movs	r3, #22
 800c04e:	6003      	str	r3, [r0, #0]
 800c050:	2001      	movs	r0, #1
 800c052:	e7e7      	b.n	800c024 <_raise_r+0x12>
 800c054:	2400      	movs	r4, #0
 800c056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c05a:	4628      	mov	r0, r5
 800c05c:	4798      	blx	r3
 800c05e:	2000      	movs	r0, #0
 800c060:	e7e0      	b.n	800c024 <_raise_r+0x12>
	...

0800c064 <raise>:
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <raise+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f7ff bfd2 	b.w	800c012 <_raise_r>
 800c06e:	bf00      	nop
 800c070:	20000088 	.word	0x20000088

0800c074 <_kill_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_kill_r+0x20>)
 800c078:	2300      	movs	r3, #0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f7f6 feb9 	bl	8002df8 <_kill>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	d102      	bne.n	800c090 <_kill_r+0x1c>
 800c08a:	682b      	ldr	r3, [r5, #0]
 800c08c:	b103      	cbz	r3, 800c090 <_kill_r+0x1c>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	20000d74 	.word	0x20000d74

0800c098 <_getpid_r>:
 800c098:	f7f6 bea6 	b.w	8002de8 <_getpid>

0800c09c <_malloc_usable_size_r>:
 800c09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a0:	1f18      	subs	r0, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	bfbc      	itt	lt
 800c0a6:	580b      	ldrlt	r3, [r1, r0]
 800c0a8:	18c0      	addlt	r0, r0, r3
 800c0aa:	4770      	bx	lr

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
