
SD_EMBETRONICS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009928  08009928  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000080  080099b0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080099b0  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010df4  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002933  00000000  00000000  00030ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb9  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002891e  00000000  00000000  00035329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015579  00000000  00000000  0005dc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed369  00000000  00000000  000731c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046b8  00000000  00000000  0016052c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00164be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a8 	.word	0x080092a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080092a8 	.word	0x080092a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <SELECT+0x18>)
 8000b82:	f001 fae1 	bl	8002148 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 f82a 	bl	8001be0 <HAL_Delay>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	48000400 	.word	0x48000400

08000b94 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <DESELECT+0x18>)
 8000b9e:	f001 fad3 	bl	8002148 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f001 f81c 	bl	8001be0 <HAL_Delay>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	48000400 	.word	0x48000400

08000bb0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bba:	bf00      	nop
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SPI_TxByte+0x30>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d1f8      	bne.n	8000bbc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bca:	1df9      	adds	r1, r7, #7
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <SPI_TxByte+0x30>)
 8000bd2:	f002 fe94 	bl	80038fe <HAL_SPI_Transmit>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000a4 	.word	0x200000a4

08000be4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bf0:	bf00      	nop
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SPI_TxBuffer+0x30>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d1f8      	bne.n	8000bf2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	2364      	movs	r3, #100	; 0x64
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <SPI_TxBuffer+0x30>)
 8000c08:	f002 fe79 	bl	80038fe <HAL_SPI_Transmit>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c1e:	23ff      	movs	r3, #255	; 0xff
 8000c20:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c22:	bf00      	nop
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <SPI_RxByte+0x34>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d1f8      	bne.n	8000c24 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c32:	1dba      	adds	r2, r7, #6
 8000c34:	1df9      	adds	r1, r7, #7
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <SPI_RxByte+0x34>)
 8000c3e:	f002 ffd3 	bl	8003be8 <HAL_SPI_TransmitReceive>

  return data;
 8000c42:	79bb      	ldrb	r3, [r7, #6]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000a4 	.word	0x200000a4

08000c50 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c58:	f7ff ffde 	bl	8000c18 <SPI_RxByte>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	701a      	strb	r2, [r3, #0]
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SD_ReadyWait+0x30>)
 8000c74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c78:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000c7a:	f7ff ffcd 	bl	8000c18 <SPI_RxByte>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2bff      	cmp	r3, #255	; 0xff
 8000c86:	d003      	beq.n	8000c90 <SD_ReadyWait+0x24>
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SD_ReadyWait+0x30>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f4      	bne.n	8000c7a <SD_ReadyWait+0xe>

  return res;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000009e 	.word	0x2000009e

08000ca0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000ca6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000caa:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000cac:	f7ff ff72 	bl	8000b94 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	e005      	b.n	8000cc2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	f7ff ff7a 	bl	8000bb0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	ddf6      	ble.n	8000cb6 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000cc8:	f7ff ff56 	bl	8000b78 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000ce0:	2395      	movs	r3, #149	; 0x95
 8000ce2:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff7b 	bl	8000be4 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000cee:	e002      	b.n	8000cf6 <SD_PowerOn+0x56>
  {
    cnt--;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000cf6:	f7ff ff8f 	bl	8000c18 <SPI_RxByte>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d002      	beq.n	8000d06 <SD_PowerOn+0x66>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f4      	bne.n	8000cf0 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000d06:	f7ff ff45 	bl	8000b94 <DESELECT>
  SPI_TxByte(0XFF);
 8000d0a:	20ff      	movs	r0, #255	; 0xff
 8000d0c:	f7ff ff50 	bl	8000bb0 <SPI_TxByte>

  PowerFlag = 1;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <SD_PowerOn+0x80>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000a1 	.word	0x200000a1

08000d24 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <SD_PowerOff+0x14>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	200000a1 	.word	0x200000a1

08000d3c <SD_RxDataBlock>:
  return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <SD_RxDataBlock+0x58>)
 8000d48:	22c8      	movs	r2, #200	; 0xc8
 8000d4a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000d4c:	f7ff ff64 	bl	8000c18 <SPI_RxByte>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2bff      	cmp	r3, #255	; 0xff
 8000d58:	d103      	bne.n	8000d62 <SD_RxDataBlock+0x26>
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <SD_RxDataBlock+0x58>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f4      	bne.n	8000d4c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2bfe      	cmp	r3, #254	; 0xfe
 8000d66:	d001      	beq.n	8000d6c <SD_RxDataBlock+0x30>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e00f      	b.n	8000d8c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff6c 	bl	8000c50 <SPI_RxBytePtr>
  } while(len--);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	603a      	str	r2, [r7, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f4      	bne.n	8000d6c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000d82:	f7ff ff49 	bl	8000c18 <SPI_RxByte>
  SPI_RxByte();
 8000d86:	f7ff ff47 	bl	8000c18 <SPI_RxByte>

  return TRUE;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000009c 	.word	0x2000009c

08000d98 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000da8:	f7ff ff60 	bl	8000c6c <SD_ReadyWait>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d001      	beq.n	8000db6 <SD_TxDataBlock+0x1e>
 8000db2:	2300      	movs	r3, #0
 8000db4:	e02f      	b.n	8000e16 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fef9 	bl	8000bb0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	2bfd      	cmp	r3, #253	; 0xfd
 8000dc2:	d020      	beq.n	8000e06 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff0b 	bl	8000be4 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000dce:	f7ff ff23 	bl	8000c18 <SPI_RxByte>
    SPI_RxByte();
 8000dd2:	f7ff ff21 	bl	8000c18 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000dd6:	e00b      	b.n	8000df0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000dd8:	f7ff ff1e 	bl	8000c18 <SPI_RxByte>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d006      	beq.n	8000df8 <SD_TxDataBlock+0x60>
      i++;
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	2b40      	cmp	r3, #64	; 0x40
 8000df4:	d9f0      	bls.n	8000dd8 <SD_TxDataBlock+0x40>
 8000df6:	e000      	b.n	8000dfa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000df8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ff0c 	bl	8000c18 <SPI_RxByte>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fa      	beq.n	8000dfc <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d101      	bne.n	8000e14 <SD_TxDataBlock+0x7c>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	6039      	str	r1, [r7, #0]
 8000e28:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e2a:	f7ff ff1f 	bl	8000c6c <SD_ReadyWait>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d001      	beq.n	8000e38 <SD_SendCmd+0x1a>
 8000e34:	23ff      	movs	r3, #255	; 0xff
 8000e36:	e042      	b.n	8000ebe <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff feb8 	bl	8000bb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	0e1b      	lsrs	r3, r3, #24
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff feb2 	bl	8000bb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff feac 	bl	8000bb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea6 	bl	8000bb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fea1 	bl	8000bb0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b40      	cmp	r3, #64	; 0x40
 8000e72:	d102      	bne.n	8000e7a <SD_SendCmd+0x5c>
 8000e74:	2395      	movs	r3, #149	; 0x95
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e007      	b.n	8000e8a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b48      	cmp	r3, #72	; 0x48
 8000e7e:	d102      	bne.n	8000e86 <SD_SendCmd+0x68>
 8000e80:	2387      	movs	r3, #135	; 0x87
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <SD_SendCmd+0x6c>
  else crc = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe8f 	bl	8000bb0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b4c      	cmp	r3, #76	; 0x4c
 8000e96:	d101      	bne.n	8000e9c <SD_SendCmd+0x7e>
 8000e98:	f7ff febe 	bl	8000c18 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000ea0:	f7ff feba 	bl	8000c18 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ea8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da05      	bge.n	8000ebc <SD_SendCmd+0x9e>
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	73bb      	strb	r3, [r7, #14]
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f1      	bne.n	8000ea0 <SD_SendCmd+0x82>

  return res;
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SD_disk_initialize+0x14>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0d1      	b.n	8001080 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <SD_disk_initialize+0x1c0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <SD_disk_initialize+0x2a>
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <SD_disk_initialize+0x1c0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	e0c6      	b.n	8001080 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000ef2:	f7ff fed5 	bl	8000ca0 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000ef6:	f7ff fe3f 	bl	8000b78 <SELECT>

  /* check disk type */
  type = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000efe:	2100      	movs	r1, #0
 8000f00:	2040      	movs	r0, #64	; 0x40
 8000f02:	f7ff ff8c 	bl	8000e1e <SD_SendCmd>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f040 80a1 	bne.w	8001050 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <SD_disk_initialize+0x1c4>)
 8000f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f14:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f1a:	2048      	movs	r0, #72	; 0x48
 8000f1c:	f7ff ff7f 	bl	8000e1e <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d155      	bne.n	8000fd2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e00c      	b.n	8000f46 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000f2c:	7bfc      	ldrb	r4, [r7, #15]
 8000f2e:	f7ff fe73 	bl	8000c18 <SPI_RxByte>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	f104 0310 	add.w	r3, r4, #16
 8000f3a:	443b      	add	r3, r7
 8000f3c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d9ef      	bls.n	8000f2c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f4c:	7abb      	ldrb	r3, [r7, #10]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d17e      	bne.n	8001050 <SD_disk_initialize+0x188>
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	2baa      	cmp	r3, #170	; 0xaa
 8000f56:	d17b      	bne.n	8001050 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2077      	movs	r0, #119	; 0x77
 8000f5c:	f7ff ff5f 	bl	8000e1e <SD_SendCmd>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d807      	bhi.n	8000f76 <SD_disk_initialize+0xae>
 8000f66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f6a:	2069      	movs	r0, #105	; 0x69
 8000f6c:	f7ff ff57 	bl	8000e1e <SD_SendCmd>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <SD_disk_initialize+0x1c4>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1ec      	bne.n	8000f58 <SD_disk_initialize+0x90>
 8000f7e:	e000      	b.n	8000f82 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f80:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <SD_disk_initialize+0x1c4>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d062      	beq.n	8001050 <SD_disk_initialize+0x188>
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	207a      	movs	r0, #122	; 0x7a
 8000f8e:	f7ff ff46 	bl	8000e1e <SD_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d15b      	bne.n	8001050 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e00c      	b.n	8000fb8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000f9e:	7bfc      	ldrb	r4, [r7, #15]
 8000fa0:	f7ff fe3a 	bl	8000c18 <SPI_RxByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f104 0310 	add.w	r3, r4, #16
 8000fac:	443b      	add	r3, r7
 8000fae:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d9ef      	bls.n	8000f9e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000fbe:	7a3b      	ldrb	r3, [r7, #8]
 8000fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SD_disk_initialize+0x104>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	e000      	b.n	8000fce <SD_disk_initialize+0x106>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	73bb      	strb	r3, [r7, #14]
 8000fd0:	e03e      	b.n	8001050 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2077      	movs	r0, #119	; 0x77
 8000fd6:	f7ff ff22 	bl	8000e1e <SD_SendCmd>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d808      	bhi.n	8000ff2 <SD_disk_initialize+0x12a>
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2069      	movs	r0, #105	; 0x69
 8000fe4:	f7ff ff1b 	bl	8000e1e <SD_SendCmd>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d801      	bhi.n	8000ff2 <SD_disk_initialize+0x12a>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e000      	b.n	8000ff4 <SD_disk_initialize+0x12c>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d10e      	bne.n	800101a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2077      	movs	r0, #119	; 0x77
 8001000:	f7ff ff0d 	bl	8000e1e <SD_SendCmd>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d80e      	bhi.n	8001028 <SD_disk_initialize+0x160>
 800100a:	2100      	movs	r1, #0
 800100c:	2069      	movs	r0, #105	; 0x69
 800100e:	f7ff ff06 	bl	8000e1e <SD_SendCmd>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <SD_disk_initialize+0x160>
 8001018:	e00c      	b.n	8001034 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800101a:	2100      	movs	r1, #0
 800101c:	2041      	movs	r0, #65	; 0x41
 800101e:	f7ff fefe 	bl	8000e1e <SD_SendCmd>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <SD_disk_initialize+0x1c4>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e2      	bne.n	8000ff6 <SD_disk_initialize+0x12e>
 8001030:	e000      	b.n	8001034 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001032:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <SD_disk_initialize+0x1c4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <SD_disk_initialize+0x184>
 800103c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001040:	2050      	movs	r0, #80	; 0x50
 8001042:	f7ff feec 	bl	8000e1e <SD_SendCmd>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SD_disk_initialize+0x188>
 800104c:	2300      	movs	r3, #0
 800104e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <SD_disk_initialize+0x1c8>)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001056:	f7ff fd9d 	bl	8000b94 <DESELECT>
  SPI_RxByte();
 800105a:	f7ff fddd 	bl	8000c18 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <SD_disk_initialize+0x1c0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SD_disk_initialize+0x1c0>)
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e001      	b.n	800107a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001076:	f7ff fe55 	bl	8000d24 <SD_PowerOff>
  }

  return Stat;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <SD_disk_initialize+0x1c0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	2000009c 	.word	0x2000009c
 8001090:	200000a0 	.word	0x200000a0

08001094 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SD_disk_status+0x14>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e002      	b.n	80010ae <SD_disk_status+0x1a>
  return Stat;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SD_disk_status+0x28>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <SD_disk_read+0x1c>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SD_disk_read+0x20>
 80010dc:	2304      	movs	r3, #4
 80010de:	e051      	b.n	8001184 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <SD_disk_read+0xcc>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SD_disk_read+0x32>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e048      	b.n	8001184 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <SD_disk_read+0xd0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <SD_disk_read+0x44>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	607b      	str	r3, [r7, #4]

  SELECT();
 8001104:	f7ff fd38 	bl	8000b78 <SELECT>

  if (count == 1)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d111      	bne.n	8001132 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2051      	movs	r0, #81	; 0x51
 8001112:	f7ff fe84 	bl	8000e1e <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d129      	bne.n	8001170 <SD_disk_read+0xb0>
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	f7ff fe0b 	bl	8000d3c <SD_RxDataBlock>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d021      	beq.n	8001170 <SD_disk_read+0xb0>
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	e01e      	b.n	8001170 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2052      	movs	r0, #82	; 0x52
 8001136:	f7ff fe72 	bl	8000e1e <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d117      	bne.n	8001170 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f7ff fdf9 	bl	8000d3c <SD_RxDataBlock>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <SD_disk_read+0xa6>
        buff += 512;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001156:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1ed      	bne.n	8001140 <SD_disk_read+0x80>
 8001164:	e000      	b.n	8001168 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001166:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001168:	2100      	movs	r1, #0
 800116a:	204c      	movs	r0, #76	; 0x4c
 800116c:	f7ff fe57 	bl	8000e1e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001170:	f7ff fd10 	bl	8000b94 <DESELECT>
  SPI_RxByte();
 8001174:	f7ff fd50 	bl	8000c18 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf14      	ite	ne
 800117e:	2301      	movne	r3, #1
 8001180:	2300      	moveq	r3, #0
 8001182:	b2db      	uxtb	r3, r3
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	200000a0 	.word	0x200000a0

08001194 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <SD_disk_write+0x1c>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <SD_disk_write+0x20>
 80011b0:	2304      	movs	r3, #4
 80011b2:	e06b      	b.n	800128c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <SD_disk_write+0x100>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SD_disk_write+0x32>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e062      	b.n	800128c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <SD_disk_write+0x100>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SD_disk_write+0x44>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e059      	b.n	800128c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <SD_disk_write+0x104>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <SD_disk_write+0x56>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	607b      	str	r3, [r7, #4]

  SELECT();
 80011ea:	f7ff fcc5 	bl	8000b78 <SELECT>

  if (count == 1)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d110      	bne.n	8001216 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	2058      	movs	r0, #88	; 0x58
 80011f8:	f7ff fe11 	bl	8000e1e <SD_SendCmd>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13a      	bne.n	8001278 <SD_disk_write+0xe4>
 8001202:	21fe      	movs	r1, #254	; 0xfe
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fdc7 	bl	8000d98 <SD_TxDataBlock>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d033      	beq.n	8001278 <SD_disk_write+0xe4>
      count = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	e030      	b.n	8001278 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <SD_disk_write+0x104>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001222:	2100      	movs	r1, #0
 8001224:	2077      	movs	r0, #119	; 0x77
 8001226:	f7ff fdfa 	bl	8000e1e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	2057      	movs	r0, #87	; 0x57
 800122e:	f7ff fdf6 	bl	8000e1e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2059      	movs	r0, #89	; 0x59
 8001236:	f7ff fdf2 	bl	8000e1e <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d11b      	bne.n	8001278 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001240:	21fc      	movs	r1, #252	; 0xfc
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7ff fda8 	bl	8000d98 <SD_TxDataBlock>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <SD_disk_write+0xd0>
        buff += 512;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001254:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ee      	bne.n	8001240 <SD_disk_write+0xac>
 8001262:	e000      	b.n	8001266 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001264:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001266:	21fd      	movs	r1, #253	; 0xfd
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fd95 	bl	8000d98 <SD_TxDataBlock>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <SD_disk_write+0xe4>
      {
        count = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001278:	f7ff fc8c 	bl	8000b94 <DESELECT>
  SPI_RxByte();
 800127c:	f7ff fccc 	bl	8000c18 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	200000a0 	.word	0x200000a0

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fc22 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f80b 	bl	80012be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f000 f8c8 	bl	800143c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012ac:	f000 f896 	bl	80013dc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80012b0:	f003 fdc6 	bl	8004e40 <MX_FATFS_Init>
  MX_SPI1_Init();
 80012b4:	f000 f854 	bl	8001360 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_SD_card();
 80012b8:	f000 f910 	bl	80014dc <process_SD_card>

  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x20>

080012be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b096      	sub	sp, #88	; 0x58
 80012c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2244      	movs	r2, #68	; 0x44
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 fa61 	bl	8008794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e4:	f000 ff56 	bl	8002194 <HAL_PWREx_ControlVoltageScaling>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ee:	f000 fa0f 	bl	8001710 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f2:	2302      	movs	r3, #2
 80012f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800130c:	230a      	movs	r3, #10
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001310:	2307      	movs	r3, #7
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f000 ff8d 	bl	8002240 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800132c:	f000 f9f0 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2303      	movs	r3, #3
 8001336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2104      	movs	r1, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fb55 	bl	80029f8 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001354:	f000 f9dc 	bl	8001710 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3758      	adds	r7, #88	; 0x58
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_SPI1_Init+0x74>)
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <MX_SPI1_Init+0x78>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI1_Init+0x74>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI1_Init+0x74>)
 800137a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800137e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI1_Init+0x74>)
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI1_Init+0x74>)
 80013c0:	f002 f9fa 	bl	80037b8 <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 f9a1 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000a4 	.word	0x200000a4
 80013d8:	40013000 	.word	0x40013000

080013dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART1_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001420:	f002 ff68 	bl	80042f4 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f971 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000108 	.word	0x20000108
 8001438:	40013800 	.word	0x40013800

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_GPIO_Init+0x74>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <MX_GPIO_Init+0x74>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_GPIO_Init+0x74>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_GPIO_Init+0x74>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <MX_GPIO_Init+0x74>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_GPIO_Init+0x74>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x78>)
 8001488:	f000 fe5e 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_GPIO_Init+0x78>)
 80014a4:	f000 fca6 	bl	8001df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014c0:	1d39      	adds	r1, r7, #4
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	2201      	movs	r2, #1
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <__io_putchar+0x20>)
 80014ca:	f002 ff61 	bl	8004390 <HAL_UART_Transmit>
  return ch;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000108 	.word	0x20000108

080014dc <process_SD_card>:

void process_SD_card(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 0);    //1=mount now
 80014e6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80014ea:	3b04      	subs	r3, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	4979      	ldr	r1, [pc, #484]	; (80016d4 <process_SD_card+0x1f8>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 feeb 	bl	80072cc <f_mount>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80014fc:	f102 021f 	add.w	r2, r2, #31
 8001500:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001502:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001506:	f103 031f 	add.w	r3, r3, #31
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 8001510:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001514:	f103 031f 	add.w	r3, r3, #31
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	486e      	ldr	r0, [pc, #440]	; (80016d8 <process_SD_card+0x1fc>)
 800151e:	f006 fff3 	bl	8008508 <iprintf>
      break;
 8001522:	e0c9      	b.n	80016b8 <process_SD_card+0x1dc>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001524:	486d      	ldr	r0, [pc, #436]	; (80016dc <process_SD_card+0x200>)
 8001526:	f007 f855 	bl	80085d4 <puts>
    HAL_UART_Transmit(&huart1, "SD Card Mounted Successfully!!!\r\n", 50, 1000);
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	2232      	movs	r2, #50	; 0x32
 8001530:	496b      	ldr	r1, [pc, #428]	; (80016e0 <process_SD_card+0x204>)
 8001532:	486c      	ldr	r0, [pc, #432]	; (80016e4 <process_SD_card+0x208>)
 8001534:	f002 ff2c 	bl	8004390 <HAL_UART_Transmit>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 8001538:	f107 0220 	add.w	r2, r7, #32
 800153c:	3a1c      	subs	r2, #28
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	3b20      	subs	r3, #32
 8001544:	4619      	mov	r1, r3
 8001546:	4863      	ldr	r0, [pc, #396]	; (80016d4 <process_SD_card+0x1f8>)
 8001548:	f006 fc6d 	bl	8007e26 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800154c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001550:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	3b02      	subs	r3, #2
 8001558:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800155c:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8001560:	8952      	ldrh	r2, [r2, #10]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f8ee 	bl	8000748 <__aeabi_ui2d>
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <process_SD_card+0x20c>)
 8001572:	f7fe fe7d 	bl	8000270 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff f95d 	bl	800083c <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001588:	f102 0218 	add.w	r2, r2, #24
 800158c:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800158e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001592:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001596:	895b      	ldrh	r3, [r3, #10]
 8001598:	461a      	mov	r2, r3
 800159a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800159e:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f8ce 	bl	8000748 <__aeabi_ui2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <process_SD_card+0x20c>)
 80015b2:	f7fe fe5d 	bl	8000270 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff f93d 	bl	800083c <__aeabi_d2uiz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80015c8:	f102 0214 	add.w	r2, r2, #20
 80015cc:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 80015ce:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015d2:	f103 0314 	add.w	r3, r3, #20
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015dc:	f103 0318 	add.w	r3, r3, #24
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	4842      	ldr	r0, [pc, #264]	; (80016ec <process_SD_card+0x210>)
 80015e4:	f006 ff90 	bl	8008508 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80015e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015ec:	3b34      	subs	r3, #52	; 0x34
 80015ee:	220b      	movs	r2, #11
 80015f0:	493f      	ldr	r1, [pc, #252]	; (80016f0 <process_SD_card+0x214>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 feb0 	bl	8007358 <f_open>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80015fe:	f102 021f 	add.w	r2, r2, #31
 8001602:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001604:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001608:	f103 031f 	add.w	r3, r3, #31
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <process_SD_card+0x14a>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001612:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001616:	f103 031f 	add.w	r3, r3, #31
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	4835      	ldr	r0, [pc, #212]	; (80016f4 <process_SD_card+0x218>)
 8001620:	f006 ff72 	bl	8008508 <iprintf>
      break;
 8001624:	e048      	b.n	80016b8 <process_SD_card+0x1dc>
    }

    printf("Writing data!!!\r\n");
 8001626:	4834      	ldr	r0, [pc, #208]	; (80016f8 <process_SD_card+0x21c>)
 8001628:	f006 ffd4 	bl	80085d4 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 800162c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001630:	3b34      	subs	r3, #52	; 0x34
 8001632:	4619      	mov	r1, r3
 8001634:	4831      	ldr	r0, [pc, #196]	; (80016fc <process_SD_card+0x220>)
 8001636:	f006 fd5f 	bl	80080f8 <f_puts>

    //close your file
    f_close(&fil);
 800163a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800163e:	3b34      	subs	r3, #52	; 0x34
 8001640:	4618      	mov	r0, r3
 8001642:	f006 fbc6 	bl	8007dd2 <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001646:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800164a:	3b34      	subs	r3, #52	; 0x34
 800164c:	2201      	movs	r2, #1
 800164e:	4928      	ldr	r1, [pc, #160]	; (80016f0 <process_SD_card+0x214>)
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fe81 	bl	8007358 <f_open>
 8001656:	4603      	mov	r3, r0
 8001658:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800165c:	f102 021f 	add.w	r2, r2, #31
 8001660:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001662:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001666:	f103 031f 	add.w	r3, r3, #31
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <process_SD_card+0x1a8>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8001670:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001674:	f103 031f 	add.w	r3, r3, #31
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <process_SD_card+0x224>)
 800167e:	f006 ff43 	bl	8008508 <iprintf>
      break;
 8001682:	e019      	b.n	80016b8 <process_SD_card+0x1dc>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001684:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001688:	3a34      	subs	r2, #52	; 0x34
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	3b18      	subs	r3, #24
 8001690:	2164      	movs	r1, #100	; 0x64
 8001692:	4618      	mov	r0, r3
 8001694:	f006 fc7c 	bl	8007f90 <f_gets>

    printf("Read Data : %s\n", buf);
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	3b18      	subs	r3, #24
 800169e:	4619      	mov	r1, r3
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <process_SD_card+0x228>)
 80016a2:	f006 ff31 	bl	8008508 <iprintf>

    //close your file
    f_close(&fil);
 80016a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016aa:	3b34      	subs	r3, #52	; 0x34
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 fb90 	bl	8007dd2 <f_close>
    printf("Closing File!!!\r\n");
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <process_SD_card+0x22c>)
 80016b4:	f006 ff8e 	bl	80085d4 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	4906      	ldr	r1, [pc, #24]	; (80016d4 <process_SD_card+0x1f8>)
 80016bc:	2000      	movs	r0, #0
 80016be:	f005 fe05 	bl	80072cc <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <process_SD_card+0x230>)
 80016c4:	f006 ff86 	bl	80085d4 <puts>
}
 80016c8:	bf00      	nop
 80016ca:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	080092c0 	.word	0x080092c0
 80016d8:	080092c4 	.word	0x080092c4
 80016dc:	080092e0 	.word	0x080092e0
 80016e0:	08009304 	.word	0x08009304
 80016e4:	20000108 	.word	0x20000108
 80016e8:	3fe00000 	.word	0x3fe00000
 80016ec:	08009328 	.word	0x08009328
 80016f0:	08009358 	.word	0x08009358
 80016f4:	08009368 	.word	0x08009368
 80016f8:	0800938c 	.word	0x0800938c
 80016fc:	080093a0 	.word	0x080093a0
 8001700:	080093b8 	.word	0x080093b8
 8001704:	080093d4 	.word	0x080093d4
 8001708:	080093e4 	.word	0x080093e4
 800170c:	080093f8 	.word	0x080093f8

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_SPI_MspInit+0x7c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d128      	bne.n	80017d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 800178c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001790:	6613      	str	r3, [r2, #96]	; 0x60
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_SPI_MspInit+0x80>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017b6:	23e0      	movs	r3, #224	; 0xe0
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c6:	2305      	movs	r3, #5
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f000 fb0e 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013000 	.word	0x40013000
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ac      	sub	sp, #176	; 0xb0
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2288      	movs	r2, #136	; 0x88
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f006 ffc3 	bl	8008794 <memset>
  if(huart->Instance==USART1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_UART_MspInit+0xb4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d13c      	bne.n	8001892 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fb0b 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff ff6e 	bl	8001710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	6613      	str	r3, [r2, #96]	; 0x60
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_UART_MspInit+0xb8>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001864:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187e:	2307      	movs	r3, #7
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f000 fab1 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	37b0      	adds	r7, #176	; 0xb0
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40013800 	.word	0x40013800
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <SysTick_Handler+0x34>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <SysTick_Handler+0x18>
	  Timer1--;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <SysTick_Handler+0x34>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <SysTick_Handler+0x34>)
 8001902:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <SysTick_Handler+0x38>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <SysTick_Handler+0x2c>
	  Timer2--;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Handler+0x38>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <SysTick_Handler+0x38>)
 8001916:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 f942 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2000009c 	.word	0x2000009c
 8001924:	2000009e 	.word	0x2000009e

08001928 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
  }

  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fd9b 	bl	80014b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
  }
  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_isatty>:

int _isatty(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f006 fefc 	bl	8008830 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20018000 	.word	0x20018000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	20000190 	.word	0x20000190
 8001a6c:	20000520 	.word	0x20000520

08001a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff ffea 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f006 febb 	bl	800883c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7ff fbe9 	bl	800129c <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001acc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ad8:	08009930 	.word	0x08009930
  ldr r2, =_sbss
 8001adc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ae0:	20000520 	.word	0x20000520

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_Init+0x3c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_Init+0x3c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afe:	2003      	movs	r0, #3
 8001b00:	f000 f944 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f80f 	bl	8001b28 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	e001      	b.n	8001b1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b16:	f7ff fe01 	bl	800171c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d023      	beq.n	8001b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_InitTick+0x70>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f941 	bl	8001dda <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d809      	bhi.n	8001b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f919 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_InitTick+0x74>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e007      	b.n	8001b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e004      	b.n	8001b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e001      	b.n	8001b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000194 	.word	0x20000194

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000194 	.word	0x20000194

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff47 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5c 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e17f      	b.n	8002104 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8171 	beq.w	80020fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d005      	beq.n	8001e34 <HAL_GPIO_Init+0x40>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d130      	bne.n	8001e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 0201 	and.w	r2, r3, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d118      	bne.n	8001ed4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d017      	beq.n	8001f10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d123      	bne.n	8001f64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	6939      	ldr	r1, [r7, #16]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80ac 	beq.w	80020fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fbe:	4a5a      	ldr	r2, [pc, #360]	; (8002128 <HAL_GPIO_Init+0x334>)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x242>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x338>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x23e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x33c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x23a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x340>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x236>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x344>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x232>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_GPIO_Init+0x348>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x22e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x34c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x22a>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x244>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x244>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x244>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x244>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x244>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x244>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x244>
 8002036:	2300      	movs	r3, #0
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002048:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x334>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_GPIO_Init+0x350>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <HAL_GPIO_Init+0x350>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_GPIO_Init+0x350>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_GPIO_Init+0x350>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_GPIO_Init+0x350>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_GPIO_Init+0x350>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_GPIO_Init+0x350>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_GPIO_Init+0x350>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f ae78 	bne.w	8001e04 <HAL_GPIO_Init+0x10>
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800
 8002134:	48000c00 	.word	0x48000c00
 8002138:	48001000 	.word	0x48001000
 800213c:	48001400 	.word	0x48001400
 8002140:	48001800 	.word	0x48001800
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002164:	e002      	b.n	800216c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_PWREx_GetVoltageRange+0x18>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40007000 	.word	0x40007000

08002194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a2:	d130      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d038      	beq.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ba:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2232      	movs	r2, #50	; 0x32
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d8:	e002      	b.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d102      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f2      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d110      	bne.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e00f      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d007      	beq.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000
 8002238:	20000004 	.word	0x20000004
 800223c:	431bde83 	.word	0x431bde83

08002240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e3ca      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	4b94      	ldr	r3, [pc, #592]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80e4 	beq.w	800243c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_RCC_OscConfig+0x4a>
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	f040 808b 	bne.w	8002398 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8087 	bne.w	8002398 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x62>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e3a2      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_RCC_OscConfig+0x7c>
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_OscConfig+0x88>
 80022bc:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d223      	bcs.n	8002314 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fd55 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e383      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	496d      	ldr	r1, [pc, #436]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4968      	ldr	r1, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
 8002312:	e025      	b.n	8002360 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4960      	ldr	r1, [pc, #384]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	495b      	ldr	r1, [pc, #364]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fd15 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e343      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002360:	f000 fc4a 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	4950      	ldr	r1, [pc, #320]	; (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_RCC_OscConfig+0x278>)
 800237e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002380:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fbcf 	bl	8001b28 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d052      	beq.n	800243a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	e327      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d032      	beq.n	8002406 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fc0c 	bl	8001bc8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b4:	f7ff fc08 	bl	8001bc8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e310      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4931      	ldr	r1, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	492c      	ldr	r1, [pc, #176]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	e01a      	b.n	800243c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002412:	f7ff fbd9 	bl	8001bc8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241a:	f7ff fbd5 	bl	8001bc8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2dd      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x1da>
 8002438:	e000      	b.n	800243c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d074      	beq.n	8002532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b08      	cmp	r3, #8
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x21a>
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d10e      	bne.n	8002472 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d10b      	bne.n	8002472 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d064      	beq.n	8002530 <HAL_RCC_OscConfig+0x2f0>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d160      	bne.n	8002530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e2ba      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x24a>
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e026      	b.n	80024d8 <HAL_RCC_OscConfig+0x298>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002492:	d115      	bne.n	80024c0 <HAL_RCC_OscConfig+0x280>
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 800249a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a02      	ldr	r2, [pc, #8]	; (80024b0 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x298>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	08009464 	.word	0x08009464
 80024b8:	20000004 	.word	0x20000004
 80024bc:	20000008 	.word	0x20000008
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a9f      	ldr	r2, [pc, #636]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a9c      	ldr	r2, [pc, #624]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff fb72 	bl	8001bc8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fb6e 	bl	8001bc8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e276      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2a8>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fb5e 	bl	8001bc8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fb5a 	bl	8001bc8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e262      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x2d0>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d060      	beq.n	8002600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x310>
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d119      	bne.n	800257e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d116      	bne.n	800257e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x328>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e23f      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b76      	ldr	r3, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4973      	ldr	r1, [pc, #460]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	e040      	b.n	8002600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d023      	beq.n	80025ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002586:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff fb19 	bl	8001bc8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff fb15 	bl	8001bc8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e21d      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b62      	ldr	r3, [pc, #392]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	495f      	ldr	r1, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff faf5 	bl	8001bc8 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff faf1 	bl	8001bc8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1f9      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03c      	beq.n	8002686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01c      	beq.n	800264e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261a:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fad0 	bl	8001bc8 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff facc 	bl	8001bc8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1d4      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ef      	beq.n	800262c <HAL_RCC_OscConfig+0x3ec>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff fab3 	bl	8001bc8 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff faaf 	bl	8001bc8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1b7      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80a6 	beq.w	80027e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCC_OscConfig+0x508>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d118      	bne.n	80026fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_OscConfig+0x508>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x508>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa76 	bl	8001bc8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7ff fa72 	bl	8001bc8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e17a      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x508>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x4d8>
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002716:	e029      	b.n	800276c <HAL_RCC_OscConfig+0x52c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d115      	bne.n	800274c <HAL_RCC_OscConfig+0x50c>
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_RCC_OscConfig+0x504>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x52c>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	4b9c      	ldr	r3, [pc, #624]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a9b      	ldr	r2, [pc, #620]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275c:	4b98      	ldr	r3, [pc, #608]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a97      	ldr	r2, [pc, #604]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d016      	beq.n	80027a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7ff fa28 	bl	8001bc8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7ff fa24 	bl	8001bc8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e12a      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ed      	beq.n	800277c <HAL_RCC_OscConfig+0x53c>
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7ff fa11 	bl	8001bc8 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff fa0d 	bl	8001bc8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e113      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c0:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ed      	bne.n	80027aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d4:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80027da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80fe 	beq.w	80029e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	f040 80d0 	bne.w	8002994 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027f4:	4b72      	ldr	r3, [pc, #456]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	429a      	cmp	r2, r3
 8002806:	d130      	bne.n	800286a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	3b01      	subs	r3, #1
 8002814:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d127      	bne.n	800286a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d11f      	bne.n	800286a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002834:	2a07      	cmp	r2, #7
 8002836:	bf14      	ite	ne
 8002838:	2201      	movne	r2, #1
 800283a:	2200      	moveq	r2, #0
 800283c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283e:	4293      	cmp	r3, r2
 8002840:	d113      	bne.n	800286a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d109      	bne.n	800286a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d06e      	beq.n	8002948 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d069      	beq.n	8002944 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0ad      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002898:	f7ff f996 	bl	8001bc8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f992 	bl	8001bc8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e09a      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x784>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ce:	3a01      	subs	r2, #1
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d8:	0212      	lsls	r2, r2, #8
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028e0:	0852      	lsrs	r2, r2, #1
 80028e2:	3a01      	subs	r2, #1
 80028e4:	0552      	lsls	r2, r2, #21
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ec:	0852      	lsrs	r2, r2, #1
 80028ee:	3a01      	subs	r2, #1
 80028f0:	0652      	lsls	r2, r2, #25
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f8:	0912      	lsrs	r2, r2, #4
 80028fa:	0452      	lsls	r2, r2, #17
 80028fc:	430a      	orrs	r2, r1
 80028fe:	4930      	ldr	r1, [pc, #192]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002900:	4313      	orrs	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800291c:	f7ff f954 	bl	8001bc8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f950 	bl	8001bc8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e058      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002942:	e050      	b.n	80029e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e04f      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d148      	bne.n	80029e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800296c:	f7ff f92c 	bl	8001bc8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff f928 	bl	8001bc8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e030      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x734>
 8002992:	e028      	b.n	80029e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d023      	beq.n	80029e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_RCC_OscConfig+0x780>)
 80029a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7ff f90f 	bl	8001bc8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ac:	e00c      	b.n	80029c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7ff f90b 	bl	8001bc8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d905      	bls.n	80029c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e013      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x7b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ec      	bne.n	80029ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x7b0>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4905      	ldr	r1, [pc, #20]	; (80029f0 <HAL_RCC_OscConfig+0x7b0>)
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_OscConfig+0x7b4>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
 80029e0:	e001      	b.n	80029e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	feeefffc 	.word	0xfeeefffc

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0e7      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4970      	ldr	r1, [pc, #448]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cf      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d908      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4960      	ldr	r1, [pc, #384]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04c      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0a6      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e09a      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aae:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e08e      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e086      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4943      	ldr	r1, [pc, #268]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7ff f872 	bl	8001bc8 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7ff f86e 	bl	8001bc8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e06e      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d208      	bcs.n	8002b3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	492b      	ldr	r1, [pc, #172]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d210      	bcs.n	8002b6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	4923      	ldr	r1, [pc, #140]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e036      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4918      	ldr	r1, [pc, #96]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4910      	ldr	r1, [pc, #64]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bac:	f000 f824 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	490b      	ldr	r1, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1f4>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f8>)
 8002bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1fc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe ffa9 	bl	8001b28 <HAL_InitTick>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bda:	7afb      	ldrb	r3, [r7, #11]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08009464 	.word	0x08009464
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d121      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d11e      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c2c:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e004      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d134      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d003      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8002c9c:	e005      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca0:	617b      	str	r3, [r7, #20]
      break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	617b      	str	r3, [r7, #20]
      break;
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	617b      	str	r3, [r7, #20]
      break;
 8002cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	fb03 f202 	mul.w	r2, r3, r2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	0e5b      	lsrs	r3, r3, #25
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	0800947c 	.word	0x0800947c
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08009474 	.word	0x08009474

08002d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d58:	f7ff ffda 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0adb      	lsrs	r3, r3, #11
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4904      	ldr	r1, [pc, #16]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08009474 	.word	0x08009474

08002d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d98:	f7ff f9ee 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002d9c:	6178      	str	r0, [r7, #20]
 8002d9e:	e014      	b.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002db8:	f7ff f9de 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd0:	d10b      	bne.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d919      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2ba0      	cmp	r3, #160	; 0xa0
 8002ddc:	d902      	bls.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dde:	2302      	movs	r3, #2
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	e013      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de4:	2301      	movs	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e010      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d902      	bls.n	8002df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df0:	2303      	movs	r3, #3
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e00a      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d102      	bne.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e004      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b70      	cmp	r3, #112	; 0x70
 8002e06:	d101      	bne.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0207 	bic.w	r2, r3, #7
 8002e14:	4909      	ldr	r1, [pc, #36]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40022000 	.word	0x40022000

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e48:	2300      	movs	r3, #0
 8002e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d041      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e64:	d02a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6a:	d824      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e76:	d81e      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e82:	e018      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e84:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e90:	e015      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fabb 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea2:	e00c      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fba6 	bl	80035fc <RCCEx_PLLSAI2_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb4:	e003      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eba:	e000      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec4:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed2:	4973      	ldr	r1, [pc, #460]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eda:	e001      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d041      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ef4:	d02a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002efa:	d824      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f06:	d81e      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d010      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f12:	e018      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fa73 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3320      	adds	r3, #32
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb5e 	bl	80035fc <RCCEx_PLLSAI2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f54:	4b52      	ldr	r3, [pc, #328]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f62:	494f      	ldr	r1, [pc, #316]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a0 	beq.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fe02 	bl	8001bc8 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc6:	e009      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7fe fdfe 	bl	8001bc8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d15c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01f      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	d019      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	4a20      	ldr	r2, [pc, #128]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fdbd 	bl	8001bc8 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003050:	e00b      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe fdb9 	bl	8001bc8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d902      	bls.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	74fb      	strb	r3, [r7, #19]
            break;
 8003068:	e006      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ec      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	4904      	ldr	r1, [pc, #16]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003096:	e009      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
 800309c:	e006      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ac:	7c7b      	ldrb	r3, [r7, #17]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b9e      	ldr	r3, [pc, #632]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	4a9d      	ldr	r2, [pc, #628]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ca:	4b98      	ldr	r3, [pc, #608]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f023 0203 	bic.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	4994      	ldr	r1, [pc, #592]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ec:	4b8f      	ldr	r3, [pc, #572]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f023 020c 	bic.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	498c      	ldr	r1, [pc, #560]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800310e:	4b87      	ldr	r3, [pc, #540]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4983      	ldr	r1, [pc, #524]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	497b      	ldr	r1, [pc, #492]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	4972      	ldr	r1, [pc, #456]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003174:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	496a      	ldr	r1, [pc, #424]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003196:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	4961      	ldr	r1, [pc, #388]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031b8:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	4959      	ldr	r1, [pc, #356]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	4950      	ldr	r1, [pc, #320]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031fc:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	4948      	ldr	r1, [pc, #288]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	493f      	ldr	r1, [pc, #252]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d028      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	4937      	ldr	r1, [pc, #220]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325e:	d106      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
 800326c:	e011      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003276:	d10c      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8c8 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	491f      	ldr	r1, [pc, #124]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032bc:	d106      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c8:	60d3      	str	r3, [r2, #12]
 80032ca:	e011      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2101      	movs	r1, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f899 	bl	8003414 <RCCEx_PLLSAI1_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331a:	d109      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a02      	ldr	r2, [pc, #8]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003326:	60d3      	str	r3, [r2, #12]
 8003328:	e014      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f867 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336e:	4928      	ldr	r1, [pc, #160]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337e:	d10d      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f844 	bl	8003414 <RCCEx_PLLSAI1_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d014      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
 800339a:	e011      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f925 	bl	80035fc <RCCEx_PLLSAI2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	4904      	ldr	r1, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003406:	7cbb      	ldrb	r3, [r7, #18]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b75      	ldr	r3, [pc, #468]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d047      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e044      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d018      	beq.n	800349a <RCCEx_PLLSAI1_Config+0x86>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d825      	bhi.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <RCCEx_PLLSAI1_Config+0x62>
 8003470:	2b02      	cmp	r3, #2
 8003472:	d009      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x74>
 8003474:	e020      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003476:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e01a      	b.n	80034be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003488:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e013      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b6:	e006      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e004      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4944      	ldr	r1, [pc, #272]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d17d      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fe fb64 	bl	8001bc8 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fe fb60 	bl	8001bc8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003518:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d160      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	0912      	lsrs	r2, r2, #4
 8003548:	0452      	lsls	r2, r2, #17
 800354a:	430a      	orrs	r2, r1
 800354c:	492a      	ldr	r1, [pc, #168]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	610b      	str	r3, [r1, #16]
 8003552:	e027      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d112      	bne.n	8003580 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	0211      	lsls	r1, r2, #8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6912      	ldr	r2, [r2, #16]
 8003570:	0852      	lsrs	r2, r2, #1
 8003572:	3a01      	subs	r2, #1
 8003574:	0552      	lsls	r2, r2, #21
 8003576:	430a      	orrs	r2, r1
 8003578:	491f      	ldr	r1, [pc, #124]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]
 800357e:	e011      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	0211      	lsls	r1, r2, #8
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6952      	ldr	r2, [r2, #20]
 8003596:	0852      	lsrs	r2, r2, #1
 8003598:	3a01      	subs	r2, #1
 800359a:	0652      	lsls	r2, r2, #25
 800359c:	430a      	orrs	r2, r1
 800359e:	4916      	ldr	r1, [pc, #88]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe fb0a 	bl	8001bc8 <HAL_GetTick>
 80035b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b6:	e009      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b8:	f7fe fb06 	bl	8001bc8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d902      	bls.n	80035cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	73fb      	strb	r3, [r7, #15]
          break;
 80035ca:	e005      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ef      	beq.n	80035b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4904      	ldr	r1, [pc, #16]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d10d      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
       ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
       ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d047      	beq.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	e044      	b.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d018      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0x86>
 8003650:	2b03      	cmp	r3, #3
 8003652:	d825      	bhi.n	80036a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003654:	2b01      	cmp	r3, #1
 8003656:	d002      	beq.n	800365e <RCCEx_PLLSAI2_Config+0x62>
 8003658:	2b02      	cmp	r3, #2
 800365a:	d009      	beq.n	8003670 <RCCEx_PLLSAI2_Config+0x74>
 800365c:	e020      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800365e:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11d      	bne.n	80036a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e01a      	b.n	80036a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e013      	b.n	80036aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003682:	4b4c      	ldr	r3, [pc, #304]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800368e:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800369e:	e006      	b.n	80036ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e004      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10d      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	430b      	orrs	r3, r1
 80036cc:	4939      	ldr	r1, [pc, #228]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d167      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a35      	ldr	r2, [pc, #212]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe fa70 	bl	8001bc8 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ea:	e009      	b.n	8003700 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ec:	f7fe fa6c 	bl	8001bc8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	73fb      	strb	r3, [r7, #15]
        break;
 80036fe:	e005      	b.n	800370c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ef      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d14a      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d111      	bne.n	800373c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	0211      	lsls	r1, r2, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	0912      	lsrs	r2, r2, #4
 8003730:	0452      	lsls	r2, r2, #17
 8003732:	430a      	orrs	r2, r1
 8003734:	491f      	ldr	r1, [pc, #124]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	614b      	str	r3, [r1, #20]
 800373a:	e011      	b.n	8003760 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	0211      	lsls	r1, r2, #8
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6912      	ldr	r2, [r2, #16]
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0652      	lsls	r2, r2, #25
 8003758:	430a      	orrs	r2, r1
 800375a:	4916      	ldr	r1, [pc, #88]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fa2c 	bl	8001bc8 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003774:	f7fe fa28 	bl	8001bc8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
          break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000

080037b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e095      	b.n	80038f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d009      	beq.n	80037f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
 80037e2:	e005      	b.n	80037f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd ffaa 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003830:	d902      	bls.n	8003838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e002      	b.n	800383e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800383c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003846:	d007      	beq.n	8003858 <HAL_SPI_Init+0xa0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	f003 0204 	and.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_SPI_Transmit+0x22>
 800391c:	2302      	movs	r3, #2
 800391e:	e15f      	b.n	8003be0 <HAL_SPI_Transmit+0x2e2>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003928:	f7fe f94e 	bl	8001bc8 <HAL_GetTick>
 800392c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003942:	e148      	b.n	8003bd6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_SPI_Transmit+0x52>
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003954:	e13f      	b.n	8003bd6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d10f      	bne.n	80039c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d007      	beq.n	80039e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e8:	d94f      	bls.n	8003a8a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Transmit+0xfa>
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d142      	bne.n	8003a7e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c9a      	adds	r2, r3, #2
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a1c:	e02f      	b.n	8003a7e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d112      	bne.n	8003a52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	881a      	ldrh	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a50:	e015      	b.n	8003a7e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a52:	f7fe f8b9 	bl	8001bc8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d803      	bhi.n	8003a6a <HAL_SPI_Transmit+0x16c>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d102      	bne.n	8003a70 <HAL_SPI_Transmit+0x172>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003a7c:	e0ab      	b.n	8003bd6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ca      	bne.n	8003a1e <HAL_SPI_Transmit+0x120>
 8003a88:	e080      	b.n	8003b8c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x19a>
 8003a92:	8afb      	ldrh	r3, [r7, #22]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d174      	bne.n	8003b82 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d912      	bls.n	8003ac8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b02      	subs	r3, #2
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac6:	e05c      	b.n	8003b82 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	7812      	ldrb	r2, [r2, #0]
 8003ad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003aee:	e048      	b.n	8003b82 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d12b      	bne.n	8003b56 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d912      	bls.n	8003b2e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b02      	subs	r3, #2
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b2c:	e029      	b.n	8003b82 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b54:	e015      	b.n	8003b82 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b56:	f7fe f837 	bl	8001bc8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d803      	bhi.n	8003b6e <HAL_SPI_Transmit+0x270>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_Transmit+0x276>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003b80:	e029      	b.n	8003bd6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1b1      	bne.n	8003af0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fb69 	bl	8004268 <SPI_EndRxTxTransaction>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e003      	b.n	8003bd6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x26>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e20a      	b.n	8004024 <HAL_SPI_TransmitReceive+0x43c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c16:	f7fd ffd7 	bl	8001bc8 <HAL_GetTick>
 8003c1a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c22:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c32:	7efb      	ldrb	r3, [r7, #27]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d00e      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x6e>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d106      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x66>
 8003c48:	7efb      	ldrb	r3, [r7, #27]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d003      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c54:	e1e0      	b.n	8004018 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x80>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x80>
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c6e:	e1d3      	b.n	8004018 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d003      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2205      	movs	r2, #5
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cc6:	d802      	bhi.n	8003cce <HAL_SPI_TransmitReceive+0xe6>
 8003cc8:	8a3b      	ldrh	r3, [r7, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d908      	bls.n	8003ce0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	e007      	b.n	8003cf0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d007      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d16:	f240 8081 	bls.w	8003e1c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x140>
 8003d22:	8a7b      	ldrh	r3, [r7, #18]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d16d      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4c:	e05a      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11b      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1ac>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x1ac>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d113      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d11c      	bne.n	8003ddc <HAL_SPI_TransmitReceive+0x1f4>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	b292      	uxth	r2, r2
 8003dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ddc:	f7fd fef4 	bl	8001bc8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d80b      	bhi.n	8003e04 <HAL_SPI_TransmitReceive+0x21c>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d007      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003e02:	e109      	b.n	8004018 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d19f      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x166>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d199      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x166>
 8003e1a:	e0e3      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x244>
 8003e24:	8a7b      	ldrh	r3, [r7, #18]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	f040 80cf 	bne.w	8003fca <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d912      	bls.n	8003e5c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b02      	subs	r3, #2
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5a:	e0b6      	b.n	8003fca <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e82:	e0a2      	b.n	8003fca <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d134      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x314>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02f      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x314>
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d12c      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d912      	bls.n	8003ed2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b02      	subs	r3, #2
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed0:	e012      	b.n	8003ef8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d148      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x3b4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d042      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d923      	bls.n	8003f6a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	1c9a      	adds	r2, r3, #2
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b02      	subs	r3, #2
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d81f      	bhi.n	8003f98 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	e016      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f103 020c 	add.w	r2, r3, #12
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f9c:	f7fd fe14 	bl	8001bc8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d803      	bhi.n	8003fb4 <HAL_SPI_TransmitReceive+0x3cc>
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x3d2>
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003fc8:	e026      	b.n	8004018 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f47f af57 	bne.w	8003e84 <HAL_SPI_TransmitReceive+0x29c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f47f af50 	bne.w	8003e84 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f93d 	bl	8004268 <SPI_EndRxTxTransaction>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e003      	b.n	8004018 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800403c:	f7fd fdc4 	bl	8001bc8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4413      	add	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800404c:	f7fd fdbc 	bl	8001bc8 <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004052:	4b39      	ldr	r3, [pc, #228]	; (8004138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	015b      	lsls	r3, r3, #5
 8004058:	0d1b      	lsrs	r3, r3, #20
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	e054      	b.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d050      	beq.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406c:	f7fd fdac 	bl	8001bc8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	429a      	cmp	r2, r3
 800407a:	d902      	bls.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d13d      	bne.n	80040fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d111      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	d004      	beq.n	80040b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d107      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c8:	d10f      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e017      	b.n	800412e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3b01      	subs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d19b      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000004 	.word	0x20000004

0800413c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800414e:	f7fd fd3b 	bl	8001bc8 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4413      	add	r3, r2
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800415e:	f7fd fd33 	bl	8001bc8 <HAL_GetTick>
 8004162:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00da      	lsls	r2, r3, #3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	0d1b      	lsrs	r3, r3, #20
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004184:	e060      	b.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800418c:	d107      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800419c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d050      	beq.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a6:	f7fd fd0f 	bl	8001bc8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d902      	bls.n	80041bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d13d      	bne.n	8004238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d4:	d111      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041de:	d004      	beq.n	80041ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d107      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004202:	d10f      	bne.n	8004224 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e010      	b.n	800425a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3b01      	subs	r3, #1
 8004246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d196      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000004 	.word	0x20000004

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff ff5b 	bl	800413c <SPI_WaitFifoStateUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e027      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fec0 	bl	800402c <SPI_WaitFlagStateUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e014      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff ff34 	bl	800413c <SPI_WaitFifoStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e000      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e040      	b.n	8004388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd fa66 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fb6a 	bl	8004a14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8af 	bl	80044a4 <UART_SetConfig>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fbe9 	bl	8004b58 <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d178      	bne.n	800449a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_UART_Transmit+0x24>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e071      	b.n	800449c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fd fbff 	bl	8001bc8 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d108      	bne.n	80043f8 <HAL_UART_Transmit+0x68>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e003      	b.n	8004400 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004400:	e030      	b.n	8004464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fc4b 	bl	8004ca8 <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e03c      	b.n	800449c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	b292      	uxth	r2, r2
 8004436:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	3302      	adds	r3, #2
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e008      	b.n	8004452 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b292      	uxth	r2, r2
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1c8      	bne.n	8004402 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fc14 	bl	8004ca8 <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e005      	b.n	800449c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4ba4      	ldr	r3, [pc, #656]	; (8004764 <UART_SetConfig+0x2c0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044dc:	430b      	orrs	r3, r1
 80044de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a99      	ldr	r2, [pc, #612]	; (8004768 <UART_SetConfig+0x2c4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	4313      	orrs	r3, r2
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a90      	ldr	r2, [pc, #576]	; (800476c <UART_SetConfig+0x2c8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d126      	bne.n	800457c <UART_SetConfig+0xd8>
 800452e:	4b90      	ldr	r3, [pc, #576]	; (8004770 <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b03      	cmp	r3, #3
 800453a:	d81b      	bhi.n	8004574 <UART_SetConfig+0xd0>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0xa0>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004555 	.word	0x08004555
 8004548:	08004565 	.word	0x08004565
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800456d 	.word	0x0800456d
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e116      	b.n	800478a <UART_SetConfig+0x2e6>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e112      	b.n	800478a <UART_SetConfig+0x2e6>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e10e      	b.n	800478a <UART_SetConfig+0x2e6>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e10a      	b.n	800478a <UART_SetConfig+0x2e6>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e106      	b.n	800478a <UART_SetConfig+0x2e6>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7c      	ldr	r2, [pc, #496]	; (8004774 <UART_SetConfig+0x2d0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d138      	bne.n	80045f8 <UART_SetConfig+0x154>
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <UART_SetConfig+0x2cc>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d82d      	bhi.n	80045f0 <UART_SetConfig+0x14c>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0xf8>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080045f1 	.word	0x080045f1
 80045a4:	080045f1 	.word	0x080045f1
 80045a8:	080045f1 	.word	0x080045f1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045f1 	.word	0x080045f1
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045f1 	.word	0x080045f1
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e0d8      	b.n	800478a <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e0d4      	b.n	800478a <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e0d0      	b.n	800478a <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e0cc      	b.n	800478a <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e0c8      	b.n	800478a <UART_SetConfig+0x2e6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <UART_SetConfig+0x2d4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d125      	bne.n	800464e <UART_SetConfig+0x1aa>
 8004602:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d016      	beq.n	800463e <UART_SetConfig+0x19a>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d818      	bhi.n	8004646 <UART_SetConfig+0x1a2>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d00a      	beq.n	800462e <UART_SetConfig+0x18a>
 8004618:	2b20      	cmp	r3, #32
 800461a:	d814      	bhi.n	8004646 <UART_SetConfig+0x1a2>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <UART_SetConfig+0x182>
 8004620:	2b10      	cmp	r3, #16
 8004622:	d008      	beq.n	8004636 <UART_SetConfig+0x192>
 8004624:	e00f      	b.n	8004646 <UART_SetConfig+0x1a2>
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462c:	e0ad      	b.n	800478a <UART_SetConfig+0x2e6>
 800462e:	2302      	movs	r3, #2
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004634:	e0a9      	b.n	800478a <UART_SetConfig+0x2e6>
 8004636:	2304      	movs	r3, #4
 8004638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463c:	e0a5      	b.n	800478a <UART_SetConfig+0x2e6>
 800463e:	2308      	movs	r3, #8
 8004640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004644:	e0a1      	b.n	800478a <UART_SetConfig+0x2e6>
 8004646:	2310      	movs	r3, #16
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464c:	e09d      	b.n	800478a <UART_SetConfig+0x2e6>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <UART_SetConfig+0x2d8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d125      	bne.n	80046a4 <UART_SetConfig+0x200>
 8004658:	4b45      	ldr	r3, [pc, #276]	; (8004770 <UART_SetConfig+0x2cc>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004662:	2bc0      	cmp	r3, #192	; 0xc0
 8004664:	d016      	beq.n	8004694 <UART_SetConfig+0x1f0>
 8004666:	2bc0      	cmp	r3, #192	; 0xc0
 8004668:	d818      	bhi.n	800469c <UART_SetConfig+0x1f8>
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d00a      	beq.n	8004684 <UART_SetConfig+0x1e0>
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d814      	bhi.n	800469c <UART_SetConfig+0x1f8>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <UART_SetConfig+0x1d8>
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d008      	beq.n	800468c <UART_SetConfig+0x1e8>
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x1f8>
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e082      	b.n	800478a <UART_SetConfig+0x2e6>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e07e      	b.n	800478a <UART_SetConfig+0x2e6>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e07a      	b.n	800478a <UART_SetConfig+0x2e6>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e076      	b.n	800478a <UART_SetConfig+0x2e6>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e072      	b.n	800478a <UART_SetConfig+0x2e6>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a35      	ldr	r2, [pc, #212]	; (8004780 <UART_SetConfig+0x2dc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12a      	bne.n	8004704 <UART_SetConfig+0x260>
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <UART_SetConfig+0x2cc>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d01a      	beq.n	80046f4 <UART_SetConfig+0x250>
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d81b      	bhi.n	80046fc <UART_SetConfig+0x258>
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d00c      	beq.n	80046e4 <UART_SetConfig+0x240>
 80046ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ce:	d815      	bhi.n	80046fc <UART_SetConfig+0x258>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0x238>
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d8:	d008      	beq.n	80046ec <UART_SetConfig+0x248>
 80046da:	e00f      	b.n	80046fc <UART_SetConfig+0x258>
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e2:	e052      	b.n	800478a <UART_SetConfig+0x2e6>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e04e      	b.n	800478a <UART_SetConfig+0x2e6>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e04a      	b.n	800478a <UART_SetConfig+0x2e6>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e046      	b.n	800478a <UART_SetConfig+0x2e6>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e042      	b.n	800478a <UART_SetConfig+0x2e6>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a17      	ldr	r2, [pc, #92]	; (8004768 <UART_SetConfig+0x2c4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d13a      	bne.n	8004784 <UART_SetConfig+0x2e0>
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <UART_SetConfig+0x2cc>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800471c:	d01a      	beq.n	8004754 <UART_SetConfig+0x2b0>
 800471e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004722:	d81b      	bhi.n	800475c <UART_SetConfig+0x2b8>
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d00c      	beq.n	8004744 <UART_SetConfig+0x2a0>
 800472a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472e:	d815      	bhi.n	800475c <UART_SetConfig+0x2b8>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <UART_SetConfig+0x298>
 8004734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004738:	d008      	beq.n	800474c <UART_SetConfig+0x2a8>
 800473a:	e00f      	b.n	800475c <UART_SetConfig+0x2b8>
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e022      	b.n	800478a <UART_SetConfig+0x2e6>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e01e      	b.n	800478a <UART_SetConfig+0x2e6>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e01a      	b.n	800478a <UART_SetConfig+0x2e6>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e016      	b.n	800478a <UART_SetConfig+0x2e6>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004762:	e012      	b.n	800478a <UART_SetConfig+0x2e6>
 8004764:	efff69f3 	.word	0xefff69f3
 8004768:	40008000 	.word	0x40008000
 800476c:	40013800 	.word	0x40013800
 8004770:	40021000 	.word	0x40021000
 8004774:	40004400 	.word	0x40004400
 8004778:	40004800 	.word	0x40004800
 800477c:	40004c00 	.word	0x40004c00
 8004780:	40005000 	.word	0x40005000
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a9f      	ldr	r2, [pc, #636]	; (8004a0c <UART_SetConfig+0x568>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d17a      	bne.n	800488a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004798:	2b08      	cmp	r3, #8
 800479a:	d824      	bhi.n	80047e6 <UART_SetConfig+0x342>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0x300>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047e7 	.word	0x080047e7
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	080047d7 	.word	0x080047d7
 80047b8:	080047e7 	.word	0x080047e7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047e7 	.word	0x080047e7
 80047c4:	080047df 	.word	0x080047df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7fe faae 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80047cc:	61f8      	str	r0, [r7, #28]
        break;
 80047ce:	e010      	b.n	80047f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <UART_SetConfig+0x56c>)
 80047d2:	61fb      	str	r3, [r7, #28]
        break;
 80047d4:	e00d      	b.n	80047f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d6:	f7fe fa0f 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80047da:	61f8      	str	r0, [r7, #28]
        break;
 80047dc:	e009      	b.n	80047f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e2:	61fb      	str	r3, [r7, #28]
        break;
 80047e4:	e005      	b.n	80047f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80fb 	beq.w	80049f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	429a      	cmp	r2, r3
 8004808:	d305      	bcc.n	8004816 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	429a      	cmp	r2, r3
 8004814:	d903      	bls.n	800481e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800481c:	e0e8      	b.n	80049f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2200      	movs	r2, #0
 8004822:	461c      	mov	r4, r3
 8004824:	4615      	mov	r5, r2
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	022b      	lsls	r3, r5, #8
 8004830:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004834:	0222      	lsls	r2, r4, #8
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	6849      	ldr	r1, [r1, #4]
 800483a:	0849      	lsrs	r1, r1, #1
 800483c:	2000      	movs	r0, #0
 800483e:	4688      	mov	r8, r1
 8004840:	4681      	mov	r9, r0
 8004842:	eb12 0a08 	adds.w	sl, r2, r8
 8004846:	eb43 0b09 	adc.w	fp, r3, r9
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004858:	4650      	mov	r0, sl
 800485a:	4659      	mov	r1, fp
 800485c:	f7fc f80e 	bl	800087c <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486e:	d308      	bcc.n	8004882 <UART_SetConfig+0x3de>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004876:	d204      	bcs.n	8004882 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	60da      	str	r2, [r3, #12]
 8004880:	e0b6      	b.n	80049f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004888:	e0b2      	b.n	80049f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004892:	d15e      	bne.n	8004952 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004898:	2b08      	cmp	r3, #8
 800489a:	d828      	bhi.n	80048ee <UART_SetConfig+0x44a>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0x400>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048df 	.word	0x080048df
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048ef 	.word	0x080048ef
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe fa2e 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80048cc:	61f8      	str	r0, [r7, #28]
        break;
 80048ce:	e014      	b.n	80048fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe fa40 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e010      	b.n	80048fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <UART_SetConfig+0x56c>)
 80048da:	61fb      	str	r3, [r7, #28]
        break;
 80048dc:	e00d      	b.n	80048fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe f98b 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80048e2:	61f8      	str	r0, [r7, #28]
        break;
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e005      	b.n	80048fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d077      	beq.n	80049f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005a      	lsls	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d916      	bls.n	800494a <UART_SetConfig+0x4a6>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d212      	bcs.n	800494a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f023 030f 	bic.w	r3, r3, #15
 800492c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	b29a      	uxth	r2, r3
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	4313      	orrs	r3, r2
 800493e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	8afa      	ldrh	r2, [r7, #22]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e052      	b.n	80049f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004950:	e04e      	b.n	80049f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004956:	2b08      	cmp	r3, #8
 8004958:	d827      	bhi.n	80049aa <UART_SetConfig+0x506>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x4bc>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	0800498d 	.word	0x0800498d
 8004968:	08004995 	.word	0x08004995
 800496c:	080049ab 	.word	0x080049ab
 8004970:	0800499b 	.word	0x0800499b
 8004974:	080049ab 	.word	0x080049ab
 8004978:	080049ab 	.word	0x080049ab
 800497c:	080049ab 	.word	0x080049ab
 8004980:	080049a3 	.word	0x080049a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe f9d0 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8004988:	61f8      	str	r0, [r7, #28]
        break;
 800498a:	e014      	b.n	80049b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498c:	f7fe f9e2 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e010      	b.n	80049b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004994:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <UART_SetConfig+0x56c>)
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e00d      	b.n	80049b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499a:	f7fe f92d 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 800499e:	61f8      	str	r0, [r7, #28]
        break;
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e005      	b.n	80049b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049b4:	bf00      	nop
    }

    if (pclk != 0U)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085a      	lsrs	r2, r3, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	441a      	add	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	d909      	bls.n	80049ea <UART_SetConfig+0x546>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d205      	bcs.n	80049ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e002      	b.n	80049f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40008000 	.word	0x40008000
 8004a10:	00f42400 	.word	0x00f42400

08004a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01a      	beq.n	8004b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b12:	d10a      	bne.n	8004b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b098      	sub	sp, #96	; 0x60
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b68:	f7fd f82e 	bl	8001bc8 <HAL_GetTick>
 8004b6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d12e      	bne.n	8004bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f88c 	bl	8004ca8 <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d021      	beq.n	8004bda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004baa:	653b      	str	r3, [r7, #80]	; 0x50
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e6      	bne.n	8004b96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e062      	b.n	8004ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d149      	bne.n	8004c7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f856 	bl	8004ca8 <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d03c      	beq.n	8004c7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	617b      	str	r3, [r7, #20]
   return(result);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e011      	b.n	8004ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3758      	adds	r7, #88	; 0x58
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb8:	e049      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d045      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fc ff81 	bl	8001bc8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e048      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d031      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d110      	bne.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f838 	bl	8004d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e029      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d111      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f81e 	bl	8004d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e00f      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d0a6      	beq.n	8004cba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b095      	sub	sp, #84	; 0x54
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e6      	bne.n	8004d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d118      	bne.n	8004e1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 0310 	bic.w	r3, r3, #16
 8004e00:	647b      	str	r3, [r7, #68]	; 0x44
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e6      	bne.n	8004dec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e32:	bf00      	nop
 8004e34:	3754      	adds	r7, #84	; 0x54
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e44:	4904      	ldr	r1, [pc, #16]	; (8004e58 <MX_FATFS_Init+0x18>)
 8004e46:	4805      	ldr	r0, [pc, #20]	; (8004e5c <MX_FATFS_Init+0x1c>)
 8004e48:	f003 f9c6 	bl	80081d8 <FATFS_LinkDriver>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <MX_FATFS_Init+0x20>)
 8004e52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2000019c 	.word	0x2000019c
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	20000198 	.word	0x20000198

08004e64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc f821 	bl	8000ec8 <SD_disk_initialize>
 8004e86:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fc f8f9 	bl	8001094 <SD_disk_status>
 8004ea2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004ebc:	7bf8      	ldrb	r0, [r7, #15]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	f7fc f8fc 	bl	80010c0 <SD_disk_read>
 8004ec8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004ee2:	7bf8      	ldrb	r0, [r7, #15]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	f7fc f953 	bl	8001194 <SD_disk_write>
 8004eee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	603a      	str	r2, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	460b      	mov	r3, r1
 8004f06:	71bb      	strb	r3, [r7, #6]
DRESULT USER_ioctl (
 8004f08:	f107 0318 	add.w	r3, r7, #24
 8004f0c:	60fb      	str	r3, [r7, #12]
	{
	  /* USER CODE BEGIN IOCTL */
	  return SD_disk_ioctl(pdrv, cmd, buff);
  /* USER CODE END IOCTL */
	}
}
 8004f0e:	bf00      	nop
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <disk_status+0x30>)
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	79fa      	ldrb	r2, [r7, #7]
 8004f34:	4905      	ldr	r1, [pc, #20]	; (8004f4c <disk_status+0x30>)
 8004f36:	440a      	add	r2, r1
 8004f38:	7a12      	ldrb	r2, [r2, #8]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4798      	blx	r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200003c8 	.word	0x200003c8

08004f50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <disk_initialize+0x48>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d111      	bne.n	8004f8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <disk_initialize+0x48>)
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <disk_initialize+0x48>)
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	79fa      	ldrb	r2, [r7, #7]
 8004f7e:	4906      	ldr	r1, [pc, #24]	; (8004f98 <disk_initialize+0x48>)
 8004f80:	440a      	add	r2, r1
 8004f82:	7a12      	ldrb	r2, [r2, #8]
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200003c8 	.word	0x200003c8

08004f9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <disk_read+0x3c>)
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	689c      	ldr	r4, [r3, #8]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <disk_read+0x3c>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	7a18      	ldrb	r0, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	47a0      	blx	r4
 8004fc8:	4603      	mov	r3, r0
 8004fca:	75fb      	strb	r3, [r7, #23]
  return res;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd90      	pop	{r4, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200003c8 	.word	0x200003c8

08004fdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004fdc:	b590      	push	{r4, r7, lr}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <disk_write+0x3c>)
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68dc      	ldr	r4, [r3, #12]
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <disk_write+0x3c>)
 8004ffc:	4413      	add	r3, r2
 8004ffe:	7a18      	ldrb	r0, [r3, #8]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	47a0      	blx	r4
 8005008:	4603      	mov	r3, r0
 800500a:	75fb      	strb	r3, [r7, #23]
  return res;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	200003c8 	.word	0x200003c8

0800501c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	603a      	str	r2, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
 8005028:	460b      	mov	r3, r1
 800502a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <disk_ioctl+0x38>)
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	79fa      	ldrb	r2, [r7, #7]
 800503a:	4906      	ldr	r1, [pc, #24]	; (8005054 <disk_ioctl+0x38>)
 800503c:	440a      	add	r2, r1
 800503e:	7a10      	ldrb	r0, [r2, #8]
 8005040:	79b9      	ldrb	r1, [r7, #6]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4798      	blx	r3
 8005046:	4603      	mov	r3, r0
 8005048:	73fb      	strb	r3, [r7, #15]
  return res;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200003c8 	.word	0x200003c8

08005058 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005068:	89fb      	ldrh	r3, [r7, #14]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b21a      	sxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b21b      	sxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b21b      	sxth	r3, r3
 8005078:	81fb      	strh	r3, [r7, #14]
	return rv;
 800507a:	89fb      	ldrh	r3, [r7, #14]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3303      	adds	r3, #3
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	3202      	adds	r2, #2
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	3201      	adds	r2, #1
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
	return rv;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	887a      	ldrh	r2, [r7, #2]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	1c53      	adds	r3, r2, #1
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	6179      	str	r1, [r7, #20]
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f1      	bne.n	8005176 <mem_cpy+0x1a>
	}
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	617a      	str	r2, [r7, #20]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3b01      	subs	r3, #1
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f3      	bne.n	80051ae <mem_set+0x10>
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	61ba      	str	r2, [r7, #24]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3b01      	subs	r3, #1
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <mem_cmp+0x40>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0eb      	beq.n	80051ec <mem_cmp+0x18>

	return r;
 8005214:	697b      	ldr	r3, [r7, #20]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3724      	adds	r7, #36	; 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800522c:	e002      	b.n	8005234 <chk_chr+0x12>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3301      	adds	r3, #1
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <chk_chr+0x26>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	4293      	cmp	r3, r2
 8005246:	d1f2      	bne.n	800522e <chk_chr+0xc>
	return *str;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	781b      	ldrb	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e029      	b.n	80052c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <chk_lock+0xb4>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	4413      	add	r3, r2
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01d      	beq.n	80052b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800527a:	4a24      	ldr	r2, [pc, #144]	; (800530c <chk_lock+0xb4>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	4413      	add	r3, r2
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d116      	bne.n	80052ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <chk_lock+0xb4>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	3304      	adds	r3, #4
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800529c:	429a      	cmp	r2, r3
 800529e:	d10c      	bne.n	80052ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80052a0:	4a1a      	ldr	r2, [pc, #104]	; (800530c <chk_lock+0xb4>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	3308      	adds	r3, #8
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d102      	bne.n	80052ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80052b4:	e007      	b.n	80052c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80052b6:	2301      	movs	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d9d2      	bls.n	800526c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d109      	bne.n	80052e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <chk_lock+0x80>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d101      	bne.n	80052dc <chk_lock+0x84>
 80052d8:	2300      	movs	r3, #0
 80052da:	e010      	b.n	80052fe <chk_lock+0xa6>
 80052dc:	2312      	movs	r3, #18
 80052de:	e00e      	b.n	80052fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d108      	bne.n	80052f8 <chk_lock+0xa0>
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <chk_lock+0xb4>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	4413      	add	r3, r2
 80052ee:	330c      	adds	r3, #12
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	d101      	bne.n	80052fc <chk_lock+0xa4>
 80052f8:	2310      	movs	r3, #16
 80052fa:	e000      	b.n	80052fe <chk_lock+0xa6>
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	200001a8 	.word	0x200001a8

08005310 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e002      	b.n	8005322 <enq_lock+0x12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3301      	adds	r3, #1
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d806      	bhi.n	8005336 <enq_lock+0x26>
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <enq_lock+0x40>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	4413      	add	r3, r2
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f2      	bne.n	800531c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b02      	cmp	r3, #2
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200001a8 	.word	0x200001a8

08005354 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e01f      	b.n	80053a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005364:	4a41      	ldr	r2, [pc, #260]	; (800546c <inc_lock+0x118>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	4413      	add	r3, r2
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d113      	bne.n	800539e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005376:	4a3d      	ldr	r2, [pc, #244]	; (800546c <inc_lock+0x118>)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005386:	429a      	cmp	r2, r3
 8005388:	d109      	bne.n	800539e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <inc_lock+0x118>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	4413      	add	r3, r2
 8005392:	3308      	adds	r3, #8
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800539a:	429a      	cmp	r2, r3
 800539c:	d006      	beq.n	80053ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d9dc      	bls.n	8005364 <inc_lock+0x10>
 80053aa:	e000      	b.n	80053ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80053ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d132      	bne.n	800541a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <inc_lock+0x6c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d806      	bhi.n	80053d4 <inc_lock+0x80>
 80053c6:	4a29      	ldr	r2, [pc, #164]	; (800546c <inc_lock+0x118>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4413      	add	r3, r2
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f2      	bne.n	80053ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d101      	bne.n	80053de <inc_lock+0x8a>
 80053da:	2300      	movs	r3, #0
 80053dc:	e040      	b.n	8005460 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4922      	ldr	r1, [pc, #136]	; (800546c <inc_lock+0x118>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	440b      	add	r3, r1
 80053ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	491e      	ldr	r1, [pc, #120]	; (800546c <inc_lock+0x118>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	440b      	add	r3, r1
 80053f8:	3304      	adds	r3, #4
 80053fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	491a      	ldr	r1, [pc, #104]	; (800546c <inc_lock+0x118>)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	440b      	add	r3, r1
 8005408:	3308      	adds	r3, #8
 800540a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <inc_lock+0x118>)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4413      	add	r3, r2
 8005414:	330c      	adds	r3, #12
 8005416:	2200      	movs	r2, #0
 8005418:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <inc_lock+0xe0>
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <inc_lock+0x118>)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	4413      	add	r3, r2
 8005428:	330c      	adds	r3, #12
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <inc_lock+0xe0>
 8005430:	2300      	movs	r3, #0
 8005432:	e015      	b.n	8005460 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d108      	bne.n	800544c <inc_lock+0xf8>
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <inc_lock+0x118>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	330c      	adds	r3, #12
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	e001      	b.n	8005450 <inc_lock+0xfc>
 800544c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005450:	4906      	ldr	r1, [pc, #24]	; (800546c <inc_lock+0x118>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	440b      	add	r3, r1
 8005458:	330c      	adds	r3, #12
 800545a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	200001a8 	.word	0x200001a8

08005470 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d825      	bhi.n	80054d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005484:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <dec_lock+0x74>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	330c      	adds	r3, #12
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d101      	bne.n	800549e <dec_lock+0x2e>
 800549a:	2300      	movs	r3, #0
 800549c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <dec_lock+0x3a>
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80054aa:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <dec_lock+0x74>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	330c      	adds	r3, #12
 80054b4:	89fa      	ldrh	r2, [r7, #14]
 80054b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <dec_lock+0x5a>
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <dec_lock+0x74>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	4413      	add	r3, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	737b      	strb	r3, [r7, #13]
 80054ce:	e001      	b.n	80054d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80054d0:	2302      	movs	r3, #2
 80054d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80054d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	200001a8 	.word	0x200001a8

080054e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e010      	b.n	8005518 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80054f6:	4a0d      	ldr	r2, [pc, #52]	; (800552c <clear_lock+0x44>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	4413      	add	r3, r2
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d105      	bne.n	8005512 <clear_lock+0x2a>
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <clear_lock+0x44>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4413      	add	r3, r2
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d9eb      	bls.n	80054f6 <clear_lock+0xe>
	}
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	200001a8 	.word	0x200001a8

08005530 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	78db      	ldrb	r3, [r3, #3]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d034      	beq.n	80055ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7858      	ldrb	r0, [r3, #1]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005554:	2301      	movs	r3, #1
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f7ff fd40 	bl	8004fdc <disk_write>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
 8005566:	e022      	b.n	80055ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	429a      	cmp	r2, r3
 800557c:	d217      	bcs.n	80055ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	789b      	ldrb	r3, [r3, #2]
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	e010      	b.n	80055a8 <sync_window+0x78>
					wsect += fs->fsize;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	7858      	ldrb	r0, [r3, #1]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800559a:	2301      	movs	r3, #1
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	f7ff fd1d 	bl	8004fdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d8eb      	bhi.n	8005586 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d01b      	beq.n	8005608 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ffad 	bl	8005530 <sync_window>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d113      	bne.n	8005608 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7858      	ldrb	r0, [r3, #1]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055ea:	2301      	movs	r3, #1
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	f7ff fcd5 	bl	8004f9c <disk_read>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff87 	bl	8005530 <sync_window>
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d159      	bne.n	80056e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d149      	bne.n	80056c8 <sync_fs+0xb4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	791b      	ldrb	r3, [r3, #4]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d145      	bne.n	80056c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	899b      	ldrh	r3, [r3, #12]
 8005646:	461a      	mov	r2, r3
 8005648:	2100      	movs	r1, #0
 800564a:	f7ff fda8 	bl	800519e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3338      	adds	r3, #56	; 0x38
 8005652:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005656:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fd37 	bl	80050ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3338      	adds	r3, #56	; 0x38
 8005664:	4921      	ldr	r1, [pc, #132]	; (80056ec <sync_fs+0xd8>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fd4c 	bl	8005104 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3338      	adds	r3, #56	; 0x38
 8005670:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005674:	491e      	ldr	r1, [pc, #120]	; (80056f0 <sync_fs+0xdc>)
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fd44 	bl	8005104 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3338      	adds	r3, #56	; 0x38
 8005680:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7ff fd3a 	bl	8005104 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3338      	adds	r3, #56	; 0x38
 8005694:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7ff fd30 	bl	8005104 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7858      	ldrb	r0, [r3, #1]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056bc:	2301      	movs	r3, #1
 80056be:	f7ff fc8d 	bl	8004fdc <disk_write>
			fs->fsi_flag = 0;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fca3 	bl	800501c <disk_ioctl>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <sync_fs+0xcc>
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	41615252 	.word	0x41615252
 80056f0:	61417272 	.word	0x61417272

080056f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	3b02      	subs	r3, #2
 8005702:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	3b02      	subs	r3, #2
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d301      	bcc.n	8005714 <clust2sect+0x20>
 8005710:	2300      	movs	r3, #0
 8005712:	e008      	b.n	8005726 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	461a      	mov	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	fb03 f202 	mul.w	r2, r3, r2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	4413      	add	r3, r2
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d904      	bls.n	8005752 <get_fat+0x20>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005752:	2301      	movs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e0bb      	b.n	80058d0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b03      	cmp	r3, #3
 8005764:	f000 8083 	beq.w	800586e <get_fat+0x13c>
 8005768:	2b03      	cmp	r3, #3
 800576a:	f300 80a7 	bgt.w	80058bc <get_fat+0x18a>
 800576e:	2b01      	cmp	r3, #1
 8005770:	d002      	beq.n	8005778 <get_fat+0x46>
 8005772:	2b02      	cmp	r3, #2
 8005774:	d056      	beq.n	8005824 <get_fat+0xf2>
 8005776:	e0a1      	b.n	80058bc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	899b      	ldrh	r3, [r3, #12]
 800578e:	4619      	mov	r1, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	fbb3 f3f1 	udiv	r3, r3, r1
 8005796:	4413      	add	r3, r2
 8005798:	4619      	mov	r1, r3
 800579a:	6938      	ldr	r0, [r7, #16]
 800579c:	f7ff ff0c 	bl	80055b8 <move_window>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 808d 	bne.w	80058c2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	60fa      	str	r2, [r7, #12]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	8992      	ldrh	r2, [r2, #12]
 80057b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80057b6:	fb01 f202 	mul.w	r2, r1, r2
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	899b      	ldrh	r3, [r3, #12]
 80057ce:	4619      	mov	r1, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057d6:	4413      	add	r3, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7ff feec 	bl	80055b8 <move_window>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d16f      	bne.n	80058c6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	899b      	ldrh	r3, [r3, #12]
 80057ea:	461a      	mov	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80057f2:	fb01 f202 	mul.w	r2, r1, r2
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <get_fat+0xe8>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	e002      	b.n	8005820 <get_fat+0xee>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	617b      	str	r3, [r7, #20]
			break;
 8005822:	e055      	b.n	80058d0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	899b      	ldrh	r3, [r3, #12]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	4619      	mov	r1, r3
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	fbb3 f3f1 	udiv	r3, r3, r1
 8005838:	4413      	add	r3, r2
 800583a:	4619      	mov	r1, r3
 800583c:	6938      	ldr	r0, [r7, #16]
 800583e:	f7ff febb 	bl	80055b8 <move_window>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d140      	bne.n	80058ca <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	8992      	ldrh	r2, [r2, #12]
 8005856:	fbb3 f0f2 	udiv	r0, r3, r2
 800585a:	fb00 f202 	mul.w	r2, r0, r2
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	440b      	add	r3, r1
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fbf8 	bl	8005058 <ld_word>
 8005868:	4603      	mov	r3, r0
 800586a:	617b      	str	r3, [r7, #20]
			break;
 800586c:	e030      	b.n	80058d0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	899b      	ldrh	r3, [r3, #12]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	b29b      	uxth	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005882:	4413      	add	r3, r2
 8005884:	4619      	mov	r1, r3
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f7ff fe96 	bl	80055b8 <move_window>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11d      	bne.n	80058ce <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	8992      	ldrh	r2, [r2, #12]
 80058a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80058a4:	fb00 f202 	mul.w	r2, r0, r2
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	440b      	add	r3, r1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fbeb 	bl	8005088 <ld_dword>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058b8:	617b      	str	r3, [r7, #20]
			break;
 80058ba:	e009      	b.n	80058d0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e006      	b.n	80058d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058c2:	bf00      	nop
 80058c4:	e004      	b.n	80058d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058ce:	bf00      	nop
		}
	}

	return val;
 80058d0:	697b      	ldr	r3, [r7, #20]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80058da:	b590      	push	{r4, r7, lr}
 80058dc:	b089      	sub	sp, #36	; 0x24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80058e6:	2302      	movs	r3, #2
 80058e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	f240 8109 	bls.w	8005b04 <put_fat+0x22a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	f080 8103 	bcs.w	8005b04 <put_fat+0x22a>
		switch (fs->fs_type) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b03      	cmp	r3, #3
 8005904:	f000 80b6 	beq.w	8005a74 <put_fat+0x19a>
 8005908:	2b03      	cmp	r3, #3
 800590a:	f300 80fb 	bgt.w	8005b04 <put_fat+0x22a>
 800590e:	2b01      	cmp	r3, #1
 8005910:	d003      	beq.n	800591a <put_fat+0x40>
 8005912:	2b02      	cmp	r3, #2
 8005914:	f000 8083 	beq.w	8005a1e <put_fat+0x144>
 8005918:	e0f4      	b.n	8005b04 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4413      	add	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	899b      	ldrh	r3, [r3, #12]
 8005930:	4619      	mov	r1, r3
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	fbb3 f3f1 	udiv	r3, r3, r1
 8005938:	4413      	add	r3, r2
 800593a:	4619      	mov	r1, r3
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff fe3b 	bl	80055b8 <move_window>
 8005942:	4603      	mov	r3, r0
 8005944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005946:	7ffb      	ldrb	r3, [r7, #31]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 80d4 	bne.w	8005af6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	61ba      	str	r2, [r7, #24]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	8992      	ldrh	r2, [r2, #12]
 800595e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005962:	fb00 f202 	mul.w	r2, r0, r2
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	440b      	add	r3, r1
 800596a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <put_fat+0xb8>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b25b      	sxtb	r3, r3
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	b25a      	sxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	b25b      	sxtb	r3, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	b25b      	sxtb	r3, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e001      	b.n	8005996 <put_fat+0xbc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	899b      	ldrh	r3, [r3, #12]
 80059a8:	4619      	mov	r1, r3
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80059b0:	4413      	add	r3, r2
 80059b2:	4619      	mov	r1, r3
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fdff 	bl	80055b8 <move_window>
 80059ba:	4603      	mov	r3, r0
 80059bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059be:	7ffb      	ldrb	r3, [r7, #31]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 809a 	bne.w	8005afa <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	899b      	ldrh	r3, [r3, #12]
 80059d0:	461a      	mov	r2, r3
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80059d8:	fb00 f202 	mul.w	r2, r0, r2
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	440b      	add	r3, r1
 80059e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <put_fat+0x11a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e00e      	b.n	8005a12 <put_fat+0x138>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b25b      	sxtb	r3, r3
 80059fa:	f023 030f 	bic.w	r3, r3, #15
 80059fe:	b25a      	sxtb	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	b25b      	sxtb	r3, r3
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	b25b      	sxtb	r3, r3
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	70da      	strb	r2, [r3, #3]
			break;
 8005a1c:	e072      	b.n	8005b04 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	899b      	ldrh	r3, [r3, #12]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a32:	4413      	add	r3, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fdbe 	bl	80055b8 <move_window>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d15b      	bne.n	8005afe <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	8992      	ldrh	r2, [r2, #12]
 8005a54:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a58:	fb00 f202 	mul.w	r2, r0, r2
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	440b      	add	r3, r1
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	b292      	uxth	r2, r2
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fb31 	bl	80050ce <st_word>
			fs->wflag = 1;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	70da      	strb	r2, [r3, #3]
			break;
 8005a72:	e047      	b.n	8005b04 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	899b      	ldrh	r3, [r3, #12]
 8005a7c:	089b      	lsrs	r3, r3, #2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a88:	4413      	add	r3, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff fd93 	bl	80055b8 <move_window>
 8005a92:	4603      	mov	r3, r0
 8005a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a96:	7ffb      	ldrb	r3, [r7, #31]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d132      	bne.n	8005b02 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	8992      	ldrh	r2, [r2, #12]
 8005ab0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ab4:	fb00 f202 	mul.w	r2, r0, r2
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	440b      	add	r3, r1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fae3 	bl	8005088 <ld_dword>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ac8:	4323      	orrs	r3, r4
 8005aca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	8992      	ldrh	r2, [r2, #12]
 8005ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ade:	fb00 f202 	mul.w	r2, r0, r2
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fb0b 	bl	8005104 <st_dword>
			fs->wflag = 1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	70da      	strb	r2, [r3, #3]
			break;
 8005af4:	e006      	b.n	8005b04 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b02:	bf00      	nop
		}
	}
	return res;
 8005b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3724      	adds	r7, #36	; 0x24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd90      	pop	{r4, r7, pc}

08005b0e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b088      	sub	sp, #32
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d904      	bls.n	8005b34 <remove_chain+0x26>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d301      	bcc.n	8005b38 <remove_chain+0x2a>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e04b      	b.n	8005bd0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	69b8      	ldr	r0, [r7, #24]
 8005b46:	f7ff fec8 	bl	80058da <put_fat>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b4e:	7ffb      	ldrb	r3, [r7, #31]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <remove_chain+0x4a>
 8005b54:	7ffb      	ldrb	r3, [r7, #31]
 8005b56:	e03b      	b.n	8005bd0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fde9 	bl	8005732 <get_fat>
 8005b60:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d031      	beq.n	8005bcc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <remove_chain+0x64>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e02e      	b.n	8005bd0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d101      	bne.n	8005b7e <remove_chain+0x70>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e028      	b.n	8005bd0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005b7e:	2200      	movs	r2, #0
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	69b8      	ldr	r0, [r7, #24]
 8005b84:	f7ff fea9 	bl	80058da <put_fat>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005b8c:	7ffb      	ldrb	r3, [r7, #31]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <remove_chain+0x88>
 8005b92:	7ffb      	ldrb	r3, [r7, #31]
 8005b94:	e01c      	b.n	8005bd0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	3b02      	subs	r3, #2
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d20b      	bcs.n	8005bbc <remove_chain+0xae>
			fs->free_clst++;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	791b      	ldrb	r3, [r3, #4]
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3c6      	bcc.n	8005b58 <remove_chain+0x4a>
 8005bca:	e000      	b.n	8005bce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005bcc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <create_chain+0x2c>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d31b      	bcc.n	8005c3c <create_chain+0x64>
 8005c04:	2301      	movs	r3, #1
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	e018      	b.n	8005c3c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fd90 	bl	8005732 <get_fat>
 8005c12:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d801      	bhi.n	8005c1e <create_chain+0x46>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e070      	b.n	8005d00 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d101      	bne.n	8005c2a <create_chain+0x52>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	e06a      	b.n	8005d00 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d201      	bcs.n	8005c38 <create_chain+0x60>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	e063      	b.n	8005d00 <create_chain+0x128>
		scl = clst;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d307      	bcc.n	8005c60 <create_chain+0x88>
				ncl = 2;
 8005c50:	2302      	movs	r3, #2
 8005c52:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d901      	bls.n	8005c60 <create_chain+0x88>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e04f      	b.n	8005d00 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fd65 	bl	8005732 <get_fat>
 8005c68:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d003      	beq.n	8005c7e <create_chain+0xa6>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d101      	bne.n	8005c82 <create_chain+0xaa>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	e03e      	b.n	8005d00 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d1da      	bne.n	8005c40 <create_chain+0x68>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e038      	b.n	8005d00 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005c8e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	69f9      	ldr	r1, [r7, #28]
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f7ff fe1f 	bl	80058da <put_fat>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <create_chain+0xe2>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d006      	beq.n	8005cba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6938      	ldr	r0, [r7, #16]
 8005cb2:	f7ff fe12 	bl	80058da <put_fat>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d116      	bne.n	8005cee <create_chain+0x116>
		fs->last_clst = ncl;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	3b02      	subs	r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d804      	bhi.n	8005cde <create_chain+0x106>
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	711a      	strb	r2, [r3, #4]
 8005cec:	e007      	b.n	8005cfe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d102      	bne.n	8005cfa <create_chain+0x122>
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	e000      	b.n	8005cfc <create_chain+0x124>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005cfe:	69fb      	ldr	r3, [r7, #28]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	899b      	ldrh	r3, [r3, #12]
 8005d24:	461a      	mov	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	8952      	ldrh	r2, [r2, #10]
 8005d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	613a      	str	r2, [r7, #16]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <clmt_clust+0x42>
 8005d46:	2300      	movs	r3, #0
 8005d48:	e010      	b.n	8005d6c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d307      	bcc.n	8005d62 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d60:	e7e9      	b.n	8005d36 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005d62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d8e:	d204      	bcs.n	8005d9a <dir_sdi+0x22>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e071      	b.n	8005e82 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <dir_sdi+0x46>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d902      	bls.n	8005dbe <dir_sdi+0x46>
		clst = fs->dirbase;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10c      	bne.n	8005dde <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	8912      	ldrh	r2, [r2, #8]
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d301      	bcc.n	8005dd4 <dir_sdi+0x5c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e056      	b.n	8005e82 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	61da      	str	r2, [r3, #28]
 8005ddc:	e02d      	b.n	8005e3a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	895b      	ldrh	r3, [r3, #10]
 8005de2:	461a      	mov	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	899b      	ldrh	r3, [r3, #12]
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005dee:	e019      	b.n	8005e24 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fc9c 	bl	8005732 <get_fat>
 8005dfa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d101      	bne.n	8005e08 <dir_sdi+0x90>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e03c      	b.n	8005e82 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d904      	bls.n	8005e18 <dir_sdi+0xa0>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d301      	bcc.n	8005e1c <dir_sdi+0xa4>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e032      	b.n	8005e82 <dir_sdi+0x10a>
			ofs -= csz;
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d2e1      	bcs.n	8005df0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	6938      	ldr	r0, [r7, #16]
 8005e30:	f7ff fc60 	bl	80056f4 <clust2sect>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <dir_sdi+0xd4>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e01a      	b.n	8005e82 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	899b      	ldrh	r3, [r3, #12]
 8005e54:	4619      	mov	r1, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	899b      	ldrh	r3, [r3, #12]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e74:	fb00 f202 	mul.w	r2, r0, r2
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	18ca      	adds	r2, r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	3320      	adds	r3, #32
 8005ea0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <dir_next+0x28>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb0:	d301      	bcc.n	8005eb6 <dir_next+0x2c>
 8005eb2:	2304      	movs	r3, #4
 8005eb4:	e0bb      	b.n	800602e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	899b      	ldrh	r3, [r3, #12]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ec2:	fb01 f202 	mul.w	r2, r1, r2
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 809d 	bne.w	8006008 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	8912      	ldrh	r2, [r2, #8]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	f0c0 808d 	bcc.w	8006008 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	61da      	str	r2, [r3, #28]
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	e09a      	b.n	800602e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	899b      	ldrh	r3, [r3, #12]
 8005efc:	461a      	mov	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	8952      	ldrh	r2, [r2, #10]
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d17b      	bne.n	8006008 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f7ff fc0a 	bl	8005732 <get_fat>
 8005f1e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d801      	bhi.n	8005f2a <dir_next+0xa0>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e081      	b.n	800602e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d101      	bne.n	8005f36 <dir_next+0xac>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07b      	b.n	800602e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d359      	bcc.n	8005ff4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	61da      	str	r2, [r3, #28]
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	e06e      	b.n	800602e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f7ff fe3d 	bl	8005bd8 <create_chain>
 8005f5e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <dir_next+0xe0>
 8005f66:	2307      	movs	r3, #7
 8005f68:	e061      	b.n	800602e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <dir_next+0xea>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e05c      	b.n	800602e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d101      	bne.n	8005f80 <dir_next+0xf6>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e056      	b.n	800602e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff fad5 	bl	8005530 <sync_window>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <dir_next+0x106>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e04e      	b.n	800602e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	899b      	ldrh	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	f7ff f8fe 	bl	800519e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	6979      	ldr	r1, [r7, #20]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fba3 	bl	80056f4 <clust2sect>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fb4:	e012      	b.n	8005fdc <dir_next+0x152>
						fs->wflag = 1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fab7 	bl	8005530 <sync_window>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <dir_next+0x142>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e030      	b.n	800602e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	635a      	str	r2, [r3, #52]	; 0x34
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	895b      	ldrh	r3, [r3, #10]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d3e6      	bcc.n	8005fb6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fb79 	bl	80056f4 <clust2sect>
 8006002:	4602      	mov	r2, r0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	899b      	ldrh	r3, [r3, #12]
 8006018:	461a      	mov	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006020:	fb00 f202 	mul.w	r2, r0, r2
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	18ca      	adds	r2, r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006046:	2100      	movs	r1, #0
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fe95 	bl	8005d78 <dir_sdi>
 800604e:	4603      	mov	r3, r0
 8006050:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d12b      	bne.n	80060b0 <dir_alloc+0x7a>
		n = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	4619      	mov	r1, r3
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff faa8 	bl	80055b8 <move_window>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11d      	bne.n	80060ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2be5      	cmp	r3, #229	; 0xe5
 800607a:	d004      	beq.n	8006086 <dir_alloc+0x50>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d102      	bne.n	800609a <dir_alloc+0x64>
 8006094:	e00c      	b.n	80060b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800609a:	2101      	movs	r1, #1
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fef4 	bl	8005e8a <dir_next>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0d7      	beq.n	800605c <dir_alloc+0x26>
 80060ac:	e000      	b.n	80060b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80060ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d101      	bne.n	80060ba <dir_alloc+0x84>
 80060b6:	2307      	movs	r3, #7
 80060b8:	75fb      	strb	r3, [r7, #23]
	return res;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	331a      	adds	r3, #26
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe ffc0 	bl	8005058 <ld_word>
 80060d8:	4603      	mov	r3, r0
 80060da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d109      	bne.n	80060f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe ffb5 	bl	8005058 <ld_word>
 80060ee:	4603      	mov	r3, r0
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	331a      	adds	r3, #26
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	b292      	uxth	r2, r2
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe ffd8 	bl	80050ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d109      	bne.n	800613a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f103 0214 	add.w	r2, r3, #20
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	b29b      	uxth	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f7fe ffca 	bl	80050ce <st_word>
	}
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	331a      	adds	r3, #26
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe ff80 	bl	8005058 <ld_word>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <cmp_lfn+0x1e>
 800615e:	2300      	movs	r3, #0
 8006160:	e059      	b.n	8006216 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800616a:	1e5a      	subs	r2, r3, #1
 800616c:	4613      	mov	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006178:	2301      	movs	r3, #1
 800617a:	81fb      	strh	r3, [r7, #14]
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	e033      	b.n	80061ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <cmp_lfn+0xdc>)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	4413      	add	r3, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe ff61 	bl	8005058 <ld_word>
 8006196:	4603      	mov	r3, r0
 8006198:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800619a:	89fb      	ldrh	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2bfe      	cmp	r3, #254	; 0xfe
 80061a4:	d812      	bhi.n	80061cc <cmp_lfn+0x88>
 80061a6:	89bb      	ldrh	r3, [r7, #12]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f002 f861 	bl	8008270 <ff_wtoupper>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461c      	mov	r4, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	617a      	str	r2, [r7, #20]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 f855 	bl	8008270 <ff_wtoupper>
 80061c6:	4603      	mov	r3, r0
 80061c8:	429c      	cmp	r4, r3
 80061ca:	d001      	beq.n	80061d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80061cc:	2300      	movs	r3, #0
 80061ce:	e022      	b.n	8006216 <cmp_lfn+0xd2>
			}
			wc = uc;
 80061d0:	89bb      	ldrh	r3, [r7, #12]
 80061d2:	81fb      	strh	r3, [r7, #14]
 80061d4:	e006      	b.n	80061e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80061d6:	89bb      	ldrh	r3, [r7, #12]
 80061d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061dc:	4293      	cmp	r3, r2
 80061de:	d001      	beq.n	80061e4 <cmp_lfn+0xa0>
 80061e0:	2300      	movs	r3, #0
 80061e2:	e018      	b.n	8006216 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3301      	adds	r3, #1
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d9c8      	bls.n	8006182 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <cmp_lfn+0xd0>
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <cmp_lfn+0xd0>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <cmp_lfn+0xd0>
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006214:	2301      	movs	r3, #1
}
 8006216:	4618      	mov	r0, r3
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	0800952c 	.word	0x0800952c

08006224 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	460b      	mov	r3, r1
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	4613      	mov	r3, r2
 8006238:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	330d      	adds	r3, #13
 800623e:	79ba      	ldrb	r2, [r7, #6]
 8006240:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	330b      	adds	r3, #11
 8006246:	220f      	movs	r2, #15
 8006248:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	330c      	adds	r3, #12
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	331a      	adds	r3, #26
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe ff38 	bl	80050ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	82fb      	strh	r3, [r7, #22]
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006276:	8afb      	ldrh	r3, [r7, #22]
 8006278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <put_lfn+0x6c>
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	61fa      	str	r2, [r7, #28]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <put_lfn+0xcc>)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	4413      	add	r3, r2
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	8afa      	ldrh	r2, [r7, #22]
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe ff13 	bl	80050ce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80062a8:	8afb      	ldrh	r3, [r7, #22]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <put_lfn+0x90>
 80062ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	3301      	adds	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d9da      	bls.n	8006276 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d006      	beq.n	80062d8 <put_lfn+0xb4>
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <put_lfn+0xbc>
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	79fa      	ldrb	r2, [r7, #7]
 80062e4:	701a      	strb	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	0800952c 	.word	0x0800952c

080062f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	; 0x30
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006302:	220b      	movs	r2, #11
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7fe ff28 	bl	800515c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b05      	cmp	r3, #5
 8006310:	d92b      	bls.n	800636a <gen_numname+0x76>
		sr = seq;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006316:	e022      	b.n	800635e <gen_numname+0x6a>
			wc = *lfn++;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006322:	2300      	movs	r3, #0
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	e017      	b.n	8006358 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	005a      	lsls	r2, r3, #1
 800632c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	4413      	add	r3, r2
 8006334:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <gen_numname+0x5e>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800634c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006350:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	3301      	adds	r3, #1
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b0f      	cmp	r3, #15
 800635c:	d9e4      	bls.n	8006328 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d8      	bne.n	8006318 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800636a:	2307      	movs	r3, #7
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	b2db      	uxtb	r3, r3
 8006378:	3330      	adds	r3, #48	; 0x30
 800637a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800637e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006382:	2b39      	cmp	r3, #57	; 0x39
 8006384:	d904      	bls.n	8006390 <gen_numname+0x9c>
 8006386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800638a:	3307      	adds	r3, #7
 800638c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	62ba      	str	r2, [r7, #40]	; 0x28
 8006396:	3330      	adds	r3, #48	; 0x30
 8006398:	443b      	add	r3, r7
 800639a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800639e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1df      	bne.n	800636e <gen_numname+0x7a>
	ns[i] = '~';
 80063ae:	f107 0214 	add.w	r2, r7, #20
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	4413      	add	r3, r2
 80063b6:	227e      	movs	r2, #126	; 0x7e
 80063b8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	e002      	b.n	80063c6 <gen_numname+0xd2>
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	3301      	adds	r3, #1
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d205      	bcs.n	80063da <gen_numname+0xe6>
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	4413      	add	r3, r2
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d1f2      	bne.n	80063c0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b07      	cmp	r3, #7
 80063de:	d807      	bhi.n	80063f0 <gen_numname+0xfc>
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80063e6:	3330      	adds	r3, #48	; 0x30
 80063e8:	443b      	add	r3, r7
 80063ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80063ee:	e000      	b.n	80063f2 <gen_numname+0xfe>
 80063f0:	2120      	movs	r1, #32
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	627a      	str	r2, [r7, #36]	; 0x24
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	460a      	mov	r2, r1
 80063fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2b07      	cmp	r3, #7
 8006404:	d9e9      	bls.n	80063da <gen_numname+0xe6>
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	3730      	adds	r7, #48	; 0x30
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800641c:	230b      	movs	r3, #11
 800641e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	0852      	lsrs	r2, r2, #1
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	4313      	orrs	r3, r2
 800642a:	b2da      	uxtb	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	6079      	str	r1, [r7, #4]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4413      	add	r3, r2
 8006436:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3b01      	subs	r3, #1
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ed      	bne.n	8006420 <sum_sfn+0x10>
	return sum;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fc88 	bl	8005d78 <dir_sdi>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <dir_find+0x24>
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	e0a9      	b.n	80065ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006476:	23ff      	movs	r3, #255	; 0xff
 8006478:	753b      	strb	r3, [r7, #20]
 800647a:	7d3b      	ldrb	r3, [r7, #20]
 800647c:	757b      	strb	r3, [r7, #21]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4619      	mov	r1, r3
 800648c:	6938      	ldr	r0, [r7, #16]
 800648e:	f7ff f893 	bl	80055b8 <move_window>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f040 8090 	bne.w	80065be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064a6:	7dbb      	ldrb	r3, [r7, #22]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <dir_find+0x60>
 80064ac:	2304      	movs	r3, #4
 80064ae:	75fb      	strb	r3, [r7, #23]
 80064b0:	e08a      	b.n	80065c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	330b      	adds	r3, #11
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7bfa      	ldrb	r2, [r7, #15]
 80064c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064c6:	7dbb      	ldrb	r3, [r7, #22]
 80064c8:	2be5      	cmp	r3, #229	; 0xe5
 80064ca:	d007      	beq.n	80064dc <dir_find+0x8a>
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <dir_find+0x98>
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b0f      	cmp	r3, #15
 80064da:	d006      	beq.n	80064ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064dc:	23ff      	movs	r3, #255	; 0xff
 80064de:	757b      	strb	r3, [r7, #21]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
 80064e8:	e05e      	b.n	80065a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b0f      	cmp	r3, #15
 80064ee:	d136      	bne.n	800655e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d154      	bne.n	80065a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064fe:	7dbb      	ldrb	r3, [r7, #22]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	7b5b      	ldrb	r3, [r3, #13]
 800650e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006510:	7dbb      	ldrb	r3, [r7, #22]
 8006512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006516:	75bb      	strb	r3, [r7, #22]
 8006518:	7dbb      	ldrb	r3, [r7, #22]
 800651a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006524:	7dba      	ldrb	r2, [r7, #22]
 8006526:	7d7b      	ldrb	r3, [r7, #21]
 8006528:	429a      	cmp	r2, r3
 800652a:	d115      	bne.n	8006558 <dir_find+0x106>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	330d      	adds	r3, #13
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	7d3a      	ldrb	r2, [r7, #20]
 8006536:	429a      	cmp	r2, r3
 8006538:	d10e      	bne.n	8006558 <dir_find+0x106>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f7ff fdfd 	bl	8006144 <cmp_lfn>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <dir_find+0x106>
 8006550:	7d7b      	ldrb	r3, [r7, #21]
 8006552:	3b01      	subs	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e000      	b.n	800655a <dir_find+0x108>
 8006558:	23ff      	movs	r3, #255	; 0xff
 800655a:	757b      	strb	r3, [r7, #21]
 800655c:	e024      	b.n	80065a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800655e:	7d7b      	ldrb	r3, [r7, #21]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <dir_find+0x126>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff ff51 	bl	8006410 <sum_sfn>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	7d3b      	ldrb	r3, [r7, #20]
 8006574:	4293      	cmp	r3, r2
 8006576:	d024      	beq.n	80065c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <dir_find+0x14a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a18      	ldr	r0, [r3, #32]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3324      	adds	r3, #36	; 0x24
 800658e:	220b      	movs	r2, #11
 8006590:	4619      	mov	r1, r3
 8006592:	f7fe fe1f 	bl	80051d4 <mem_cmp>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d014      	beq.n	80065c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800659c:	23ff      	movs	r3, #255	; 0xff
 800659e:	757b      	strb	r3, [r7, #21]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fc6d 	bl	8005e8a <dir_next>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f43f af65 	beq.w	8006486 <dir_find+0x34>
 80065bc:	e004      	b.n	80065c8 <dir_find+0x176>
		if (res != FR_OK) break;
 80065be:	bf00      	nop
 80065c0:	e002      	b.n	80065c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065c2:	bf00      	nop
 80065c4:	e000      	b.n	80065c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80065c6:	bf00      	nop

	return res;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08c      	sub	sp, #48	; 0x30
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <dir_register+0x20>
 80065f0:	2306      	movs	r3, #6
 80065f2:	e0e0      	b.n	80067b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80065f4:	2300      	movs	r3, #0
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
 80065f8:	e002      	b.n	8006600 <dir_register+0x2c>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	3301      	adds	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f4      	bne.n	80065fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	220c      	movs	r2, #12
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe fd9d 	bl	800515c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d032      	beq.n	8006692 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006634:	2301      	movs	r3, #1
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
 8006638:	e016      	b.n	8006668 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	f107 010c 	add.w	r1, r7, #12
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f7ff fe53 	bl	80062f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff feff 	bl	8006452 <dir_find>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800665a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	3301      	adds	r3, #1
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b63      	cmp	r3, #99	; 0x63
 800666c:	d9e5      	bls.n	800663a <dir_register+0x66>
 800666e:	e000      	b.n	8006672 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006670:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2b64      	cmp	r3, #100	; 0x64
 8006676:	d101      	bne.n	800667c <dir_register+0xa8>
 8006678:	2307      	movs	r3, #7
 800667a:	e09c      	b.n	80067b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800667c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006680:	2b04      	cmp	r3, #4
 8006682:	d002      	beq.n	800668a <dir_register+0xb6>
 8006684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006688:	e095      	b.n	80067b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800668a:	7dfa      	ldrb	r2, [r7, #23]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <dir_register+0xd8>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	330c      	adds	r3, #12
 80066a0:	4a47      	ldr	r2, [pc, #284]	; (80067c0 <dir_register+0x1ec>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	3301      	adds	r3, #1
 80066aa:	e000      	b.n	80066ae <dir_register+0xda>
 80066ac:	2301      	movs	r3, #1
 80066ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80066b0:	6a39      	ldr	r1, [r7, #32]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fcbf 	bl	8006036 <dir_alloc>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80066be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d148      	bne.n	8006758 <dir_register+0x184>
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d042      	beq.n	8006758 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	015b      	lsls	r3, r3, #5
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fb4a 	bl	8005d78 <dir_sdi>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d132      	bne.n	8006758 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3324      	adds	r3, #36	; 0x24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fe8a 	bl	8006410 <sum_sfn>
 80066fc:	4603      	mov	r3, r0
 80066fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4619      	mov	r1, r3
 8006706:	69f8      	ldr	r0, [r7, #28]
 8006708:	f7fe ff56 	bl	80055b8 <move_window>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11d      	bne.n	8006756 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	6918      	ldr	r0, [r3, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a19      	ldr	r1, [r3, #32]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	7efb      	ldrb	r3, [r7, #27]
 8006728:	f7ff fd7c 	bl	8006224 <put_lfn>
				fs->wflag = 1;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2201      	movs	r2, #1
 8006730:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff fba8 	bl	8005e8a <dir_next>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <dir_register+0x184>
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	3b01      	subs	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1d5      	bne.n	8006700 <dir_register+0x12c>
 8006754:	e000      	b.n	8006758 <dir_register+0x184>
				if (res != FR_OK) break;
 8006756:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d128      	bne.n	80067b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	4619      	mov	r1, r3
 8006766:	69f8      	ldr	r0, [r7, #28]
 8006768:	f7fe ff26 	bl	80055b8 <move_window>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006776:	2b00      	cmp	r3, #0
 8006778:	d11b      	bne.n	80067b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	2220      	movs	r2, #32
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fd0b 	bl	800519e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a18      	ldr	r0, [r3, #32]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3324      	adds	r3, #36	; 0x24
 8006790:	220b      	movs	r2, #11
 8006792:	4619      	mov	r1, r3
 8006794:	f7fe fce2 	bl	800515c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f002 0218 	and.w	r2, r2, #24
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2201      	movs	r2, #1
 80067b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80067b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	4ec4ec4f 	.word	0x4ec4ec4f

080067c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	61ba      	str	r2, [r7, #24]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80067f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f4:	2b1f      	cmp	r3, #31
 80067f6:	d940      	bls.n	800687a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80067f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067fa:	2b2f      	cmp	r3, #47	; 0x2f
 80067fc:	d006      	beq.n	800680c <create_name+0x48>
 80067fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006800:	2b5c      	cmp	r3, #92	; 0x5c
 8006802:	d110      	bne.n	8006826 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006804:	e002      	b.n	800680c <create_name+0x48>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	3301      	adds	r3, #1
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4413      	add	r3, r2
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b2f      	cmp	r3, #47	; 0x2f
 8006816:	d0f6      	beq.n	8006806 <create_name+0x42>
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b5c      	cmp	r3, #92	; 0x5c
 8006822:	d0f0      	beq.n	8006806 <create_name+0x42>
			break;
 8006824:	e02a      	b.n	800687c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2bfe      	cmp	r3, #254	; 0xfe
 800682a:	d901      	bls.n	8006830 <create_name+0x6c>
 800682c:	2306      	movs	r3, #6
 800682e:	e17d      	b.n	8006b2c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006832:	b2db      	uxtb	r3, r3
 8006834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fcdc 	bl	80081f8 <ff_convert>
 8006840:	4603      	mov	r3, r0
 8006842:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <create_name+0x8a>
 800684a:	2306      	movs	r3, #6
 800684c:	e16e      	b.n	8006b2c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800684e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006850:	2b7f      	cmp	r3, #127	; 0x7f
 8006852:	d809      	bhi.n	8006868 <create_name+0xa4>
 8006854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006856:	4619      	mov	r1, r3
 8006858:	488d      	ldr	r0, [pc, #564]	; (8006a90 <create_name+0x2cc>)
 800685a:	f7fe fce2 	bl	8005222 <chk_chr>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <create_name+0xa4>
 8006864:	2306      	movs	r3, #6
 8006866:	e161      	b.n	8006b2c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	617a      	str	r2, [r7, #20]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006876:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006878:	e7b4      	b.n	80067e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800687a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	441a      	add	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006888:	2b1f      	cmp	r3, #31
 800688a:	d801      	bhi.n	8006890 <create_name+0xcc>
 800688c:	2304      	movs	r3, #4
 800688e:	e000      	b.n	8006892 <create_name+0xce>
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006896:	e011      	b.n	80068bc <create_name+0xf8>
		w = lfn[di - 1];
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800689e:	3b01      	subs	r3, #1
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80068aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d002      	beq.n	80068b6 <create_name+0xf2>
 80068b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b2:	2b2e      	cmp	r3, #46	; 0x2e
 80068b4:	d106      	bne.n	80068c4 <create_name+0x100>
		di--;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ea      	bne.n	8006898 <create_name+0xd4>
 80068c2:	e000      	b.n	80068c6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80068c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <create_name+0x118>
 80068d8:	2306      	movs	r3, #6
 80068da:	e127      	b.n	8006b2c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	220b      	movs	r2, #11
 80068e2:	2120      	movs	r1, #32
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe fc5a 	bl	800519e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e002      	b.n	80068f6 <create_name+0x132>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	2b20      	cmp	r3, #32
 8006902:	d0f5      	beq.n	80068f0 <create_name+0x12c>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	2b2e      	cmp	r3, #46	; 0x2e
 8006910:	d0ee      	beq.n	80068f0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <create_name+0x168>
 8006918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800691c:	f043 0303 	orr.w	r3, r3, #3
 8006920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006924:	e002      	b.n	800692c <create_name+0x168>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3b01      	subs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <create_name+0x182>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006938:	3b01      	subs	r3, #1
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	2b2e      	cmp	r3, #46	; 0x2e
 8006944:	d1ef      	bne.n	8006926 <create_name+0x162>

	i = b = 0; ni = 8;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800694c:	2300      	movs	r3, #0
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	2308      	movs	r3, #8
 8006952:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	61ba      	str	r2, [r7, #24]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8090 	beq.w	8006a8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800696c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800696e:	2b20      	cmp	r3, #32
 8006970:	d006      	beq.n	8006980 <create_name+0x1bc>
 8006972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006974:	2b2e      	cmp	r3, #46	; 0x2e
 8006976:	d10a      	bne.n	800698e <create_name+0x1ca>
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	429a      	cmp	r2, r3
 800697e:	d006      	beq.n	800698e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006984:	f043 0303 	orr.w	r3, r3, #3
 8006988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800698c:	e07d      	b.n	8006a8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d203      	bcs.n	800699e <create_name+0x1da>
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	429a      	cmp	r2, r3
 800699c:	d123      	bne.n	80069e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2b0b      	cmp	r3, #11
 80069a2:	d106      	bne.n	80069b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80069a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a8:	f043 0303 	orr.w	r3, r3, #3
 80069ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069b0:	e075      	b.n	8006a9e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d005      	beq.n	80069c6 <create_name+0x202>
 80069ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069be:	f043 0303 	orr.w	r3, r3, #3
 80069c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d866      	bhi.n	8006a9c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	2308      	movs	r3, #8
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	230b      	movs	r3, #11
 80069d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80069da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069e4:	e051      	b.n	8006a8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80069e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ea:	d914      	bls.n	8006a16 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80069ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fc01 	bl	80081f8 <ff_convert>
 80069f6:	4603      	mov	r3, r0
 80069f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80069fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <create_name+0x246>
 8006a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a02:	3b80      	subs	r3, #128	; 0x80
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <create_name+0x2d0>)
 8006a06:	5cd3      	ldrb	r3, [r2, r3]
 8006a08:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <create_name+0x268>
 8006a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1e:	4619      	mov	r1, r3
 8006a20:	481d      	ldr	r0, [pc, #116]	; (8006a98 <create_name+0x2d4>)
 8006a22:	f7fe fbfe 	bl	8005222 <chk_chr>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a2c:	235f      	movs	r3, #95	; 0x5f
 8006a2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a34:	f043 0303 	orr.w	r3, r3, #3
 8006a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a3c:	e01b      	b.n	8006a76 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d909      	bls.n	8006a58 <create_name+0x294>
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a46:	2b5a      	cmp	r3, #90	; 0x5a
 8006a48:	d806      	bhi.n	8006a58 <create_name+0x294>
					b |= 2;
 8006a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a4e:	f043 0302 	orr.w	r3, r3, #2
 8006a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a56:	e00e      	b.n	8006a76 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5a:	2b60      	cmp	r3, #96	; 0x60
 8006a5c:	d90b      	bls.n	8006a76 <create_name+0x2b2>
 8006a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a60:	2b7a      	cmp	r3, #122	; 0x7a
 8006a62:	d808      	bhi.n	8006a76 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006a64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a72:	3b20      	subs	r3, #32
 8006a74:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	623a      	str	r2, [r7, #32]
 8006a7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a7e:	b2d1      	uxtb	r1, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	460a      	mov	r2, r1
 8006a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006a8a:	e763      	b.n	8006954 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006a8c:	bf00      	nop
 8006a8e:	e006      	b.n	8006a9e <create_name+0x2da>
 8006a90:	0800941c 	.word	0x0800941c
 8006a94:	080094ac 	.word	0x080094ac
 8006a98:	08009428 	.word	0x08009428
			if (si > di) break;			/* No extension */
 8006a9c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aa4:	2be5      	cmp	r3, #229	; 0xe5
 8006aa6:	d103      	bne.n	8006ab0 <create_name+0x2ec>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2205      	movs	r2, #5
 8006aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d104      	bne.n	8006ac0 <create_name+0x2fc>
 8006ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac4:	f003 030c 	and.w	r3, r3, #12
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	d005      	beq.n	8006ad8 <create_name+0x314>
 8006acc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d105      	bne.n	8006ae4 <create_name+0x320>
 8006ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006adc:	f043 0302 	orr.w	r3, r3, #2
 8006ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d117      	bne.n	8006b20 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <create_name+0x344>
 8006afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b00:	f043 0310 	orr.w	r3, r3, #16
 8006b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b0c:	f003 030c 	and.w	r3, r3, #12
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d105      	bne.n	8006b20 <create_name+0x35c>
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b18:	f043 0308 	orr.w	r3, r3, #8
 8006b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006b2a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b48:	e002      	b.n	8006b50 <follow_path+0x1c>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b2f      	cmp	r3, #47	; 0x2f
 8006b56:	d0f8      	beq.n	8006b4a <follow_path+0x16>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006b5e:	d0f4      	beq.n	8006b4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b1f      	cmp	r3, #31
 8006b6c:	d80a      	bhi.n	8006b84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006b76:	2100      	movs	r1, #0
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff f8fd 	bl	8005d78 <dir_sdi>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]
 8006b82:	e048      	b.n	8006c16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b84:	463b      	mov	r3, r7
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fe1b 	bl	80067c4 <create_name>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d139      	bne.n	8006c0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fc5a 	bl	8006452 <dir_find>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ba8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d12c      	bne.n	8006c10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d127      	bne.n	8006c10 <follow_path+0xdc>
 8006bc0:	2305      	movs	r3, #5
 8006bc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006bc4:	e024      	b.n	8006c10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d121      	bne.n	8006c14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	799b      	ldrb	r3, [r3, #6]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006bdc:	2305      	movs	r3, #5
 8006bde:	75fb      	strb	r3, [r7, #23]
 8006be0:	e019      	b.n	8006c16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	8992      	ldrh	r2, [r2, #12]
 8006bf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bf4:	fb00 f202 	mul.w	r2, r0, r2
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fa60 	bl	80060c4 <ld_clust>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c0a:	e7bb      	b.n	8006b84 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <follow_path+0xe2>
				break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c14:	bf00      	nop
			}
		}
	}

	return res;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d031      	beq.n	8006c9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e002      	b.n	8006c44 <get_ldnumber+0x24>
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	3301      	adds	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b1f      	cmp	r3, #31
 8006c4a:	d903      	bls.n	8006c54 <get_ldnumber+0x34>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b3a      	cmp	r3, #58	; 0x3a
 8006c52:	d1f4      	bne.n	8006c3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b3a      	cmp	r3, #58	; 0x3a
 8006c5a:	d11c      	bne.n	8006c96 <get_ldnumber+0x76>
			tp = *path;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	60fa      	str	r2, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	3b30      	subs	r3, #48	; 0x30
 8006c6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b09      	cmp	r3, #9
 8006c72:	d80e      	bhi.n	8006c92 <get_ldnumber+0x72>
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d10a      	bne.n	8006c92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d107      	bne.n	8006c92 <get_ldnumber+0x72>
					vol = (int)i;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e002      	b.n	8006c9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c9a:	693b      	ldr	r3, [r7, #16]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	70da      	strb	r2, [r3, #3]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fe fc78 	bl	80055b8 <move_window>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <check_fs+0x2a>
 8006cce:	2304      	movs	r3, #4
 8006cd0:	e038      	b.n	8006d44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3338      	adds	r3, #56	; 0x38
 8006cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe f9bc 	bl	8005058 <ld_word>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <check_fs+0x48>
 8006cec:	2303      	movs	r3, #3
 8006cee:	e029      	b.n	8006d44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cf6:	2be9      	cmp	r3, #233	; 0xe9
 8006cf8:	d009      	beq.n	8006d0e <check_fs+0x66>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d00:	2beb      	cmp	r3, #235	; 0xeb
 8006d02:	d11e      	bne.n	8006d42 <check_fs+0x9a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d0a:	2b90      	cmp	r3, #144	; 0x90
 8006d0c:	d119      	bne.n	8006d42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3338      	adds	r3, #56	; 0x38
 8006d12:	3336      	adds	r3, #54	; 0x36
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe f9b7 	bl	8005088 <ld_dword>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d20:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <check_fs+0xa4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d101      	bne.n	8006d2a <check_fs+0x82>
 8006d26:	2300      	movs	r3, #0
 8006d28:	e00c      	b.n	8006d44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3338      	adds	r3, #56	; 0x38
 8006d2e:	3352      	adds	r3, #82	; 0x52
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe f9a9 	bl	8005088 <ld_dword>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <check_fs+0xa8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d101      	bne.n	8006d42 <check_fs+0x9a>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d42:	2302      	movs	r3, #2
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	00544146 	.word	0x00544146
 8006d50:	33544146 	.word	0x33544146

08006d54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b096      	sub	sp, #88	; 0x58
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff59 	bl	8006c20 <get_ldnumber>
 8006d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da01      	bge.n	8006d7a <find_volume+0x26>
 8006d76:	230b      	movs	r3, #11
 8006d78:	e265      	b.n	8007246 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d7a:	4a9f      	ldr	r2, [pc, #636]	; (8006ff8 <find_volume+0x2a4>)
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <find_volume+0x3a>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	e25b      	b.n	8007246 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01a      	beq.n	8006dda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe f8b7 	bl	8004f1c <disk_status>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <find_volume+0x82>
 8006dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	e237      	b.n	8007246 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e235      	b.n	8007246 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe f8af 	bl	8004f50 <disk_initialize>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e04:	2303      	movs	r3, #3
 8006e06:	e21e      	b.n	8007246 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <find_volume+0xca>
 8006e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	e213      	b.n	8007246 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	7858      	ldrb	r0, [r3, #1]
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	330c      	adds	r3, #12
 8006e26:	461a      	mov	r2, r3
 8006e28:	2102      	movs	r1, #2
 8006e2a:	f7fe f8f7 	bl	800501c <disk_ioctl>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <find_volume+0xe4>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e206      	b.n	8007246 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	899b      	ldrh	r3, [r3, #12]
 8006e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e40:	d80d      	bhi.n	8006e5e <find_volume+0x10a>
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	899b      	ldrh	r3, [r3, #12]
 8006e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4a:	d308      	bcc.n	8006e5e <find_volume+0x10a>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	899b      	ldrh	r3, [r3, #12]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	899b      	ldrh	r3, [r3, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <find_volume+0x10e>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e1f1      	b.n	8007246 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e6a:	f7ff ff1d 	bl	8006ca8 <check_fs>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d149      	bne.n	8006f10 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e80:	e01e      	b.n	8006ec0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e90:	4413      	add	r3, r2
 8006e92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	3304      	adds	r3, #4
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <find_volume+0x158>
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe f8f0 	bl	8005088 <ld_dword>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	e000      	b.n	8006eae <find_volume+0x15a>
 8006eac:	2200      	movs	r2, #0
 8006eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	3358      	adds	r3, #88	; 0x58
 8006eb4:	443b      	add	r3, r7
 8006eb6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d9dd      	bls.n	8006e82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <find_volume+0x182>
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	3358      	adds	r3, #88	; 0x58
 8006edc:	443b      	add	r3, r7
 8006ede:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ee2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <find_volume+0x1a2>
 8006eea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eee:	f7ff fedb 	bl	8006ca8 <check_fs>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	e000      	b.n	8006ef8 <find_volume+0x1a4>
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d905      	bls.n	8006f10 <find_volume+0x1bc>
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	3301      	adds	r3, #1
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d9e2      	bls.n	8006ed6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d101      	bne.n	8006f1c <find_volume+0x1c8>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e194      	b.n	8007246 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d901      	bls.n	8006f28 <find_volume+0x1d4>
 8006f24:	230d      	movs	r3, #13
 8006f26:	e18e      	b.n	8007246 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	3338      	adds	r3, #56	; 0x38
 8006f2c:	330b      	adds	r3, #11
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe f892 	bl	8005058 <ld_word>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	899b      	ldrh	r3, [r3, #12]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <find_volume+0x1f0>
 8006f40:	230d      	movs	r3, #13
 8006f42:	e180      	b.n	8007246 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	3338      	adds	r3, #56	; 0x38
 8006f48:	3316      	adds	r3, #22
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f884 	bl	8005058 <ld_word>
 8006f50:	4603      	mov	r3, r0
 8006f52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <find_volume+0x214>
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	3338      	adds	r3, #56	; 0x38
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe f891 	bl	8005088 <ld_dword>
 8006f66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d005      	beq.n	8006f8c <find_volume+0x238>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	789b      	ldrb	r3, [r3, #2]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d001      	beq.n	8006f8c <find_volume+0x238>
 8006f88:	230d      	movs	r3, #13
 8006f8a:	e15c      	b.n	8007246 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	789b      	ldrb	r3, [r3, #2]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	895b      	ldrh	r3, [r3, #10]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <find_volume+0x26c>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	895b      	ldrh	r3, [r3, #10]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	895b      	ldrh	r3, [r3, #10]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <find_volume+0x270>
 8006fc0:	230d      	movs	r3, #13
 8006fc2:	e140      	b.n	8007246 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	3338      	adds	r3, #56	; 0x38
 8006fc8:	3311      	adds	r3, #17
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe f844 	bl	8005058 <ld_word>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	891b      	ldrh	r3, [r3, #8]
 8006fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fde:	8992      	ldrh	r2, [r2, #12]
 8006fe0:	0952      	lsrs	r2, r2, #5
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fe8:	fb01 f202 	mul.w	r2, r1, r2
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <find_volume+0x2a8>
 8006ff4:	230d      	movs	r3, #13
 8006ff6:	e126      	b.n	8007246 <find_volume+0x4f2>
 8006ff8:	200001a0 	.word	0x200001a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	3338      	adds	r3, #56	; 0x38
 8007000:	3313      	adds	r3, #19
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe f828 	bl	8005058 <ld_word>
 8007008:	4603      	mov	r3, r0
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <find_volume+0x2cc>
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	3338      	adds	r3, #56	; 0x38
 8007016:	3320      	adds	r3, #32
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f835 	bl	8005088 <ld_dword>
 800701e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	3338      	adds	r3, #56	; 0x38
 8007024:	330e      	adds	r3, #14
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe f816 	bl	8005058 <ld_word>
 800702c:	4603      	mov	r3, r0
 800702e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <find_volume+0x2e6>
 8007036:	230d      	movs	r3, #13
 8007038:	e105      	b.n	8007246 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800703a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	4413      	add	r3, r2
 8007040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007042:	8911      	ldrh	r1, [r2, #8]
 8007044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007046:	8992      	ldrh	r2, [r2, #12]
 8007048:	0952      	lsrs	r2, r2, #5
 800704a:	b292      	uxth	r2, r2
 800704c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007050:	b292      	uxth	r2, r2
 8007052:	4413      	add	r3, r2
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	429a      	cmp	r2, r3
 800705c:	d201      	bcs.n	8007062 <find_volume+0x30e>
 800705e:	230d      	movs	r3, #13
 8007060:	e0f1      	b.n	8007246 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800706a:	8952      	ldrh	r2, [r2, #10]
 800706c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <find_volume+0x328>
 8007078:	230d      	movs	r3, #13
 800707a:	e0e4      	b.n	8007246 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800707c:	2303      	movs	r3, #3
 800707e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007088:	4293      	cmp	r3, r2
 800708a:	d802      	bhi.n	8007092 <find_volume+0x33e>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007098:	4293      	cmp	r3, r2
 800709a:	d802      	bhi.n	80070a2 <find_volume+0x34e>
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	1c9a      	adds	r2, r3, #2
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80070b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b4:	441a      	add	r2, r3
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80070ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	441a      	add	r2, r3
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80070c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d11e      	bne.n	800710a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	3338      	adds	r3, #56	; 0x38
 80070d0:	332a      	adds	r3, #42	; 0x2a
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd ffc0 	bl	8005058 <ld_word>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <find_volume+0x38e>
 80070de:	230d      	movs	r3, #13
 80070e0:	e0b1      	b.n	8007246 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	891b      	ldrh	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <find_volume+0x39a>
 80070ea:	230d      	movs	r3, #13
 80070ec:	e0ab      	b.n	8007246 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	3338      	adds	r3, #56	; 0x38
 80070f2:	332c      	adds	r3, #44	; 0x2c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd ffc7 	bl	8005088 <ld_dword>
 80070fa:	4602      	mov	r2, r0
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	647b      	str	r3, [r7, #68]	; 0x44
 8007108:	e01f      	b.n	800714a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	891b      	ldrh	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <find_volume+0x3c2>
 8007112:	230d      	movs	r3, #13
 8007114:	e097      	b.n	8007246 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711c:	441a      	add	r2, r3
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007126:	2b02      	cmp	r3, #2
 8007128:	d103      	bne.n	8007132 <find_volume+0x3de>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	e00a      	b.n	8007148 <find_volume+0x3f4>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	69da      	ldr	r2, [r3, #28]
 8007136:	4613      	mov	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	4413      	add	r3, r2
 800713c:	085a      	lsrs	r2, r3, #1
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	899b      	ldrh	r3, [r3, #12]
 8007152:	4619      	mov	r1, r3
 8007154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007156:	440b      	add	r3, r1
 8007158:	3b01      	subs	r3, #1
 800715a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715c:	8989      	ldrh	r1, [r1, #12]
 800715e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007162:	429a      	cmp	r2, r3
 8007164:	d201      	bcs.n	800716a <find_volume+0x416>
 8007166:	230d      	movs	r3, #13
 8007168:	e06d      	b.n	8007246 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f04f 32ff 	mov.w	r2, #4294967295
 8007170:	619a      	str	r2, [r3, #24]
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	2280      	movs	r2, #128	; 0x80
 800717e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007184:	2b03      	cmp	r3, #3
 8007186:	d149      	bne.n	800721c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	3338      	adds	r3, #56	; 0x38
 800718c:	3330      	adds	r3, #48	; 0x30
 800718e:	4618      	mov	r0, r3
 8007190:	f7fd ff62 	bl	8005058 <ld_word>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d140      	bne.n	800721c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800719a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719c:	3301      	adds	r3, #1
 800719e:	4619      	mov	r1, r3
 80071a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071a2:	f7fe fa09 	bl	80055b8 <move_window>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d137      	bne.n	800721c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	2200      	movs	r2, #0
 80071b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	3338      	adds	r3, #56	; 0x38
 80071b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd ff4c 	bl	8005058 <ld_word>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d127      	bne.n	800721c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	3338      	adds	r3, #56	; 0x38
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd ff59 	bl	8005088 <ld_dword>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <find_volume+0x4fc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d11e      	bne.n	800721c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	3338      	adds	r3, #56	; 0x38
 80071e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fd ff4e 	bl	8005088 <ld_dword>
 80071ec:	4603      	mov	r3, r0
 80071ee:	4a19      	ldr	r2, [pc, #100]	; (8007254 <find_volume+0x500>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d113      	bne.n	800721c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	3338      	adds	r3, #56	; 0x38
 80071f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fd ff43 	bl	8005088 <ld_dword>
 8007202:	4602      	mov	r2, r0
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	3338      	adds	r3, #56	; 0x38
 800720c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd ff39 	bl	8005088 <ld_dword>
 8007216:	4602      	mov	r2, r0
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007222:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <find_volume+0x504>)
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <find_volume+0x504>)
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <find_volume+0x504>)
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	4a08      	ldr	r2, [pc, #32]	; (800725c <find_volume+0x508>)
 800723c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800723e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007240:	f7fe f952 	bl	80054e8 <clear_lock>
#endif
	return FR_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3758      	adds	r7, #88	; 0x58
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	41615252 	.word	0x41615252
 8007254:	61417272 	.word	0x61417272
 8007258:	200001a4 	.word	0x200001a4
 800725c:	200001c8 	.word	0x200001c8

08007260 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800726a:	2309      	movs	r3, #9
 800726c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01c      	beq.n	80072ae <validate+0x4e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d018      	beq.n	80072ae <validate+0x4e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d013      	beq.n	80072ae <validate+0x4e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	889a      	ldrh	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	429a      	cmp	r2, r3
 8007292:	d10c      	bne.n	80072ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd fe3e 	bl	8004f1c <disk_status>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <validate+0x4e>
			res = FR_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <validate+0x5a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	e000      	b.n	80072bc <validate+0x5c>
 80072ba:	2300      	movs	r3, #0
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	6013      	str	r3, [r2, #0]
	return res;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80072de:	f107 0310 	add.w	r3, r7, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fc9c 	bl	8006c20 <get_ldnumber>
 80072e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da01      	bge.n	80072f4 <f_mount+0x28>
 80072f0:	230b      	movs	r3, #11
 80072f2:	e02b      	b.n	800734c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072f4:	4a17      	ldr	r2, [pc, #92]	; (8007354 <f_mount+0x88>)
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007304:	69b8      	ldr	r0, [r7, #24]
 8007306:	f7fe f8ef 	bl	80054e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	490d      	ldr	r1, [pc, #52]	; (8007354 <f_mount+0x88>)
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <f_mount+0x66>
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d001      	beq.n	8007336 <f_mount+0x6a>
 8007332:	2300      	movs	r3, #0
 8007334:	e00a      	b.n	800734c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007336:	f107 010c 	add.w	r1, r7, #12
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	2200      	movs	r2, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fd07 	bl	8006d54 <find_volume>
 8007346:	4603      	mov	r3, r0
 8007348:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	200001a0 	.word	0x200001a0

08007358 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b09a      	sub	sp, #104	; 0x68
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <f_open+0x18>
 800736c:	2309      	movs	r3, #9
 800736e:	e1bb      	b.n	80076e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007376:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007378:	79fa      	ldrb	r2, [r7, #7]
 800737a:	f107 0114 	add.w	r1, r7, #20
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fce6 	bl	8006d54 <find_volume>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800738e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 819f 	bne.w	80076d6 <f_open+0x37e>
		dj.obj.fs = fs;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	f107 0318 	add.w	r3, r7, #24
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fbc5 	bl	8006b34 <follow_path>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11a      	bne.n	80073ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80073b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da03      	bge.n	80073ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80073c2:	2306      	movs	r3, #6
 80073c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80073c8:	e011      	b.n	80073ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	f107 0318 	add.w	r3, r7, #24
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fd ff38 	bl	8005258 <chk_lock>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	f003 031c 	and.w	r3, r3, #28
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d07f      	beq.n	80074f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80073f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d017      	beq.n	8007430 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007404:	2b04      	cmp	r3, #4
 8007406:	d10e      	bne.n	8007426 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007408:	f7fd ff82 	bl	8005310 <enq_lock>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d006      	beq.n	8007420 <f_open+0xc8>
 8007412:	f107 0318 	add.w	r3, r7, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff f8dc 	bl	80065d4 <dir_register>
 800741c:	4603      	mov	r3, r0
 800741e:	e000      	b.n	8007422 <f_open+0xca>
 8007420:	2312      	movs	r3, #18
 8007422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	71fb      	strb	r3, [r7, #7]
 800742e:	e010      	b.n	8007452 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007430:	7fbb      	ldrb	r3, [r7, #30]
 8007432:	f003 0311 	and.w	r3, r3, #17
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <f_open+0xea>
					res = FR_DENIED;
 800743a:	2307      	movs	r3, #7
 800743c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007440:	e007      	b.n	8007452 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <f_open+0xfa>
 800744c:	2308      	movs	r3, #8
 800744e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007452:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007456:	2b00      	cmp	r3, #0
 8007458:	d168      	bne.n	800752c <f_open+0x1d4>
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d063      	beq.n	800752c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007464:	f7fd fcfe 	bl	8004e64 <get_fattime>
 8007468:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	330e      	adds	r3, #14
 800746e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007470:	4618      	mov	r0, r3
 8007472:	f7fd fe47 	bl	8005104 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	3316      	adds	r3, #22
 800747a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800747c:	4618      	mov	r0, r3
 800747e:	f7fd fe41 	bl	8005104 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	330b      	adds	r3, #11
 8007486:	2220      	movs	r2, #32
 8007488:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fe17 	bl	80060c4 <ld_clust>
 8007496:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800749c:	2200      	movs	r2, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fe2f 	bl	8006102 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	331c      	adds	r3, #28
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fd fe2a 	bl	8005104 <st_dword>
					fs->wflag = 1;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2201      	movs	r2, #1
 80074b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80074b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d037      	beq.n	800752c <f_open+0x1d4>
						dw = fs->winsect;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80074c2:	f107 0318 	add.w	r3, r7, #24
 80074c6:	2200      	movs	r2, #0
 80074c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fb1f 	bl	8005b0e <remove_chain>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80074d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d126      	bne.n	800752c <f_open+0x1d4>
							res = move_window(fs, dw);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe f868 	bl	80055b8 <move_window>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074f2:	3a01      	subs	r2, #1
 80074f4:	615a      	str	r2, [r3, #20]
 80074f6:	e019      	b.n	800752c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80074f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d115      	bne.n	800752c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007500:	7fbb      	ldrb	r3, [r7, #30]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <f_open+0x1ba>
					res = FR_NO_FILE;
 800750a:	2304      	movs	r3, #4
 800750c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007510:	e00c      	b.n	800752c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <f_open+0x1d4>
 800751c:	7fbb      	ldrb	r3, [r7, #30]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <f_open+0x1d4>
						res = FR_DENIED;
 8007526:	2307      	movs	r3, #7
 8007528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800752c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007530:	2b00      	cmp	r3, #0
 8007532:	d128      	bne.n	8007586 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007544:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800754e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	f107 0318 	add.w	r3, r7, #24
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7fd fef1 	bl	8005354 <inc_lock>
 8007572:	4602      	mov	r2, r0
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <f_open+0x22e>
 8007580:	2302      	movs	r3, #2
 8007582:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007586:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800758a:	2b00      	cmp	r3, #0
 800758c:	f040 80a3 	bne.w	80076d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fd94 	bl	80060c4 <ld_clust>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	331c      	adds	r3, #28
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fd6e 	bl	8005088 <ld_dword>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	88da      	ldrh	r2, [r3, #6]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	79fa      	ldrb	r2, [r7, #7]
 80075ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3330      	adds	r3, #48	; 0x30
 80075e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd fdd8 	bl	800519e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d06e      	beq.n	80076d6 <f_open+0x37e>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d06a      	beq.n	80076d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	461a      	mov	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	899b      	ldrh	r3, [r3, #12]
 8007612:	fb02 f303 	mul.w	r3, r2, r3
 8007616:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007624:	e016      	b.n	8007654 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe f881 	bl	8005732 <get_fat>
 8007630:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007634:	2b01      	cmp	r3, #1
 8007636:	d802      	bhi.n	800763e <f_open+0x2e6>
 8007638:	2302      	movs	r3, #2
 800763a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800763e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d102      	bne.n	800764c <f_open+0x2f4>
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800764c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800764e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007654:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <f_open+0x30c>
 800765c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	429a      	cmp	r2, r3
 8007662:	d8e0      	bhi.n	8007626 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007668:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800766a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800766e:	2b00      	cmp	r3, #0
 8007670:	d131      	bne.n	80076d6 <f_open+0x37e>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	899b      	ldrh	r3, [r3, #12]
 8007676:	461a      	mov	r2, r3
 8007678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767a:	fbb3 f1f2 	udiv	r1, r3, r2
 800767e:	fb01 f202 	mul.w	r2, r1, r2
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d026      	beq.n	80076d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe f831 	bl	80056f4 <clust2sect>
 8007692:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <f_open+0x34a>
						res = FR_INT_ERR;
 800769a:	2302      	movs	r3, #2
 800769c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076a0:	e019      	b.n	80076d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	899b      	ldrh	r3, [r3, #12]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80076ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	7858      	ldrb	r0, [r3, #1]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	2301      	movs	r3, #1
 80076c6:	f7fd fc69 	bl	8004f9c <disk_read>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <f_open+0x37e>
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80076d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <f_open+0x38c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3768      	adds	r7, #104	; 0x68
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	; 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f107 0214 	add.w	r2, r7, #20
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fda5 	bl	8007260 <validate>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800771c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <f_read+0x44>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	7d5b      	ldrb	r3, [r3, #21]
 8007728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800772c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <f_read+0x4a>
 8007734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007738:	e135      	b.n	80079a6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	7d1b      	ldrb	r3, [r3, #20]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <f_read+0x5a>
 8007746:	2307      	movs	r3, #7
 8007748:	e12d      	b.n	80079a6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	429a      	cmp	r2, r3
 800775c:	f240 811e 	bls.w	800799c <f_read+0x2ac>
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007764:	e11a      	b.n	800799c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	8992      	ldrh	r2, [r2, #12]
 800776e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007772:	fb01 f202 	mul.w	r2, r1, r2
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 80d5 	bne.w	8007928 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	8992      	ldrh	r2, [r2, #12]
 8007786:	fbb3 f3f2 	udiv	r3, r3, r2
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	8952      	ldrh	r2, [r2, #10]
 800778e:	3a01      	subs	r2, #1
 8007790:	4013      	ands	r3, r2
 8007792:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d12f      	bne.n	80077fa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
 80077a8:	e013      	b.n	80077d2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	4619      	mov	r1, r3
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7fe faa5 	bl	8005d08 <clmt_clust>
 80077be:	6338      	str	r0, [r7, #48]	; 0x30
 80077c0:	e007      	b.n	80077d2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fd ffb1 	bl	8005732 <get_fat>
 80077d0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d804      	bhi.n	80077e2 <f_read+0xf2>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2202      	movs	r2, #2
 80077dc:	755a      	strb	r2, [r3, #21]
 80077de:	2302      	movs	r3, #2
 80077e0:	e0e1      	b.n	80079a6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d104      	bne.n	80077f4 <f_read+0x104>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	755a      	strb	r2, [r3, #21]
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0d8      	b.n	80079a6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fd ff76 	bl	80056f4 <clust2sect>
 8007808:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <f_read+0x12a>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	755a      	strb	r2, [r3, #21]
 8007816:	2302      	movs	r3, #2
 8007818:	e0c5      	b.n	80079a6 <f_read+0x2b6>
			sect += csect;
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	4413      	add	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	899b      	ldrh	r3, [r3, #12]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	fbb3 f3f2 	udiv	r3, r3, r2
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d041      	beq.n	80078ba <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	4413      	add	r3, r2
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	8952      	ldrh	r2, [r2, #10]
 8007840:	4293      	cmp	r3, r2
 8007842:	d905      	bls.n	8007850 <f_read+0x160>
					cc = fs->csize - csect;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	895b      	ldrh	r3, [r3, #10]
 8007848:	461a      	mov	r2, r3
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	7858      	ldrb	r0, [r3, #1]
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800785a:	f7fd fb9f 	bl	8004f9c <disk_read>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <f_read+0x17e>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	755a      	strb	r2, [r3, #21]
 800786a:	2301      	movs	r3, #1
 800786c:	e09b      	b.n	80079a6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	7d1b      	ldrb	r3, [r3, #20]
 8007872:	b25b      	sxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	da18      	bge.n	80078aa <f_read+0x1ba>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007882:	429a      	cmp	r2, r3
 8007884:	d911      	bls.n	80078aa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	8992      	ldrh	r2, [r2, #12]
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007898:	18d0      	adds	r0, r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	899b      	ldrh	r3, [r3, #12]
 80078a4:	461a      	mov	r2, r3
 80078a6:	f7fd fc59 	bl	800515c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	899b      	ldrh	r3, [r3, #12]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80078b8:	e05c      	b.n	8007974 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d02e      	beq.n	8007922 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7d1b      	ldrb	r3, [r3, #20]
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	da18      	bge.n	8007900 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	7858      	ldrb	r0, [r3, #1]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	2301      	movs	r3, #1
 80078de:	f7fd fb7d 	bl	8004fdc <disk_write>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <f_read+0x202>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	755a      	strb	r2, [r3, #21]
 80078ee:	2301      	movs	r3, #1
 80078f0:	e059      	b.n	80079a6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	7d1b      	ldrb	r3, [r3, #20]
 80078f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	7858      	ldrb	r0, [r3, #1]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800790a:	2301      	movs	r3, #1
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	f7fd fb45 	bl	8004f9c <disk_read>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <f_read+0x232>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	755a      	strb	r2, [r3, #21]
 800791e:	2301      	movs	r3, #1
 8007920:	e041      	b.n	80079a6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	899b      	ldrh	r3, [r3, #12]
 800792c:	4618      	mov	r0, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	8992      	ldrh	r2, [r2, #12]
 8007936:	fbb3 f1f2 	udiv	r1, r3, r2
 800793a:	fb01 f202 	mul.w	r2, r1, r2
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	1ac3      	subs	r3, r0, r3
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d901      	bls.n	8007950 <f_read+0x260>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	8992      	ldrh	r2, [r2, #12]
 800795e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007962:	fb00 f202 	mul.w	r2, r0, r2
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	440b      	add	r3, r1
 800796a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796c:	4619      	mov	r1, r3
 800796e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007970:	f7fd fbf4 	bl	800515c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	4413      	add	r3, r2
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	441a      	add	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	619a      	str	r2, [r3, #24]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	441a      	add	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f47f aee1 	bne.w	8007766 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3738      	adds	r7, #56	; 0x38
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b08c      	sub	sp, #48	; 0x30
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f107 0210 	add.w	r2, r7, #16
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff fc46 	bl	8007260 <validate>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80079da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <f_write+0x44>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	7d5b      	ldrb	r3, [r3, #21]
 80079e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <f_write+0x4a>
 80079f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079f6:	e16a      	b.n	8007cce <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	7d1b      	ldrb	r3, [r3, #20]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <f_write+0x5a>
 8007a04:	2307      	movs	r3, #7
 8007a06:	e162      	b.n	8007cce <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	f080 814c 	bcs.w	8007cb2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007a22:	e146      	b.n	8007cb2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	8992      	ldrh	r2, [r2, #12]
 8007a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a30:	fb01 f202 	mul.w	r2, r1, r2
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 80f1 	bne.w	8007c1e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	8992      	ldrh	r2, [r2, #12]
 8007a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	8952      	ldrh	r2, [r2, #10]
 8007a4c:	3a01      	subs	r2, #1
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d143      	bne.n	8007ae0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10c      	bne.n	8007a7a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d11a      	bne.n	8007aa2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe f8b1 	bl	8005bd8 <create_chain>
 8007a76:	62b8      	str	r0, [r7, #40]	; 0x28
 8007a78:	e013      	b.n	8007aa2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	4619      	mov	r1, r3
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7fe f93d 	bl	8005d08 <clmt_clust>
 8007a8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007a90:	e007      	b.n	8007aa2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f7fe f89c 	bl	8005bd8 <create_chain>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8109 	beq.w	8007cbc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d104      	bne.n	8007aba <f_write+0x10c>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	755a      	strb	r2, [r3, #21]
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e109      	b.n	8007cce <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d104      	bne.n	8007acc <f_write+0x11e>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	755a      	strb	r2, [r3, #21]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e100      	b.n	8007cce <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <f_write+0x132>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ade:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	7d1b      	ldrb	r3, [r3, #20]
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da18      	bge.n	8007b1c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	7858      	ldrb	r0, [r3, #1]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	2301      	movs	r3, #1
 8007afa:	f7fd fa6f 	bl	8004fdc <disk_write>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <f_write+0x160>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	755a      	strb	r2, [r3, #21]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e0df      	b.n	8007cce <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	7d1b      	ldrb	r3, [r3, #20]
 8007b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7fd fde5 	bl	80056f4 <clust2sect>
 8007b2a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <f_write+0x18e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2202      	movs	r2, #2
 8007b36:	755a      	strb	r2, [r3, #21]
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e0c8      	b.n	8007cce <f_write+0x320>
			sect += csect;
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	4413      	add	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	899b      	ldrh	r3, [r3, #12]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d043      	beq.n	8007be0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	8952      	ldrh	r2, [r2, #10]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d905      	bls.n	8007b72 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	895b      	ldrh	r3, [r3, #10]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	7858      	ldrb	r0, [r3, #1]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	69f9      	ldr	r1, [r7, #28]
 8007b7c:	f7fd fa2e 	bl	8004fdc <disk_write>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <f_write+0x1e2>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	755a      	strb	r2, [r3, #21]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e09e      	b.n	8007cce <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d918      	bls.n	8007bd0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1a      	ldr	r2, [r3, #32]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	8992      	ldrh	r2, [r2, #12]
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	18d1      	adds	r1, r2, r3
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f7fd facd 	bl	800515c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	7d1b      	ldrb	r3, [r3, #20]
 8007bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	899b      	ldrh	r3, [r3, #12]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007bde:	e04b      	b.n	8007c78 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d016      	beq.n	8007c18 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d210      	bcs.n	8007c18 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	7858      	ldrb	r0, [r3, #1]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c00:	2301      	movs	r3, #1
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	f7fd f9ca 	bl	8004f9c <disk_read>
 8007c08:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	755a      	strb	r2, [r3, #21]
 8007c14:	2301      	movs	r3, #1
 8007c16:	e05a      	b.n	8007cce <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	899b      	ldrh	r3, [r3, #12]
 8007c22:	4618      	mov	r0, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	8992      	ldrh	r2, [r2, #12]
 8007c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c30:	fb01 f202 	mul.w	r2, r1, r2
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	1ac3      	subs	r3, r0, r3
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d901      	bls.n	8007c46 <f_write+0x298>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	8992      	ldrh	r2, [r2, #12]
 8007c54:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c58:	fb00 f202 	mul.w	r2, r0, r2
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	440b      	add	r3, r1
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	69f9      	ldr	r1, [r7, #28]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd fa79 	bl	800515c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7d1b      	ldrb	r3, [r3, #20]
 8007c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	619a      	str	r2, [r3, #24]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	bf38      	it	cc
 8007c98:	461a      	movcc	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	60da      	str	r2, [r3, #12]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	441a      	add	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f47f aeb5 	bne.w	8007a24 <f_write+0x76>
 8007cba:	e000      	b.n	8007cbe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007cbc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	7d1b      	ldrb	r3, [r3, #20]
 8007cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3730      	adds	r7, #48	; 0x30
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f107 0208 	add.w	r2, r7, #8
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff faba 	bl	8007260 <validate>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d168      	bne.n	8007dc8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7d1b      	ldrb	r3, [r3, #20]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d062      	beq.n	8007dc8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7d1b      	ldrb	r3, [r3, #20]
 8007d06:	b25b      	sxtb	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da15      	bge.n	8007d38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	7858      	ldrb	r0, [r3, #1]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f7fd f95e 	bl	8004fdc <disk_write>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <f_sync+0x54>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e04f      	b.n	8007dca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7d1b      	ldrb	r3, [r3, #20]
 8007d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007d38:	f7fd f894 	bl	8004e64 <get_fattime>
 8007d3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fd fc36 	bl	80055b8 <move_window>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d138      	bne.n	8007dc8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	330b      	adds	r3, #11
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	330b      	adds	r3, #11
 8007d66:	f042 0220 	orr.w	r2, r2, #32
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	461a      	mov	r2, r3
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	f7fe f9c2 	bl	8006102 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f103 021c 	add.w	r2, r3, #28
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fd f9ba 	bl	8005104 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3316      	adds	r3, #22
 8007d94:	6939      	ldr	r1, [r7, #16]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fd f9b4 	bl	8005104 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3312      	adds	r3, #18
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd f993 	bl	80050ce <st_word>
					fs->wflag = 1;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2201      	movs	r2, #1
 8007dac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd fc2f 	bl	8005614 <sync_fs>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7d1b      	ldrb	r3, [r3, #20]
 8007dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff ff7b 	bl	8007cd6 <f_sync>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d118      	bne.n	8007e1c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f107 0208 	add.w	r2, r7, #8
 8007df0:	4611      	mov	r1, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fa34 	bl	8007260 <validate>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10c      	bne.n	8007e1c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fd fb32 	bl	8005470 <dec_lock>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b092      	sub	sp, #72	; 0x48
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007e32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe ff89 	bl	8006d54 <find_volume>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 8099 	bne.w	8007f84 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	699a      	ldr	r2, [r3, #24]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	3b02      	subs	r3, #2
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d804      	bhi.n	8007e70 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e089      	b.n	8007f84 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d128      	bne.n	8007ece <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fd fc51 	bl	8005732 <get_fat>
 8007e90:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d103      	bne.n	8007ea2 <f_getfree+0x7c>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ea0:	e063      	b.n	8007f6a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d103      	bne.n	8007eb0 <f_getfree+0x8a>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007eae:	e05c      	b.n	8007f6a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <f_getfree+0x96>
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	3301      	adds	r3, #1
 8007eba:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d3db      	bcc.n	8007e84 <f_getfree+0x5e>
 8007ecc:	e04d      	b.n	8007f6a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ede:	2300      	movs	r3, #0
 8007ee0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d113      	bne.n	8007f10 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f7fd fb61 	bl	80055b8 <move_window>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007efc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d131      	bne.n	8007f68 <f_getfree+0x142>
							p = fs->win;
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	3338      	adds	r3, #56	; 0x38
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d10f      	bne.n	8007f38 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f1a:	f7fd f89d 	bl	8005058 <ld_word>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <f_getfree+0x104>
 8007f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f26:	3301      	adds	r3, #1
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	3b02      	subs	r3, #2
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
 8007f36:	e010      	b.n	8007f5a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3a:	f7fd f8a5 	bl	8005088 <ld_dword>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <f_getfree+0x128>
 8007f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	3304      	adds	r3, #4
 8007f52:	633b      	str	r3, [r7, #48]	; 0x30
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	3b04      	subs	r3, #4
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1bd      	bne.n	8007ee2 <f_getfree+0xbc>
 8007f66:	e000      	b.n	8007f6a <f_getfree+0x144>
							if (res != FR_OK) break;
 8007f68:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f6e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f74:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	791a      	ldrb	r2, [r3, #4]
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3748      	adds	r7, #72	; 0x48
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007fa4:	e01b      	b.n	8007fde <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	f107 0114 	add.w	r1, r7, #20
 8007fae:	2201      	movs	r2, #1
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff fb9d 	bl	80076f0 <f_read>
		if (rc != 1) break;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d116      	bne.n	8007fea <f_gets+0x5a>
		c = s[0];
 8007fbc:	7d3b      	ldrb	r3, [r7, #20]
 8007fbe:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b0d      	cmp	r3, #13
 8007fc4:	d100      	bne.n	8007fc8 <f_gets+0x38>
 8007fc6:	e00a      	b.n	8007fde <f_gets+0x4e>
		*p++ = c;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	61ba      	str	r2, [r7, #24]
 8007fce:	7dfa      	ldrb	r2, [r7, #23]
 8007fd0:	701a      	strb	r2, [r3, #0]
		n++;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b0a      	cmp	r3, #10
 8007fdc:	d007      	beq.n	8007fee <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	dbde      	blt.n	8007fa6 <f_gets+0x16>
 8007fe8:	e002      	b.n	8007ff0 <f_gets+0x60>
		if (rc != 1) break;
 8007fea:	bf00      	nop
 8007fec:	e000      	b.n	8007ff0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007fee:	bf00      	nop
	}
	*p = 0;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <f_gets+0x70>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e000      	b.n	8008002 <f_gets+0x72>
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	2b0a      	cmp	r3, #10
 800801a:	d103      	bne.n	8008024 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800801c:	210d      	movs	r1, #13
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fff3 	bl	800800a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	db25      	blt.n	800807c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	60fa      	str	r2, [r7, #12]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	4413      	add	r3, r2
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b3c      	cmp	r3, #60	; 0x3c
 8008042:	dd12      	ble.n	800806a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 010c 	add.w	r1, r3, #12
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	f7ff fcab 	bl	80079ae <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	429a      	cmp	r2, r3
 800805e:	d101      	bne.n	8008064 <putc_bfd+0x5a>
 8008060:	2300      	movs	r3, #0
 8008062:	e001      	b.n	8008068 <putc_bfd+0x5e>
 8008064:	f04f 33ff 	mov.w	r3, #4294967295
 8008068:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	609a      	str	r2, [r3, #8]
 800807a:	e000      	b.n	800807e <putc_bfd+0x74>
	if (i < 0) return;
 800807c:	bf00      	nop
}
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	db16      	blt.n	80080c2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f103 010c 	add.w	r1, r3, #12
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	f7ff fc81 	bl	80079ae <f_write>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d102      	bne.n	80080c2 <putc_flush+0x3e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	e001      	b.n	80080c6 <putc_flush+0x42>
	return EOF;
 80080c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	605a      	str	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b096      	sub	sp, #88	; 0x58
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ffe0 	bl	80080ce <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800810e:	e009      	b.n	8008124 <f_puts+0x2c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	f107 030c 	add.w	r3, r7, #12
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff ff73 	bl	800800a <putc_bfd>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f1      	bne.n	8008110 <f_puts+0x18>
	return putc_flush(&pb);
 800812c:	f107 030c 	add.w	r3, r7, #12
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff ffa7 	bl	8008084 <putc_flush>
 8008136:	4603      	mov	r3, r0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3758      	adds	r7, #88	; 0x58
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008156:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008158:	7a5b      	ldrb	r3, [r3, #9]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d131      	bne.n	80081c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008162:	7a5b      	ldrb	r3, [r3, #9]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 800816a:	2100      	movs	r1, #0
 800816c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008170:	7a5b      	ldrb	r3, [r3, #9]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008180:	7a5b      	ldrb	r3, [r3, #9]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008188:	4413      	add	r3, r2
 800818a:	79fa      	ldrb	r2, [r7, #7]
 800818c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008190:	7a5b      	ldrb	r3, [r3, #9]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	b2d1      	uxtb	r1, r2
 8008198:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 800819a:	7251      	strb	r1, [r2, #9]
 800819c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	3330      	adds	r3, #48	; 0x30
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	223a      	movs	r2, #58	; 0x3a
 80081ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3302      	adds	r3, #2
 80081b4:	222f      	movs	r2, #47	; 0x2f
 80081b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3303      	adds	r3, #3
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	200003c8 	.word	0x200003c8

080081d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff ffaa 	bl	8008140 <FATFS_LinkDriverEx>
 80081ec:	4603      	mov	r3, r0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	2b7f      	cmp	r3, #127	; 0x7f
 8008208:	d802      	bhi.n	8008210 <ff_convert+0x18>
		c = chr;
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	81fb      	strh	r3, [r7, #14]
 800820e:	e025      	b.n	800825c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	2bff      	cmp	r3, #255	; 0xff
 800821a:	d805      	bhi.n	8008228 <ff_convert+0x30>
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	3b80      	subs	r3, #128	; 0x80
 8008220:	4a12      	ldr	r2, [pc, #72]	; (800826c <ff_convert+0x74>)
 8008222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008226:	e000      	b.n	800822a <ff_convert+0x32>
 8008228:	2300      	movs	r3, #0
 800822a:	81fb      	strh	r3, [r7, #14]
 800822c:	e016      	b.n	800825c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800822e:	2300      	movs	r3, #0
 8008230:	81fb      	strh	r3, [r7, #14]
 8008232:	e009      	b.n	8008248 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	4a0d      	ldr	r2, [pc, #52]	; (800826c <ff_convert+0x74>)
 8008238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823c:	88fa      	ldrh	r2, [r7, #6]
 800823e:	429a      	cmp	r2, r3
 8008240:	d006      	beq.n	8008250 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008242:	89fb      	ldrh	r3, [r7, #14]
 8008244:	3301      	adds	r3, #1
 8008246:	81fb      	strh	r3, [r7, #14]
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	2b7f      	cmp	r3, #127	; 0x7f
 800824c:	d9f2      	bls.n	8008234 <ff_convert+0x3c>
 800824e:	e000      	b.n	8008252 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008250:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008252:	89fb      	ldrh	r3, [r7, #14]
 8008254:	3380      	adds	r3, #128	; 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800825c:	89fb      	ldrh	r3, [r7, #14]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	0800953c 	.word	0x0800953c

08008270 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008280:	d201      	bcs.n	8008286 <ff_wtoupper+0x16>
 8008282:	4b3e      	ldr	r3, [pc, #248]	; (800837c <ff_wtoupper+0x10c>)
 8008284:	e000      	b.n	8008288 <ff_wtoupper+0x18>
 8008286:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <ff_wtoupper+0x110>)
 8008288:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	1c9a      	adds	r2, r3, #2
 800828e:	617a      	str	r2, [r7, #20]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008294:	8a7b      	ldrh	r3, [r7, #18]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d068      	beq.n	800836c <ff_wtoupper+0xfc>
 800829a:	88fa      	ldrh	r2, [r7, #6]
 800829c:	8a7b      	ldrh	r3, [r7, #18]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d364      	bcc.n	800836c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	617a      	str	r2, [r7, #20]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	823b      	strh	r3, [r7, #16]
 80082ac:	8a3b      	ldrh	r3, [r7, #16]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	81fb      	strh	r3, [r7, #14]
 80082b2:	8a3b      	ldrh	r3, [r7, #16]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80082b8:	88fa      	ldrh	r2, [r7, #6]
 80082ba:	8a79      	ldrh	r1, [r7, #18]
 80082bc:	8a3b      	ldrh	r3, [r7, #16]
 80082be:	440b      	add	r3, r1
 80082c0:	429a      	cmp	r2, r3
 80082c2:	da49      	bge.n	8008358 <ff_wtoupper+0xe8>
			switch (cmd) {
 80082c4:	89fb      	ldrh	r3, [r7, #14]
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d84f      	bhi.n	800836a <ff_wtoupper+0xfa>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <ff_wtoupper+0x60>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	08008307 	.word	0x08008307
 80082d8:	0800831d 	.word	0x0800831d
 80082dc:	08008325 	.word	0x08008325
 80082e0:	0800832d 	.word	0x0800832d
 80082e4:	08008335 	.word	0x08008335
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	08008345 	.word	0x08008345
 80082f0:	0800834d 	.word	0x0800834d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80082f4:	88fa      	ldrh	r2, [r7, #6]
 80082f6:	8a7b      	ldrh	r3, [r7, #18]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	80fb      	strh	r3, [r7, #6]
 8008304:	e027      	b.n	8008356 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008306:	88fa      	ldrh	r2, [r7, #6]
 8008308:	8a7b      	ldrh	r3, [r7, #18]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	b29b      	uxth	r3, r3
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	b29b      	uxth	r3, r3
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	80fb      	strh	r3, [r7, #6]
 800831a:	e01c      	b.n	8008356 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	3b10      	subs	r3, #16
 8008320:	80fb      	strh	r3, [r7, #6]
 8008322:	e018      	b.n	8008356 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	3b20      	subs	r3, #32
 8008328:	80fb      	strh	r3, [r7, #6]
 800832a:	e014      	b.n	8008356 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	3b30      	subs	r3, #48	; 0x30
 8008330:	80fb      	strh	r3, [r7, #6]
 8008332:	e010      	b.n	8008356 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	3b1a      	subs	r3, #26
 8008338:	80fb      	strh	r3, [r7, #6]
 800833a:	e00c      	b.n	8008356 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	3308      	adds	r3, #8
 8008340:	80fb      	strh	r3, [r7, #6]
 8008342:	e008      	b.n	8008356 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	3b50      	subs	r3, #80	; 0x50
 8008348:	80fb      	strh	r3, [r7, #6]
 800834a:	e004      	b.n	8008356 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008352:	80fb      	strh	r3, [r7, #6]
 8008354:	bf00      	nop
			}
			break;
 8008356:	e008      	b.n	800836a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008358:	89fb      	ldrh	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d195      	bne.n	800828a <ff_wtoupper+0x1a>
 800835e:	8a3b      	ldrh	r3, [r7, #16]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4413      	add	r3, r2
 8008366:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008368:	e78f      	b.n	800828a <ff_wtoupper+0x1a>
			break;
 800836a:	bf00      	nop
	}

	return chr;
 800836c:	88fb      	ldrh	r3, [r7, #6]
}
 800836e:	4618      	mov	r0, r3
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	0800963c 	.word	0x0800963c
 8008380:	08009830 	.word	0x08009830

08008384 <std>:
 8008384:	2300      	movs	r3, #0
 8008386:	b510      	push	{r4, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	e9c0 3300 	strd	r3, r3, [r0]
 800838e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008392:	6083      	str	r3, [r0, #8]
 8008394:	8181      	strh	r1, [r0, #12]
 8008396:	6643      	str	r3, [r0, #100]	; 0x64
 8008398:	81c2      	strh	r2, [r0, #14]
 800839a:	6183      	str	r3, [r0, #24]
 800839c:	4619      	mov	r1, r3
 800839e:	2208      	movs	r2, #8
 80083a0:	305c      	adds	r0, #92	; 0x5c
 80083a2:	f000 f9f7 	bl	8008794 <memset>
 80083a6:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <std+0x58>)
 80083a8:	6263      	str	r3, [r4, #36]	; 0x24
 80083aa:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <std+0x5c>)
 80083ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <std+0x60>)
 80083b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083b2:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <std+0x64>)
 80083b4:	6323      	str	r3, [r4, #48]	; 0x30
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <std+0x68>)
 80083b8:	6224      	str	r4, [r4, #32]
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d006      	beq.n	80083cc <std+0x48>
 80083be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083c2:	4294      	cmp	r4, r2
 80083c4:	d002      	beq.n	80083cc <std+0x48>
 80083c6:	33d0      	adds	r3, #208	; 0xd0
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d105      	bne.n	80083d8 <std+0x54>
 80083cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d4:	f000 ba56 	b.w	8008884 <__retarget_lock_init_recursive>
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	bf00      	nop
 80083dc:	080085e5 	.word	0x080085e5
 80083e0:	08008607 	.word	0x08008607
 80083e4:	0800863f 	.word	0x0800863f
 80083e8:	08008663 	.word	0x08008663
 80083ec:	200003d4 	.word	0x200003d4

080083f0 <stdio_exit_handler>:
 80083f0:	4a02      	ldr	r2, [pc, #8]	; (80083fc <stdio_exit_handler+0xc>)
 80083f2:	4903      	ldr	r1, [pc, #12]	; (8008400 <stdio_exit_handler+0x10>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <stdio_exit_handler+0x14>)
 80083f6:	f000 b869 	b.w	80084cc <_fwalk_sglue>
 80083fa:	bf00      	nop
 80083fc:	20000024 	.word	0x20000024
 8008400:	08009131 	.word	0x08009131
 8008404:	20000030 	.word	0x20000030

08008408 <cleanup_stdio>:
 8008408:	6841      	ldr	r1, [r0, #4]
 800840a:	4b0c      	ldr	r3, [pc, #48]	; (800843c <cleanup_stdio+0x34>)
 800840c:	4299      	cmp	r1, r3
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	d001      	beq.n	8008418 <cleanup_stdio+0x10>
 8008414:	f000 fe8c 	bl	8009130 <_fflush_r>
 8008418:	68a1      	ldr	r1, [r4, #8]
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <cleanup_stdio+0x38>)
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <cleanup_stdio+0x1e>
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fe85 	bl	8009130 <_fflush_r>
 8008426:	68e1      	ldr	r1, [r4, #12]
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <cleanup_stdio+0x3c>)
 800842a:	4299      	cmp	r1, r3
 800842c:	d004      	beq.n	8008438 <cleanup_stdio+0x30>
 800842e:	4620      	mov	r0, r4
 8008430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008434:	f000 be7c 	b.w	8009130 <_fflush_r>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	200003d4 	.word	0x200003d4
 8008440:	2000043c 	.word	0x2000043c
 8008444:	200004a4 	.word	0x200004a4

08008448 <global_stdio_init.part.0>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <global_stdio_init.part.0+0x30>)
 800844c:	4c0b      	ldr	r4, [pc, #44]	; (800847c <global_stdio_init.part.0+0x34>)
 800844e:	4a0c      	ldr	r2, [pc, #48]	; (8008480 <global_stdio_init.part.0+0x38>)
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	2200      	movs	r2, #0
 8008456:	2104      	movs	r1, #4
 8008458:	f7ff ff94 	bl	8008384 <std>
 800845c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008460:	2201      	movs	r2, #1
 8008462:	2109      	movs	r1, #9
 8008464:	f7ff ff8e 	bl	8008384 <std>
 8008468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800846c:	2202      	movs	r2, #2
 800846e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008472:	2112      	movs	r1, #18
 8008474:	f7ff bf86 	b.w	8008384 <std>
 8008478:	2000050c 	.word	0x2000050c
 800847c:	200003d4 	.word	0x200003d4
 8008480:	080083f1 	.word	0x080083f1

08008484 <__sfp_lock_acquire>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sfp_lock_acquire+0x8>)
 8008486:	f000 b9fe 	b.w	8008886 <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	20000515 	.word	0x20000515

08008490 <__sfp_lock_release>:
 8008490:	4801      	ldr	r0, [pc, #4]	; (8008498 <__sfp_lock_release+0x8>)
 8008492:	f000 b9f9 	b.w	8008888 <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	20000515 	.word	0x20000515

0800849c <__sinit>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	f7ff fff0 	bl	8008484 <__sfp_lock_acquire>
 80084a4:	6a23      	ldr	r3, [r4, #32]
 80084a6:	b11b      	cbz	r3, 80084b0 <__sinit+0x14>
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	f7ff bff0 	b.w	8008490 <__sfp_lock_release>
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <__sinit+0x28>)
 80084b2:	6223      	str	r3, [r4, #32]
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <__sinit+0x2c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f5      	bne.n	80084a8 <__sinit+0xc>
 80084bc:	f7ff ffc4 	bl	8008448 <global_stdio_init.part.0>
 80084c0:	e7f2      	b.n	80084a8 <__sinit+0xc>
 80084c2:	bf00      	nop
 80084c4:	08008409 	.word	0x08008409
 80084c8:	2000050c 	.word	0x2000050c

080084cc <_fwalk_sglue>:
 80084cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4607      	mov	r7, r0
 80084d2:	4688      	mov	r8, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	2600      	movs	r6, #0
 80084d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084dc:	f1b9 0901 	subs.w	r9, r9, #1
 80084e0:	d505      	bpl.n	80084ee <_fwalk_sglue+0x22>
 80084e2:	6824      	ldr	r4, [r4, #0]
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	d1f7      	bne.n	80084d8 <_fwalk_sglue+0xc>
 80084e8:	4630      	mov	r0, r6
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d907      	bls.n	8008504 <_fwalk_sglue+0x38>
 80084f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f8:	3301      	adds	r3, #1
 80084fa:	d003      	beq.n	8008504 <_fwalk_sglue+0x38>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	4306      	orrs	r6, r0
 8008504:	3568      	adds	r5, #104	; 0x68
 8008506:	e7e9      	b.n	80084dc <_fwalk_sglue+0x10>

08008508 <iprintf>:
 8008508:	b40f      	push	{r0, r1, r2, r3}
 800850a:	b507      	push	{r0, r1, r2, lr}
 800850c:	4906      	ldr	r1, [pc, #24]	; (8008528 <iprintf+0x20>)
 800850e:	ab04      	add	r3, sp, #16
 8008510:	6808      	ldr	r0, [r1, #0]
 8008512:	f853 2b04 	ldr.w	r2, [r3], #4
 8008516:	6881      	ldr	r1, [r0, #8]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	f000 fad9 	bl	8008ad0 <_vfiprintf_r>
 800851e:	b003      	add	sp, #12
 8008520:	f85d eb04 	ldr.w	lr, [sp], #4
 8008524:	b004      	add	sp, #16
 8008526:	4770      	bx	lr
 8008528:	2000007c 	.word	0x2000007c

0800852c <_puts_r>:
 800852c:	6a03      	ldr	r3, [r0, #32]
 800852e:	b570      	push	{r4, r5, r6, lr}
 8008530:	6884      	ldr	r4, [r0, #8]
 8008532:	4605      	mov	r5, r0
 8008534:	460e      	mov	r6, r1
 8008536:	b90b      	cbnz	r3, 800853c <_puts_r+0x10>
 8008538:	f7ff ffb0 	bl	800849c <__sinit>
 800853c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800853e:	07db      	lsls	r3, r3, #31
 8008540:	d405      	bmi.n	800854e <_puts_r+0x22>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	0598      	lsls	r0, r3, #22
 8008546:	d402      	bmi.n	800854e <_puts_r+0x22>
 8008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854a:	f000 f99c 	bl	8008886 <__retarget_lock_acquire_recursive>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	0719      	lsls	r1, r3, #28
 8008552:	d513      	bpl.n	800857c <_puts_r+0x50>
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	b18b      	cbz	r3, 800857c <_puts_r+0x50>
 8008558:	3e01      	subs	r6, #1
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008560:	3b01      	subs	r3, #1
 8008562:	60a3      	str	r3, [r4, #8]
 8008564:	b9e9      	cbnz	r1, 80085a2 <_puts_r+0x76>
 8008566:	2b00      	cmp	r3, #0
 8008568:	da2e      	bge.n	80085c8 <_puts_r+0x9c>
 800856a:	4622      	mov	r2, r4
 800856c:	210a      	movs	r1, #10
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f87b 	bl	800866a <__swbuf_r>
 8008574:	3001      	adds	r0, #1
 8008576:	d007      	beq.n	8008588 <_puts_r+0x5c>
 8008578:	250a      	movs	r5, #10
 800857a:	e007      	b.n	800858c <_puts_r+0x60>
 800857c:	4621      	mov	r1, r4
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f8b0 	bl	80086e4 <__swsetup_r>
 8008584:	2800      	cmp	r0, #0
 8008586:	d0e7      	beq.n	8008558 <_puts_r+0x2c>
 8008588:	f04f 35ff 	mov.w	r5, #4294967295
 800858c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800858e:	07da      	lsls	r2, r3, #31
 8008590:	d405      	bmi.n	800859e <_puts_r+0x72>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	059b      	lsls	r3, r3, #22
 8008596:	d402      	bmi.n	800859e <_puts_r+0x72>
 8008598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859a:	f000 f975 	bl	8008888 <__retarget_lock_release_recursive>
 800859e:	4628      	mov	r0, r5
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	da04      	bge.n	80085b0 <_puts_r+0x84>
 80085a6:	69a2      	ldr	r2, [r4, #24]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	dc06      	bgt.n	80085ba <_puts_r+0x8e>
 80085ac:	290a      	cmp	r1, #10
 80085ae:	d004      	beq.n	80085ba <_puts_r+0x8e>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	7019      	strb	r1, [r3, #0]
 80085b8:	e7cf      	b.n	800855a <_puts_r+0x2e>
 80085ba:	4622      	mov	r2, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 f854 	bl	800866a <__swbuf_r>
 80085c2:	3001      	adds	r0, #1
 80085c4:	d1c9      	bne.n	800855a <_puts_r+0x2e>
 80085c6:	e7df      	b.n	8008588 <_puts_r+0x5c>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	250a      	movs	r5, #10
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	701d      	strb	r5, [r3, #0]
 80085d2:	e7db      	b.n	800858c <_puts_r+0x60>

080085d4 <puts>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <puts+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f7ff bfa7 	b.w	800852c <_puts_r>
 80085de:	bf00      	nop
 80085e0:	2000007c 	.word	0x2000007c

080085e4 <__sread>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	460c      	mov	r4, r1
 80085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ec:	f000 f8fc 	bl	80087e8 <_read_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	bfab      	itete	ge
 80085f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085f6:	89a3      	ldrhlt	r3, [r4, #12]
 80085f8:	181b      	addge	r3, r3, r0
 80085fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085fe:	bfac      	ite	ge
 8008600:	6563      	strge	r3, [r4, #84]	; 0x54
 8008602:	81a3      	strhlt	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__swrite>:
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	461f      	mov	r7, r3
 800860c:	898b      	ldrh	r3, [r1, #12]
 800860e:	05db      	lsls	r3, r3, #23
 8008610:	4605      	mov	r5, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4616      	mov	r6, r2
 8008616:	d505      	bpl.n	8008624 <__swrite+0x1e>
 8008618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861c:	2302      	movs	r3, #2
 800861e:	2200      	movs	r2, #0
 8008620:	f000 f8d0 	bl	80087c4 <_lseek_r>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	f000 b8e7 	b.w	800880c <_write_r>

0800863e <__sseek>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008646:	f000 f8bd 	bl	80087c4 <_lseek_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	bf15      	itete	ne
 8008650:	6560      	strne	r0, [r4, #84]	; 0x54
 8008652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800865a:	81a3      	strheq	r3, [r4, #12]
 800865c:	bf18      	it	ne
 800865e:	81a3      	strhne	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__sclose>:
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	f000 b89d 	b.w	80087a4 <_close_r>

0800866a <__swbuf_r>:
 800866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866c:	460e      	mov	r6, r1
 800866e:	4614      	mov	r4, r2
 8008670:	4605      	mov	r5, r0
 8008672:	b118      	cbz	r0, 800867c <__swbuf_r+0x12>
 8008674:	6a03      	ldr	r3, [r0, #32]
 8008676:	b90b      	cbnz	r3, 800867c <__swbuf_r+0x12>
 8008678:	f7ff ff10 	bl	800849c <__sinit>
 800867c:	69a3      	ldr	r3, [r4, #24]
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	071a      	lsls	r2, r3, #28
 8008684:	d525      	bpl.n	80086d2 <__swbuf_r+0x68>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	b31b      	cbz	r3, 80086d2 <__swbuf_r+0x68>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	6922      	ldr	r2, [r4, #16]
 800868e:	1a98      	subs	r0, r3, r2
 8008690:	6963      	ldr	r3, [r4, #20]
 8008692:	b2f6      	uxtb	r6, r6
 8008694:	4283      	cmp	r3, r0
 8008696:	4637      	mov	r7, r6
 8008698:	dc04      	bgt.n	80086a4 <__swbuf_r+0x3a>
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 fd47 	bl	8009130 <_fflush_r>
 80086a2:	b9e0      	cbnz	r0, 80086de <__swbuf_r+0x74>
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	701e      	strb	r6, [r3, #0]
 80086b2:	6962      	ldr	r2, [r4, #20]
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d004      	beq.n	80086c4 <__swbuf_r+0x5a>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	07db      	lsls	r3, r3, #31
 80086be:	d506      	bpl.n	80086ce <__swbuf_r+0x64>
 80086c0:	2e0a      	cmp	r6, #10
 80086c2:	d104      	bne.n	80086ce <__swbuf_r+0x64>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fd32 	bl	8009130 <_fflush_r>
 80086cc:	b938      	cbnz	r0, 80086de <__swbuf_r+0x74>
 80086ce:	4638      	mov	r0, r7
 80086d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f805 	bl	80086e4 <__swsetup_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0d5      	beq.n	800868a <__swbuf_r+0x20>
 80086de:	f04f 37ff 	mov.w	r7, #4294967295
 80086e2:	e7f4      	b.n	80086ce <__swbuf_r+0x64>

080086e4 <__swsetup_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <__swsetup_r+0xac>)
 80086e8:	4605      	mov	r5, r0
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	460c      	mov	r4, r1
 80086ee:	b118      	cbz	r0, 80086f8 <__swsetup_r+0x14>
 80086f0:	6a03      	ldr	r3, [r0, #32]
 80086f2:	b90b      	cbnz	r3, 80086f8 <__swsetup_r+0x14>
 80086f4:	f7ff fed2 	bl	800849c <__sinit>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086fe:	0718      	lsls	r0, r3, #28
 8008700:	d422      	bmi.n	8008748 <__swsetup_r+0x64>
 8008702:	06d9      	lsls	r1, r3, #27
 8008704:	d407      	bmi.n	8008716 <__swsetup_r+0x32>
 8008706:	2309      	movs	r3, #9
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e034      	b.n	8008780 <__swsetup_r+0x9c>
 8008716:	0758      	lsls	r0, r3, #29
 8008718:	d512      	bpl.n	8008740 <__swsetup_r+0x5c>
 800871a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800871c:	b141      	cbz	r1, 8008730 <__swsetup_r+0x4c>
 800871e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008722:	4299      	cmp	r1, r3
 8008724:	d002      	beq.n	800872c <__swsetup_r+0x48>
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f8b0 	bl	800888c <_free_r>
 800872c:	2300      	movs	r3, #0
 800872e:	6363      	str	r3, [r4, #52]	; 0x34
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	2300      	movs	r3, #0
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f043 0308 	orr.w	r3, r3, #8
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	b94b      	cbnz	r3, 8008760 <__swsetup_r+0x7c>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008756:	d003      	beq.n	8008760 <__swsetup_r+0x7c>
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 fd36 	bl	80091cc <__smakebuf_r>
 8008760:	89a0      	ldrh	r0, [r4, #12]
 8008762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008766:	f010 0301 	ands.w	r3, r0, #1
 800876a:	d00a      	beq.n	8008782 <__swsetup_r+0x9e>
 800876c:	2300      	movs	r3, #0
 800876e:	60a3      	str	r3, [r4, #8]
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	425b      	negs	r3, r3
 8008774:	61a3      	str	r3, [r4, #24]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	b943      	cbnz	r3, 800878c <__swsetup_r+0xa8>
 800877a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800877e:	d1c4      	bne.n	800870a <__swsetup_r+0x26>
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	0781      	lsls	r1, r0, #30
 8008784:	bf58      	it	pl
 8008786:	6963      	ldrpl	r3, [r4, #20]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	e7f4      	b.n	8008776 <__swsetup_r+0x92>
 800878c:	2000      	movs	r0, #0
 800878e:	e7f7      	b.n	8008780 <__swsetup_r+0x9c>
 8008790:	2000007c 	.word	0x2000007c

08008794 <memset>:
 8008794:	4402      	add	r2, r0
 8008796:	4603      	mov	r3, r0
 8008798:	4293      	cmp	r3, r2
 800879a:	d100      	bne.n	800879e <memset+0xa>
 800879c:	4770      	bx	lr
 800879e:	f803 1b01 	strb.w	r1, [r3], #1
 80087a2:	e7f9      	b.n	8008798 <memset+0x4>

080087a4 <_close_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d06      	ldr	r5, [pc, #24]	; (80087c0 <_close_r+0x1c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	f7f9 f8f3 	bl	800199a <_close>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_close_r+0x1a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_close_r+0x1a>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20000510 	.word	0x20000510

080087c4 <_lseek_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	; (80087e4 <_lseek_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7f9 f908 	bl	80019e8 <_lseek>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_lseek_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_lseek_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000510 	.word	0x20000510

080087e8 <_read_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_read_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f9 f896 	bl	8001928 <_read>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_read_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_read_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000510 	.word	0x20000510

0800880c <_write_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_write_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f9 f8a1 	bl	8001962 <_write>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_write_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_write_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000510 	.word	0x20000510

08008830 <__errno>:
 8008830:	4b01      	ldr	r3, [pc, #4]	; (8008838 <__errno+0x8>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	2000007c 	.word	0x2000007c

0800883c <__libc_init_array>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4d0d      	ldr	r5, [pc, #52]	; (8008874 <__libc_init_array+0x38>)
 8008840:	4c0d      	ldr	r4, [pc, #52]	; (8008878 <__libc_init_array+0x3c>)
 8008842:	1b64      	subs	r4, r4, r5
 8008844:	10a4      	asrs	r4, r4, #2
 8008846:	2600      	movs	r6, #0
 8008848:	42a6      	cmp	r6, r4
 800884a:	d109      	bne.n	8008860 <__libc_init_array+0x24>
 800884c:	4d0b      	ldr	r5, [pc, #44]	; (800887c <__libc_init_array+0x40>)
 800884e:	4c0c      	ldr	r4, [pc, #48]	; (8008880 <__libc_init_array+0x44>)
 8008850:	f000 fd2a 	bl	80092a8 <_init>
 8008854:	1b64      	subs	r4, r4, r5
 8008856:	10a4      	asrs	r4, r4, #2
 8008858:	2600      	movs	r6, #0
 800885a:	42a6      	cmp	r6, r4
 800885c:	d105      	bne.n	800886a <__libc_init_array+0x2e>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f855 3b04 	ldr.w	r3, [r5], #4
 8008864:	4798      	blx	r3
 8008866:	3601      	adds	r6, #1
 8008868:	e7ee      	b.n	8008848 <__libc_init_array+0xc>
 800886a:	f855 3b04 	ldr.w	r3, [r5], #4
 800886e:	4798      	blx	r3
 8008870:	3601      	adds	r6, #1
 8008872:	e7f2      	b.n	800885a <__libc_init_array+0x1e>
 8008874:	08009928 	.word	0x08009928
 8008878:	08009928 	.word	0x08009928
 800887c:	08009928 	.word	0x08009928
 8008880:	0800992c 	.word	0x0800992c

08008884 <__retarget_lock_init_recursive>:
 8008884:	4770      	bx	lr

08008886 <__retarget_lock_acquire_recursive>:
 8008886:	4770      	bx	lr

08008888 <__retarget_lock_release_recursive>:
 8008888:	4770      	bx	lr
	...

0800888c <_free_r>:
 800888c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800888e:	2900      	cmp	r1, #0
 8008890:	d044      	beq.n	800891c <_free_r+0x90>
 8008892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008896:	9001      	str	r0, [sp, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f1a1 0404 	sub.w	r4, r1, #4
 800889e:	bfb8      	it	lt
 80088a0:	18e4      	addlt	r4, r4, r3
 80088a2:	f000 f8df 	bl	8008a64 <__malloc_lock>
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <_free_r+0x94>)
 80088a8:	9801      	ldr	r0, [sp, #4]
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	b933      	cbnz	r3, 80088bc <_free_r+0x30>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	b003      	add	sp, #12
 80088b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088b8:	f000 b8da 	b.w	8008a70 <__malloc_unlock>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x46>
 80088c0:	6825      	ldr	r5, [r4, #0]
 80088c2:	1961      	adds	r1, r4, r5
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf01      	itttt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	e7ed      	b.n	80088ae <_free_r+0x22>
 80088d2:	461a      	mov	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b10b      	cbz	r3, 80088dc <_free_r+0x50>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x46>
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	1855      	adds	r5, r2, r1
 80088e0:	42a5      	cmp	r5, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x70>
 80088e4:	6824      	ldr	r4, [r4, #0]
 80088e6:	4421      	add	r1, r4
 80088e8:	1854      	adds	r4, r2, r1
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	d1e0      	bne.n	80088b2 <_free_r+0x26>
 80088f0:	681c      	ldr	r4, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	6053      	str	r3, [r2, #4]
 80088f6:	440c      	add	r4, r1
 80088f8:	6014      	str	r4, [r2, #0]
 80088fa:	e7da      	b.n	80088b2 <_free_r+0x26>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x78>
 80088fe:	230c      	movs	r3, #12
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	e7d6      	b.n	80088b2 <_free_r+0x26>
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	1961      	adds	r1, r4, r5
 8008908:	428b      	cmp	r3, r1
 800890a:	bf04      	itt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	bf04      	itt	eq
 8008914:	1949      	addeq	r1, r1, r5
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	6054      	str	r4, [r2, #4]
 800891a:	e7ca      	b.n	80088b2 <_free_r+0x26>
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	20000518 	.word	0x20000518

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fcaa 	bl	8009288 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fca5 	bl	8009288 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fc9a 	bl	8009288 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	2000051c 	.word	0x2000051c

08008964 <_malloc_r>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a60 <_malloc_r+0xfc>
 8008990:	f000 f868 	bl	8008a64 <__malloc_lock>
 8008994:	f8d8 3000 	ldr.w	r3, [r8]
 8008998:	461c      	mov	r4, r3
 800899a:	bb5c      	cbnz	r4, 80089f4 <_malloc_r+0x90>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc0 	bl	8008924 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d155      	bne.n	8008a56 <_malloc_r+0xf2>
 80089aa:	f8d8 4000 	ldr.w	r4, [r8]
 80089ae:	4626      	mov	r6, r4
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	d145      	bne.n	8008a40 <_malloc_r+0xdc>
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d048      	beq.n	8008a4a <_malloc_r+0xe6>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	4631      	mov	r1, r6
 80089bc:	4638      	mov	r0, r7
 80089be:	eb04 0903 	add.w	r9, r4, r3
 80089c2:	f000 fc61 	bl	8009288 <_sbrk_r>
 80089c6:	4581      	cmp	r9, r0
 80089c8:	d13f      	bne.n	8008a4a <_malloc_r+0xe6>
 80089ca:	6821      	ldr	r1, [r4, #0]
 80089cc:	1a6d      	subs	r5, r5, r1
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ffa7 	bl	8008924 <sbrk_aligned>
 80089d6:	3001      	adds	r0, #1
 80089d8:	d037      	beq.n	8008a4a <_malloc_r+0xe6>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	442b      	add	r3, r5
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f8d8 3000 	ldr.w	r3, [r8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d038      	beq.n	8008a5a <_malloc_r+0xf6>
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	d12b      	bne.n	8008a46 <_malloc_r+0xe2>
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xb0>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d41f      	bmi.n	8008a3a <_malloc_r+0xd6>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xca>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 f829 	bl	8008a70 <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0ae      	beq.n	8008986 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7ab      	b.n	8008986 <_malloc_r+0x22>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	d1dd      	bne.n	80089f0 <_malloc_r+0x8c>
 8008a34:	f8c8 2000 	str.w	r2, [r8]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xb0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7ac      	b.n	800899a <_malloc_r+0x36>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b4      	b.n	80089b0 <_malloc_r+0x4c>
 8008a46:	4613      	mov	r3, r2
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x80>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f000 f80e 	bl	8008a70 <__malloc_unlock>
 8008a54:	e797      	b.n	8008986 <_malloc_r+0x22>
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	e7dc      	b.n	8008a14 <_malloc_r+0xb0>
 8008a5a:	605b      	str	r3, [r3, #4]
 8008a5c:	deff      	udf	#255	; 0xff
 8008a5e:	bf00      	nop
 8008a60:	20000518 	.word	0x20000518

08008a64 <__malloc_lock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_lock+0x8>)
 8008a66:	f7ff bf0e 	b.w	8008886 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000514 	.word	0x20000514

08008a70 <__malloc_unlock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__malloc_unlock+0x8>)
 8008a72:	f7ff bf09 	b.w	8008888 <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	20000514 	.word	0x20000514

08008a7c <__sfputc_r>:
 8008a7c:	6893      	ldr	r3, [r2, #8]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	b410      	push	{r4}
 8008a84:	6093      	str	r3, [r2, #8]
 8008a86:	da08      	bge.n	8008a9a <__sfputc_r+0x1e>
 8008a88:	6994      	ldr	r4, [r2, #24]
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	db01      	blt.n	8008a92 <__sfputc_r+0x16>
 8008a8e:	290a      	cmp	r1, #10
 8008a90:	d103      	bne.n	8008a9a <__sfputc_r+0x1e>
 8008a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a96:	f7ff bde8 	b.w	800866a <__swbuf_r>
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	1c58      	adds	r0, r3, #1
 8008a9e:	6010      	str	r0, [r2, #0]
 8008aa0:	7019      	strb	r1, [r3, #0]
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <__sfputs_r>:
 8008aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	18d5      	adds	r5, r2, r3
 8008ab4:	42ac      	cmp	r4, r5
 8008ab6:	d101      	bne.n	8008abc <__sfputs_r+0x12>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e007      	b.n	8008acc <__sfputs_r+0x22>
 8008abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac0:	463a      	mov	r2, r7
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ffda 	bl	8008a7c <__sfputc_r>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d1f3      	bne.n	8008ab4 <__sfputs_r+0xa>
 8008acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ad0 <_vfiprintf_r>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	b09d      	sub	sp, #116	; 0x74
 8008ad8:	4614      	mov	r4, r2
 8008ada:	4698      	mov	r8, r3
 8008adc:	4606      	mov	r6, r0
 8008ade:	b118      	cbz	r0, 8008ae8 <_vfiprintf_r+0x18>
 8008ae0:	6a03      	ldr	r3, [r0, #32]
 8008ae2:	b90b      	cbnz	r3, 8008ae8 <_vfiprintf_r+0x18>
 8008ae4:	f7ff fcda 	bl	800849c <__sinit>
 8008ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aea:	07d9      	lsls	r1, r3, #31
 8008aec:	d405      	bmi.n	8008afa <_vfiprintf_r+0x2a>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	059a      	lsls	r2, r3, #22
 8008af2:	d402      	bmi.n	8008afa <_vfiprintf_r+0x2a>
 8008af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af6:	f7ff fec6 	bl	8008886 <__retarget_lock_acquire_recursive>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	071b      	lsls	r3, r3, #28
 8008afe:	d501      	bpl.n	8008b04 <_vfiprintf_r+0x34>
 8008b00:	692b      	ldr	r3, [r5, #16]
 8008b02:	b99b      	cbnz	r3, 8008b2c <_vfiprintf_r+0x5c>
 8008b04:	4629      	mov	r1, r5
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff fdec 	bl	80086e4 <__swsetup_r>
 8008b0c:	b170      	cbz	r0, 8008b2c <_vfiprintf_r+0x5c>
 8008b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b10:	07dc      	lsls	r4, r3, #31
 8008b12:	d504      	bpl.n	8008b1e <_vfiprintf_r+0x4e>
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	b01d      	add	sp, #116	; 0x74
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	0598      	lsls	r0, r3, #22
 8008b22:	d4f7      	bmi.n	8008b14 <_vfiprintf_r+0x44>
 8008b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b26:	f7ff feaf 	bl	8008888 <__retarget_lock_release_recursive>
 8008b2a:	e7f3      	b.n	8008b14 <_vfiprintf_r+0x44>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	2320      	movs	r3, #32
 8008b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b3a:	2330      	movs	r3, #48	; 0x30
 8008b3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008cf0 <_vfiprintf_r+0x220>
 8008b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b44:	f04f 0901 	mov.w	r9, #1
 8008b48:	4623      	mov	r3, r4
 8008b4a:	469a      	mov	sl, r3
 8008b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b50:	b10a      	cbz	r2, 8008b56 <_vfiprintf_r+0x86>
 8008b52:	2a25      	cmp	r2, #37	; 0x25
 8008b54:	d1f9      	bne.n	8008b4a <_vfiprintf_r+0x7a>
 8008b56:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5a:	d00b      	beq.n	8008b74 <_vfiprintf_r+0xa4>
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ffa1 	bl	8008aaa <__sfputs_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	f000 80a9 	beq.w	8008cc0 <_vfiprintf_r+0x1f0>
 8008b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b70:	445a      	add	r2, fp
 8008b72:	9209      	str	r2, [sp, #36]	; 0x24
 8008b74:	f89a 3000 	ldrb.w	r3, [sl]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80a1 	beq.w	8008cc0 <_vfiprintf_r+0x1f0>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f04f 32ff 	mov.w	r2, #4294967295
 8008b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b88:	f10a 0a01 	add.w	sl, sl, #1
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b94:	931a      	str	r3, [sp, #104]	; 0x68
 8008b96:	4654      	mov	r4, sl
 8008b98:	2205      	movs	r2, #5
 8008b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9e:	4854      	ldr	r0, [pc, #336]	; (8008cf0 <_vfiprintf_r+0x220>)
 8008ba0:	f7f7 fb16 	bl	80001d0 <memchr>
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	b9d8      	cbnz	r0, 8008be0 <_vfiprintf_r+0x110>
 8008ba8:	06d1      	lsls	r1, r2, #27
 8008baa:	bf44      	itt	mi
 8008bac:	2320      	movmi	r3, #32
 8008bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb2:	0713      	lsls	r3, r2, #28
 8008bb4:	bf44      	itt	mi
 8008bb6:	232b      	movmi	r3, #43	; 0x2b
 8008bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc2:	d015      	beq.n	8008bf0 <_vfiprintf_r+0x120>
 8008bc4:	9a07      	ldr	r2, [sp, #28]
 8008bc6:	4654      	mov	r4, sl
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f04f 0c0a 	mov.w	ip, #10
 8008bce:	4621      	mov	r1, r4
 8008bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd4:	3b30      	subs	r3, #48	; 0x30
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d94d      	bls.n	8008c76 <_vfiprintf_r+0x1a6>
 8008bda:	b1b0      	cbz	r0, 8008c0a <_vfiprintf_r+0x13a>
 8008bdc:	9207      	str	r2, [sp, #28]
 8008bde:	e014      	b.n	8008c0a <_vfiprintf_r+0x13a>
 8008be0:	eba0 0308 	sub.w	r3, r0, r8
 8008be4:	fa09 f303 	lsl.w	r3, r9, r3
 8008be8:	4313      	orrs	r3, r2
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	46a2      	mov	sl, r4
 8008bee:	e7d2      	b.n	8008b96 <_vfiprintf_r+0xc6>
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	1d19      	adds	r1, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	9103      	str	r1, [sp, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbb      	ittet	lt
 8008bfc:	425b      	neglt	r3, r3
 8008bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008c02:	9307      	strge	r3, [sp, #28]
 8008c04:	9307      	strlt	r3, [sp, #28]
 8008c06:	bfb8      	it	lt
 8008c08:	9204      	strlt	r2, [sp, #16]
 8008c0a:	7823      	ldrb	r3, [r4, #0]
 8008c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0e:	d10c      	bne.n	8008c2a <_vfiprintf_r+0x15a>
 8008c10:	7863      	ldrb	r3, [r4, #1]
 8008c12:	2b2a      	cmp	r3, #42	; 0x2a
 8008c14:	d134      	bne.n	8008c80 <_vfiprintf_r+0x1b0>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	1d1a      	adds	r2, r3, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	9203      	str	r2, [sp, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bfb8      	it	lt
 8008c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c26:	3402      	adds	r4, #2
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d00 <_vfiprintf_r+0x230>
 8008c2e:	7821      	ldrb	r1, [r4, #0]
 8008c30:	2203      	movs	r2, #3
 8008c32:	4650      	mov	r0, sl
 8008c34:	f7f7 facc 	bl	80001d0 <memchr>
 8008c38:	b138      	cbz	r0, 8008c4a <_vfiprintf_r+0x17a>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	eba0 000a 	sub.w	r0, r0, sl
 8008c40:	2240      	movs	r2, #64	; 0x40
 8008c42:	4082      	lsls	r2, r0
 8008c44:	4313      	orrs	r3, r2
 8008c46:	3401      	adds	r4, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	4829      	ldr	r0, [pc, #164]	; (8008cf4 <_vfiprintf_r+0x224>)
 8008c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c54:	2206      	movs	r2, #6
 8008c56:	f7f7 fabb 	bl	80001d0 <memchr>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d03f      	beq.n	8008cde <_vfiprintf_r+0x20e>
 8008c5e:	4b26      	ldr	r3, [pc, #152]	; (8008cf8 <_vfiprintf_r+0x228>)
 8008c60:	bb1b      	cbnz	r3, 8008caa <_vfiprintf_r+0x1da>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	3307      	adds	r3, #7
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	443b      	add	r3, r7
 8008c72:	9309      	str	r3, [sp, #36]	; 0x24
 8008c74:	e768      	b.n	8008b48 <_vfiprintf_r+0x78>
 8008c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e7a6      	b.n	8008bce <_vfiprintf_r+0xfe>
 8008c80:	2300      	movs	r3, #0
 8008c82:	3401      	adds	r4, #1
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0c0a 	mov.w	ip, #10
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c92:	3a30      	subs	r2, #48	; 0x30
 8008c94:	2a09      	cmp	r2, #9
 8008c96:	d903      	bls.n	8008ca0 <_vfiprintf_r+0x1d0>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0c6      	beq.n	8008c2a <_vfiprintf_r+0x15a>
 8008c9c:	9105      	str	r1, [sp, #20]
 8008c9e:	e7c4      	b.n	8008c2a <_vfiprintf_r+0x15a>
 8008ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7f0      	b.n	8008c8c <_vfiprintf_r+0x1bc>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <_vfiprintf_r+0x22c>)
 8008cb2:	a904      	add	r1, sp, #16
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f3af 8000 	nop.w
 8008cba:	4607      	mov	r7, r0
 8008cbc:	1c78      	adds	r0, r7, #1
 8008cbe:	d1d6      	bne.n	8008c6e <_vfiprintf_r+0x19e>
 8008cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc2:	07d9      	lsls	r1, r3, #31
 8008cc4:	d405      	bmi.n	8008cd2 <_vfiprintf_r+0x202>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	059a      	lsls	r2, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_vfiprintf_r+0x202>
 8008ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cce:	f7ff fddb 	bl	8008888 <__retarget_lock_release_recursive>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	065b      	lsls	r3, r3, #25
 8008cd6:	f53f af1d 	bmi.w	8008b14 <_vfiprintf_r+0x44>
 8008cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cdc:	e71c      	b.n	8008b18 <_vfiprintf_r+0x48>
 8008cde:	ab03      	add	r3, sp, #12
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <_vfiprintf_r+0x22c>)
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f000 f879 	bl	8008de0 <_printf_i>
 8008cee:	e7e4      	b.n	8008cba <_vfiprintf_r+0x1ea>
 8008cf0:	080098ec 	.word	0x080098ec
 8008cf4:	080098f6 	.word	0x080098f6
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	08008aab 	.word	0x08008aab
 8008d00:	080098f2 	.word	0x080098f2

08008d04 <_printf_common>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	4616      	mov	r6, r2
 8008d0a:	4699      	mov	r9, r3
 8008d0c:	688a      	ldr	r2, [r1, #8]
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bfb8      	it	lt
 8008d18:	4613      	movlt	r3, r2
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d20:	4607      	mov	r7, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	b10a      	cbz	r2, 8008d2a <_printf_common+0x26>
 8008d26:	3301      	adds	r3, #1
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	0699      	lsls	r1, r3, #26
 8008d2e:	bf42      	ittt	mi
 8008d30:	6833      	ldrmi	r3, [r6, #0]
 8008d32:	3302      	addmi	r3, #2
 8008d34:	6033      	strmi	r3, [r6, #0]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d106      	bne.n	8008d4c <_printf_common+0x48>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	6832      	ldr	r2, [r6, #0]
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc26      	bgt.n	8008d9a <_printf_common+0x96>
 8008d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d50:	1e13      	subs	r3, r2, #0
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	bf18      	it	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	0692      	lsls	r2, r2, #26
 8008d5a:	d42b      	bmi.n	8008db4 <_printf_common+0xb0>
 8008d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d60:	4649      	mov	r1, r9
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c0      	blx	r8
 8008d66:	3001      	adds	r0, #1
 8008d68:	d01e      	beq.n	8008da8 <_printf_common+0xa4>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	f003 0306 	and.w	r3, r3, #6
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	bf02      	ittt	eq
 8008d76:	68e5      	ldreq	r5, [r4, #12]
 8008d78:	6833      	ldreq	r3, [r6, #0]
 8008d7a:	1aed      	subeq	r5, r5, r3
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	bf0c      	ite	eq
 8008d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d84:	2500      	movne	r5, #0
 8008d86:	4293      	cmp	r3, r2
 8008d88:	bfc4      	itt	gt
 8008d8a:	1a9b      	subgt	r3, r3, r2
 8008d8c:	18ed      	addgt	r5, r5, r3
 8008d8e:	2600      	movs	r6, #0
 8008d90:	341a      	adds	r4, #26
 8008d92:	42b5      	cmp	r5, r6
 8008d94:	d11a      	bne.n	8008dcc <_printf_common+0xc8>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e008      	b.n	8008dac <_printf_common+0xa8>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4638      	mov	r0, r7
 8008da2:	47c0      	blx	r8
 8008da4:	3001      	adds	r0, #1
 8008da6:	d103      	bne.n	8008db0 <_printf_common+0xac>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	3501      	adds	r5, #1
 8008db2:	e7c6      	b.n	8008d42 <_printf_common+0x3e>
 8008db4:	18e1      	adds	r1, r4, r3
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	2030      	movs	r0, #48	; 0x30
 8008dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dbe:	4422      	add	r2, r4
 8008dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dc8:	3302      	adds	r3, #2
 8008dca:	e7c7      	b.n	8008d5c <_printf_common+0x58>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4622      	mov	r2, r4
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	47c0      	blx	r8
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d0e6      	beq.n	8008da8 <_printf_common+0xa4>
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7d9      	b.n	8008d92 <_printf_common+0x8e>
	...

08008de0 <_printf_i>:
 8008de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de4:	7e0f      	ldrb	r7, [r1, #24]
 8008de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008de8:	2f78      	cmp	r7, #120	; 0x78
 8008dea:	4691      	mov	r9, r2
 8008dec:	4680      	mov	r8, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	469a      	mov	sl, r3
 8008df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008df6:	d807      	bhi.n	8008e08 <_printf_i+0x28>
 8008df8:	2f62      	cmp	r7, #98	; 0x62
 8008dfa:	d80a      	bhi.n	8008e12 <_printf_i+0x32>
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	f000 80d4 	beq.w	8008faa <_printf_i+0x1ca>
 8008e02:	2f58      	cmp	r7, #88	; 0x58
 8008e04:	f000 80c0 	beq.w	8008f88 <_printf_i+0x1a8>
 8008e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e10:	e03a      	b.n	8008e88 <_printf_i+0xa8>
 8008e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e16:	2b15      	cmp	r3, #21
 8008e18:	d8f6      	bhi.n	8008e08 <_printf_i+0x28>
 8008e1a:	a101      	add	r1, pc, #4	; (adr r1, 8008e20 <_printf_i+0x40>)
 8008e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e20:	08008e79 	.word	0x08008e79
 8008e24:	08008e8d 	.word	0x08008e8d
 8008e28:	08008e09 	.word	0x08008e09
 8008e2c:	08008e09 	.word	0x08008e09
 8008e30:	08008e09 	.word	0x08008e09
 8008e34:	08008e09 	.word	0x08008e09
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e09 	.word	0x08008e09
 8008e40:	08008e09 	.word	0x08008e09
 8008e44:	08008e09 	.word	0x08008e09
 8008e48:	08008e09 	.word	0x08008e09
 8008e4c:	08008f91 	.word	0x08008f91
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008f4b 	.word	0x08008f4b
 8008e58:	08008e09 	.word	0x08008e09
 8008e5c:	08008e09 	.word	0x08008e09
 8008e60:	08008fb3 	.word	0x08008fb3
 8008e64:	08008e09 	.word	0x08008e09
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008e09 	.word	0x08008e09
 8008e70:	08008e09 	.word	0x08008e09
 8008e74:	08008f53 	.word	0x08008f53
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	1d1a      	adds	r2, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e09f      	b.n	8008fcc <_printf_i+0x1ec>
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	0607      	lsls	r7, r0, #24
 8008e92:	f103 0104 	add.w	r1, r3, #4
 8008e96:	6029      	str	r1, [r5, #0]
 8008e98:	d501      	bpl.n	8008e9e <_printf_i+0xbe>
 8008e9a:	681e      	ldr	r6, [r3, #0]
 8008e9c:	e003      	b.n	8008ea6 <_printf_i+0xc6>
 8008e9e:	0646      	lsls	r6, r0, #25
 8008ea0:	d5fb      	bpl.n	8008e9a <_printf_i+0xba>
 8008ea2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	da03      	bge.n	8008eb2 <_printf_i+0xd2>
 8008eaa:	232d      	movs	r3, #45	; 0x2d
 8008eac:	4276      	negs	r6, r6
 8008eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb2:	485a      	ldr	r0, [pc, #360]	; (800901c <_printf_i+0x23c>)
 8008eb4:	230a      	movs	r3, #10
 8008eb6:	e012      	b.n	8008ede <_printf_i+0xfe>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	1d19      	adds	r1, r3, #4
 8008ebe:	6029      	str	r1, [r5, #0]
 8008ec0:	0605      	lsls	r5, r0, #24
 8008ec2:	d501      	bpl.n	8008ec8 <_printf_i+0xe8>
 8008ec4:	681e      	ldr	r6, [r3, #0]
 8008ec6:	e002      	b.n	8008ece <_printf_i+0xee>
 8008ec8:	0641      	lsls	r1, r0, #25
 8008eca:	d5fb      	bpl.n	8008ec4 <_printf_i+0xe4>
 8008ecc:	881e      	ldrh	r6, [r3, #0]
 8008ece:	4853      	ldr	r0, [pc, #332]	; (800901c <_printf_i+0x23c>)
 8008ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2308      	moveq	r3, #8
 8008ed6:	230a      	movne	r3, #10
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ede:	6865      	ldr	r5, [r4, #4]
 8008ee0:	60a5      	str	r5, [r4, #8]
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	bfa2      	ittt	ge
 8008ee6:	6821      	ldrge	r1, [r4, #0]
 8008ee8:	f021 0104 	bicge.w	r1, r1, #4
 8008eec:	6021      	strge	r1, [r4, #0]
 8008eee:	b90e      	cbnz	r6, 8008ef4 <_printf_i+0x114>
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	d04b      	beq.n	8008f8c <_printf_i+0x1ac>
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008efa:	fb03 6711 	mls	r7, r3, r1, r6
 8008efe:	5dc7      	ldrb	r7, [r0, r7]
 8008f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f04:	4637      	mov	r7, r6
 8008f06:	42bb      	cmp	r3, r7
 8008f08:	460e      	mov	r6, r1
 8008f0a:	d9f4      	bls.n	8008ef6 <_printf_i+0x116>
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d10b      	bne.n	8008f28 <_printf_i+0x148>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	07de      	lsls	r6, r3, #31
 8008f14:	d508      	bpl.n	8008f28 <_printf_i+0x148>
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	6861      	ldr	r1, [r4, #4]
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	bfde      	ittt	le
 8008f1e:	2330      	movle	r3, #48	; 0x30
 8008f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f28:	1b52      	subs	r2, r2, r5
 8008f2a:	6122      	str	r2, [r4, #16]
 8008f2c:	f8cd a000 	str.w	sl, [sp]
 8008f30:	464b      	mov	r3, r9
 8008f32:	aa03      	add	r2, sp, #12
 8008f34:	4621      	mov	r1, r4
 8008f36:	4640      	mov	r0, r8
 8008f38:	f7ff fee4 	bl	8008d04 <_printf_common>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d14a      	bne.n	8008fd6 <_printf_i+0x1f6>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	b004      	add	sp, #16
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	f043 0320 	orr.w	r3, r3, #32
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	4833      	ldr	r0, [pc, #204]	; (8009020 <_printf_i+0x240>)
 8008f54:	2778      	movs	r7, #120	; 0x78
 8008f56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	061f      	lsls	r7, r3, #24
 8008f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f64:	d402      	bmi.n	8008f6c <_printf_i+0x18c>
 8008f66:	065f      	lsls	r7, r3, #25
 8008f68:	bf48      	it	mi
 8008f6a:	b2b6      	uxthmi	r6, r6
 8008f6c:	07df      	lsls	r7, r3, #31
 8008f6e:	bf48      	it	mi
 8008f70:	f043 0320 	orrmi.w	r3, r3, #32
 8008f74:	6029      	str	r1, [r5, #0]
 8008f76:	bf48      	it	mi
 8008f78:	6023      	strmi	r3, [r4, #0]
 8008f7a:	b91e      	cbnz	r6, 8008f84 <_printf_i+0x1a4>
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	f023 0320 	bic.w	r3, r3, #32
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	2310      	movs	r3, #16
 8008f86:	e7a7      	b.n	8008ed8 <_printf_i+0xf8>
 8008f88:	4824      	ldr	r0, [pc, #144]	; (800901c <_printf_i+0x23c>)
 8008f8a:	e7e4      	b.n	8008f56 <_printf_i+0x176>
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	e7bd      	b.n	8008f0c <_printf_i+0x12c>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	6826      	ldr	r6, [r4, #0]
 8008f94:	6961      	ldr	r1, [r4, #20]
 8008f96:	1d18      	adds	r0, r3, #4
 8008f98:	6028      	str	r0, [r5, #0]
 8008f9a:	0635      	lsls	r5, r6, #24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_i+0x1c4>
 8008fa0:	6019      	str	r1, [r3, #0]
 8008fa2:	e002      	b.n	8008faa <_printf_i+0x1ca>
 8008fa4:	0670      	lsls	r0, r6, #25
 8008fa6:	d5fb      	bpl.n	8008fa0 <_printf_i+0x1c0>
 8008fa8:	8019      	strh	r1, [r3, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	4615      	mov	r5, r2
 8008fb0:	e7bc      	b.n	8008f2c <_printf_i+0x14c>
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	602a      	str	r2, [r5, #0]
 8008fb8:	681d      	ldr	r5, [r3, #0]
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7f7 f906 	bl	80001d0 <memchr>
 8008fc4:	b108      	cbz	r0, 8008fca <_printf_i+0x1ea>
 8008fc6:	1b40      	subs	r0, r0, r5
 8008fc8:	6060      	str	r0, [r4, #4]
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd4:	e7aa      	b.n	8008f2c <_printf_i+0x14c>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	47d0      	blx	sl
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d0ad      	beq.n	8008f40 <_printf_i+0x160>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	079b      	lsls	r3, r3, #30
 8008fe8:	d413      	bmi.n	8009012 <_printf_i+0x232>
 8008fea:	68e0      	ldr	r0, [r4, #12]
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	bfb8      	it	lt
 8008ff2:	4618      	movlt	r0, r3
 8008ff4:	e7a6      	b.n	8008f44 <_printf_i+0x164>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	47d0      	blx	sl
 8009000:	3001      	adds	r0, #1
 8009002:	d09d      	beq.n	8008f40 <_printf_i+0x160>
 8009004:	3501      	adds	r5, #1
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	1a5b      	subs	r3, r3, r1
 800900c:	42ab      	cmp	r3, r5
 800900e:	dcf2      	bgt.n	8008ff6 <_printf_i+0x216>
 8009010:	e7eb      	b.n	8008fea <_printf_i+0x20a>
 8009012:	2500      	movs	r5, #0
 8009014:	f104 0619 	add.w	r6, r4, #25
 8009018:	e7f5      	b.n	8009006 <_printf_i+0x226>
 800901a:	bf00      	nop
 800901c:	080098fd 	.word	0x080098fd
 8009020:	0800990e 	.word	0x0800990e

08009024 <__sflush_r>:
 8009024:	898a      	ldrh	r2, [r1, #12]
 8009026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	4605      	mov	r5, r0
 800902c:	0710      	lsls	r0, r2, #28
 800902e:	460c      	mov	r4, r1
 8009030:	d458      	bmi.n	80090e4 <__sflush_r+0xc0>
 8009032:	684b      	ldr	r3, [r1, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dc05      	bgt.n	8009044 <__sflush_r+0x20>
 8009038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	dc02      	bgt.n	8009044 <__sflush_r+0x20>
 800903e:	2000      	movs	r0, #0
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009046:	2e00      	cmp	r6, #0
 8009048:	d0f9      	beq.n	800903e <__sflush_r+0x1a>
 800904a:	2300      	movs	r3, #0
 800904c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009050:	682f      	ldr	r7, [r5, #0]
 8009052:	6a21      	ldr	r1, [r4, #32]
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	d032      	beq.n	80090be <__sflush_r+0x9a>
 8009058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	075a      	lsls	r2, r3, #29
 800905e:	d505      	bpl.n	800906c <__sflush_r+0x48>
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	1ac0      	subs	r0, r0, r3
 8009064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009066:	b10b      	cbz	r3, 800906c <__sflush_r+0x48>
 8009068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800906a:	1ac0      	subs	r0, r0, r3
 800906c:	2300      	movs	r3, #0
 800906e:	4602      	mov	r2, r0
 8009070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009072:	6a21      	ldr	r1, [r4, #32]
 8009074:	4628      	mov	r0, r5
 8009076:	47b0      	blx	r6
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	d106      	bne.n	800908c <__sflush_r+0x68>
 800907e:	6829      	ldr	r1, [r5, #0]
 8009080:	291d      	cmp	r1, #29
 8009082:	d82b      	bhi.n	80090dc <__sflush_r+0xb8>
 8009084:	4a29      	ldr	r2, [pc, #164]	; (800912c <__sflush_r+0x108>)
 8009086:	410a      	asrs	r2, r1
 8009088:	07d6      	lsls	r6, r2, #31
 800908a:	d427      	bmi.n	80090dc <__sflush_r+0xb8>
 800908c:	2200      	movs	r2, #0
 800908e:	6062      	str	r2, [r4, #4]
 8009090:	04d9      	lsls	r1, r3, #19
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	d504      	bpl.n	80090a2 <__sflush_r+0x7e>
 8009098:	1c42      	adds	r2, r0, #1
 800909a:	d101      	bne.n	80090a0 <__sflush_r+0x7c>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b903      	cbnz	r3, 80090a2 <__sflush_r+0x7e>
 80090a0:	6560      	str	r0, [r4, #84]	; 0x54
 80090a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a4:	602f      	str	r7, [r5, #0]
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d0c9      	beq.n	800903e <__sflush_r+0x1a>
 80090aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ae:	4299      	cmp	r1, r3
 80090b0:	d002      	beq.n	80090b8 <__sflush_r+0x94>
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7ff fbea 	bl	800888c <_free_r>
 80090b8:	2000      	movs	r0, #0
 80090ba:	6360      	str	r0, [r4, #52]	; 0x34
 80090bc:	e7c0      	b.n	8009040 <__sflush_r+0x1c>
 80090be:	2301      	movs	r3, #1
 80090c0:	4628      	mov	r0, r5
 80090c2:	47b0      	blx	r6
 80090c4:	1c41      	adds	r1, r0, #1
 80090c6:	d1c8      	bne.n	800905a <__sflush_r+0x36>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0c5      	beq.n	800905a <__sflush_r+0x36>
 80090ce:	2b1d      	cmp	r3, #29
 80090d0:	d001      	beq.n	80090d6 <__sflush_r+0xb2>
 80090d2:	2b16      	cmp	r3, #22
 80090d4:	d101      	bne.n	80090da <__sflush_r+0xb6>
 80090d6:	602f      	str	r7, [r5, #0]
 80090d8:	e7b1      	b.n	800903e <__sflush_r+0x1a>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	e7ad      	b.n	8009040 <__sflush_r+0x1c>
 80090e4:	690f      	ldr	r7, [r1, #16]
 80090e6:	2f00      	cmp	r7, #0
 80090e8:	d0a9      	beq.n	800903e <__sflush_r+0x1a>
 80090ea:	0793      	lsls	r3, r2, #30
 80090ec:	680e      	ldr	r6, [r1, #0]
 80090ee:	bf08      	it	eq
 80090f0:	694b      	ldreq	r3, [r1, #20]
 80090f2:	600f      	str	r7, [r1, #0]
 80090f4:	bf18      	it	ne
 80090f6:	2300      	movne	r3, #0
 80090f8:	eba6 0807 	sub.w	r8, r6, r7
 80090fc:	608b      	str	r3, [r1, #8]
 80090fe:	f1b8 0f00 	cmp.w	r8, #0
 8009102:	dd9c      	ble.n	800903e <__sflush_r+0x1a>
 8009104:	6a21      	ldr	r1, [r4, #32]
 8009106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009108:	4643      	mov	r3, r8
 800910a:	463a      	mov	r2, r7
 800910c:	4628      	mov	r0, r5
 800910e:	47b0      	blx	r6
 8009110:	2800      	cmp	r0, #0
 8009112:	dc06      	bgt.n	8009122 <__sflush_r+0xfe>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e78e      	b.n	8009040 <__sflush_r+0x1c>
 8009122:	4407      	add	r7, r0
 8009124:	eba8 0800 	sub.w	r8, r8, r0
 8009128:	e7e9      	b.n	80090fe <__sflush_r+0xda>
 800912a:	bf00      	nop
 800912c:	dfbffffe 	.word	0xdfbffffe

08009130 <_fflush_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	690b      	ldr	r3, [r1, #16]
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	b913      	cbnz	r3, 8009140 <_fflush_r+0x10>
 800913a:	2500      	movs	r5, #0
 800913c:	4628      	mov	r0, r5
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	b118      	cbz	r0, 800914a <_fflush_r+0x1a>
 8009142:	6a03      	ldr	r3, [r0, #32]
 8009144:	b90b      	cbnz	r3, 800914a <_fflush_r+0x1a>
 8009146:	f7ff f9a9 	bl	800849c <__sinit>
 800914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0f3      	beq.n	800913a <_fflush_r+0xa>
 8009152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009154:	07d0      	lsls	r0, r2, #31
 8009156:	d404      	bmi.n	8009162 <_fflush_r+0x32>
 8009158:	0599      	lsls	r1, r3, #22
 800915a:	d402      	bmi.n	8009162 <_fflush_r+0x32>
 800915c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800915e:	f7ff fb92 	bl	8008886 <__retarget_lock_acquire_recursive>
 8009162:	4628      	mov	r0, r5
 8009164:	4621      	mov	r1, r4
 8009166:	f7ff ff5d 	bl	8009024 <__sflush_r>
 800916a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800916c:	07da      	lsls	r2, r3, #31
 800916e:	4605      	mov	r5, r0
 8009170:	d4e4      	bmi.n	800913c <_fflush_r+0xc>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	059b      	lsls	r3, r3, #22
 8009176:	d4e1      	bmi.n	800913c <_fflush_r+0xc>
 8009178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800917a:	f7ff fb85 	bl	8008888 <__retarget_lock_release_recursive>
 800917e:	e7dd      	b.n	800913c <_fflush_r+0xc>

08009180 <__swhatbuf_r>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	460c      	mov	r4, r1
 8009184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009188:	2900      	cmp	r1, #0
 800918a:	b096      	sub	sp, #88	; 0x58
 800918c:	4615      	mov	r5, r2
 800918e:	461e      	mov	r6, r3
 8009190:	da0d      	bge.n	80091ae <__swhatbuf_r+0x2e>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009198:	f04f 0100 	mov.w	r1, #0
 800919c:	bf0c      	ite	eq
 800919e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091a2:	2340      	movne	r3, #64	; 0x40
 80091a4:	2000      	movs	r0, #0
 80091a6:	6031      	str	r1, [r6, #0]
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	b016      	add	sp, #88	; 0x58
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	466a      	mov	r2, sp
 80091b0:	f000 f848 	bl	8009244 <_fstat_r>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	dbec      	blt.n	8009192 <__swhatbuf_r+0x12>
 80091b8:	9901      	ldr	r1, [sp, #4]
 80091ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091c2:	4259      	negs	r1, r3
 80091c4:	4159      	adcs	r1, r3
 80091c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ca:	e7eb      	b.n	80091a4 <__swhatbuf_r+0x24>

080091cc <__smakebuf_r>:
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d0:	079d      	lsls	r5, r3, #30
 80091d2:	4606      	mov	r6, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	d507      	bpl.n	80091e8 <__smakebuf_r+0x1c>
 80091d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	2301      	movs	r3, #1
 80091e2:	6163      	str	r3, [r4, #20]
 80091e4:	b002      	add	sp, #8
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	ab01      	add	r3, sp, #4
 80091ea:	466a      	mov	r2, sp
 80091ec:	f7ff ffc8 	bl	8009180 <__swhatbuf_r>
 80091f0:	9900      	ldr	r1, [sp, #0]
 80091f2:	4605      	mov	r5, r0
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff fbb5 	bl	8008964 <_malloc_r>
 80091fa:	b948      	cbnz	r0, 8009210 <__smakebuf_r+0x44>
 80091fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009200:	059a      	lsls	r2, r3, #22
 8009202:	d4ef      	bmi.n	80091e4 <__smakebuf_r+0x18>
 8009204:	f023 0303 	bic.w	r3, r3, #3
 8009208:	f043 0302 	orr.w	r3, r3, #2
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	e7e3      	b.n	80091d8 <__smakebuf_r+0xc>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	6020      	str	r0, [r4, #0]
 8009214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	9b00      	ldr	r3, [sp, #0]
 800921c:	6163      	str	r3, [r4, #20]
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	6120      	str	r0, [r4, #16]
 8009222:	b15b      	cbz	r3, 800923c <__smakebuf_r+0x70>
 8009224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009228:	4630      	mov	r0, r6
 800922a:	f000 f81d 	bl	8009268 <_isatty_r>
 800922e:	b128      	cbz	r0, 800923c <__smakebuf_r+0x70>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f023 0303 	bic.w	r3, r3, #3
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	431d      	orrs	r5, r3
 8009240:	81a5      	strh	r5, [r4, #12]
 8009242:	e7cf      	b.n	80091e4 <__smakebuf_r+0x18>

08009244 <_fstat_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	; (8009264 <_fstat_r+0x20>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	f7f8 fbae 	bl	80019b2 <_fstat>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d102      	bne.n	8009260 <_fstat_r+0x1c>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b103      	cbz	r3, 8009260 <_fstat_r+0x1c>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	20000510 	.word	0x20000510

08009268 <_isatty_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	; (8009284 <_isatty_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f8 fbad 	bl	80019d2 <_isatty>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_isatty_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_isatty_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20000510 	.word	0x20000510

08009288 <_sbrk_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d06      	ldr	r5, [pc, #24]	; (80092a4 <_sbrk_r+0x1c>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7f8 fbb6 	bl	8001a04 <_sbrk>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_sbrk_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_sbrk_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	20000510 	.word	0x20000510

080092a8 <_init>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr

080092b4 <_fini>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr
