
GSM_MODULE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005034  08005034  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800503c  0800503c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  080050ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080050ac  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8ba  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002016  00000000  00000000  0002c995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fd  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002698c  00000000  00000000  0002fc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0d1  00000000  00000000  000565b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e970c  00000000  00000000  0006368a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031c8  00000000  00000000  0014cd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f18 	.word	0x08004f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004f18 	.word	0x08004f18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
uint8_t RxBuf[RXSIZE];
char *Rx_string;
uint8_t state=0;
uint8_t substate=0;
int _write(int file,char *ptr,int len)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
    int i=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e009      	b.n	80005f4 <_write+0x2a>
    	ITM_SendChar((*ptr++));
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	60ba      	str	r2, [r7, #8]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffc7 	bl	800057c <ITM_SendChar>
    for(i=0;i<len;i++)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dbf1      	blt.n	80005e0 <_write+0x16>
    return len;
 80005fc:	687b      	ldr	r3, [r7, #4]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <GSM_Send_AT_Command>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */
char* GSM_Send_AT_Command(char* AT_CMD)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,sizeof(RxBuf));
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	2100      	movs	r1, #0
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <GSM_Send_AT_Command+0x44>)
 8000616:	f003 fecf 	bl	80043b8 <memset>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fdd8 	bl	80001d0 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <GSM_Send_AT_Command+0x48>)
 800062a:	f002 fb93 	bl	8002d54 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, 100,10);
 800062e:	230a      	movs	r3, #10
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	4906      	ldr	r1, [pc, #24]	; (800064c <GSM_Send_AT_Command+0x44>)
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <GSM_Send_AT_Command+0x48>)
 8000636:	f002 fac3 	bl	8002bc0 <HAL_UART_Receive>
	printf("Received data %s\n",RxBuf);
 800063a:	4904      	ldr	r1, [pc, #16]	; (800064c <GSM_Send_AT_Command+0x44>)
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <GSM_Send_AT_Command+0x4c>)
 800063e:	f003 fd75 	bl	800412c <iprintf>
	return (char *)RxBuf;
 8000642:	4b02      	ldr	r3, [pc, #8]	; (800064c <GSM_Send_AT_Command+0x44>)

}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000084 	.word	0x20000084
 8000650:	200000f0 	.word	0x200000f0
 8000654:	08004f30 	.word	0x08004f30

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fb8c 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f96a 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f9ea 	bl	8000a3c <MX_GPIO_Init>
  MX_UART4_Init();
 8000668:	f000 f9b8 	bl	80009dc <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch(state)
 800066c:	4ba1      	ldr	r3, [pc, #644]	; (80008f4 <main+0x29c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b04      	cmp	r3, #4
 8000672:	f200 813d 	bhi.w	80008f0 <main+0x298>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <main+0x24>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000691 	.word	0x08000691
 8000680:	080006fb 	.word	0x080006fb
 8000684:	08000775 	.word	0x08000775
 8000688:	080007ed 	.word	0x080007ed
 800068c:	08000867 	.word	0x08000867
	 	  {
	 	case 0:
	 		  switch(substate)
 8000690:	4b99      	ldr	r3, [pc, #612]	; (80008f8 <main+0x2a0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <main+0x46>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d01b      	beq.n	80006d4 <main+0x7c>
	   			  {
	   			  	  state=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 800069c:	e02c      	b.n	80006f8 <main+0xa0>
	   			  Rx_string = GSM_Send_AT_Command("ATE0\r");
 800069e:	4897      	ldr	r0, [pc, #604]	; (80008fc <main+0x2a4>)
 80006a0:	f7ff ffb2 	bl	8000608 <GSM_Send_AT_Command>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a96      	ldr	r2, [pc, #600]	; (8000900 <main+0x2a8>)
 80006a8:	6013      	str	r3, [r2, #0]
	   			  if(!(strncmp(Rx_string,"\r\nOK\r\n",6)))
 80006aa:	4b95      	ldr	r3, [pc, #596]	; (8000900 <main+0x2a8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2206      	movs	r2, #6
 80006b0:	4994      	ldr	r1, [pc, #592]	; (8000904 <main+0x2ac>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fe88 	bl	80043c8 <strncmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d106      	bne.n	80006cc <main+0x74>
	   				 state=1;
 80006be:	4b8d      	ldr	r3, [pc, #564]	; (80008f4 <main+0x29c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
	   				printf("match found\n");
 80006c4:	4890      	ldr	r0, [pc, #576]	; (8000908 <main+0x2b0>)
 80006c6:	f003 fd97 	bl	80041f8 <puts>
	   			  break;
 80006ca:	e015      	b.n	80006f8 <main+0xa0>
	   				  substate=1;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <main+0x2a0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
	   			  break;
 80006d2:	e011      	b.n	80006f8 <main+0xa0>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80006d4:	4b8a      	ldr	r3, [pc, #552]	; (8000900 <main+0x2a8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2206      	movs	r2, #6
 80006da:	498c      	ldr	r1, [pc, #560]	; (800090c <main+0x2b4>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fe73 	bl	80043c8 <strncmp>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <main+0x98>
	   			  	  substate=0;
 80006e8:	4b83      	ldr	r3, [pc, #524]	; (80008f8 <main+0x2a0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	   			  break;
 80006ee:	e002      	b.n	80006f6 <main+0x9e>
	   			  	  state=0;
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <main+0x29c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	   			  break;
 80006f6:	bf00      	nop
	   		  }
	 		  break;
 80006f8:	e0fb      	b.n	80008f2 <main+0x29a>
	 	case 1:
	 		  switch(substate)
 80006fa:	4b7f      	ldr	r3, [pc, #508]	; (80008f8 <main+0x2a0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <main+0xb0>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d01d      	beq.n	8000742 <main+0xea>
	   			  	  state=1;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000706:	e034      	b.n	8000772 <main+0x11a>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPIN?\r");
 8000708:	4881      	ldr	r0, [pc, #516]	; (8000910 <main+0x2b8>)
 800070a:	f7ff ff7d 	bl	8000608 <GSM_Send_AT_Command>
 800070e:	4603      	mov	r3, r0
 8000710:	4a7b      	ldr	r2, [pc, #492]	; (8000900 <main+0x2a8>)
 8000712:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"READY"))
 8000714:	4b7a      	ldr	r3, [pc, #488]	; (8000900 <main+0x2a8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	497e      	ldr	r1, [pc, #504]	; (8000914 <main+0x2bc>)
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fe66 	bl	80043ec <strstr>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d009      	beq.n	800073a <main+0xe2>
	   				 state=2;
 8000726:	4b73      	ldr	r3, [pc, #460]	; (80008f4 <main+0x29c>)
 8000728:	2202      	movs	r2, #2
 800072a:	701a      	strb	r2, [r3, #0]
	   				 substate=0;
 800072c:	4b72      	ldr	r3, [pc, #456]	; (80008f8 <main+0x2a0>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	   				printf("match found\n");
 8000732:	4875      	ldr	r0, [pc, #468]	; (8000908 <main+0x2b0>)
 8000734:	f003 fd60 	bl	80041f8 <puts>
	   			  break;
 8000738:	e01b      	b.n	8000772 <main+0x11a>
	   				  substate=1;
 800073a:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <main+0x2a0>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000740:	e017      	b.n	8000772 <main+0x11a>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000742:	4b6f      	ldr	r3, [pc, #444]	; (8000900 <main+0x2a8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2206      	movs	r2, #6
 8000748:	4970      	ldr	r1, [pc, #448]	; (800090c <main+0x2b4>)
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fe3c 	bl	80043c8 <strncmp>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d106      	bne.n	8000764 <main+0x10c>
	   				  state=1;
 8000756:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <main+0x29c>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <main+0x2a0>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000762:	e005      	b.n	8000770 <main+0x118>
	   			  	  state=1;
 8000764:	4b63      	ldr	r3, [pc, #396]	; (80008f4 <main+0x29c>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 800076a:	4b63      	ldr	r3, [pc, #396]	; (80008f8 <main+0x2a0>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000770:	bf00      	nop
	   		  }
	 		  break;
 8000772:	e0be      	b.n	80008f2 <main+0x29a>
	 	case 2:
	 		  switch(substate)
 8000774:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <main+0x2a0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <main+0x12a>
 800077c:	2b01      	cmp	r3, #1
 800077e:	d01d      	beq.n	80007bc <main+0x164>
	   				  substate=0;
	   			  	  state=2;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000780:	e033      	b.n	80007ea <main+0x192>
	   			  Rx_string = GSM_Send_AT_Command("AT+CSQ\r");
 8000782:	4865      	ldr	r0, [pc, #404]	; (8000918 <main+0x2c0>)
 8000784:	f7ff ff40 	bl	8000608 <GSM_Send_AT_Command>
 8000788:	4603      	mov	r3, r0
 800078a:	4a5d      	ldr	r2, [pc, #372]	; (8000900 <main+0x2a8>)
 800078c:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"99"))
 800078e:	4b5c      	ldr	r3, [pc, #368]	; (8000900 <main+0x2a8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4962      	ldr	r1, [pc, #392]	; (800091c <main+0x2c4>)
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fe29 	bl	80043ec <strstr>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <main+0x15c>
	   				 state=3;
 80007a0:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <main+0x29c>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	701a      	strb	r2, [r3, #0]
	   				 substate=0;
 80007a6:	4b54      	ldr	r3, [pc, #336]	; (80008f8 <main+0x2a0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	   				printf("match found\n");
 80007ac:	4856      	ldr	r0, [pc, #344]	; (8000908 <main+0x2b0>)
 80007ae:	f003 fd23 	bl	80041f8 <puts>
	   			  break;
 80007b2:	e01a      	b.n	80007ea <main+0x192>
	   				  substate=1;
 80007b4:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <main+0x2a0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
	   			  break;
 80007ba:	e016      	b.n	80007ea <main+0x192>
	   			  if(strstr(Rx_string,"ERROR"))
 80007bc:	4b50      	ldr	r3, [pc, #320]	; (8000900 <main+0x2a8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4957      	ldr	r1, [pc, #348]	; (8000920 <main+0x2c8>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fe12 	bl	80043ec <strstr>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <main+0x184>
	   			  	  substate=0;
 80007ce:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <main+0x2a0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	   			  	  state=2;
 80007d4:	4b47      	ldr	r3, [pc, #284]	; (80008f4 <main+0x29c>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	701a      	strb	r2, [r3, #0]
	   			  break;
 80007da:	e005      	b.n	80007e8 <main+0x190>
	   				  substate=0;
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <main+0x2a0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
	   			  	  state=2;
 80007e2:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <main+0x29c>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	701a      	strb	r2, [r3, #0]
	   			  break;
 80007e8:	bf00      	nop
	   		  }
	 		  break;
 80007ea:	e082      	b.n	80008f2 <main+0x29a>
	 case 3:
	 		  switch(substate)
 80007ec:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <main+0x2a0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <main+0x1a2>
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d01d      	beq.n	8000834 <main+0x1dc>
	   			  	  state=3;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 80007f8:	e034      	b.n	8000864 <main+0x20c>
	   			  Rx_string = GSM_Send_AT_Command("AT+CMEE=2\r");
 80007fa:	484a      	ldr	r0, [pc, #296]	; (8000924 <main+0x2cc>)
 80007fc:	f7ff ff04 	bl	8000608 <GSM_Send_AT_Command>
 8000800:	4603      	mov	r3, r0
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <main+0x2a8>)
 8000804:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <main+0x2a8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4947      	ldr	r1, [pc, #284]	; (8000928 <main+0x2d0>)
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fded 	bl	80043ec <strstr>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d009      	beq.n	800082c <main+0x1d4>
	   				 state=4;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <main+0x29c>)
 800081a:	2204      	movs	r2, #4
 800081c:	701a      	strb	r2, [r3, #0]
	   				 substate=0;
 800081e:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <main+0x2a0>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
	   				printf("match found\n");
 8000824:	4838      	ldr	r0, [pc, #224]	; (8000908 <main+0x2b0>)
 8000826:	f003 fce7 	bl	80041f8 <puts>
	   			  break;
 800082a:	e01b      	b.n	8000864 <main+0x20c>
	   				  substate=1;
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <main+0x2a0>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000832:	e017      	b.n	8000864 <main+0x20c>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8000834:	4b32      	ldr	r3, [pc, #200]	; (8000900 <main+0x2a8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2206      	movs	r2, #6
 800083a:	4934      	ldr	r1, [pc, #208]	; (800090c <main+0x2b4>)
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fdc3 	bl	80043c8 <strncmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d106      	bne.n	8000856 <main+0x1fe>
	   				  state=3;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <main+0x29c>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <main+0x2a0>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000854:	e005      	b.n	8000862 <main+0x20a>
	   			  	  state=3;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <main+0x29c>)
 8000858:	2203      	movs	r2, #3
 800085a:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <main+0x2a0>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
	   			  break;
 8000862:	bf00      	nop
	   		  }
	 		  break;
 8000864:	e045      	b.n	80008f2 <main+0x29a>
	 	case 4:
	 		  switch(substate)
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <main+0x2a0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <main+0x21c>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d026      	beq.n	80008c0 <main+0x268>
	   			  	  state=4;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8000872:	e03d      	b.n	80008f0 <main+0x298>
	   			  Rx_string = GSM_Send_AT_Command("AT+CREG?\r");
 8000874:	482d      	ldr	r0, [pc, #180]	; (800092c <main+0x2d4>)
 8000876:	f7ff fec7 	bl	8000608 <GSM_Send_AT_Command>
 800087a:	4603      	mov	r3, r0
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <main+0x2a8>)
 800087e:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"0,6")))
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <main+0x2a8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	492a      	ldr	r1, [pc, #168]	; (8000930 <main+0x2d8>)
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fdb0 	bl	80043ec <strstr>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d108      	bne.n	80008a4 <main+0x24c>
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <main+0x2a8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4927      	ldr	r1, [pc, #156]	; (8000934 <main+0x2dc>)
 8000898:	4618      	mov	r0, r3
 800089a:	f003 fda7 	bl	80043ec <strstr>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d009      	beq.n	80008b8 <main+0x260>
	   				 state=0;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <main+0x29c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	   				 substate=0;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <main+0x2a0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	   				printf("match found\n");
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <main+0x2b0>)
 80008b2:	f003 fca1 	bl	80041f8 <puts>
	   			  break;
 80008b6:	e01b      	b.n	80008f0 <main+0x298>
	   				  substate=1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <main+0x2a0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
	   			  break;
 80008be:	e017      	b.n	80008f0 <main+0x298>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0x2a8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2206      	movs	r2, #6
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <main+0x2b4>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fd7d 	bl	80043c8 <strncmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d106      	bne.n	80008e2 <main+0x28a>
	   				  state=4;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <main+0x29c>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <main+0x2a0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
	   			  break;
 80008e0:	e005      	b.n	80008ee <main+0x296>
	   			  	  state=4;
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <main+0x29c>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	701a      	strb	r2, [r3, #0]
	   			  	  substate=0;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <main+0x2a0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	   			  break;
 80008ee:	bf00      	nop
	   		  }
	  default:
	 	 break;
 80008f0:	bf00      	nop
	  switch(state)
 80008f2:	e6bb      	b.n	800066c <main+0x14>
 80008f4:	200000ec 	.word	0x200000ec
 80008f8:	200000ed 	.word	0x200000ed
 80008fc:	08004f44 	.word	0x08004f44
 8000900:	200000e8 	.word	0x200000e8
 8000904:	08004f4c 	.word	0x08004f4c
 8000908:	08004f54 	.word	0x08004f54
 800090c:	08004f60 	.word	0x08004f60
 8000910:	08004f6c 	.word	0x08004f6c
 8000914:	08004f78 	.word	0x08004f78
 8000918:	08004f80 	.word	0x08004f80
 800091c:	08004f88 	.word	0x08004f88
 8000920:	08004f8c 	.word	0x08004f8c
 8000924:	08004f94 	.word	0x08004f94
 8000928:	08004fa0 	.word	0x08004fa0
 800092c:	08004fa4 	.word	0x08004fa4
 8000930:	08004fb0 	.word	0x08004fb0
 8000934:	08004fb4 	.word	0x08004fb4

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	; 0x58
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2244      	movs	r2, #68	; 0x44
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fd36 	bl	80043b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800095e:	f000 fdcf 	bl	8001500 <HAL_PWREx_ControlVoltageScaling>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000968:	f000 f880 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000974:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097e:	2302      	movs	r3, #2
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000986:	230a      	movs	r3, #10
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800098a:	2307      	movs	r3, #7
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800098e:	2302      	movs	r3, #2
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000992:	2302      	movs	r3, #2
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fe06 	bl	80015ac <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009a6:	f000 f861 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2303      	movs	r3, #3
 80009b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2104      	movs	r1, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f9ce 	bl	8001d64 <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ce:	f000 f84d 	bl	8000a6c <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3758      	adds	r7, #88	; 0x58
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_UART4_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_UART4_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_UART4_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_UART4_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_UART4_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_UART4_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_UART4_Init+0x58>)
 8000a20:	f002 f880 	bl	8002b24 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f81f 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000f0 	.word	0x200000f0
 8000a38:	40004c00 	.word	0x40004c00

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_GPIO_Init+0x2c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <MX_GPIO_Init+0x2c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_GPIO_Init+0x2c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ac      	sub	sp, #176	; 0xb0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2288      	movs	r2, #136	; 0x88
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fc69 	bl	80043b8 <memset>
  if(huart->Instance==UART4)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <HAL_UART_MspInit+0xc0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d143      	bne.n	8000b78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000af0:	2308      	movs	r3, #8
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fb55 	bl	80021ac <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f7ff ffb0 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b16:	6593      	str	r3, [r2, #88]	; 0x58
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0xc4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b54:	2308      	movs	r3, #8
 8000b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fb14 	bl	8001190 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2034      	movs	r0, #52	; 0x34
 8000b6e:	f000 fa5a 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b72:	2034      	movs	r0, #52	; 0x34
 8000b74:	f000 fa73 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	37b0      	adds	r7, #176	; 0xb0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004c00 	.word	0x40004c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f92c 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <UART4_IRQHandler+0x10>)
 8000be2:	f002 f915 	bl	8002e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f0 	.word	0x200000f0

08000bf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
  }

  return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_isatty>:

int _isatty(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f003 fbee 	bl	80044a4 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20018000 	.word	0x20018000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	20000178 	.word	0x20000178
 8000cfc:	200002d0 	.word	0x200002d0

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff ffea 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f003 fbad 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d56:	f7ff fc7f 	bl	8000658 <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d68:	08005044 	.word	0x08005044
  ldr r2, =_sbss
 8000d6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d70:	200002cc 	.word	0x200002cc

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_Init+0x3c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x3c>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f93e 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f80f 	bl	8000db8 <HAL_InitTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	e001      	b.n	8000daa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da6:	f7ff fe67 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d023      	beq.n	8000e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_InitTick+0x70>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f949 	bl	800107a <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d809      	bhi.n	8000e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f913 	bl	8001026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0x74>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e001      	b.n	8000e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000017c 	.word	0x2000017c

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000017c 	.word	0x2000017c

08000e70 <__NVIC_SetPriorityGrouping>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001092:	b480      	push	{r7}
 8001094:	b085      	sub	sp, #20
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d008      	beq.n	80010bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e022      	b.n	8001102 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 020e 	bic.w	r2, r2, #14
 80010ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	f003 021c 	and.w	r2, r3, #28
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d005      	beq.n	8001132 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2204      	movs	r2, #4
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e029      	b.n	8001186 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 020e 	bic.w	r2, r2, #14
 8001140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 021c 	and.w	r2, r3, #28
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
    }
  }
  return status;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e17f      	b.n	80014a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8171 	beq.w	800149a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d118      	bne.n	8001270 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	6939      	ldr	r1, [r7, #16]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80ac 	beq.w	800149a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135a:	4a5a      	ldr	r2, [pc, #360]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x242>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x338>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x33c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x340>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x344>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x348>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x34c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x22a>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00c      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00a      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013be:	2305      	movs	r3, #5
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013d2:	2300      	movs	r3, #0
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x350>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x350>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f47f ae78 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48001000 	.word	0x48001000
 80014d8:	48001400 	.word	0x48001400
 80014dc:	48001800 	.word	0x48001800
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_PWREx_GetVoltageRange+0x18>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007000 	.word	0x40007000

08001500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800150e:	d130      	bne.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151c:	d038      	beq.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2232      	movs	r2, #50	; 0x32
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9b      	lsrs	r3, r3, #18
 8001540:	3301      	adds	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001544:	e002      	b.n	800154c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3b01      	subs	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001558:	d102      	bne.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f2      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156c:	d110      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e00f      	b.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157e:	d007      	beq.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40007000 	.word	0x40007000
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e3ca      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	4b97      	ldr	r3, [pc, #604]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c8:	4b94      	ldr	r3, [pc, #592]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80e4 	beq.w	80017a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4a>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	f040 808b 	bne.w	8001704 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	f040 8087 	bne.w	8001704 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x62>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e3a2      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1a      	ldr	r2, [r3, #32]
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_RCC_OscConfig+0x7c>
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001626:	e005      	b.n	8001634 <HAL_RCC_OscConfig+0x88>
 8001628:	4b7c      	ldr	r3, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001634:	4293      	cmp	r3, r2
 8001636:	d223      	bcs.n	8001680 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fd55 	bl	80020ec <RCC_SetFlashLatencyFromMSIRange>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e383      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164c:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	496d      	ldr	r1, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	4968      	ldr	r1, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4960      	ldr	r1, [pc, #384]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	495b      	ldr	r1, [pc, #364]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fd15 	bl	80020ec <RCC_SetFlashLatencyFromMSIRange>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e343      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016cc:	f000 fc4a 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	4950      	ldr	r1, [pc, #320]	; (8001820 <HAL_RCC_OscConfig+0x274>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x278>)
 80016ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb61 	bl	8000db8 <HAL_InitTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d052      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	e327      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d032      	beq.n	8001772 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb9e 	bl	8000e58 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001720:	f7ff fb9a 	bl	8000e58 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e310      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a36      	ldr	r2, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4931      	ldr	r1, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	492c      	ldr	r1, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e01a      	b.n	80017a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177e:	f7ff fb6b 	bl	8000e58 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001786:	f7ff fb67 	bl	8000e58 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e2dd      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x1da>
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d074      	beq.n	800189e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x21a>
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d10e      	bne.n	80017de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d064      	beq.n	800189c <HAL_RCC_OscConfig+0x2f0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d160      	bne.n	800189c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e2ba      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x24a>
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x270>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e026      	b.n	8001844 <HAL_RCC_OscConfig+0x298>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fe:	d115      	bne.n	800182c <HAL_RCC_OscConfig+0x280>
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a02      	ldr	r2, [pc, #8]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e014      	b.n	8001844 <HAL_RCC_OscConfig+0x298>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	08004fb8 	.word	0x08004fb8
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004
 800182c:	4ba0      	ldr	r3, [pc, #640]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a9f      	ldr	r2, [pc, #636]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b9d      	ldr	r3, [pc, #628]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9c      	ldr	r2, [pc, #624]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fb04 	bl	8000e58 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fb00 	bl	8000e58 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e276      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001866:	4b92      	ldr	r3, [pc, #584]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x2a8>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff faf0 	bl	8000e58 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff faec 	bl	8000e58 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e262      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x2d0>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d060      	beq.n	800196c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x310>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d119      	bne.n	80018ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d116      	bne.n	80018ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018bc:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x328>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e23f      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	4973      	ldr	r1, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e8:	e040      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d023      	beq.n	800193a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f2:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff faab 	bl	8000e58 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff faa7 	bl	8000e58 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e21d      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	495f      	ldr	r1, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e018      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5c      	ldr	r2, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff fa87 	bl	8000e58 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff fa83 	bl	8000e58 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1f9      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d03c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01c      	beq.n	80019ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	4a4a      	ldr	r2, [pc, #296]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff fa62 	bl	8000e58 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fa5e 	bl	8000e58 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1d4      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ef      	beq.n	8001998 <HAL_RCC_OscConfig+0x3ec>
 80019b8:	e01b      	b.n	80019f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	4a3b      	ldr	r2, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fa45 	bl	8000e58 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa41 	bl	8000e58 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1b7      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ef      	bne.n	80019d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80a6 	beq.w	8001b4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10d      	bne.n	8001a2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d118      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa08 	bl	8000e58 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4c:	f7ff fa04 	bl	8000e58 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e17a      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_RCC_OscConfig+0x508>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4d8>
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a82:	e029      	b.n	8001ad8 <HAL_RCC_OscConfig+0x52c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d115      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x50c>
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	e014      	b.n	8001ad8 <HAL_RCC_OscConfig+0x52c>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	4b9c      	ldr	r3, [pc, #624]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a9b      	ldr	r2, [pc, #620]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac8:	4b98      	ldr	r3, [pc, #608]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a97      	ldr	r2, [pc, #604]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d016      	beq.n	8001b0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f9ba 	bl	8000e58 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f9b6 	bl	8000e58 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e12a      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ed      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x53c>
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9a3 	bl	8000e58 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f99f 	bl	8000e58 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e113      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ed      	bne.n	8001b16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a79      	ldr	r2, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80fe 	beq.w	8001d52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	f040 80d0 	bne.w	8001d00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b60:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d130      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d127      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d11f      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba0:	2a07      	cmp	r2, #7
 8001ba2:	bf14      	ite	ne
 8001ba4:	2201      	movne	r2, #1
 8001ba6:	2200      	moveq	r2, #0
 8001ba8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d113      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d06e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d069      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0ad      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7ff f928 	bl	8000e58 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f924 	bl	8000e58 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e09a      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x784>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c44:	0212      	lsls	r2, r2, #8
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c4c:	0852      	lsrs	r2, r2, #1
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	0552      	lsls	r2, r2, #21
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0652      	lsls	r2, r2, #25
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c64:	0912      	lsrs	r2, r2, #4
 8001c66:	0452      	lsls	r2, r2, #17
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	4930      	ldr	r1, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c88:	f7ff f8e6 	bl	8000e58 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f8e2 	bl	8000e58 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e058      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cae:	e050      	b.n	8001d52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04f      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d148      	bne.n	8001d52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd8:	f7ff f8be 	bl	8000e58 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f8ba 	bl	8000e58 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e030      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x734>
 8001cfe:	e028      	b.n	8001d52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d023      	beq.n	8001d4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_RCC_OscConfig+0x780>)
 8001d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f8a1 	bl	8000e58 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	e00c      	b.n	8001d34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f89d 	bl	8000e58 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d905      	bls.n	8001d34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e013      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_OscConfig+0x7b0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ec      	bne.n	8001d1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x7b0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4905      	ldr	r1, [pc, #20]	; (8001d5c <HAL_RCC_OscConfig+0x7b0>)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x7b4>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e001      	b.n	8001d52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	feeefffc 	.word	0xfeeefffc

08001d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0e7      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4970      	ldr	r1, [pc, #448]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0cf      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d908      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4960      	ldr	r1, [pc, #384]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d04c      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d121      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0a6      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e09a      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e08e      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e086      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4943      	ldr	r1, [pc, #268]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f804 	bl	8000e58 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f800 	bl	8000e58 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e06e      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d208      	bcs.n	8001eaa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	492b      	ldr	r1, [pc, #172]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d210      	bcs.n	8001eda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4923      	ldr	r1, [pc, #140]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e036      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4918      	ldr	r1, [pc, #96]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4910      	ldr	r1, [pc, #64]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f18:	f000 f824 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	490b      	ldr	r1, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1f4>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1f8>)
 8001f36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1fc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ff3b 	bl	8000db8 <HAL_InitTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08004fb8 	.word	0x08004fb8
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d11e      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e004      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d134      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0xa6>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d003      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0xac>
 8002008:	e005      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_GetSysClockFreq+0x110>)
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCC_GetSysClockFreq+0x114>)
 8002012:	617b      	str	r3, [r7, #20]
      break;
 8002014:	e002      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	3301      	adds	r3, #1
 8002028:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	fb03 f202 	mul.w	r2, r3, r2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	0e5b      	lsrs	r3, r3, #25
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	3301      	adds	r3, #1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800205c:	69bb      	ldr	r3, [r7, #24]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	08004fd0 	.word	0x08004fd0
 8002074:	00f42400 	.word	0x00f42400
 8002078:	007a1200 	.word	0x007a1200

0800207c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_RCC_GetHCLKFreq+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002098:	f7ff fff0 	bl	800207c <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08004fc8 	.word	0x08004fc8

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c4:	f7ff ffda 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0adb      	lsrs	r3, r3, #11
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08004fc8 	.word	0x08004fc8

080020ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002104:	f7ff f9ee 	bl	80014e4 <HAL_PWREx_GetVoltageRange>
 8002108:	6178      	str	r0, [r7, #20]
 800210a:	e014      	b.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002124:	f7ff f9de 	bl	80014e4 <HAL_PWREx_GetVoltageRange>
 8002128:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d10b      	bne.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d919      	bls.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2ba0      	cmp	r3, #160	; 0xa0
 8002148:	d902      	bls.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214a:	2302      	movs	r3, #2
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e013      	b.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002150:	2301      	movs	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e010      	b.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d902      	bls.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800215c:	2303      	movs	r3, #3
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e00a      	b.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d102      	bne.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e004      	b.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b70      	cmp	r3, #112	; 0x70
 8002172:	d101      	bne.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 0207 	bic.w	r2, r3, #7
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40022000 	.word	0x40022000

080021ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021b4:	2300      	movs	r3, #0
 80021b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021b8:	2300      	movs	r3, #0
 80021ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d041      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021d0:	d02a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021d6:	d824      	bhi.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021dc:	d008      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e2:	d81e      	bhi.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d010      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ee:	e018      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021f0:	4b86      	ldr	r3, [pc, #536]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a85      	ldr	r2, [pc, #532]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021fc:	e015      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fabb 	bl	8002780 <RCCEx_PLLSAI1_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220e:	e00c      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3320      	adds	r3, #32
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fba6 	bl	8002968 <RCCEx_PLLSAI2_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002220:	e003      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	74fb      	strb	r3, [r7, #19]
      break;
 8002226:	e000      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223e:	4973      	ldr	r1, [pc, #460]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002246:	e001      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d041      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800225c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002260:	d02a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002266:	d824      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800226e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002272:	d81e      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d010      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800227e:	e018      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002280:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a61      	ldr	r2, [pc, #388]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800228c:	e015      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3304      	adds	r3, #4
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fa73 	bl	8002780 <RCCEx_PLLSAI1_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229e:	e00c      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3320      	adds	r3, #32
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fb5e 	bl	8002968 <RCCEx_PLLSAI2_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b0:	e003      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	74fb      	strb	r3, [r7, #19]
      break;
 80022b6:	e000      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022c0:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ce:	494f      	ldr	r1, [pc, #316]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022d6:	e001      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a0 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	4a40      	ldr	r2, [pc, #256]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230e:	6593      	str	r3, [r2, #88]	; 0x58
 8002310:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231c:	2301      	movs	r3, #1
 800231e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800232c:	f7fe fd94 	bl	8000e58 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002332:	e009      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002334:	f7fe fd90 	bl	8000e58 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d902      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	74fb      	strb	r3, [r7, #19]
        break;
 8002346:	e005      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ef      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d15c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002364:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	d019      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	4a20      	ldr	r2, [pc, #128]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7fe fd4f 	bl	8000e58 <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023bc:	e00b      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fd4b 	bl	8000e58 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d902      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	74fb      	strb	r3, [r7, #19]
            break;
 80023d4:	e006      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ec      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fa:	4904      	ldr	r1, [pc, #16]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002402:	e009      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
 8002408:	e006      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002418:	7c7b      	ldrb	r3, [r7, #17]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b9e      	ldr	r3, [pc, #632]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a9d      	ldr	r2, [pc, #628]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002436:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f023 0203 	bic.w	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	4994      	ldr	r1, [pc, #592]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002458:	4b8f      	ldr	r3, [pc, #572]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 020c 	bic.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	498c      	ldr	r1, [pc, #560]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247a:	4b87      	ldr	r3, [pc, #540]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4983      	ldr	r1, [pc, #524]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249c:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	497b      	ldr	r1, [pc, #492]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	4972      	ldr	r1, [pc, #456]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	496a      	ldr	r1, [pc, #424]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	4961      	ldr	r1, [pc, #388]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002524:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	4959      	ldr	r1, [pc, #356]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002546:	4b54      	ldr	r3, [pc, #336]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	4950      	ldr	r1, [pc, #320]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	4948      	ldr	r1, [pc, #288]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	493f      	ldr	r1, [pc, #252]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d028      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ca:	d106      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025cc:	4b32      	ldr	r3, [pc, #200]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d6:	60d3      	str	r3, [r2, #12]
 80025d8:	e011      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e2:	d10c      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f8c8 	bl	8002780 <RCCEx_PLLSAI1_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d028      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	491f      	ldr	r1, [pc, #124]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002628:	d106      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002634:	60d3      	str	r3, [r2, #12]
 8002636:	e011      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f899 	bl	8002780 <RCCEx_PLLSAI1_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02b      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002686:	d109      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a02      	ldr	r2, [pc, #8]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002692:	60d3      	str	r3, [r2, #12]
 8002694:	e014      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2101      	movs	r1, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f867 	bl	8002780 <RCCEx_PLLSAI1_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02f      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026da:	4928      	ldr	r1, [pc, #160]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ea:	d10d      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f844 	bl	8002780 <RCCEx_PLLSAI1_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d014      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	74bb      	strb	r3, [r7, #18]
 8002706:	e011      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800270c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002710:	d10c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3320      	adds	r3, #32
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f925 	bl	8002968 <RCCEx_PLLSAI2_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002746:	490d      	ldr	r1, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002772:	7cbb      	ldrb	r3, [r7, #18]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000

08002780 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278e:	4b75      	ldr	r3, [pc, #468]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d018      	beq.n	80027cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800279a:	4b72      	ldr	r3, [pc, #456]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10d      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
       ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027b2:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
       ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d047      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e044      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d018      	beq.n	8002806 <RCCEx_PLLSAI1_Config+0x86>
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d825      	bhi.n	8002824 <RCCEx_PLLSAI1_Config+0xa4>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d002      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x62>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d009      	beq.n	80027f4 <RCCEx_PLLSAI1_Config+0x74>
 80027e0:	e020      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e2:	4b60      	ldr	r3, [pc, #384]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f2:	e01a      	b.n	800282a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f4:	4b5b      	ldr	r3, [pc, #364]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e013      	b.n	800282e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002806:	4b57      	ldr	r3, [pc, #348]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002812:	4b54      	ldr	r3, [pc, #336]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002822:	e006      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e004      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002832:	bf00      	nop
    }

    if(status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	430b      	orrs	r3, r1
 8002850:	4944      	ldr	r1, [pc, #272]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d17d      	bne.n	8002958 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a40      	ldr	r2, [pc, #256]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe faf6 	bl	8000e58 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002870:	f7fe faf2 	bl	8000e58 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
        break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002884:	4b37      	ldr	r3, [pc, #220]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ef      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d160      	bne.n	8002958 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	0211      	lsls	r1, r2, #8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	0912      	lsrs	r2, r2, #4
 80028b4:	0452      	lsls	r2, r2, #17
 80028b6:	430a      	orrs	r2, r1
 80028b8:	492a      	ldr	r1, [pc, #168]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	610b      	str	r3, [r1, #16]
 80028be:	e027      	b.n	8002910 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d112      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	0211      	lsls	r1, r2, #8
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6912      	ldr	r2, [r2, #16]
 80028dc:	0852      	lsrs	r2, r2, #1
 80028de:	3a01      	subs	r2, #1
 80028e0:	0552      	lsls	r2, r2, #21
 80028e2:	430a      	orrs	r2, r1
 80028e4:	491f      	ldr	r1, [pc, #124]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]
 80028ea:	e011      	b.n	8002910 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6952      	ldr	r2, [r2, #20]
 8002902:	0852      	lsrs	r2, r2, #1
 8002904:	3a01      	subs	r2, #1
 8002906:	0652      	lsls	r2, r2, #25
 8002908:	430a      	orrs	r2, r1
 800290a:	4916      	ldr	r1, [pc, #88]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800291a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe fa9c 	bl	8000e58 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002922:	e009      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002924:	f7fe fa98 	bl	8000e58 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	73fb      	strb	r3, [r7, #15]
          break;
 8002936:	e005      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	4904      	ldr	r1, [pc, #16]	; (8002964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002976:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d018      	beq.n	80029b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d10d      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
       ||
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
       ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d047      	beq.n	8002a3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e044      	b.n	8002a3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d018      	beq.n	80029ee <RCCEx_PLLSAI2_Config+0x86>
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d825      	bhi.n	8002a0c <RCCEx_PLLSAI2_Config+0xa4>
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d002      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0x62>
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d009      	beq.n	80029dc <RCCEx_PLLSAI2_Config+0x74>
 80029c8:	e020      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11d      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029da:	e01a      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e013      	b.n	8002a16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ee:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0a:	e006      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e004      	b.n	8002a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	430b      	orrs	r3, r1
 8002a38:	4939      	ldr	r1, [pc, #228]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d167      	bne.n	8002b14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a35      	ldr	r2, [pc, #212]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fa02 	bl	8000e58 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a56:	e009      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a58:	f7fe f9fe 	bl	8000e58 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6a:	e005      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ef      	bne.n	8002a58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d14a      	bne.n	8002b14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d111      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	0211      	lsls	r1, r2, #8
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	0912      	lsrs	r2, r2, #4
 8002a9c:	0452      	lsls	r2, r2, #17
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	491f      	ldr	r1, [pc, #124]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	614b      	str	r3, [r1, #20]
 8002aa6:	e011      	b.n	8002acc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	0211      	lsls	r1, r2, #8
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6912      	ldr	r2, [r2, #16]
 8002abe:	0852      	lsrs	r2, r2, #1
 8002ac0:	3a01      	subs	r2, #1
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4916      	ldr	r1, [pc, #88]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe f9be 	bl	8000e58 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ae0:	f7fe f9ba 	bl	8000e58 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
          break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd ffba 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ff12 	bl	8003994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fc57 	bl	8003424 <UART_SetConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01b      	b.n	8002bb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 ff91 	bl	8003ad8 <UART_CheckIdleState>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	f040 80b6 	bne.w	8002d48 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_UART_Receive+0x28>
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0ae      	b.n	8002d4a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2222      	movs	r2, #34	; 0x22
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fe f929 	bl	8000e58 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d10e      	bne.n	8002c40 <HAL_UART_Receive+0x80>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_UART_Receive+0x76>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c34:	e02d      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c3e:	e028      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_UART_Receive+0xa4>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_UART_Receive+0x9a>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c58:	e01b      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	227f      	movs	r2, #127	; 0x7f
 8002c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c62:	e016      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c6c:	d10d      	bne.n	8002c8a <HAL_UART_Receive+0xca>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Receive+0xc0>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	227f      	movs	r2, #127	; 0x7f
 8002c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c7e:	e008      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	223f      	movs	r2, #63	; 0x3f
 8002c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c88:	e003      	b.n	8002c92 <HAL_UART_Receive+0xd2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d108      	bne.n	8002cb6 <HAL_UART_Receive+0xf6>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e003      	b.n	8002cbe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002cbe:	e037      	b.n	8002d30 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2120      	movs	r1, #32
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 ffac 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e033      	b.n	8002d4a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	8a7b      	ldrh	r3, [r7, #18]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e00d      	b.n	8002d1e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1c1      	bne.n	8002cc0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b08b      	sub	sp, #44	; 0x2c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d147      	bne.n	8002dfa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_Transmit_IT+0x22>
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e040      	b.n	8002dfc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2221      	movs	r2, #33	; 0x21
 8002da2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d107      	bne.n	8002dbe <HAL_UART_Transmit_IT+0x6a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_UART_Transmit_IT+0xb4>)
 8002dba:	66da      	str	r2, [r3, #108]	; 0x6c
 8002dbc:	e002      	b.n	8002dc4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <HAL_UART_Transmit_IT+0xb8>)
 8002dc2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	69f9      	ldr	r1, [r7, #28]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e6      	bne.n	8002dc4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	372c      	adds	r7, #44	; 0x2c
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	08003ea3 	.word	0x08003ea3
 8002e0c:	08003deb 	.word	0x08003deb

08002e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0ba      	sub	sp, #232	; 0xe8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e3e:	4013      	ands	r3, r2
 8002e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 82ae 	beq.w	80033ca <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
      }
      return;
 8002e76:	e2a8      	b.n	80033ca <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8117 	beq.w	80030b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_UART_IRQHandler+0x298>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 810a 	beq.w	80030b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d011      	beq.n	8002ecc <HAL_UART_IRQHandler+0xbc>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d011      	beq.n	8002efc <HAL_UART_IRQHandler+0xec>
 8002ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d011      	beq.n	8002f2c <HAL_UART_IRQHandler+0x11c>
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d017      	beq.n	8002f68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	f043 0208 	orr.w	r2, r3, #8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_UART_IRQHandler+0x18a>
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8214 	beq.w	80033ce <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d005      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04f      	beq.n	8003092 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fe7f 	bl	8003cf6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d141      	bne.n	800308a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800301c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3308      	adds	r3, #8
 800302e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800303e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800304a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1d9      	bne.n	8003006 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	2b00      	cmp	r3, #0
 8003058:	d013      	beq.n	8003082 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_UART_IRQHandler+0x29c>)
 8003060:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f851 	bl	800110e <HAL_DMA_Abort_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d017      	beq.n	80030a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800307c:	4610      	mov	r0, r2
 800307e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e00f      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9b8 	bl	80033f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e00b      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9b4 	bl	80033f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e007      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9b0 	bl	80033f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030a0:	e195      	b.n	80033ce <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a2:	bf00      	nop
    return;
 80030a4:	e193      	b.n	80033ce <HAL_UART_IRQHandler+0x5be>
 80030a6:	bf00      	nop
 80030a8:	04000120 	.word	0x04000120
 80030ac:	08003dbf 	.word	0x08003dbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 814e 	bne.w	8003356 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8147 	beq.w	8003356 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8140 	beq.w	8003356 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2210      	movs	r2, #16
 80030dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	f040 80b8 	bne.w	800325e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8167 	beq.w	80033d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800310a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310e:	429a      	cmp	r2, r3
 8003110:	f080 815f 	bcs.w	80033d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800311a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8086 	bne.w	800323c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800315a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800315e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003166:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1da      	bne.n	8003130 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3308      	adds	r3, #8
 8003180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800318a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3308      	adds	r3, #8
 800319a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800319e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e1      	bne.n	800317a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e3      	bne.n	80031b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800321e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003220:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e4      	bne.n	80031fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd ff2b 	bl	8001092 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800324e:	b29b      	uxth	r3, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8d8 	bl	800340c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800325c:	e0b9      	b.n	80033d2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326a:	b29b      	uxth	r3, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80ab 	beq.w	80033d6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a6 	beq.w	80033d6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800329e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e4      	bne.n	800328a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	623b      	str	r3, [r7, #32]
   return(result);
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3308      	adds	r3, #8
 80032e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032e4:	633a      	str	r2, [r7, #48]	; 0x30
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	60fb      	str	r3, [r7, #12]
   return(result);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	617b      	str	r3, [r7, #20]
   return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e4      	bne.n	800330c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f85c 	bl	800340c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003354:	e03f      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <HAL_UART_IRQHandler+0x570>
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003376:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fe1c 	bl	8003fb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800337e:	e02d      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800338c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01c      	beq.n	80033da <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
    }
    return;
 80033a8:	e017      	b.n	80033da <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_UART_IRQHandler+0x5cc>
 80033b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fdcd 	bl	8003f62 <UART_EndTransmit_IT>
    return;
 80033c8:	e008      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80033ca:	bf00      	nop
 80033cc:	e006      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
    return;
 80033ce:	bf00      	nop
 80033d0:	e004      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
      return;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <HAL_UART_IRQHandler+0x5cc>
    return;
 80033da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033dc:	37e8      	adds	r7, #232	; 0xe8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop

080033e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b08a      	sub	sp, #40	; 0x28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4313      	orrs	r3, r2
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4ba4      	ldr	r3, [pc, #656]	; (80036e4 <UART_SetConfig+0x2c0>)
 8003454:	4013      	ands	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345c:	430b      	orrs	r3, r1
 800345e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a99      	ldr	r2, [pc, #612]	; (80036e8 <UART_SetConfig+0x2c4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	4313      	orrs	r3, r2
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a90      	ldr	r2, [pc, #576]	; (80036ec <UART_SetConfig+0x2c8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d126      	bne.n	80034fc <UART_SetConfig+0xd8>
 80034ae:	4b90      	ldr	r3, [pc, #576]	; (80036f0 <UART_SetConfig+0x2cc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d81b      	bhi.n	80034f4 <UART_SetConfig+0xd0>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0xa0>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034e5 	.word	0x080034e5
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080034ed 	.word	0x080034ed
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034da:	e116      	b.n	800370a <UART_SetConfig+0x2e6>
 80034dc:	2302      	movs	r3, #2
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	e112      	b.n	800370a <UART_SetConfig+0x2e6>
 80034e4:	2304      	movs	r3, #4
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ea:	e10e      	b.n	800370a <UART_SetConfig+0x2e6>
 80034ec:	2308      	movs	r3, #8
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f2:	e10a      	b.n	800370a <UART_SetConfig+0x2e6>
 80034f4:	2310      	movs	r3, #16
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fa:	e106      	b.n	800370a <UART_SetConfig+0x2e6>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7c      	ldr	r2, [pc, #496]	; (80036f4 <UART_SetConfig+0x2d0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d138      	bne.n	8003578 <UART_SetConfig+0x154>
 8003506:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <UART_SetConfig+0x2cc>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d82d      	bhi.n	8003570 <UART_SetConfig+0x14c>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0xf8>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003551 	.word	0x08003551
 8003520:	08003571 	.word	0x08003571
 8003524:	08003571 	.word	0x08003571
 8003528:	08003571 	.word	0x08003571
 800352c:	08003561 	.word	0x08003561
 8003530:	08003571 	.word	0x08003571
 8003534:	08003571 	.word	0x08003571
 8003538:	08003571 	.word	0x08003571
 800353c:	08003559 	.word	0x08003559
 8003540:	08003571 	.word	0x08003571
 8003544:	08003571 	.word	0x08003571
 8003548:	08003571 	.word	0x08003571
 800354c:	08003569 	.word	0x08003569
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003556:	e0d8      	b.n	800370a <UART_SetConfig+0x2e6>
 8003558:	2302      	movs	r3, #2
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e0d4      	b.n	800370a <UART_SetConfig+0x2e6>
 8003560:	2304      	movs	r3, #4
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e0d0      	b.n	800370a <UART_SetConfig+0x2e6>
 8003568:	2308      	movs	r3, #8
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e0cc      	b.n	800370a <UART_SetConfig+0x2e6>
 8003570:	2310      	movs	r3, #16
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e0c8      	b.n	800370a <UART_SetConfig+0x2e6>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5e      	ldr	r2, [pc, #376]	; (80036f8 <UART_SetConfig+0x2d4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d125      	bne.n	80035ce <UART_SetConfig+0x1aa>
 8003582:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <UART_SetConfig+0x2cc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d016      	beq.n	80035be <UART_SetConfig+0x19a>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d818      	bhi.n	80035c6 <UART_SetConfig+0x1a2>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d00a      	beq.n	80035ae <UART_SetConfig+0x18a>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d814      	bhi.n	80035c6 <UART_SetConfig+0x1a2>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <UART_SetConfig+0x182>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d008      	beq.n	80035b6 <UART_SetConfig+0x192>
 80035a4:	e00f      	b.n	80035c6 <UART_SetConfig+0x1a2>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ac:	e0ad      	b.n	800370a <UART_SetConfig+0x2e6>
 80035ae:	2302      	movs	r3, #2
 80035b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b4:	e0a9      	b.n	800370a <UART_SetConfig+0x2e6>
 80035b6:	2304      	movs	r3, #4
 80035b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035bc:	e0a5      	b.n	800370a <UART_SetConfig+0x2e6>
 80035be:	2308      	movs	r3, #8
 80035c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c4:	e0a1      	b.n	800370a <UART_SetConfig+0x2e6>
 80035c6:	2310      	movs	r3, #16
 80035c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035cc:	e09d      	b.n	800370a <UART_SetConfig+0x2e6>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <UART_SetConfig+0x2d8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d125      	bne.n	8003624 <UART_SetConfig+0x200>
 80035d8:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <UART_SetConfig+0x2cc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035e2:	2bc0      	cmp	r3, #192	; 0xc0
 80035e4:	d016      	beq.n	8003614 <UART_SetConfig+0x1f0>
 80035e6:	2bc0      	cmp	r3, #192	; 0xc0
 80035e8:	d818      	bhi.n	800361c <UART_SetConfig+0x1f8>
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d00a      	beq.n	8003604 <UART_SetConfig+0x1e0>
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d814      	bhi.n	800361c <UART_SetConfig+0x1f8>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <UART_SetConfig+0x1d8>
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x1e8>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x1f8>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e082      	b.n	800370a <UART_SetConfig+0x2e6>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e07e      	b.n	800370a <UART_SetConfig+0x2e6>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e07a      	b.n	800370a <UART_SetConfig+0x2e6>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e076      	b.n	800370a <UART_SetConfig+0x2e6>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e072      	b.n	800370a <UART_SetConfig+0x2e6>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <UART_SetConfig+0x2dc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d12a      	bne.n	8003684 <UART_SetConfig+0x260>
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <UART_SetConfig+0x2cc>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363c:	d01a      	beq.n	8003674 <UART_SetConfig+0x250>
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d81b      	bhi.n	800367c <UART_SetConfig+0x258>
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d00c      	beq.n	8003664 <UART_SetConfig+0x240>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d815      	bhi.n	800367c <UART_SetConfig+0x258>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <UART_SetConfig+0x238>
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d008      	beq.n	800366c <UART_SetConfig+0x248>
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x258>
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003662:	e052      	b.n	800370a <UART_SetConfig+0x2e6>
 8003664:	2302      	movs	r3, #2
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e04e      	b.n	800370a <UART_SetConfig+0x2e6>
 800366c:	2304      	movs	r3, #4
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e04a      	b.n	800370a <UART_SetConfig+0x2e6>
 8003674:	2308      	movs	r3, #8
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e046      	b.n	800370a <UART_SetConfig+0x2e6>
 800367c:	2310      	movs	r3, #16
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e042      	b.n	800370a <UART_SetConfig+0x2e6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <UART_SetConfig+0x2c4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d13a      	bne.n	8003704 <UART_SetConfig+0x2e0>
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <UART_SetConfig+0x2cc>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800369c:	d01a      	beq.n	80036d4 <UART_SetConfig+0x2b0>
 800369e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0x2b8>
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a8:	d00c      	beq.n	80036c4 <UART_SetConfig+0x2a0>
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d815      	bhi.n	80036dc <UART_SetConfig+0x2b8>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <UART_SetConfig+0x298>
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d008      	beq.n	80036cc <UART_SetConfig+0x2a8>
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x2b8>
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e022      	b.n	800370a <UART_SetConfig+0x2e6>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e01e      	b.n	800370a <UART_SetConfig+0x2e6>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e01a      	b.n	800370a <UART_SetConfig+0x2e6>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e016      	b.n	800370a <UART_SetConfig+0x2e6>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x2e6>
 80036e4:	efff69f3 	.word	0xefff69f3
 80036e8:	40008000 	.word	0x40008000
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40004400 	.word	0x40004400
 80036f8:	40004800 	.word	0x40004800
 80036fc:	40004c00 	.word	0x40004c00
 8003700:	40005000 	.word	0x40005000
 8003704:	2310      	movs	r3, #16
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a9f      	ldr	r2, [pc, #636]	; (800398c <UART_SetConfig+0x568>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d17a      	bne.n	800380a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003718:	2b08      	cmp	r3, #8
 800371a:	d824      	bhi.n	8003766 <UART_SetConfig+0x342>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0x300>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003749 	.word	0x08003749
 8003728:	08003767 	.word	0x08003767
 800372c:	08003751 	.word	0x08003751
 8003730:	08003767 	.word	0x08003767
 8003734:	08003757 	.word	0x08003757
 8003738:	08003767 	.word	0x08003767
 800373c:	08003767 	.word	0x08003767
 8003740:	08003767 	.word	0x08003767
 8003744:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fca4 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 800374c:	61f8      	str	r0, [r7, #28]
        break;
 800374e:	e010      	b.n	8003772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <UART_SetConfig+0x56c>)
 8003752:	61fb      	str	r3, [r7, #28]
        break;
 8003754:	e00d      	b.n	8003772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fc05 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 800375a:	61f8      	str	r0, [r7, #28]
        break;
 800375c:	e009      	b.n	8003772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	61fb      	str	r3, [r7, #28]
        break;
 8003764:	e005      	b.n	8003772 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80fb 	beq.w	8003970 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	429a      	cmp	r2, r3
 8003788:	d305      	bcc.n	8003796 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	429a      	cmp	r2, r3
 8003794:	d903      	bls.n	800379e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800379c:	e0e8      	b.n	8003970 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2200      	movs	r2, #0
 80037a2:	461c      	mov	r4, r3
 80037a4:	4615      	mov	r5, r2
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	022b      	lsls	r3, r5, #8
 80037b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037b4:	0222      	lsls	r2, r4, #8
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	6849      	ldr	r1, [r1, #4]
 80037ba:	0849      	lsrs	r1, r1, #1
 80037bc:	2000      	movs	r0, #0
 80037be:	4688      	mov	r8, r1
 80037c0:	4681      	mov	r9, r0
 80037c2:	eb12 0a08 	adds.w	sl, r2, r8
 80037c6:	eb43 0b09 	adc.w	fp, r3, r9
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037d8:	4650      	mov	r0, sl
 80037da:	4659      	mov	r1, fp
 80037dc:	f7fc fd50 	bl	8000280 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d308      	bcc.n	8003802 <UART_SetConfig+0x3de>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d204      	bcs.n	8003802 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e0b6      	b.n	8003970 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003808:	e0b2      	b.n	8003970 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003812:	d15e      	bne.n	80038d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003818:	2b08      	cmp	r3, #8
 800381a:	d828      	bhi.n	800386e <UART_SetConfig+0x44a>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <UART_SetConfig+0x400>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003849 	.word	0x08003849
 8003828:	08003851 	.word	0x08003851
 800382c:	08003859 	.word	0x08003859
 8003830:	0800386f 	.word	0x0800386f
 8003834:	0800385f 	.word	0x0800385f
 8003838:	0800386f 	.word	0x0800386f
 800383c:	0800386f 	.word	0x0800386f
 8003840:	0800386f 	.word	0x0800386f
 8003844:	08003867 	.word	0x08003867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003848:	f7fe fc24 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 800384c:	61f8      	str	r0, [r7, #28]
        break;
 800384e:	e014      	b.n	800387a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003850:	f7fe fc36 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003854:	61f8      	str	r0, [r7, #28]
        break;
 8003856:	e010      	b.n	800387a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003858:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <UART_SetConfig+0x56c>)
 800385a:	61fb      	str	r3, [r7, #28]
        break;
 800385c:	e00d      	b.n	800387a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385e:	f7fe fb81 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8003862:	61f8      	str	r0, [r7, #28]
        break;
 8003864:	e009      	b.n	800387a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386a:	61fb      	str	r3, [r7, #28]
        break;
 800386c:	e005      	b.n	800387a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d077      	beq.n	8003970 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005a      	lsls	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	441a      	add	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b0f      	cmp	r3, #15
 800389a:	d916      	bls.n	80038ca <UART_SetConfig+0x4a6>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d212      	bcs.n	80038ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f023 030f 	bic.w	r3, r3, #15
 80038ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	4313      	orrs	r3, r2
 80038be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	8afa      	ldrh	r2, [r7, #22]
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	e052      	b.n	8003970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038d0:	e04e      	b.n	8003970 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d827      	bhi.n	800392a <UART_SetConfig+0x506>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x4bc>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	08003915 	.word	0x08003915
 80038ec:	0800392b 	.word	0x0800392b
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800392b 	.word	0x0800392b
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fbc6 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003908:	61f8      	str	r0, [r7, #28]
        break;
 800390a:	e014      	b.n	8003936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7fe fbd8 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003910:	61f8      	str	r0, [r7, #28]
        break;
 8003912:	e010      	b.n	8003936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <UART_SetConfig+0x56c>)
 8003916:	61fb      	str	r3, [r7, #28]
        break;
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7fe fb23 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 800391e:	61f8      	str	r0, [r7, #28]
        break;
 8003920:	e009      	b.n	8003936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	61fb      	str	r3, [r7, #28]
        break;
 8003928:	e005      	b.n	8003936 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003934:	bf00      	nop
    }

    if (pclk != 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d019      	beq.n	8003970 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	085a      	lsrs	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d909      	bls.n	800396a <UART_SetConfig+0x546>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d205      	bcs.n	800396a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e002      	b.n	8003970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800397c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	40008000 	.word	0x40008000
 8003990:	00f42400 	.word	0x00f42400

08003994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01a      	beq.n	8003aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a92:	d10a      	bne.n	8003aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b098      	sub	sp, #96	; 0x60
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ae8:	f7fd f9b6 	bl	8000e58 <HAL_GetTick>
 8003aec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d12e      	bne.n	8003b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f88c 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d021      	beq.n	8003b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
 8003b36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e062      	b.n	8003c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d149      	bne.n	8003bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f856 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03c      	beq.n	8003bfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	617b      	str	r3, [r7, #20]
   return(result);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e011      	b.n	8003c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3758      	adds	r7, #88	; 0x58
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c38:	e049      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d045      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fd f909 	bl	8000e58 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e048      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d031      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d110      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f838 	bl	8003cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e029      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca8:	d111      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f81e 	bl	8003cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e00f      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d0a6      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b095      	sub	sp, #84	; 0x54
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d118      	bne.n	8003d9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0310 	bic.w	r3, r3, #16
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	613b      	str	r3, [r7, #16]
   return(result);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e6      	bne.n	8003d6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003db2:	bf00      	nop
 8003db4:	3754      	adds	r7, #84	; 0x54
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fb0b 	bl	80033f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b08f      	sub	sp, #60	; 0x3c
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df6:	2b21      	cmp	r3, #33	; 0x21
 8003df8:	d14d      	bne.n	8003e96 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d132      	bne.n	8003e6c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e6a:	e014      	b.n	8003e96 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	b292      	uxth	r2, r2
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003e96:	bf00      	nop
 8003e98:	373c      	adds	r7, #60	; 0x3c
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b091      	sub	sp, #68	; 0x44
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d151      	bne.n	8003f56 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d132      	bne.n	8003f24 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	623b      	str	r3, [r7, #32]
   return(result);
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ede:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003f22:	e018      	b.n	8003f56 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f36:	b292      	uxth	r2, r2
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003f56:	bf00      	nop
 8003f58:	3744      	adds	r7, #68	; 0x44
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b088      	sub	sp, #32
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	613b      	str	r3, [r7, #16]
   return(result);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e6      	bne.n	8003f6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fa1b 	bl	80033e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <std>:
 8003fcc:	2300      	movs	r3, #0
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8003fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fda:	6083      	str	r3, [r0, #8]
 8003fdc:	8181      	strh	r1, [r0, #12]
 8003fde:	6643      	str	r3, [r0, #100]	; 0x64
 8003fe0:	81c2      	strh	r2, [r0, #14]
 8003fe2:	6183      	str	r3, [r0, #24]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	305c      	adds	r0, #92	; 0x5c
 8003fea:	f000 f9e5 	bl	80043b8 <memset>
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <std+0x38>)
 8003ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <std+0x3c>)
 8003ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <std+0x40>)
 8003ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <std+0x44>)
 8003ffc:	6224      	str	r4, [r4, #32]
 8003ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8004000:	bd10      	pop	{r4, pc}
 8004002:	bf00      	nop
 8004004:	08004209 	.word	0x08004209
 8004008:	0800422b 	.word	0x0800422b
 800400c:	08004263 	.word	0x08004263
 8004010:	08004287 	.word	0x08004287

08004014 <stdio_exit_handler>:
 8004014:	4a02      	ldr	r2, [pc, #8]	; (8004020 <stdio_exit_handler+0xc>)
 8004016:	4903      	ldr	r1, [pc, #12]	; (8004024 <stdio_exit_handler+0x10>)
 8004018:	4803      	ldr	r0, [pc, #12]	; (8004028 <stdio_exit_handler+0x14>)
 800401a:	f000 b869 	b.w	80040f0 <_fwalk_sglue>
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c
 8004024:	08004da1 	.word	0x08004da1
 8004028:	20000018 	.word	0x20000018

0800402c <cleanup_stdio>:
 800402c:	6841      	ldr	r1, [r0, #4]
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <cleanup_stdio+0x34>)
 8004030:	4299      	cmp	r1, r3
 8004032:	b510      	push	{r4, lr}
 8004034:	4604      	mov	r4, r0
 8004036:	d001      	beq.n	800403c <cleanup_stdio+0x10>
 8004038:	f000 feb2 	bl	8004da0 <_fflush_r>
 800403c:	68a1      	ldr	r1, [r4, #8]
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <cleanup_stdio+0x38>)
 8004040:	4299      	cmp	r1, r3
 8004042:	d002      	beq.n	800404a <cleanup_stdio+0x1e>
 8004044:	4620      	mov	r0, r4
 8004046:	f000 feab 	bl	8004da0 <_fflush_r>
 800404a:	68e1      	ldr	r1, [r4, #12]
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <cleanup_stdio+0x3c>)
 800404e:	4299      	cmp	r1, r3
 8004050:	d004      	beq.n	800405c <cleanup_stdio+0x30>
 8004052:	4620      	mov	r0, r4
 8004054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004058:	f000 bea2 	b.w	8004da0 <_fflush_r>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	bf00      	nop
 8004060:	20000180 	.word	0x20000180
 8004064:	200001e8 	.word	0x200001e8
 8004068:	20000250 	.word	0x20000250

0800406c <global_stdio_init.part.0>:
 800406c:	b510      	push	{r4, lr}
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <global_stdio_init.part.0+0x30>)
 8004070:	4c0b      	ldr	r4, [pc, #44]	; (80040a0 <global_stdio_init.part.0+0x34>)
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <global_stdio_init.part.0+0x38>)
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	4620      	mov	r0, r4
 8004078:	2200      	movs	r2, #0
 800407a:	2104      	movs	r1, #4
 800407c:	f7ff ffa6 	bl	8003fcc <std>
 8004080:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004084:	2201      	movs	r2, #1
 8004086:	2109      	movs	r1, #9
 8004088:	f7ff ffa0 	bl	8003fcc <std>
 800408c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004090:	2202      	movs	r2, #2
 8004092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004096:	2112      	movs	r1, #18
 8004098:	f7ff bf98 	b.w	8003fcc <std>
 800409c:	200002b8 	.word	0x200002b8
 80040a0:	20000180 	.word	0x20000180
 80040a4:	08004015 	.word	0x08004015

080040a8 <__sfp_lock_acquire>:
 80040a8:	4801      	ldr	r0, [pc, #4]	; (80040b0 <__sfp_lock_acquire+0x8>)
 80040aa:	f000 ba25 	b.w	80044f8 <__retarget_lock_acquire_recursive>
 80040ae:	bf00      	nop
 80040b0:	200002c1 	.word	0x200002c1

080040b4 <__sfp_lock_release>:
 80040b4:	4801      	ldr	r0, [pc, #4]	; (80040bc <__sfp_lock_release+0x8>)
 80040b6:	f000 ba20 	b.w	80044fa <__retarget_lock_release_recursive>
 80040ba:	bf00      	nop
 80040bc:	200002c1 	.word	0x200002c1

080040c0 <__sinit>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
 80040c4:	f7ff fff0 	bl	80040a8 <__sfp_lock_acquire>
 80040c8:	6a23      	ldr	r3, [r4, #32]
 80040ca:	b11b      	cbz	r3, 80040d4 <__sinit+0x14>
 80040cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d0:	f7ff bff0 	b.w	80040b4 <__sfp_lock_release>
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <__sinit+0x28>)
 80040d6:	6223      	str	r3, [r4, #32]
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__sinit+0x2c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f5      	bne.n	80040cc <__sinit+0xc>
 80040e0:	f7ff ffc4 	bl	800406c <global_stdio_init.part.0>
 80040e4:	e7f2      	b.n	80040cc <__sinit+0xc>
 80040e6:	bf00      	nop
 80040e8:	0800402d 	.word	0x0800402d
 80040ec:	200002b8 	.word	0x200002b8

080040f0 <_fwalk_sglue>:
 80040f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f4:	4607      	mov	r7, r0
 80040f6:	4688      	mov	r8, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	2600      	movs	r6, #0
 80040fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004100:	f1b9 0901 	subs.w	r9, r9, #1
 8004104:	d505      	bpl.n	8004112 <_fwalk_sglue+0x22>
 8004106:	6824      	ldr	r4, [r4, #0]
 8004108:	2c00      	cmp	r4, #0
 800410a:	d1f7      	bne.n	80040fc <_fwalk_sglue+0xc>
 800410c:	4630      	mov	r0, r6
 800410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004112:	89ab      	ldrh	r3, [r5, #12]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d907      	bls.n	8004128 <_fwalk_sglue+0x38>
 8004118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800411c:	3301      	adds	r3, #1
 800411e:	d003      	beq.n	8004128 <_fwalk_sglue+0x38>
 8004120:	4629      	mov	r1, r5
 8004122:	4638      	mov	r0, r7
 8004124:	47c0      	blx	r8
 8004126:	4306      	orrs	r6, r0
 8004128:	3568      	adds	r5, #104	; 0x68
 800412a:	e7e9      	b.n	8004100 <_fwalk_sglue+0x10>

0800412c <iprintf>:
 800412c:	b40f      	push	{r0, r1, r2, r3}
 800412e:	b507      	push	{r0, r1, r2, lr}
 8004130:	4906      	ldr	r1, [pc, #24]	; (800414c <iprintf+0x20>)
 8004132:	ab04      	add	r3, sp, #16
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	f853 2b04 	ldr.w	r2, [r3], #4
 800413a:	6881      	ldr	r1, [r0, #8]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	f000 faff 	bl	8004740 <_vfiprintf_r>
 8004142:	b003      	add	sp, #12
 8004144:	f85d eb04 	ldr.w	lr, [sp], #4
 8004148:	b004      	add	sp, #16
 800414a:	4770      	bx	lr
 800414c:	20000064 	.word	0x20000064

08004150 <_puts_r>:
 8004150:	6a03      	ldr	r3, [r0, #32]
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	6884      	ldr	r4, [r0, #8]
 8004156:	4605      	mov	r5, r0
 8004158:	460e      	mov	r6, r1
 800415a:	b90b      	cbnz	r3, 8004160 <_puts_r+0x10>
 800415c:	f7ff ffb0 	bl	80040c0 <__sinit>
 8004160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004162:	07db      	lsls	r3, r3, #31
 8004164:	d405      	bmi.n	8004172 <_puts_r+0x22>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	0598      	lsls	r0, r3, #22
 800416a:	d402      	bmi.n	8004172 <_puts_r+0x22>
 800416c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416e:	f000 f9c3 	bl	80044f8 <__retarget_lock_acquire_recursive>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	0719      	lsls	r1, r3, #28
 8004176:	d513      	bpl.n	80041a0 <_puts_r+0x50>
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	b18b      	cbz	r3, 80041a0 <_puts_r+0x50>
 800417c:	3e01      	subs	r6, #1
 800417e:	68a3      	ldr	r3, [r4, #8]
 8004180:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004184:	3b01      	subs	r3, #1
 8004186:	60a3      	str	r3, [r4, #8]
 8004188:	b9e9      	cbnz	r1, 80041c6 <_puts_r+0x76>
 800418a:	2b00      	cmp	r3, #0
 800418c:	da2e      	bge.n	80041ec <_puts_r+0x9c>
 800418e:	4622      	mov	r2, r4
 8004190:	210a      	movs	r1, #10
 8004192:	4628      	mov	r0, r5
 8004194:	f000 f87b 	bl	800428e <__swbuf_r>
 8004198:	3001      	adds	r0, #1
 800419a:	d007      	beq.n	80041ac <_puts_r+0x5c>
 800419c:	250a      	movs	r5, #10
 800419e:	e007      	b.n	80041b0 <_puts_r+0x60>
 80041a0:	4621      	mov	r1, r4
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 f8b0 	bl	8004308 <__swsetup_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0e7      	beq.n	800417c <_puts_r+0x2c>
 80041ac:	f04f 35ff 	mov.w	r5, #4294967295
 80041b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b2:	07da      	lsls	r2, r3, #31
 80041b4:	d405      	bmi.n	80041c2 <_puts_r+0x72>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	d402      	bmi.n	80041c2 <_puts_r+0x72>
 80041bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041be:	f000 f99c 	bl	80044fa <__retarget_lock_release_recursive>
 80041c2:	4628      	mov	r0, r5
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da04      	bge.n	80041d4 <_puts_r+0x84>
 80041ca:	69a2      	ldr	r2, [r4, #24]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	dc06      	bgt.n	80041de <_puts_r+0x8e>
 80041d0:	290a      	cmp	r1, #10
 80041d2:	d004      	beq.n	80041de <_puts_r+0x8e>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	7019      	strb	r1, [r3, #0]
 80041dc:	e7cf      	b.n	800417e <_puts_r+0x2e>
 80041de:	4622      	mov	r2, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f854 	bl	800428e <__swbuf_r>
 80041e6:	3001      	adds	r0, #1
 80041e8:	d1c9      	bne.n	800417e <_puts_r+0x2e>
 80041ea:	e7df      	b.n	80041ac <_puts_r+0x5c>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	250a      	movs	r5, #10
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	6022      	str	r2, [r4, #0]
 80041f4:	701d      	strb	r5, [r3, #0]
 80041f6:	e7db      	b.n	80041b0 <_puts_r+0x60>

080041f8 <puts>:
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <puts+0xc>)
 80041fa:	4601      	mov	r1, r0
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f7ff bfa7 	b.w	8004150 <_puts_r>
 8004202:	bf00      	nop
 8004204:	20000064 	.word	0x20000064

08004208 <__sread>:
 8004208:	b510      	push	{r4, lr}
 800420a:	460c      	mov	r4, r1
 800420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004210:	f000 f924 	bl	800445c <_read_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	bfab      	itete	ge
 8004218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800421a:	89a3      	ldrhlt	r3, [r4, #12]
 800421c:	181b      	addge	r3, r3, r0
 800421e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004222:	bfac      	ite	ge
 8004224:	6563      	strge	r3, [r4, #84]	; 0x54
 8004226:	81a3      	strhlt	r3, [r4, #12]
 8004228:	bd10      	pop	{r4, pc}

0800422a <__swrite>:
 800422a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800422e:	461f      	mov	r7, r3
 8004230:	898b      	ldrh	r3, [r1, #12]
 8004232:	05db      	lsls	r3, r3, #23
 8004234:	4605      	mov	r5, r0
 8004236:	460c      	mov	r4, r1
 8004238:	4616      	mov	r6, r2
 800423a:	d505      	bpl.n	8004248 <__swrite+0x1e>
 800423c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004240:	2302      	movs	r3, #2
 8004242:	2200      	movs	r2, #0
 8004244:	f000 f8f8 	bl	8004438 <_lseek_r>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800424e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	4632      	mov	r2, r6
 8004256:	463b      	mov	r3, r7
 8004258:	4628      	mov	r0, r5
 800425a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800425e:	f000 b90f 	b.w	8004480 <_write_r>

08004262 <__sseek>:
 8004262:	b510      	push	{r4, lr}
 8004264:	460c      	mov	r4, r1
 8004266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426a:	f000 f8e5 	bl	8004438 <_lseek_r>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	bf15      	itete	ne
 8004274:	6560      	strne	r0, [r4, #84]	; 0x54
 8004276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800427a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800427e:	81a3      	strheq	r3, [r4, #12]
 8004280:	bf18      	it	ne
 8004282:	81a3      	strhne	r3, [r4, #12]
 8004284:	bd10      	pop	{r4, pc}

08004286 <__sclose>:
 8004286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428a:	f000 b8c5 	b.w	8004418 <_close_r>

0800428e <__swbuf_r>:
 800428e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004290:	460e      	mov	r6, r1
 8004292:	4614      	mov	r4, r2
 8004294:	4605      	mov	r5, r0
 8004296:	b118      	cbz	r0, 80042a0 <__swbuf_r+0x12>
 8004298:	6a03      	ldr	r3, [r0, #32]
 800429a:	b90b      	cbnz	r3, 80042a0 <__swbuf_r+0x12>
 800429c:	f7ff ff10 	bl	80040c0 <__sinit>
 80042a0:	69a3      	ldr	r3, [r4, #24]
 80042a2:	60a3      	str	r3, [r4, #8]
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	071a      	lsls	r2, r3, #28
 80042a8:	d525      	bpl.n	80042f6 <__swbuf_r+0x68>
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	b31b      	cbz	r3, 80042f6 <__swbuf_r+0x68>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	6922      	ldr	r2, [r4, #16]
 80042b2:	1a98      	subs	r0, r3, r2
 80042b4:	6963      	ldr	r3, [r4, #20]
 80042b6:	b2f6      	uxtb	r6, r6
 80042b8:	4283      	cmp	r3, r0
 80042ba:	4637      	mov	r7, r6
 80042bc:	dc04      	bgt.n	80042c8 <__swbuf_r+0x3a>
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 fd6d 	bl	8004da0 <_fflush_r>
 80042c6:	b9e0      	cbnz	r0, 8004302 <__swbuf_r+0x74>
 80042c8:	68a3      	ldr	r3, [r4, #8]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	60a3      	str	r3, [r4, #8]
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	6022      	str	r2, [r4, #0]
 80042d4:	701e      	strb	r6, [r3, #0]
 80042d6:	6962      	ldr	r2, [r4, #20]
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	429a      	cmp	r2, r3
 80042dc:	d004      	beq.n	80042e8 <__swbuf_r+0x5a>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	07db      	lsls	r3, r3, #31
 80042e2:	d506      	bpl.n	80042f2 <__swbuf_r+0x64>
 80042e4:	2e0a      	cmp	r6, #10
 80042e6:	d104      	bne.n	80042f2 <__swbuf_r+0x64>
 80042e8:	4621      	mov	r1, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 fd58 	bl	8004da0 <_fflush_r>
 80042f0:	b938      	cbnz	r0, 8004302 <__swbuf_r+0x74>
 80042f2:	4638      	mov	r0, r7
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f6:	4621      	mov	r1, r4
 80042f8:	4628      	mov	r0, r5
 80042fa:	f000 f805 	bl	8004308 <__swsetup_r>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d0d5      	beq.n	80042ae <__swbuf_r+0x20>
 8004302:	f04f 37ff 	mov.w	r7, #4294967295
 8004306:	e7f4      	b.n	80042f2 <__swbuf_r+0x64>

08004308 <__swsetup_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <__swsetup_r+0xac>)
 800430c:	4605      	mov	r5, r0
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	460c      	mov	r4, r1
 8004312:	b118      	cbz	r0, 800431c <__swsetup_r+0x14>
 8004314:	6a03      	ldr	r3, [r0, #32]
 8004316:	b90b      	cbnz	r3, 800431c <__swsetup_r+0x14>
 8004318:	f7ff fed2 	bl	80040c0 <__sinit>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004322:	0718      	lsls	r0, r3, #28
 8004324:	d422      	bmi.n	800436c <__swsetup_r+0x64>
 8004326:	06d9      	lsls	r1, r3, #27
 8004328:	d407      	bmi.n	800433a <__swsetup_r+0x32>
 800432a:	2309      	movs	r3, #9
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	e034      	b.n	80043a4 <__swsetup_r+0x9c>
 800433a:	0758      	lsls	r0, r3, #29
 800433c:	d512      	bpl.n	8004364 <__swsetup_r+0x5c>
 800433e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004340:	b141      	cbz	r1, 8004354 <__swsetup_r+0x4c>
 8004342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004346:	4299      	cmp	r1, r3
 8004348:	d002      	beq.n	8004350 <__swsetup_r+0x48>
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f8d6 	bl	80044fc <_free_r>
 8004350:	2300      	movs	r3, #0
 8004352:	6363      	str	r3, [r4, #52]	; 0x34
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b94b      	cbnz	r3, 8004384 <__swsetup_r+0x7c>
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d003      	beq.n	8004384 <__swsetup_r+0x7c>
 800437c:	4621      	mov	r1, r4
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fd5c 	bl	8004e3c <__smakebuf_r>
 8004384:	89a0      	ldrh	r0, [r4, #12]
 8004386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800438a:	f010 0301 	ands.w	r3, r0, #1
 800438e:	d00a      	beq.n	80043a6 <__swsetup_r+0x9e>
 8004390:	2300      	movs	r3, #0
 8004392:	60a3      	str	r3, [r4, #8]
 8004394:	6963      	ldr	r3, [r4, #20]
 8004396:	425b      	negs	r3, r3
 8004398:	61a3      	str	r3, [r4, #24]
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	b943      	cbnz	r3, 80043b0 <__swsetup_r+0xa8>
 800439e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a2:	d1c4      	bne.n	800432e <__swsetup_r+0x26>
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
 80043a6:	0781      	lsls	r1, r0, #30
 80043a8:	bf58      	it	pl
 80043aa:	6963      	ldrpl	r3, [r4, #20]
 80043ac:	60a3      	str	r3, [r4, #8]
 80043ae:	e7f4      	b.n	800439a <__swsetup_r+0x92>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e7f7      	b.n	80043a4 <__swsetup_r+0x9c>
 80043b4:	20000064 	.word	0x20000064

080043b8 <memset>:
 80043b8:	4402      	add	r2, r0
 80043ba:	4603      	mov	r3, r0
 80043bc:	4293      	cmp	r3, r2
 80043be:	d100      	bne.n	80043c2 <memset+0xa>
 80043c0:	4770      	bx	lr
 80043c2:	f803 1b01 	strb.w	r1, [r3], #1
 80043c6:	e7f9      	b.n	80043bc <memset+0x4>

080043c8 <strncmp>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	b16a      	cbz	r2, 80043e8 <strncmp+0x20>
 80043cc:	3901      	subs	r1, #1
 80043ce:	1884      	adds	r4, r0, r2
 80043d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80043d8:	429a      	cmp	r2, r3
 80043da:	d103      	bne.n	80043e4 <strncmp+0x1c>
 80043dc:	42a0      	cmp	r0, r4
 80043de:	d001      	beq.n	80043e4 <strncmp+0x1c>
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	d1f5      	bne.n	80043d0 <strncmp+0x8>
 80043e4:	1ad0      	subs	r0, r2, r3
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	4610      	mov	r0, r2
 80043ea:	e7fc      	b.n	80043e6 <strncmp+0x1e>

080043ec <strstr>:
 80043ec:	780a      	ldrb	r2, [r1, #0]
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	b96a      	cbnz	r2, 800440e <strstr+0x22>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d109      	bne.n	800440c <strstr+0x20>
 80043f8:	460c      	mov	r4, r1
 80043fa:	4605      	mov	r5, r0
 80043fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f6      	beq.n	80043f2 <strstr+0x6>
 8004404:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004408:	429e      	cmp	r6, r3
 800440a:	d0f7      	beq.n	80043fc <strstr+0x10>
 800440c:	3001      	adds	r0, #1
 800440e:	7803      	ldrb	r3, [r0, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ef      	bne.n	80043f4 <strstr+0x8>
 8004414:	4618      	mov	r0, r3
 8004416:	e7ec      	b.n	80043f2 <strstr+0x6>

08004418 <_close_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d06      	ldr	r5, [pc, #24]	; (8004434 <_close_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc fc01 	bl	8000c2a <_close>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_close_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_close_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200002bc 	.word	0x200002bc

08004438 <_lseek_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4d07      	ldr	r5, [pc, #28]	; (8004458 <_lseek_r+0x20>)
 800443c:	4604      	mov	r4, r0
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	2200      	movs	r2, #0
 8004444:	602a      	str	r2, [r5, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f7fc fc16 	bl	8000c78 <_lseek>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_lseek_r+0x1e>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_lseek_r+0x1e>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	200002bc 	.word	0x200002bc

0800445c <_read_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d07      	ldr	r5, [pc, #28]	; (800447c <_read_r+0x20>)
 8004460:	4604      	mov	r4, r0
 8004462:	4608      	mov	r0, r1
 8004464:	4611      	mov	r1, r2
 8004466:	2200      	movs	r2, #0
 8004468:	602a      	str	r2, [r5, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f7fc fbc0 	bl	8000bf0 <_read>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_read_r+0x1e>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_read_r+0x1e>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200002bc 	.word	0x200002bc

08004480 <_write_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d07      	ldr	r5, [pc, #28]	; (80044a0 <_write_r+0x20>)
 8004484:	4604      	mov	r4, r0
 8004486:	4608      	mov	r0, r1
 8004488:	4611      	mov	r1, r2
 800448a:	2200      	movs	r2, #0
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc f89b 	bl	80005ca <_write>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_write_r+0x1e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_write_r+0x1e>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200002bc 	.word	0x200002bc

080044a4 <__errno>:
 80044a4:	4b01      	ldr	r3, [pc, #4]	; (80044ac <__errno+0x8>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000064 	.word	0x20000064

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4d0d      	ldr	r5, [pc, #52]	; (80044e8 <__libc_init_array+0x38>)
 80044b4:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	2600      	movs	r6, #0
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	4d0b      	ldr	r5, [pc, #44]	; (80044f0 <__libc_init_array+0x40>)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	; (80044f4 <__libc_init_array+0x44>)
 80044c4:	f000 fd28 	bl	8004f18 <_init>
 80044c8:	1b64      	subs	r4, r4, r5
 80044ca:	10a4      	asrs	r4, r4, #2
 80044cc:	2600      	movs	r6, #0
 80044ce:	42a6      	cmp	r6, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d8:	4798      	blx	r3
 80044da:	3601      	adds	r6, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e2:	4798      	blx	r3
 80044e4:	3601      	adds	r6, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	0800503c 	.word	0x0800503c
 80044ec:	0800503c 	.word	0x0800503c
 80044f0:	0800503c 	.word	0x0800503c
 80044f4:	08005040 	.word	0x08005040

080044f8 <__retarget_lock_acquire_recursive>:
 80044f8:	4770      	bx	lr

080044fa <__retarget_lock_release_recursive>:
 80044fa:	4770      	bx	lr

080044fc <_free_r>:
 80044fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044fe:	2900      	cmp	r1, #0
 8004500:	d044      	beq.n	800458c <_free_r+0x90>
 8004502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004506:	9001      	str	r0, [sp, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f1a1 0404 	sub.w	r4, r1, #4
 800450e:	bfb8      	it	lt
 8004510:	18e4      	addlt	r4, r4, r3
 8004512:	f000 f8df 	bl	80046d4 <__malloc_lock>
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <_free_r+0x94>)
 8004518:	9801      	ldr	r0, [sp, #4]
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	b933      	cbnz	r3, 800452c <_free_r+0x30>
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	6014      	str	r4, [r2, #0]
 8004522:	b003      	add	sp, #12
 8004524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004528:	f000 b8da 	b.w	80046e0 <__malloc_unlock>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d908      	bls.n	8004542 <_free_r+0x46>
 8004530:	6825      	ldr	r5, [r4, #0]
 8004532:	1961      	adds	r1, r4, r5
 8004534:	428b      	cmp	r3, r1
 8004536:	bf01      	itttt	eq
 8004538:	6819      	ldreq	r1, [r3, #0]
 800453a:	685b      	ldreq	r3, [r3, #4]
 800453c:	1949      	addeq	r1, r1, r5
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	e7ed      	b.n	800451e <_free_r+0x22>
 8004542:	461a      	mov	r2, r3
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b10b      	cbz	r3, 800454c <_free_r+0x50>
 8004548:	42a3      	cmp	r3, r4
 800454a:	d9fa      	bls.n	8004542 <_free_r+0x46>
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	1855      	adds	r5, r2, r1
 8004550:	42a5      	cmp	r5, r4
 8004552:	d10b      	bne.n	800456c <_free_r+0x70>
 8004554:	6824      	ldr	r4, [r4, #0]
 8004556:	4421      	add	r1, r4
 8004558:	1854      	adds	r4, r2, r1
 800455a:	42a3      	cmp	r3, r4
 800455c:	6011      	str	r1, [r2, #0]
 800455e:	d1e0      	bne.n	8004522 <_free_r+0x26>
 8004560:	681c      	ldr	r4, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	6053      	str	r3, [r2, #4]
 8004566:	440c      	add	r4, r1
 8004568:	6014      	str	r4, [r2, #0]
 800456a:	e7da      	b.n	8004522 <_free_r+0x26>
 800456c:	d902      	bls.n	8004574 <_free_r+0x78>
 800456e:	230c      	movs	r3, #12
 8004570:	6003      	str	r3, [r0, #0]
 8004572:	e7d6      	b.n	8004522 <_free_r+0x26>
 8004574:	6825      	ldr	r5, [r4, #0]
 8004576:	1961      	adds	r1, r4, r5
 8004578:	428b      	cmp	r3, r1
 800457a:	bf04      	itt	eq
 800457c:	6819      	ldreq	r1, [r3, #0]
 800457e:	685b      	ldreq	r3, [r3, #4]
 8004580:	6063      	str	r3, [r4, #4]
 8004582:	bf04      	itt	eq
 8004584:	1949      	addeq	r1, r1, r5
 8004586:	6021      	streq	r1, [r4, #0]
 8004588:	6054      	str	r4, [r2, #4]
 800458a:	e7ca      	b.n	8004522 <_free_r+0x26>
 800458c:	b003      	add	sp, #12
 800458e:	bd30      	pop	{r4, r5, pc}
 8004590:	200002c4 	.word	0x200002c4

08004594 <sbrk_aligned>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4e0e      	ldr	r6, [pc, #56]	; (80045d0 <sbrk_aligned+0x3c>)
 8004598:	460c      	mov	r4, r1
 800459a:	6831      	ldr	r1, [r6, #0]
 800459c:	4605      	mov	r5, r0
 800459e:	b911      	cbnz	r1, 80045a6 <sbrk_aligned+0x12>
 80045a0:	f000 fcaa 	bl	8004ef8 <_sbrk_r>
 80045a4:	6030      	str	r0, [r6, #0]
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fca5 	bl	8004ef8 <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d00a      	beq.n	80045c8 <sbrk_aligned+0x34>
 80045b2:	1cc4      	adds	r4, r0, #3
 80045b4:	f024 0403 	bic.w	r4, r4, #3
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	d007      	beq.n	80045cc <sbrk_aligned+0x38>
 80045bc:	1a21      	subs	r1, r4, r0
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fc9a 	bl	8004ef8 <_sbrk_r>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d101      	bne.n	80045cc <sbrk_aligned+0x38>
 80045c8:	f04f 34ff 	mov.w	r4, #4294967295
 80045cc:	4620      	mov	r0, r4
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	200002c8 	.word	0x200002c8

080045d4 <_malloc_r>:
 80045d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045d8:	1ccd      	adds	r5, r1, #3
 80045da:	f025 0503 	bic.w	r5, r5, #3
 80045de:	3508      	adds	r5, #8
 80045e0:	2d0c      	cmp	r5, #12
 80045e2:	bf38      	it	cc
 80045e4:	250c      	movcc	r5, #12
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	4607      	mov	r7, r0
 80045ea:	db01      	blt.n	80045f0 <_malloc_r+0x1c>
 80045ec:	42a9      	cmp	r1, r5
 80045ee:	d905      	bls.n	80045fc <_malloc_r+0x28>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	2600      	movs	r6, #0
 80045f6:	4630      	mov	r0, r6
 80045f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046d0 <_malloc_r+0xfc>
 8004600:	f000 f868 	bl	80046d4 <__malloc_lock>
 8004604:	f8d8 3000 	ldr.w	r3, [r8]
 8004608:	461c      	mov	r4, r3
 800460a:	bb5c      	cbnz	r4, 8004664 <_malloc_r+0x90>
 800460c:	4629      	mov	r1, r5
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff ffc0 	bl	8004594 <sbrk_aligned>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	4604      	mov	r4, r0
 8004618:	d155      	bne.n	80046c6 <_malloc_r+0xf2>
 800461a:	f8d8 4000 	ldr.w	r4, [r8]
 800461e:	4626      	mov	r6, r4
 8004620:	2e00      	cmp	r6, #0
 8004622:	d145      	bne.n	80046b0 <_malloc_r+0xdc>
 8004624:	2c00      	cmp	r4, #0
 8004626:	d048      	beq.n	80046ba <_malloc_r+0xe6>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	4631      	mov	r1, r6
 800462c:	4638      	mov	r0, r7
 800462e:	eb04 0903 	add.w	r9, r4, r3
 8004632:	f000 fc61 	bl	8004ef8 <_sbrk_r>
 8004636:	4581      	cmp	r9, r0
 8004638:	d13f      	bne.n	80046ba <_malloc_r+0xe6>
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	1a6d      	subs	r5, r5, r1
 800463e:	4629      	mov	r1, r5
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ffa7 	bl	8004594 <sbrk_aligned>
 8004646:	3001      	adds	r0, #1
 8004648:	d037      	beq.n	80046ba <_malloc_r+0xe6>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	442b      	add	r3, r5
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	f8d8 3000 	ldr.w	r3, [r8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d038      	beq.n	80046ca <_malloc_r+0xf6>
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	42a2      	cmp	r2, r4
 800465c:	d12b      	bne.n	80046b6 <_malloc_r+0xe2>
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	e00f      	b.n	8004684 <_malloc_r+0xb0>
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	1b52      	subs	r2, r2, r5
 8004668:	d41f      	bmi.n	80046aa <_malloc_r+0xd6>
 800466a:	2a0b      	cmp	r2, #11
 800466c:	d917      	bls.n	800469e <_malloc_r+0xca>
 800466e:	1961      	adds	r1, r4, r5
 8004670:	42a3      	cmp	r3, r4
 8004672:	6025      	str	r5, [r4, #0]
 8004674:	bf18      	it	ne
 8004676:	6059      	strne	r1, [r3, #4]
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	bf08      	it	eq
 800467c:	f8c8 1000 	streq.w	r1, [r8]
 8004680:	5162      	str	r2, [r4, r5]
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	4638      	mov	r0, r7
 8004686:	f104 060b 	add.w	r6, r4, #11
 800468a:	f000 f829 	bl	80046e0 <__malloc_unlock>
 800468e:	f026 0607 	bic.w	r6, r6, #7
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	1af2      	subs	r2, r6, r3
 8004696:	d0ae      	beq.n	80045f6 <_malloc_r+0x22>
 8004698:	1b9b      	subs	r3, r3, r6
 800469a:	50a3      	str	r3, [r4, r2]
 800469c:	e7ab      	b.n	80045f6 <_malloc_r+0x22>
 800469e:	42a3      	cmp	r3, r4
 80046a0:	6862      	ldr	r2, [r4, #4]
 80046a2:	d1dd      	bne.n	8004660 <_malloc_r+0x8c>
 80046a4:	f8c8 2000 	str.w	r2, [r8]
 80046a8:	e7ec      	b.n	8004684 <_malloc_r+0xb0>
 80046aa:	4623      	mov	r3, r4
 80046ac:	6864      	ldr	r4, [r4, #4]
 80046ae:	e7ac      	b.n	800460a <_malloc_r+0x36>
 80046b0:	4634      	mov	r4, r6
 80046b2:	6876      	ldr	r6, [r6, #4]
 80046b4:	e7b4      	b.n	8004620 <_malloc_r+0x4c>
 80046b6:	4613      	mov	r3, r2
 80046b8:	e7cc      	b.n	8004654 <_malloc_r+0x80>
 80046ba:	230c      	movs	r3, #12
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4638      	mov	r0, r7
 80046c0:	f000 f80e 	bl	80046e0 <__malloc_unlock>
 80046c4:	e797      	b.n	80045f6 <_malloc_r+0x22>
 80046c6:	6025      	str	r5, [r4, #0]
 80046c8:	e7dc      	b.n	8004684 <_malloc_r+0xb0>
 80046ca:	605b      	str	r3, [r3, #4]
 80046cc:	deff      	udf	#255	; 0xff
 80046ce:	bf00      	nop
 80046d0:	200002c4 	.word	0x200002c4

080046d4 <__malloc_lock>:
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <__malloc_lock+0x8>)
 80046d6:	f7ff bf0f 	b.w	80044f8 <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	200002c0 	.word	0x200002c0

080046e0 <__malloc_unlock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <__malloc_unlock+0x8>)
 80046e2:	f7ff bf0a 	b.w	80044fa <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	200002c0 	.word	0x200002c0

080046ec <__sfputc_r>:
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	b410      	push	{r4}
 80046f4:	6093      	str	r3, [r2, #8]
 80046f6:	da08      	bge.n	800470a <__sfputc_r+0x1e>
 80046f8:	6994      	ldr	r4, [r2, #24]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	db01      	blt.n	8004702 <__sfputc_r+0x16>
 80046fe:	290a      	cmp	r1, #10
 8004700:	d103      	bne.n	800470a <__sfputc_r+0x1e>
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004706:	f7ff bdc2 	b.w	800428e <__swbuf_r>
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	1c58      	adds	r0, r3, #1
 800470e:	6010      	str	r0, [r2, #0]
 8004710:	7019      	strb	r1, [r3, #0]
 8004712:	4608      	mov	r0, r1
 8004714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004718:	4770      	bx	lr

0800471a <__sfputs_r>:
 800471a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	4614      	mov	r4, r2
 8004722:	18d5      	adds	r5, r2, r3
 8004724:	42ac      	cmp	r4, r5
 8004726:	d101      	bne.n	800472c <__sfputs_r+0x12>
 8004728:	2000      	movs	r0, #0
 800472a:	e007      	b.n	800473c <__sfputs_r+0x22>
 800472c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004730:	463a      	mov	r2, r7
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff ffda 	bl	80046ec <__sfputc_r>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d1f3      	bne.n	8004724 <__sfputs_r+0xa>
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004740 <_vfiprintf_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	460d      	mov	r5, r1
 8004746:	b09d      	sub	sp, #116	; 0x74
 8004748:	4614      	mov	r4, r2
 800474a:	4698      	mov	r8, r3
 800474c:	4606      	mov	r6, r0
 800474e:	b118      	cbz	r0, 8004758 <_vfiprintf_r+0x18>
 8004750:	6a03      	ldr	r3, [r0, #32]
 8004752:	b90b      	cbnz	r3, 8004758 <_vfiprintf_r+0x18>
 8004754:	f7ff fcb4 	bl	80040c0 <__sinit>
 8004758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800475a:	07d9      	lsls	r1, r3, #31
 800475c:	d405      	bmi.n	800476a <_vfiprintf_r+0x2a>
 800475e:	89ab      	ldrh	r3, [r5, #12]
 8004760:	059a      	lsls	r2, r3, #22
 8004762:	d402      	bmi.n	800476a <_vfiprintf_r+0x2a>
 8004764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004766:	f7ff fec7 	bl	80044f8 <__retarget_lock_acquire_recursive>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	d501      	bpl.n	8004774 <_vfiprintf_r+0x34>
 8004770:	692b      	ldr	r3, [r5, #16]
 8004772:	b99b      	cbnz	r3, 800479c <_vfiprintf_r+0x5c>
 8004774:	4629      	mov	r1, r5
 8004776:	4630      	mov	r0, r6
 8004778:	f7ff fdc6 	bl	8004308 <__swsetup_r>
 800477c:	b170      	cbz	r0, 800479c <_vfiprintf_r+0x5c>
 800477e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004780:	07dc      	lsls	r4, r3, #31
 8004782:	d504      	bpl.n	800478e <_vfiprintf_r+0x4e>
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	b01d      	add	sp, #116	; 0x74
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	89ab      	ldrh	r3, [r5, #12]
 8004790:	0598      	lsls	r0, r3, #22
 8004792:	d4f7      	bmi.n	8004784 <_vfiprintf_r+0x44>
 8004794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004796:	f7ff feb0 	bl	80044fa <__retarget_lock_release_recursive>
 800479a:	e7f3      	b.n	8004784 <_vfiprintf_r+0x44>
 800479c:	2300      	movs	r3, #0
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	2320      	movs	r3, #32
 80047a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047aa:	2330      	movs	r3, #48	; 0x30
 80047ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004960 <_vfiprintf_r+0x220>
 80047b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b4:	f04f 0901 	mov.w	r9, #1
 80047b8:	4623      	mov	r3, r4
 80047ba:	469a      	mov	sl, r3
 80047bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c0:	b10a      	cbz	r2, 80047c6 <_vfiprintf_r+0x86>
 80047c2:	2a25      	cmp	r2, #37	; 0x25
 80047c4:	d1f9      	bne.n	80047ba <_vfiprintf_r+0x7a>
 80047c6:	ebba 0b04 	subs.w	fp, sl, r4
 80047ca:	d00b      	beq.n	80047e4 <_vfiprintf_r+0xa4>
 80047cc:	465b      	mov	r3, fp
 80047ce:	4622      	mov	r2, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7ff ffa1 	bl	800471a <__sfputs_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	f000 80a9 	beq.w	8004930 <_vfiprintf_r+0x1f0>
 80047de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e0:	445a      	add	r2, fp
 80047e2:	9209      	str	r2, [sp, #36]	; 0x24
 80047e4:	f89a 3000 	ldrb.w	r3, [sl]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a1 	beq.w	8004930 <_vfiprintf_r+0x1f0>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295
 80047f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f8:	f10a 0a01 	add.w	sl, sl, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004804:	931a      	str	r3, [sp, #104]	; 0x68
 8004806:	4654      	mov	r4, sl
 8004808:	2205      	movs	r2, #5
 800480a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480e:	4854      	ldr	r0, [pc, #336]	; (8004960 <_vfiprintf_r+0x220>)
 8004810:	f7fb fce6 	bl	80001e0 <memchr>
 8004814:	9a04      	ldr	r2, [sp, #16]
 8004816:	b9d8      	cbnz	r0, 8004850 <_vfiprintf_r+0x110>
 8004818:	06d1      	lsls	r1, r2, #27
 800481a:	bf44      	itt	mi
 800481c:	2320      	movmi	r3, #32
 800481e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004822:	0713      	lsls	r3, r2, #28
 8004824:	bf44      	itt	mi
 8004826:	232b      	movmi	r3, #43	; 0x2b
 8004828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800482c:	f89a 3000 	ldrb.w	r3, [sl]
 8004830:	2b2a      	cmp	r3, #42	; 0x2a
 8004832:	d015      	beq.n	8004860 <_vfiprintf_r+0x120>
 8004834:	9a07      	ldr	r2, [sp, #28]
 8004836:	4654      	mov	r4, sl
 8004838:	2000      	movs	r0, #0
 800483a:	f04f 0c0a 	mov.w	ip, #10
 800483e:	4621      	mov	r1, r4
 8004840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004844:	3b30      	subs	r3, #48	; 0x30
 8004846:	2b09      	cmp	r3, #9
 8004848:	d94d      	bls.n	80048e6 <_vfiprintf_r+0x1a6>
 800484a:	b1b0      	cbz	r0, 800487a <_vfiprintf_r+0x13a>
 800484c:	9207      	str	r2, [sp, #28]
 800484e:	e014      	b.n	800487a <_vfiprintf_r+0x13a>
 8004850:	eba0 0308 	sub.w	r3, r0, r8
 8004854:	fa09 f303 	lsl.w	r3, r9, r3
 8004858:	4313      	orrs	r3, r2
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	46a2      	mov	sl, r4
 800485e:	e7d2      	b.n	8004806 <_vfiprintf_r+0xc6>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	1d19      	adds	r1, r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	9103      	str	r1, [sp, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bfbb      	ittet	lt
 800486c:	425b      	neglt	r3, r3
 800486e:	f042 0202 	orrlt.w	r2, r2, #2
 8004872:	9307      	strge	r3, [sp, #28]
 8004874:	9307      	strlt	r3, [sp, #28]
 8004876:	bfb8      	it	lt
 8004878:	9204      	strlt	r2, [sp, #16]
 800487a:	7823      	ldrb	r3, [r4, #0]
 800487c:	2b2e      	cmp	r3, #46	; 0x2e
 800487e:	d10c      	bne.n	800489a <_vfiprintf_r+0x15a>
 8004880:	7863      	ldrb	r3, [r4, #1]
 8004882:	2b2a      	cmp	r3, #42	; 0x2a
 8004884:	d134      	bne.n	80048f0 <_vfiprintf_r+0x1b0>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	9203      	str	r2, [sp, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfb8      	it	lt
 8004892:	f04f 33ff 	movlt.w	r3, #4294967295
 8004896:	3402      	adds	r4, #2
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004970 <_vfiprintf_r+0x230>
 800489e:	7821      	ldrb	r1, [r4, #0]
 80048a0:	2203      	movs	r2, #3
 80048a2:	4650      	mov	r0, sl
 80048a4:	f7fb fc9c 	bl	80001e0 <memchr>
 80048a8:	b138      	cbz	r0, 80048ba <_vfiprintf_r+0x17a>
 80048aa:	9b04      	ldr	r3, [sp, #16]
 80048ac:	eba0 000a 	sub.w	r0, r0, sl
 80048b0:	2240      	movs	r2, #64	; 0x40
 80048b2:	4082      	lsls	r2, r0
 80048b4:	4313      	orrs	r3, r2
 80048b6:	3401      	adds	r4, #1
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048be:	4829      	ldr	r0, [pc, #164]	; (8004964 <_vfiprintf_r+0x224>)
 80048c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c4:	2206      	movs	r2, #6
 80048c6:	f7fb fc8b 	bl	80001e0 <memchr>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d03f      	beq.n	800494e <_vfiprintf_r+0x20e>
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <_vfiprintf_r+0x228>)
 80048d0:	bb1b      	cbnz	r3, 800491a <_vfiprintf_r+0x1da>
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	3307      	adds	r3, #7
 80048d6:	f023 0307 	bic.w	r3, r3, #7
 80048da:	3308      	adds	r3, #8
 80048dc:	9303      	str	r3, [sp, #12]
 80048de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e0:	443b      	add	r3, r7
 80048e2:	9309      	str	r3, [sp, #36]	; 0x24
 80048e4:	e768      	b.n	80047b8 <_vfiprintf_r+0x78>
 80048e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ea:	460c      	mov	r4, r1
 80048ec:	2001      	movs	r0, #1
 80048ee:	e7a6      	b.n	800483e <_vfiprintf_r+0xfe>
 80048f0:	2300      	movs	r3, #0
 80048f2:	3401      	adds	r4, #1
 80048f4:	9305      	str	r3, [sp, #20]
 80048f6:	4619      	mov	r1, r3
 80048f8:	f04f 0c0a 	mov.w	ip, #10
 80048fc:	4620      	mov	r0, r4
 80048fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004902:	3a30      	subs	r2, #48	; 0x30
 8004904:	2a09      	cmp	r2, #9
 8004906:	d903      	bls.n	8004910 <_vfiprintf_r+0x1d0>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0c6      	beq.n	800489a <_vfiprintf_r+0x15a>
 800490c:	9105      	str	r1, [sp, #20]
 800490e:	e7c4      	b.n	800489a <_vfiprintf_r+0x15a>
 8004910:	fb0c 2101 	mla	r1, ip, r1, r2
 8004914:	4604      	mov	r4, r0
 8004916:	2301      	movs	r3, #1
 8004918:	e7f0      	b.n	80048fc <_vfiprintf_r+0x1bc>
 800491a:	ab03      	add	r3, sp, #12
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	462a      	mov	r2, r5
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <_vfiprintf_r+0x22c>)
 8004922:	a904      	add	r1, sp, #16
 8004924:	4630      	mov	r0, r6
 8004926:	f3af 8000 	nop.w
 800492a:	4607      	mov	r7, r0
 800492c:	1c78      	adds	r0, r7, #1
 800492e:	d1d6      	bne.n	80048de <_vfiprintf_r+0x19e>
 8004930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004932:	07d9      	lsls	r1, r3, #31
 8004934:	d405      	bmi.n	8004942 <_vfiprintf_r+0x202>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	059a      	lsls	r2, r3, #22
 800493a:	d402      	bmi.n	8004942 <_vfiprintf_r+0x202>
 800493c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800493e:	f7ff fddc 	bl	80044fa <__retarget_lock_release_recursive>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	065b      	lsls	r3, r3, #25
 8004946:	f53f af1d 	bmi.w	8004784 <_vfiprintf_r+0x44>
 800494a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494c:	e71c      	b.n	8004788 <_vfiprintf_r+0x48>
 800494e:	ab03      	add	r3, sp, #12
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	462a      	mov	r2, r5
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <_vfiprintf_r+0x22c>)
 8004956:	a904      	add	r1, sp, #16
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f879 	bl	8004a50 <_printf_i>
 800495e:	e7e4      	b.n	800492a <_vfiprintf_r+0x1ea>
 8004960:	08005000 	.word	0x08005000
 8004964:	0800500a 	.word	0x0800500a
 8004968:	00000000 	.word	0x00000000
 800496c:	0800471b 	.word	0x0800471b
 8004970:	08005006 	.word	0x08005006

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4699      	mov	r9, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c0:	1e13      	subs	r3, r2, #0
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d0:	4649      	mov	r1, r9
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf02      	ittt	eq
 80049e6:	68e5      	ldreq	r5, [r4, #12]
 80049e8:	6833      	ldreq	r3, [r6, #0]
 80049ea:	1aed      	subeq	r5, r5, r3
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	7e0f      	ldrb	r7, [r1, #24]
 8004a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a58:	2f78      	cmp	r7, #120	; 0x78
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	469a      	mov	sl, r3
 8004a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	; 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d4 	beq.w	8004c1a <_printf_i+0x1ca>
 8004a72:	2f58      	cmp	r7, #88	; 0x58
 8004a74:	f000 80c0 	beq.w	8004bf8 <_printf_i+0x1a8>
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a101      	add	r1, pc, #4	; (adr r1, 8004a90 <_printf_i+0x40>)
 8004a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004c01 	.word	0x08004c01
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004bbb 	.word	0x08004bbb
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c23 	.word	0x08004c23
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bc3 	.word	0x08004bc3
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	602a      	str	r2, [r5, #0]
 8004af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e09f      	b.n	8004c3c <_printf_i+0x1ec>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	0607      	lsls	r7, r0, #24
 8004b02:	f103 0104 	add.w	r1, r3, #4
 8004b06:	6029      	str	r1, [r5, #0]
 8004b08:	d501      	bpl.n	8004b0e <_printf_i+0xbe>
 8004b0a:	681e      	ldr	r6, [r3, #0]
 8004b0c:	e003      	b.n	8004b16 <_printf_i+0xc6>
 8004b0e:	0646      	lsls	r6, r0, #25
 8004b10:	d5fb      	bpl.n	8004b0a <_printf_i+0xba>
 8004b12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	da03      	bge.n	8004b22 <_printf_i+0xd2>
 8004b1a:	232d      	movs	r3, #45	; 0x2d
 8004b1c:	4276      	negs	r6, r6
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b22:	485a      	ldr	r0, [pc, #360]	; (8004c8c <_printf_i+0x23c>)
 8004b24:	230a      	movs	r3, #10
 8004b26:	e012      	b.n	8004b4e <_printf_i+0xfe>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	1d19      	adds	r1, r3, #4
 8004b2e:	6029      	str	r1, [r5, #0]
 8004b30:	0605      	lsls	r5, r0, #24
 8004b32:	d501      	bpl.n	8004b38 <_printf_i+0xe8>
 8004b34:	681e      	ldr	r6, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <_printf_i+0xee>
 8004b38:	0641      	lsls	r1, r0, #25
 8004b3a:	d5fb      	bpl.n	8004b34 <_printf_i+0xe4>
 8004b3c:	881e      	ldrh	r6, [r3, #0]
 8004b3e:	4853      	ldr	r0, [pc, #332]	; (8004c8c <_printf_i+0x23c>)
 8004b40:	2f6f      	cmp	r7, #111	; 0x6f
 8004b42:	bf0c      	ite	eq
 8004b44:	2308      	moveq	r3, #8
 8004b46:	230a      	movne	r3, #10
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4e:	6865      	ldr	r5, [r4, #4]
 8004b50:	60a5      	str	r5, [r4, #8]
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	bfa2      	ittt	ge
 8004b56:	6821      	ldrge	r1, [r4, #0]
 8004b58:	f021 0104 	bicge.w	r1, r1, #4
 8004b5c:	6021      	strge	r1, [r4, #0]
 8004b5e:	b90e      	cbnz	r6, 8004b64 <_printf_i+0x114>
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d04b      	beq.n	8004bfc <_printf_i+0x1ac>
 8004b64:	4615      	mov	r5, r2
 8004b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6e:	5dc7      	ldrb	r7, [r0, r7]
 8004b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b74:	4637      	mov	r7, r6
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	460e      	mov	r6, r1
 8004b7a:	d9f4      	bls.n	8004b66 <_printf_i+0x116>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10b      	bne.n	8004b98 <_printf_i+0x148>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07de      	lsls	r6, r3, #31
 8004b84:	d508      	bpl.n	8004b98 <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	bfde      	ittt	le
 8004b8e:	2330      	movle	r3, #48	; 0x30
 8004b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b98:	1b52      	subs	r2, r2, r5
 8004b9a:	6122      	str	r2, [r4, #16]
 8004b9c:	f8cd a000 	str.w	sl, [sp]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	aa03      	add	r2, sp, #12
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7ff fee4 	bl	8004974 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d14a      	bne.n	8004c46 <_printf_i+0x1f6>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	b004      	add	sp, #16
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	4833      	ldr	r0, [pc, #204]	; (8004c90 <_printf_i+0x240>)
 8004bc4:	2778      	movs	r7, #120	; 0x78
 8004bc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	6829      	ldr	r1, [r5, #0]
 8004bce:	061f      	lsls	r7, r3, #24
 8004bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0x18c>
 8004bd6:	065f      	lsls	r7, r3, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2b6      	uxthmi	r6, r6
 8004bdc:	07df      	lsls	r7, r3, #31
 8004bde:	bf48      	it	mi
 8004be0:	f043 0320 	orrmi.w	r3, r3, #32
 8004be4:	6029      	str	r1, [r5, #0]
 8004be6:	bf48      	it	mi
 8004be8:	6023      	strmi	r3, [r4, #0]
 8004bea:	b91e      	cbnz	r6, 8004bf4 <_printf_i+0x1a4>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	e7a7      	b.n	8004b48 <_printf_i+0xf8>
 8004bf8:	4824      	ldr	r0, [pc, #144]	; (8004c8c <_printf_i+0x23c>)
 8004bfa:	e7e4      	b.n	8004bc6 <_printf_i+0x176>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	e7bd      	b.n	8004b7c <_printf_i+0x12c>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6826      	ldr	r6, [r4, #0]
 8004c04:	6961      	ldr	r1, [r4, #20]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6028      	str	r0, [r5, #0]
 8004c0a:	0635      	lsls	r5, r6, #24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0x1c4>
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0x1ca>
 8004c14:	0670      	lsls	r0, r6, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0x1c0>
 8004c18:	8019      	strh	r1, [r3, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	4615      	mov	r5, r2
 8004c20:	e7bc      	b.n	8004b9c <_printf_i+0x14c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb fad6 	bl	80001e0 <memchr>
 8004c34:	b108      	cbz	r0, 8004c3a <_printf_i+0x1ea>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	e7aa      	b.n	8004b9c <_printf_i+0x14c>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0ad      	beq.n	8004bb0 <_printf_i+0x160>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d413      	bmi.n	8004c82 <_printf_i+0x232>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	bfb8      	it	lt
 8004c62:	4618      	movlt	r0, r3
 8004c64:	e7a6      	b.n	8004bb4 <_printf_i+0x164>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	47d0      	blx	sl
 8004c70:	3001      	adds	r0, #1
 8004c72:	d09d      	beq.n	8004bb0 <_printf_i+0x160>
 8004c74:	3501      	adds	r5, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dcf2      	bgt.n	8004c66 <_printf_i+0x216>
 8004c80:	e7eb      	b.n	8004c5a <_printf_i+0x20a>
 8004c82:	2500      	movs	r5, #0
 8004c84:	f104 0619 	add.w	r6, r4, #25
 8004c88:	e7f5      	b.n	8004c76 <_printf_i+0x226>
 8004c8a:	bf00      	nop
 8004c8c:	08005011 	.word	0x08005011
 8004c90:	08005022 	.word	0x08005022

08004c94 <__sflush_r>:
 8004c94:	898a      	ldrh	r2, [r1, #12]
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	0710      	lsls	r0, r2, #28
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d458      	bmi.n	8004d54 <__sflush_r+0xc0>
 8004ca2:	684b      	ldr	r3, [r1, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc05      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d0f9      	beq.n	8004cae <__sflush_r+0x1a>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	6a21      	ldr	r1, [r4, #32]
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	d032      	beq.n	8004d2e <__sflush_r+0x9a>
 8004cc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	075a      	lsls	r2, r3, #29
 8004cce:	d505      	bpl.n	8004cdc <__sflush_r+0x48>
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	1ac0      	subs	r0, r0, r3
 8004cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd6:	b10b      	cbz	r3, 8004cdc <__sflush_r+0x48>
 8004cd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cda:	1ac0      	subs	r0, r0, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce2:	6a21      	ldr	r1, [r4, #32]
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b0      	blx	r6
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	d106      	bne.n	8004cfc <__sflush_r+0x68>
 8004cee:	6829      	ldr	r1, [r5, #0]
 8004cf0:	291d      	cmp	r1, #29
 8004cf2:	d82b      	bhi.n	8004d4c <__sflush_r+0xb8>
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <__sflush_r+0x108>)
 8004cf6:	410a      	asrs	r2, r1
 8004cf8:	07d6      	lsls	r6, r2, #31
 8004cfa:	d427      	bmi.n	8004d4c <__sflush_r+0xb8>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	6062      	str	r2, [r4, #4]
 8004d00:	04d9      	lsls	r1, r3, #19
 8004d02:	6922      	ldr	r2, [r4, #16]
 8004d04:	6022      	str	r2, [r4, #0]
 8004d06:	d504      	bpl.n	8004d12 <__sflush_r+0x7e>
 8004d08:	1c42      	adds	r2, r0, #1
 8004d0a:	d101      	bne.n	8004d10 <__sflush_r+0x7c>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b903      	cbnz	r3, 8004d12 <__sflush_r+0x7e>
 8004d10:	6560      	str	r0, [r4, #84]	; 0x54
 8004d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d14:	602f      	str	r7, [r5, #0]
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d0c9      	beq.n	8004cae <__sflush_r+0x1a>
 8004d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	d002      	beq.n	8004d28 <__sflush_r+0x94>
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7ff fbea 	bl	80044fc <_free_r>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2c:	e7c0      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b0      	blx	r6
 8004d34:	1c41      	adds	r1, r0, #1
 8004d36:	d1c8      	bne.n	8004cca <__sflush_r+0x36>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c5      	beq.n	8004cca <__sflush_r+0x36>
 8004d3e:	2b1d      	cmp	r3, #29
 8004d40:	d001      	beq.n	8004d46 <__sflush_r+0xb2>
 8004d42:	2b16      	cmp	r3, #22
 8004d44:	d101      	bne.n	8004d4a <__sflush_r+0xb6>
 8004d46:	602f      	str	r7, [r5, #0]
 8004d48:	e7b1      	b.n	8004cae <__sflush_r+0x1a>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	e7ad      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d54:	690f      	ldr	r7, [r1, #16]
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d0a9      	beq.n	8004cae <__sflush_r+0x1a>
 8004d5a:	0793      	lsls	r3, r2, #30
 8004d5c:	680e      	ldr	r6, [r1, #0]
 8004d5e:	bf08      	it	eq
 8004d60:	694b      	ldreq	r3, [r1, #20]
 8004d62:	600f      	str	r7, [r1, #0]
 8004d64:	bf18      	it	ne
 8004d66:	2300      	movne	r3, #0
 8004d68:	eba6 0807 	sub.w	r8, r6, r7
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	dd9c      	ble.n	8004cae <__sflush_r+0x1a>
 8004d74:	6a21      	ldr	r1, [r4, #32]
 8004d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d78:	4643      	mov	r3, r8
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dc06      	bgt.n	8004d92 <__sflush_r+0xfe>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e78e      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d92:	4407      	add	r7, r0
 8004d94:	eba8 0800 	sub.w	r8, r8, r0
 8004d98:	e7e9      	b.n	8004d6e <__sflush_r+0xda>
 8004d9a:	bf00      	nop
 8004d9c:	dfbffffe 	.word	0xdfbffffe

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6a03      	ldr	r3, [r0, #32]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f7ff f983 	bl	80040c0 <__sinit>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f3      	beq.n	8004daa <_fflush_r+0xa>
 8004dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dc4:	07d0      	lsls	r0, r2, #31
 8004dc6:	d404      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dc8:	0599      	lsls	r1, r3, #22
 8004dca:	d402      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dce:	f7ff fb93 	bl	80044f8 <__retarget_lock_acquire_recursive>
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f7ff ff5d 	bl	8004c94 <__sflush_r>
 8004dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ddc:	07da      	lsls	r2, r3, #31
 8004dde:	4605      	mov	r5, r0
 8004de0:	d4e4      	bmi.n	8004dac <_fflush_r+0xc>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	059b      	lsls	r3, r3, #22
 8004de6:	d4e1      	bmi.n	8004dac <_fflush_r+0xc>
 8004de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dea:	f7ff fb86 	bl	80044fa <__retarget_lock_release_recursive>
 8004dee:	e7dd      	b.n	8004dac <_fflush_r+0xc>

08004df0 <__swhatbuf_r>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	460c      	mov	r4, r1
 8004df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	b096      	sub	sp, #88	; 0x58
 8004dfc:	4615      	mov	r5, r2
 8004dfe:	461e      	mov	r6, r3
 8004e00:	da0d      	bge.n	8004e1e <__swhatbuf_r+0x2e>
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	bf0c      	ite	eq
 8004e0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004e12:	2340      	movne	r3, #64	; 0x40
 8004e14:	2000      	movs	r0, #0
 8004e16:	6031      	str	r1, [r6, #0]
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	b016      	add	sp, #88	; 0x58
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
 8004e1e:	466a      	mov	r2, sp
 8004e20:	f000 f848 	bl	8004eb4 <_fstat_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	dbec      	blt.n	8004e02 <__swhatbuf_r+0x12>
 8004e28:	9901      	ldr	r1, [sp, #4]
 8004e2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e32:	4259      	negs	r1, r3
 8004e34:	4159      	adcs	r1, r3
 8004e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e3a:	e7eb      	b.n	8004e14 <__swhatbuf_r+0x24>

08004e3c <__smakebuf_r>:
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e40:	079d      	lsls	r5, r3, #30
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	d507      	bpl.n	8004e58 <__smakebuf_r+0x1c>
 8004e48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	2301      	movs	r3, #1
 8004e52:	6163      	str	r3, [r4, #20]
 8004e54:	b002      	add	sp, #8
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	ab01      	add	r3, sp, #4
 8004e5a:	466a      	mov	r2, sp
 8004e5c:	f7ff ffc8 	bl	8004df0 <__swhatbuf_r>
 8004e60:	9900      	ldr	r1, [sp, #0]
 8004e62:	4605      	mov	r5, r0
 8004e64:	4630      	mov	r0, r6
 8004e66:	f7ff fbb5 	bl	80045d4 <_malloc_r>
 8004e6a:	b948      	cbnz	r0, 8004e80 <__smakebuf_r+0x44>
 8004e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e70:	059a      	lsls	r2, r3, #22
 8004e72:	d4ef      	bmi.n	8004e54 <__smakebuf_r+0x18>
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	e7e3      	b.n	8004e48 <__smakebuf_r+0xc>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	6020      	str	r0, [r4, #0]
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	6163      	str	r3, [r4, #20]
 8004e8e:	9b01      	ldr	r3, [sp, #4]
 8004e90:	6120      	str	r0, [r4, #16]
 8004e92:	b15b      	cbz	r3, 8004eac <__smakebuf_r+0x70>
 8004e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f81d 	bl	8004ed8 <_isatty_r>
 8004e9e:	b128      	cbz	r0, 8004eac <__smakebuf_r+0x70>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	431d      	orrs	r5, r3
 8004eb0:	81a5      	strh	r5, [r4, #12]
 8004eb2:	e7cf      	b.n	8004e54 <__smakebuf_r+0x18>

08004eb4 <_fstat_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	; (8004ed4 <_fstat_r+0x20>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	602b      	str	r3, [r5, #0]
 8004ec2:	f7fb febe 	bl	8000c42 <_fstat>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	d102      	bne.n	8004ed0 <_fstat_r+0x1c>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	b103      	cbz	r3, 8004ed0 <_fstat_r+0x1c>
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200002bc 	.word	0x200002bc

08004ed8 <_isatty_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	; (8004ef4 <_isatty_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fb febd 	bl	8000c62 <_isatty>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_isatty_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_isatty_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200002bc 	.word	0x200002bc

08004ef8 <_sbrk_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d06      	ldr	r5, [pc, #24]	; (8004f14 <_sbrk_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	f7fb fec6 	bl	8000c94 <_sbrk>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_sbrk_r+0x1a>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_sbrk_r+0x1a>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	200002bc 	.word	0x200002bc

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
