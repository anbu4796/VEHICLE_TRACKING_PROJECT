
UART_IT_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800b330  0800b330  0001b330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbac  0800bbac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbb4  0800bbb4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb8  0800bbb8  0001bbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bbbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  200001d8  0800bd90  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  0800bd90  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf67  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211e  00000000  00000000  0002d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000859  00000000  00000000  0002fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269b0  00000000  00000000  00030619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d952  00000000  00000000  00056fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98cd  00000000  00000000  0006491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004424  00000000  00000000  0014e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0015260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b318 	.word	0x0800b318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b318 	.word	0x0800b318

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
static void gps_data_extraction(gpsdata* data);


int _write(int file,char *ptr,int len)

{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]

    int i=0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

    for(i=0;i<len;i++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x2a>

      ITM_SendChar((*ptr++));
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffc7 	bl	8000ff0 <ITM_SendChar>
    for(i=0;i<len;i++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x16>

    return len;
 8001070:	687b      	ldr	r3, [r7, #4]

}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	/* NO OPENARTAION  */
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <DATA_SEND_READY>:




int DATA_SEND_READY(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	int ret;
	int ret1;
	 ret= GSM_SIM_INIT();
 8001096:	f000 f9e9 	bl	800146c <GSM_SIM_INIT>
 800109a:	6038      	str	r0, [r7, #0]
	  	 printf("Hello \n");
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <DATA_SEND_READY+0x68>)
 800109e:	f006 f8f1 	bl	8007284 <puts>
	  	 if (ret==0)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <DATA_SEND_READY+0x20>
	  	 {
	  		 printf("init worked\n");
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <DATA_SEND_READY+0x6c>)
 80010aa:	f006 f8eb 	bl	8007284 <puts>
 80010ae:	e002      	b.n	80010b6 <DATA_SEND_READY+0x26>
	  	 }
	  	 else
	  	 {
	  			 printf("init NOT worked\n");
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <DATA_SEND_READY+0x70>)
 80010b2:	f006 f8e7 	bl	8007284 <puts>
	  	}
	  	 ret = GSM_APN_SET();
 80010b6:	f000 f8f7 	bl	80012a8 <GSM_APN_SET>
 80010ba:	6038      	str	r0, [r7, #0]
	  	 if (ret==0)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <DATA_SEND_READY+0x40>
	  		 {
	  			 printf("APN SET worked\n");
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <DATA_SEND_READY+0x74>)
 80010c4:	f006 f8de 	bl	8007284 <puts>
	  			ret1= GSM_TCP_init();
 80010c8:	f000 f854 	bl	8001174 <GSM_TCP_init>
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	e002      	b.n	80010d6 <DATA_SEND_READY+0x46>
	  		 }
	  		 else
	  		 {
	  				 printf("APN SET NOT worked\n");
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <DATA_SEND_READY+0x78>)
 80010d2:	f006 f8d7 	bl	8007284 <puts>
	  		}
	  	 if (ret1==0)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <DATA_SEND_READY+0x56>
	  	 	 {
	  	 		 printf("tcp worked\n");
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <DATA_SEND_READY+0x7c>)
 80010de:	f006 f8d1 	bl	8007284 <puts>
	  	 		 return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e003      	b.n	80010ee <DATA_SEND_READY+0x5e>

	  	 	 }
	  	 	 else
	  	 	 {
	  	 			 printf("tcp NOT worked\n");
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <DATA_SEND_READY+0x80>)
 80010e8:	f006 f8cc 	bl	8007284 <puts>
	  	 			 return 1;
 80010ec:	2301      	movs	r3, #1
	  	 	}
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800b330 	.word	0x0800b330
 80010fc:	0800b338 	.word	0x0800b338
 8001100:	0800b344 	.word	0x0800b344
 8001104:	0800b354 	.word	0x0800b354
 8001108:	0800b364 	.word	0x0800b364
 800110c:	0800b378 	.word	0x0800b378
 8001110:	0800b384 	.word	0x0800b384

08001114 <GSM_Send_AT_Command>:
char* GSM_Send_AT_Command(char* AT_CMD)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,200);
 800111c:	22c8      	movs	r2, #200	; 0xc8
 800111e:	2100      	movs	r1, #0
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <GSM_Send_AT_Command+0x50>)
 8001122:	f006 f9dd 	bl	80074e0 <memset>
	printf("sent command %s\n",AT_CMD);
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <GSM_Send_AT_Command+0x54>)
 800112a:	f006 f845 	bl	80071b8 <iprintf>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f89e 	bl	8000270 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29b      	uxth	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <GSM_Send_AT_Command+0x58>)
 800113e:	f003 fc45 	bl	80049cc <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, 200,2000);
 8001142:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001146:	22c8      	movs	r2, #200	; 0xc8
 8001148:	4906      	ldr	r1, [pc, #24]	; (8001164 <GSM_Send_AT_Command+0x50>)
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <GSM_Send_AT_Command+0x58>)
 800114c:	f003 fb74 	bl	8004838 <HAL_UART_Receive>
	printf("Received data %s\n",RxBuf);
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <GSM_Send_AT_Command+0x50>)
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <GSM_Send_AT_Command+0x5c>)
 8001154:	f006 f830 	bl	80071b8 <iprintf>
	return (char *)RxBuf;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <GSM_Send_AT_Command+0x50>)

}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001f4 	.word	0x200001f4
 8001168:	0800b394 	.word	0x0800b394
 800116c:	20000708 	.word	0x20000708
 8001170:	0800b3a8 	.word	0x0800b3a8

08001174 <GSM_TCP_init>:
int GSM_TCP_init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	int state =0,substate=0;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
	while(1)
	{
		switch(state)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d075      	beq.n	8001274 <GSM_TCP_init+0x100>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	dc74      	bgt.n	8001278 <GSM_TCP_init+0x104>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <GSM_TCP_init+0x28>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d036      	beq.n	8001208 <GSM_TCP_init+0x94>
 800119a:	e06d      	b.n	8001278 <GSM_TCP_init+0x104>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <GSM_TCP_init+0x36>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d017      	beq.n	80011d8 <GSM_TCP_init+0x64>
							{
								substate=0;
							}
							break;
					}
					break;
 80011a8:	e068      	b.n	800127c <GSM_TCP_init+0x108>
							str=GSM_Send_AT_Command("AT+CIPMODE?\r");
 80011aa:	4837      	ldr	r0, [pc, #220]	; (8001288 <GSM_TCP_init+0x114>)
 80011ac:	f7ff ffb2 	bl	8001114 <GSM_Send_AT_Command>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <GSM_TCP_init+0x118>)
 80011b4:	6013      	str	r3, [r2, #0]
							if(strstr(str,"+CIPMODE: 0"))
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <GSM_TCP_init+0x118>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4935      	ldr	r1, [pc, #212]	; (8001290 <GSM_TCP_init+0x11c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 f9b6 	bl	800752e <strstr>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <GSM_TCP_init+0x5e>
								state=1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
								substate=0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
							break;
 80011d0:	e019      	b.n	8001206 <GSM_TCP_init+0x92>
								substate=1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	603b      	str	r3, [r7, #0]
							break;
 80011d6:	e016      	b.n	8001206 <GSM_TCP_init+0x92>
							str=GSM_Send_AT_Command("AT+CIPMODE=0\r");
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <GSM_TCP_init+0x120>)
 80011da:	f7ff ff9b 	bl	8001114 <GSM_Send_AT_Command>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <GSM_TCP_init+0x118>)
 80011e2:	6013      	str	r3, [r2, #0]
							if(strstr(str,"OK"))
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <GSM_TCP_init+0x118>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	492b      	ldr	r1, [pc, #172]	; (8001298 <GSM_TCP_init+0x124>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 f99f 	bl	800752e <strstr>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <GSM_TCP_init+0x8c>
								state=1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
								substate=0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
							break;
 80011fe:	e001      	b.n	8001204 <GSM_TCP_init+0x90>
								substate=0;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
							break;
 8001204:	bf00      	nop
					break;
 8001206:	e039      	b.n	800127c <GSM_TCP_init+0x108>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <GSM_TCP_init+0xa2>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d017      	beq.n	8001244 <GSM_TCP_init+0xd0>
							else
							{
									substate=0;
							}
					}
					break;
 8001214:	e032      	b.n	800127c <GSM_TCP_init+0x108>
							str=GSM_Send_AT_Command("AT+NETOPEN\r");
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <GSM_TCP_init+0x128>)
 8001218:	f7ff ff7c 	bl	8001114 <GSM_Send_AT_Command>
 800121c:	4603      	mov	r3, r0
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <GSM_TCP_init+0x118>)
 8001220:	6013      	str	r3, [r2, #0]
							if(strstr(str,"NETOPEN"))
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <GSM_TCP_init+0x118>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	491e      	ldr	r1, [pc, #120]	; (80012a0 <GSM_TCP_init+0x12c>)
 8001228:	4618      	mov	r0, r3
 800122a:	f006 f980 	bl	800752e <strstr>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <GSM_TCP_init+0xca>
								state=2;
 8001234:	2302      	movs	r3, #2
 8001236:	607b      	str	r3, [r7, #4]
								substate=0;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
							break;
 800123c:	e019      	b.n	8001272 <GSM_TCP_init+0xfe>
								substate=1;
 800123e:	2301      	movs	r3, #1
 8001240:	603b      	str	r3, [r7, #0]
							break;
 8001242:	e016      	b.n	8001272 <GSM_TCP_init+0xfe>
							str=GSM_Send_AT_Command("AT+NETOPEN\r");
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <GSM_TCP_init+0x128>)
 8001246:	f7ff ff65 	bl	8001114 <GSM_Send_AT_Command>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <GSM_TCP_init+0x118>)
 800124e:	6013      	str	r3, [r2, #0]
							if(strstr(str,"opened"))
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <GSM_TCP_init+0x118>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <GSM_TCP_init+0x130>)
 8001256:	4618      	mov	r0, r3
 8001258:	f006 f969 	bl	800752e <strstr>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <GSM_TCP_init+0xf8>
									state=2;
 8001262:	2302      	movs	r3, #2
 8001264:	607b      	str	r3, [r7, #4]
									substate=0;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
					break;
 800126a:	e007      	b.n	800127c <GSM_TCP_init+0x108>
									substate=0;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
					break;
 8001270:	e004      	b.n	800127c <GSM_TCP_init+0x108>
 8001272:	e003      	b.n	800127c <GSM_TCP_init+0x108>

			case 2:
					return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e002      	b.n	800127e <GSM_TCP_init+0x10a>
					break;
			default:
					return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <GSM_TCP_init+0x10a>
		switch(state)
 800127c:	e781      	b.n	8001182 <GSM_TCP_init+0xe>
		}
	}
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800b3bc 	.word	0x0800b3bc
 800128c:	200002c0 	.word	0x200002c0
 8001290:	0800b3cc 	.word	0x0800b3cc
 8001294:	0800b3d8 	.word	0x0800b3d8
 8001298:	0800b3e8 	.word	0x0800b3e8
 800129c:	0800b3ec 	.word	0x0800b3ec
 80012a0:	0800b3f8 	.word	0x0800b3f8
 80012a4:	0800b400 	.word	0x0800b400

080012a8 <GSM_APN_SET>:

int GSM_APN_SET(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

uint8_t state=0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71bb      	strb	r3, [r7, #6]

 while (1)
  {
    /* USER CODE END WHILE */
	  switch(state)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f000 8088 	beq.w	80013ce <GSM_APN_SET+0x126>
 80012be:	2b02      	cmp	r3, #2
 80012c0:	dcf9      	bgt.n	80012b6 <GSM_APN_SET+0xe>
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <GSM_APN_SET+0x24>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d04b      	beq.n	8001362 <GSM_APN_SET+0xba>
 80012ca:	e7f4      	b.n	80012b6 <GSM_APN_SET+0xe>
	 	  {
	 	case 0:
	 		  switch(substate)
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d032      	beq.n	8001338 <GSM_APN_SET+0x90>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc43      	bgt.n	800135e <GSM_APN_SET+0xb6>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <GSM_APN_SET+0x38>
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d018      	beq.n	8001310 <GSM_APN_SET+0x68>
	   			  	  substate=0;
	   			  }
	   			  break;

	   		  default:
	   			  break;
 80012de:	e03e      	b.n	800135e <GSM_APN_SET+0xb6>
	   			  Rx_string = GSM_Send_AT_Command("AT+COPS?\r");
 80012e0:	4858      	ldr	r0, [pc, #352]	; (8001444 <GSM_APN_SET+0x19c>)
 80012e2:	f7ff ff17 	bl	8001114 <GSM_Send_AT_Command>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a57      	ldr	r2, [pc, #348]	; (8001448 <GSM_APN_SET+0x1a0>)
 80012ea:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"40449"))
 80012ec:	4b56      	ldr	r3, [pc, #344]	; (8001448 <GSM_APN_SET+0x1a0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4956      	ldr	r1, [pc, #344]	; (800144c <GSM_APN_SET+0x1a4>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f91b 	bl	800752e <strstr>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <GSM_APN_SET+0x62>
	   				 state=1;
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
	   				printf("match found\n");
 8001302:	4853      	ldr	r0, [pc, #332]	; (8001450 <GSM_APN_SET+0x1a8>)
 8001304:	f005 ffbe 	bl	8007284 <puts>
	   			  break;
 8001308:	e02a      	b.n	8001360 <GSM_APN_SET+0xb8>
	   				  substate=1;
 800130a:	2301      	movs	r3, #1
 800130c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800130e:	e027      	b.n	8001360 <GSM_APN_SET+0xb8>
	   			  if(strstr(Rx_string,"405854"))
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <GSM_APN_SET+0x1a0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	494f      	ldr	r1, [pc, #316]	; (8001454 <GSM_APN_SET+0x1ac>)
 8001316:	4618      	mov	r0, r3
 8001318:	f006 f909 	bl	800752e <strstr>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <GSM_APN_SET+0x8a>
	   				  state=2;
 8001322:	2302      	movs	r3, #2
 8001324:	71fb      	strb	r3, [r7, #7]
	   				  substate=0;
 8001326:	2300      	movs	r3, #0
 8001328:	71bb      	strb	r3, [r7, #6]
	   			  	  printf("match found\n");
 800132a:	4849      	ldr	r0, [pc, #292]	; (8001450 <GSM_APN_SET+0x1a8>)
 800132c:	f005 ffaa 	bl	8007284 <puts>
	   			  break;
 8001330:	e016      	b.n	8001360 <GSM_APN_SET+0xb8>
	   			  	  substate=0;
 8001332:	2300      	movs	r3, #0
 8001334:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001336:	e013      	b.n	8001360 <GSM_APN_SET+0xb8>
				  if(strstr(Rx_string,"ERROR"))
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <GSM_APN_SET+0x1a0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4946      	ldr	r1, [pc, #280]	; (8001458 <GSM_APN_SET+0x1b0>)
 800133e:	4618      	mov	r0, r3
 8001340:	f006 f8f5 	bl	800752e <strstr>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <GSM_APN_SET+0xac>
	   				  state=0;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800134e:	2300      	movs	r3, #0
 8001350:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001352:	e005      	b.n	8001360 <GSM_APN_SET+0xb8>
	   			  	  state=0;
 8001354:	2300      	movs	r3, #0
 8001356:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001358:	2300      	movs	r3, #0
 800135a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800135c:	e000      	b.n	8001360 <GSM_APN_SET+0xb8>
	   			  break;
 800135e:	bf00      	nop
	   		  }
	 		  break;
 8001360:	e06b      	b.n	800143a <GSM_APN_SET+0x192>
	 	case 1:
	 		  switch(substate)
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <GSM_APN_SET+0xc6>
 8001368:	2b01      	cmp	r3, #1
 800136a:	d01b      	beq.n	80013a4 <GSM_APN_SET+0xfc>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 800136c:	e02e      	b.n	80013cc <GSM_APN_SET+0x124>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 800136e:	483b      	ldr	r0, [pc, #236]	; (800145c <GSM_APN_SET+0x1b4>)
 8001370:	f7ff fed0 	bl	8001114 <GSM_Send_AT_Command>
 8001374:	4603      	mov	r3, r0
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <GSM_APN_SET+0x1a0>)
 8001378:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <GSM_APN_SET+0x1a0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4938      	ldr	r1, [pc, #224]	; (8001460 <GSM_APN_SET+0x1b8>)
 8001380:	4618      	mov	r0, r3
 8001382:	f006 f8d4 	bl	800752e <strstr>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <GSM_APN_SET+0xf6>
	   				 state=2;
 800138c:	2302      	movs	r3, #2
 800138e:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001390:	2300      	movs	r3, #0
 8001392:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <GSM_APN_SET+0x1a8>)
 8001396:	f005 ff75 	bl	8007284 <puts>
	   				return 0;
 800139a:	2300      	movs	r3, #0
 800139c:	e04e      	b.n	800143c <GSM_APN_SET+0x194>
	   				  substate=1;
 800139e:	2301      	movs	r3, #1
 80013a0:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80013a2:	e013      	b.n	80013cc <GSM_APN_SET+0x124>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <GSM_APN_SET+0x1a0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2206      	movs	r2, #6
 80013aa:	492e      	ldr	r1, [pc, #184]	; (8001464 <GSM_APN_SET+0x1bc>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 f8ac 	bl	800750a <strncmp>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <GSM_APN_SET+0x11a>
	   				  state=0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80013c0:	e003      	b.n	80013ca <GSM_APN_SET+0x122>
	   			  	  state=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80013ca:	bf00      	nop
	   		  }
	 		  break;
 80013cc:	e035      	b.n	800143a <GSM_APN_SET+0x192>
	 	case 2:
	 		  switch(substate)
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <GSM_APN_SET+0x132>
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d01b      	beq.n	8001410 <GSM_APN_SET+0x168>
	   				  substate=0;
	   			  	  state=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 80013d8:	e02e      	b.n	8001438 <GSM_APN_SET+0x190>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 80013da:	4823      	ldr	r0, [pc, #140]	; (8001468 <GSM_APN_SET+0x1c0>)
 80013dc:	f7ff fe9a 	bl	8001114 <GSM_Send_AT_Command>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <GSM_APN_SET+0x1a0>)
 80013e4:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <GSM_APN_SET+0x1a0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	491d      	ldr	r1, [pc, #116]	; (8001460 <GSM_APN_SET+0x1b8>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 f89e 	bl	800752e <strstr>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d008      	beq.n	800140a <GSM_APN_SET+0x162>
	   				 state=3;
 80013f8:	2303      	movs	r3, #3
 80013fa:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <GSM_APN_SET+0x1a8>)
 8001402:	f005 ff3f 	bl	8007284 <puts>
					return 0;
 8001406:	2300      	movs	r3, #0
 8001408:	e018      	b.n	800143c <GSM_APN_SET+0x194>
	   				  substate=1;
 800140a:	2301      	movs	r3, #1
 800140c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800140e:	e013      	b.n	8001438 <GSM_APN_SET+0x190>
			          if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <GSM_APN_SET+0x1a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2206      	movs	r2, #6
 8001416:	4913      	ldr	r1, [pc, #76]	; (8001464 <GSM_APN_SET+0x1bc>)
 8001418:	4618      	mov	r0, r3
 800141a:	f006 f876 	bl	800750a <strncmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <GSM_APN_SET+0x186>
	   			  	  substate=0;
 8001424:	2300      	movs	r3, #0
 8001426:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8001428:	2302      	movs	r3, #2
 800142a:	71fb      	strb	r3, [r7, #7]
	   			  break;
 800142c:	e003      	b.n	8001436 <GSM_APN_SET+0x18e>
	   				  substate=0;
 800142e:	2300      	movs	r3, #0
 8001430:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8001432:	2300      	movs	r3, #0
 8001434:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8001436:	bf00      	nop
	   		  }
	 		  break;
 8001438:	bf00      	nop
	  switch(state)
 800143a:	e73c      	b.n	80012b6 <GSM_APN_SET+0xe>
	}
}
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800b408 	.word	0x0800b408
 8001448:	200002bc 	.word	0x200002bc
 800144c:	0800b414 	.word	0x0800b414
 8001450:	0800b41c 	.word	0x0800b41c
 8001454:	0800b428 	.word	0x0800b428
 8001458:	0800b430 	.word	0x0800b430
 800145c:	0800b438 	.word	0x0800b438
 8001460:	0800b3e8 	.word	0x0800b3e8
 8001464:	0800b45c 	.word	0x0800b45c
 8001468:	0800b468 	.word	0x0800b468

0800146c <GSM_SIM_INIT>:
int GSM_SIM_INIT(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

uint8_t state=0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 8001476:	2300      	movs	r3, #0
 8001478:	71bb      	strb	r3, [r7, #6]

 while (1)
  {
    /* USER CODE END WHILE */
	  switch(state)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b06      	cmp	r3, #6
 800147e:	f200 81c2 	bhi.w	8001806 <GSM_SIM_INIT+0x39a>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <GSM_SIM_INIT+0x1c>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	080014a5 	.word	0x080014a5
 800148c:	0800150d 	.word	0x0800150d
 8001490:	08001577 	.word	0x08001577
 8001494:	080015f7 	.word	0x080015f7
 8001498:	08001661 	.word	0x08001661
 800149c:	080016dd 	.word	0x080016dd
 80014a0:	080017ad 	.word	0x080017ad
	 	  {
	 	case 0:
	 		  switch(substate)
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <GSM_SIM_INIT+0x44>
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d019      	beq.n	80014e2 <GSM_SIM_INIT+0x76>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 80014ae:	e02c      	b.n	800150a <GSM_SIM_INIT+0x9e>
	   			  Rx_string = GSM_Send_AT_Command("ATE0\r");
 80014b0:	48ac      	ldr	r0, [pc, #688]	; (8001764 <GSM_SIM_INIT+0x2f8>)
 80014b2:	f7ff fe2f 	bl	8001114 <GSM_Send_AT_Command>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4aab      	ldr	r2, [pc, #684]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80014ba:	6013      	str	r3, [r2, #0]
	   			  if(!(strncmp(Rx_string,"\r\nOK\r\n",6)))
 80014bc:	4baa      	ldr	r3, [pc, #680]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2206      	movs	r2, #6
 80014c2:	49aa      	ldr	r1, [pc, #680]	; (800176c <GSM_SIM_INIT+0x300>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 f820 	bl	800750a <strncmp>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <GSM_SIM_INIT+0x70>
	   				 state=1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	71fb      	strb	r3, [r7, #7]
	   				printf("match found\n");
 80014d4:	48a6      	ldr	r0, [pc, #664]	; (8001770 <GSM_SIM_INIT+0x304>)
 80014d6:	f005 fed5 	bl	8007284 <puts>
	   			  break;
 80014da:	e016      	b.n	800150a <GSM_SIM_INIT+0x9e>
	   				  substate=1;
 80014dc:	2301      	movs	r3, #1
 80014de:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80014e0:	e013      	b.n	800150a <GSM_SIM_INIT+0x9e>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80014e2:	4ba1      	ldr	r3, [pc, #644]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2206      	movs	r2, #6
 80014e8:	49a2      	ldr	r1, [pc, #648]	; (8001774 <GSM_SIM_INIT+0x308>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 f80d 	bl	800750a <strncmp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d104      	bne.n	8001500 <GSM_SIM_INIT+0x94>
	   				  state=0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80014fe:	e003      	b.n	8001508 <GSM_SIM_INIT+0x9c>
	   			  	  state=0;
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001504:	2300      	movs	r3, #0
 8001506:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001508:	bf00      	nop
	   		  }
	 		  break;
 800150a:	e17d      	b.n	8001808 <GSM_SIM_INIT+0x39c>
	 	case 1:
	 		  switch(substate)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <GSM_SIM_INIT+0xac>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d01a      	beq.n	800154c <GSM_SIM_INIT+0xe0>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001516:	e02d      	b.n	8001574 <GSM_SIM_INIT+0x108>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPIN?\r");
 8001518:	4897      	ldr	r0, [pc, #604]	; (8001778 <GSM_SIM_INIT+0x30c>)
 800151a:	f7ff fdfb 	bl	8001114 <GSM_Send_AT_Command>
 800151e:	4603      	mov	r3, r0
 8001520:	4a91      	ldr	r2, [pc, #580]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001522:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"READY"))
 8001524:	4b90      	ldr	r3, [pc, #576]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4994      	ldr	r1, [pc, #592]	; (800177c <GSM_SIM_INIT+0x310>)
 800152a:	4618      	mov	r0, r3
 800152c:	f005 ffff 	bl	800752e <strstr>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <GSM_SIM_INIT+0xda>
	   				 state=2;
 8001536:	2302      	movs	r3, #2
 8001538:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 800153a:	2300      	movs	r3, #0
 800153c:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 800153e:	488c      	ldr	r0, [pc, #560]	; (8001770 <GSM_SIM_INIT+0x304>)
 8001540:	f005 fea0 	bl	8007284 <puts>
	   			  break;
 8001544:	e016      	b.n	8001574 <GSM_SIM_INIT+0x108>
	   				  substate=1;
 8001546:	2301      	movs	r3, #1
 8001548:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800154a:	e013      	b.n	8001574 <GSM_SIM_INIT+0x108>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 800154c:	4b86      	ldr	r3, [pc, #536]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2206      	movs	r2, #6
 8001552:	4988      	ldr	r1, [pc, #544]	; (8001774 <GSM_SIM_INIT+0x308>)
 8001554:	4618      	mov	r0, r3
 8001556:	f005 ffd8 	bl	800750a <strncmp>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d104      	bne.n	800156a <GSM_SIM_INIT+0xfe>
	   				  state=0;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001564:	2300      	movs	r3, #0
 8001566:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001568:	e003      	b.n	8001572 <GSM_SIM_INIT+0x106>
	   			  	  state=0;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800156e:	2300      	movs	r3, #0
 8001570:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001572:	bf00      	nop
	   		  }
	 		  break;
 8001574:	e148      	b.n	8001808 <GSM_SIM_INIT+0x39c>
	 	case 2:
	 		  switch(substate)
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <GSM_SIM_INIT+0x116>
 800157c:	2b01      	cmp	r3, #1
 800157e:	d020      	beq.n	80015c2 <GSM_SIM_INIT+0x156>
	   				  substate=0;
	   			  	  state=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001580:	e038      	b.n	80015f4 <GSM_SIM_INIT+0x188>
	   			  Rx_string = GSM_Send_AT_Command("AT+CSQ\r");
 8001582:	487f      	ldr	r0, [pc, #508]	; (8001780 <GSM_SIM_INIT+0x314>)
 8001584:	f7ff fdc6 	bl	8001114 <GSM_Send_AT_Command>
 8001588:	4603      	mov	r3, r0
 800158a:	4a77      	ldr	r2, [pc, #476]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800158c:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"99")&& (Rx_string[5]>='2'))
 800158e:	4b76      	ldr	r3, [pc, #472]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	497c      	ldr	r1, [pc, #496]	; (8001784 <GSM_SIM_INIT+0x318>)
 8001594:	4618      	mov	r0, r3
 8001596:	f005 ffca 	bl	800752e <strstr>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00d      	beq.n	80015bc <GSM_SIM_INIT+0x150>
 80015a0:	4b71      	ldr	r3, [pc, #452]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3305      	adds	r3, #5
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b31      	cmp	r3, #49	; 0x31
 80015aa:	d907      	bls.n	80015bc <GSM_SIM_INIT+0x150>
	   				 state=3;
 80015ac:	2303      	movs	r3, #3
 80015ae:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 80015b4:	486e      	ldr	r0, [pc, #440]	; (8001770 <GSM_SIM_INIT+0x304>)
 80015b6:	f005 fe65 	bl	8007284 <puts>
	   			  break;
 80015ba:	e01b      	b.n	80015f4 <GSM_SIM_INIT+0x188>
	   				  substate=1;
 80015bc:	2301      	movs	r3, #1
 80015be:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80015c0:	e018      	b.n	80015f4 <GSM_SIM_INIT+0x188>
			          Rx_string = GSM_Send_AT_Command("AT+CFUN=1\r");
 80015c2:	4871      	ldr	r0, [pc, #452]	; (8001788 <GSM_SIM_INIT+0x31c>)
 80015c4:	f7ff fda6 	bl	8001114 <GSM_Send_AT_Command>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a67      	ldr	r2, [pc, #412]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80015cc:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"0,1"))
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	496e      	ldr	r1, [pc, #440]	; (800178c <GSM_SIM_INIT+0x320>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 ffaa 	bl	800752e <strstr>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <GSM_SIM_INIT+0x17e>
	   			  	  substate=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	71fb      	strb	r3, [r7, #7]
	   			  break;
 80015e8:	e003      	b.n	80015f2 <GSM_SIM_INIT+0x186>
	   				  substate=0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
	   			  break;
 80015f2:	bf00      	nop
	   		  }
	 		  break;
 80015f4:	e108      	b.n	8001808 <GSM_SIM_INIT+0x39c>
	 case 3:
	 		  switch(substate)
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <GSM_SIM_INIT+0x196>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d01a      	beq.n	8001636 <GSM_SIM_INIT+0x1ca>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001600:	e02d      	b.n	800165e <GSM_SIM_INIT+0x1f2>
	   			  Rx_string = GSM_Send_AT_Command("AT+CMEE=2\r");
 8001602:	4863      	ldr	r0, [pc, #396]	; (8001790 <GSM_SIM_INIT+0x324>)
 8001604:	f7ff fd86 	bl	8001114 <GSM_Send_AT_Command>
 8001608:	4603      	mov	r3, r0
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800160c:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 800160e:	4b56      	ldr	r3, [pc, #344]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4960      	ldr	r1, [pc, #384]	; (8001794 <GSM_SIM_INIT+0x328>)
 8001614:	4618      	mov	r0, r3
 8001616:	f005 ff8a 	bl	800752e <strstr>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <GSM_SIM_INIT+0x1c4>
	   				 state=4;
 8001620:	2304      	movs	r3, #4
 8001622:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001624:	2300      	movs	r3, #0
 8001626:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8001628:	4851      	ldr	r0, [pc, #324]	; (8001770 <GSM_SIM_INIT+0x304>)
 800162a:	f005 fe2b 	bl	8007284 <puts>
	   			  break;
 800162e:	e016      	b.n	800165e <GSM_SIM_INIT+0x1f2>
	   				  substate=1;
 8001630:	2301      	movs	r3, #1
 8001632:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001634:	e013      	b.n	800165e <GSM_SIM_INIT+0x1f2>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2206      	movs	r2, #6
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <GSM_SIM_INIT+0x308>)
 800163e:	4618      	mov	r0, r3
 8001640:	f005 ff63 	bl	800750a <strncmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d104      	bne.n	8001654 <GSM_SIM_INIT+0x1e8>
	   				  state=0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800164e:	2300      	movs	r3, #0
 8001650:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001652:	e003      	b.n	800165c <GSM_SIM_INIT+0x1f0>
	   			  	  state=0;
 8001654:	2300      	movs	r3, #0
 8001656:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001658:	2300      	movs	r3, #0
 800165a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800165c:	bf00      	nop
	   		  }
	 		  break;
 800165e:	e0d3      	b.n	8001808 <GSM_SIM_INIT+0x39c>
	 	case 4:
	 		  switch(substate)
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <GSM_SIM_INIT+0x200>
 8001666:	2b01      	cmp	r3, #1
 8001668:	d023      	beq.n	80016b2 <GSM_SIM_INIT+0x246>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 800166a:	e036      	b.n	80016da <GSM_SIM_INIT+0x26e>
	   			  Rx_string = GSM_Send_AT_Command("AT+CREG?\r");
 800166c:	484a      	ldr	r0, [pc, #296]	; (8001798 <GSM_SIM_INIT+0x32c>)
 800166e:	f7ff fd51 	bl	8001114 <GSM_Send_AT_Command>
 8001672:	4603      	mov	r3, r0
 8001674:	4a3c      	ldr	r2, [pc, #240]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001676:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"0,6")))
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4943      	ldr	r1, [pc, #268]	; (800178c <GSM_SIM_INIT+0x320>)
 800167e:	4618      	mov	r0, r3
 8001680:	f005 ff55 	bl	800752e <strstr>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d108      	bne.n	800169c <GSM_SIM_INIT+0x230>
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4943      	ldr	r1, [pc, #268]	; (800179c <GSM_SIM_INIT+0x330>)
 8001690:	4618      	mov	r0, r3
 8001692:	f005 ff4c 	bl	800752e <strstr>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <GSM_SIM_INIT+0x240>
	   				 state=5;
 800169c:	2305      	movs	r3, #5
 800169e:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 80016a4:	4832      	ldr	r0, [pc, #200]	; (8001770 <GSM_SIM_INIT+0x304>)
 80016a6:	f005 fded 	bl	8007284 <puts>
	   			  break;
 80016aa:	e016      	b.n	80016da <GSM_SIM_INIT+0x26e>
	   				  substate=1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80016b0:	e013      	b.n	80016da <GSM_SIM_INIT+0x26e>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2206      	movs	r2, #6
 80016b8:	492e      	ldr	r1, [pc, #184]	; (8001774 <GSM_SIM_INIT+0x308>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 ff25 	bl	800750a <strncmp>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <GSM_SIM_INIT+0x264>
	   				  state=0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80016ce:	e003      	b.n	80016d8 <GSM_SIM_INIT+0x26c>
	   			  	  state=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80016d8:	bf00      	nop
	   		  }
 			  break;
 80016da:	e095      	b.n	8001808 <GSM_SIM_INIT+0x39c>
		case 5:
	 		  switch(substate)
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <GSM_SIM_INIT+0x27c>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d023      	beq.n	800172e <GSM_SIM_INIT+0x2c2>
	   			  	  state=0;
	   			  	  substate=0;
	   			  }
	   			  break;
	   		  default:
	   			  break;
 80016e6:	e03b      	b.n	8001760 <GSM_SIM_INIT+0x2f4>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGREG?\r");
 80016e8:	482d      	ldr	r0, [pc, #180]	; (80017a0 <GSM_SIM_INIT+0x334>)
 80016ea:	f7ff fd13 	bl	8001114 <GSM_Send_AT_Command>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80016f2:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"1,1")))
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4924      	ldr	r1, [pc, #144]	; (800178c <GSM_SIM_INIT+0x320>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 ff17 	bl	800752e <strstr>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d108      	bne.n	8001718 <GSM_SIM_INIT+0x2ac>
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4926      	ldr	r1, [pc, #152]	; (80017a4 <GSM_SIM_INIT+0x338>)
 800170c:	4618      	mov	r0, r3
 800170e:	f005 ff0e 	bl	800752e <strstr>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <GSM_SIM_INIT+0x2bc>
	   				 state=6;
 8001718:	2306      	movs	r3, #6
 800171a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 800171c:	2300      	movs	r3, #0
 800171e:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <GSM_SIM_INIT+0x304>)
 8001722:	f005 fdaf 	bl	8007284 <puts>
	   			  break;
 8001726:	e01b      	b.n	8001760 <GSM_SIM_INIT+0x2f4>
	   				  substate=1;
 8001728:	2301      	movs	r3, #1
 800172a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800172c:	e018      	b.n	8001760 <GSM_SIM_INIT+0x2f4>
				  Rx_string = GSM_Send_AT_Command("AT+CGREG=0\r");
 800172e:	481e      	ldr	r0, [pc, #120]	; (80017a8 <GSM_SIM_INIT+0x33c>)
 8001730:	f7ff fcf0 	bl	8001114 <GSM_Send_AT_Command>
 8001734:	4603      	mov	r3, r0
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 8001738:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <GSM_SIM_INIT+0x2fc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <GSM_SIM_INIT+0x328>)
 8001740:	4618      	mov	r0, r3
 8001742:	f005 fef4 	bl	800752e <strstr>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <GSM_SIM_INIT+0x2ea>
	   				  state=5;
 800174c:	2305      	movs	r3, #5
 800174e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001750:	2300      	movs	r3, #0
 8001752:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001754:	e003      	b.n	800175e <GSM_SIM_INIT+0x2f2>
	   			  	  state=0;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800175a:	2300      	movs	r3, #0
 800175c:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800175e:	bf00      	nop
	   		  }
 			  break;
 8001760:	e052      	b.n	8001808 <GSM_SIM_INIT+0x39c>
 8001762:	bf00      	nop
 8001764:	0800b484 	.word	0x0800b484
 8001768:	200002bc 	.word	0x200002bc
 800176c:	0800b48c 	.word	0x0800b48c
 8001770:	0800b41c 	.word	0x0800b41c
 8001774:	0800b45c 	.word	0x0800b45c
 8001778:	0800b494 	.word	0x0800b494
 800177c:	0800b4a0 	.word	0x0800b4a0
 8001780:	0800b4a8 	.word	0x0800b4a8
 8001784:	0800b4b0 	.word	0x0800b4b0
 8001788:	0800b4b4 	.word	0x0800b4b4
 800178c:	0800b4c0 	.word	0x0800b4c0
 8001790:	0800b4c4 	.word	0x0800b4c4
 8001794:	0800b3e8 	.word	0x0800b3e8
 8001798:	0800b4d0 	.word	0x0800b4d0
 800179c:	0800b4dc 	.word	0x0800b4dc
 80017a0:	0800b4e0 	.word	0x0800b4e0
 80017a4:	0800b4ec 	.word	0x0800b4ec
 80017a8:	0800b4f0 	.word	0x0800b4f0
		case 6:
	 		  switch(substate)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <GSM_SIM_INIT+0x34c>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d01b      	beq.n	80017ee <GSM_SIM_INIT+0x382>
	   			  {
	   			   	  state=6;
	   			  }

	   		  default:
	   			  break;
 80017b6:	e024      	b.n	8001802 <GSM_SIM_INIT+0x396>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPSI?\r");
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <GSM_SIM_INIT+0x3a8>)
 80017ba:	f7ff fcab 	bl	8001114 <GSM_Send_AT_Command>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <GSM_SIM_INIT+0x3ac>)
 80017c2:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"LTE,Online")))
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <GSM_SIM_INIT+0x3ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4914      	ldr	r1, [pc, #80]	; (800181c <GSM_SIM_INIT+0x3b0>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 feaf 	bl	800752e <strstr>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <GSM_SIM_INIT+0x37c>
	   				 state=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80017da:	2300      	movs	r3, #0
 80017dc:	71bb      	strb	r3, [r7, #6]
	   				printf("match found\n");
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <GSM_SIM_INIT+0x3b4>)
 80017e0:	f005 fd50 	bl	8007284 <puts>
					return 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e010      	b.n	800180a <GSM_SIM_INIT+0x39e>
	   				  substate=1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80017ec:	e00a      	b.n	8001804 <GSM_SIM_INIT+0x398>
	   			  if(GSM_APN_SET()==0)
 80017ee:	f7ff fd5b 	bl	80012a8 <GSM_APN_SET>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <GSM_SIM_INIT+0x392>
	   			     substate=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80017fc:	e001      	b.n	8001802 <GSM_SIM_INIT+0x396>
	   			   	  state=6;
 80017fe:	2306      	movs	r3, #6
 8001800:	71fb      	strb	r3, [r7, #7]
	   			  break;
 8001802:	bf00      	nop
	   		  }
 			  break;
 8001804:	e000      	b.n	8001808 <GSM_SIM_INIT+0x39c>

	  default:
	 	 break;
 8001806:	bf00      	nop
	  switch(state)
 8001808:	e637      	b.n	800147a <GSM_SIM_INIT+0xe>
  	}
	}
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800b4fc 	.word	0x0800b4fc
 8001818:	200002bc 	.word	0x200002bc
 800181c:	0800b508 	.word	0x0800b508
 8001820:	0800b41c 	.word	0x0800b41c

08001824 <GSM_Send_Data>:


int GSM_Send_Data(uint8_t * data)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	int substate=0,cnt=0;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
	char z=26;
 8001834:	231a      	movs	r3, #26
 8001836:	73fb      	strb	r3, [r7, #15]


		while(1)
		{			switch(substate)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b02      	cmp	r3, #2
 800183c:	f000 80d2 	beq.w	80019e4 <GSM_Send_Data+0x1c0>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b02      	cmp	r3, #2
 8001844:	dcf8      	bgt.n	8001838 <GSM_Send_Data+0x14>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <GSM_Send_Data+0x30>
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d060      	beq.n	8001914 <GSM_Send_Data+0xf0>
 8001852:	e7f1      	b.n	8001838 <GSM_Send_Data+0x14>
					{
						case 0:
							str=GSM_Send_AT_Command("AT+CIPOPEN?\r");
 8001854:	4867      	ldr	r0, [pc, #412]	; (80019f4 <GSM_Send_Data+0x1d0>)
 8001856:	f7ff fc5d 	bl	8001114 <GSM_Send_AT_Command>
 800185a:	4603      	mov	r3, r0
 800185c:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <GSM_Send_Data+0x1d4>)
 800185e:	6013      	str	r3, [r2, #0]
							if(strstr(str,"139.59.78.252"))
 8001860:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <GSM_Send_Data+0x1d4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4965      	ldr	r1, [pc, #404]	; (80019fc <GSM_Send_Data+0x1d8>)
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fe61 	bl	800752e <strstr>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04d      	beq.n	800190e <GSM_Send_Data+0xea>
							{
									//state=2;
									//substate=0;
									printf("ip OPEN WORKED\n");
 8001872:	4863      	ldr	r0, [pc, #396]	; (8001a00 <GSM_Send_Data+0x1dc>)
 8001874:	f005 fd06 	bl	8007284 <puts>
									memset(RxBuf,0,200);
 8001878:	22c8      	movs	r2, #200	; 0xc8
 800187a:	2100      	movs	r1, #0
 800187c:	4861      	ldr	r0, [pc, #388]	; (8001a04 <GSM_Send_Data+0x1e0>)
 800187e:	f005 fe2f 	bl	80074e0 <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 8001882:	220d      	movs	r2, #13
 8001884:	4960      	ldr	r1, [pc, #384]	; (8001a08 <GSM_Send_Data+0x1e4>)
 8001886:	4861      	ldr	r0, [pc, #388]	; (8001a0c <GSM_Send_Data+0x1e8>)
 8001888:	f003 f8a0 	bl	80049cc <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 800188c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001890:	22c8      	movs	r2, #200	; 0xc8
 8001892:	495c      	ldr	r1, [pc, #368]	; (8001a04 <GSM_Send_Data+0x1e0>)
 8001894:	485d      	ldr	r0, [pc, #372]	; (8001a0c <GSM_Send_Data+0x1e8>)
 8001896:	f002 ffcf 	bl	8004838 <HAL_UART_Receive>
									printf("Received data1 %s\n",RxBuf);
 800189a:	495a      	ldr	r1, [pc, #360]	; (8001a04 <GSM_Send_Data+0x1e0>)
 800189c:	485c      	ldr	r0, [pc, #368]	; (8001a10 <GSM_Send_Data+0x1ec>)
 800189e:	f005 fc8b 	bl	80071b8 <iprintf>
									if(strstr(RxBuf,">"))
 80018a2:	213e      	movs	r1, #62	; 0x3e
 80018a4:	4857      	ldr	r0, [pc, #348]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80018a6:	f005 fe23 	bl	80074f0 <strchr>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02b      	beq.n	8001908 <GSM_Send_Data+0xe4>
									{
									memset(RxBuf,0,200);
 80018b0:	22c8      	movs	r2, #200	; 0xc8
 80018b2:	2100      	movs	r1, #0
 80018b4:	4853      	ldr	r0, [pc, #332]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80018b6:	f005 fe13 	bl	80074e0 <memset>
									//HAL_UART_Transmit_IT(&huart4,(uint8_t*)"$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77", strlen("$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77"));
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fcd8 	bl	8000270 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4850      	ldr	r0, [pc, #320]	; (8001a0c <GSM_Send_Data+0x1e8>)
 80018ca:	f003 f87f 	bl	80049cc <HAL_UART_Transmit_IT>
									HAL_Delay(2000);
 80018ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018d2:	f001 f8e5 	bl	8002aa0 <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&z,1);
 80018d6:	f107 030f 	add.w	r3, r7, #15
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	484b      	ldr	r0, [pc, #300]	; (8001a0c <GSM_Send_Data+0x1e8>)
 80018e0:	f003 f874 	bl	80049cc <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 80018e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018e8:	22c8      	movs	r2, #200	; 0xc8
 80018ea:	4946      	ldr	r1, [pc, #280]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80018ec:	4847      	ldr	r0, [pc, #284]	; (8001a0c <GSM_Send_Data+0x1e8>)
 80018ee:	f002 ffa3 	bl	8004838 <HAL_UART_Receive>
									printf("Received data1 %s\n",RxBuf);
 80018f2:	4944      	ldr	r1, [pc, #272]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80018f4:	4846      	ldr	r0, [pc, #280]	; (8001a10 <GSM_Send_Data+0x1ec>)
 80018f6:	f005 fc5f 	bl	80071b8 <iprintf>
									memset(RxBuf,0,200);
 80018fa:	22c8      	movs	r2, #200	; 0xc8
 80018fc:	2100      	movs	r1, #0
 80018fe:	4841      	ldr	r0, [pc, #260]	; (8001a04 <GSM_Send_Data+0x1e0>)
 8001900:	f005 fdee 	bl	80074e0 <memset>
									return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e071      	b.n	80019ec <GSM_Send_Data+0x1c8>
									}
									else
									{
										substate=0;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
							}
							else
							{
								substate=1;
							}
							break;
 800190c:	e06d      	b.n	80019ea <GSM_Send_Data+0x1c6>
								substate=1;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
							break;
 8001912:	e06a      	b.n	80019ea <GSM_Send_Data+0x1c6>
						    case 1:
						    	str=GSM_Send_AT_Command("AT+CIPOPEN=1,\"TCP\",\"139.59.78.252\",49791\r");
 8001914:	483f      	ldr	r0, [pc, #252]	; (8001a14 <GSM_Send_Data+0x1f0>)
 8001916:	f7ff fbfd 	bl	8001114 <GSM_Send_AT_Command>
 800191a:	4603      	mov	r3, r0
 800191c:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <GSM_Send_Data+0x1d4>)
 800191e:	6013      	str	r3, [r2, #0]
						    	if(strstr(str,"+CIPOPEN: 1,0"))
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <GSM_Send_Data+0x1d4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	493c      	ldr	r1, [pc, #240]	; (8001a18 <GSM_Send_Data+0x1f4>)
 8001926:	4618      	mov	r0, r3
 8001928:	f005 fe01 	bl	800752e <strstr>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04d      	beq.n	80019ce <GSM_Send_Data+0x1aa>
						    	{
						    		//state=2;
						    		//substate=0;
						    		printf("ip OPEN WORKED\n");
 8001932:	4833      	ldr	r0, [pc, #204]	; (8001a00 <GSM_Send_Data+0x1dc>)
 8001934:	f005 fca6 	bl	8007284 <puts>
						    		memset(RxBuf,0,200);
 8001938:	22c8      	movs	r2, #200	; 0xc8
 800193a:	2100      	movs	r1, #0
 800193c:	4831      	ldr	r0, [pc, #196]	; (8001a04 <GSM_Send_Data+0x1e0>)
 800193e:	f005 fdcf 	bl	80074e0 <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 8001942:	220d      	movs	r2, #13
 8001944:	4930      	ldr	r1, [pc, #192]	; (8001a08 <GSM_Send_Data+0x1e4>)
 8001946:	4831      	ldr	r0, [pc, #196]	; (8001a0c <GSM_Send_Data+0x1e8>)
 8001948:	f003 f840 	bl	80049cc <HAL_UART_Transmit_IT>
						    		HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 800194c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001950:	22c8      	movs	r2, #200	; 0xc8
 8001952:	492c      	ldr	r1, [pc, #176]	; (8001a04 <GSM_Send_Data+0x1e0>)
 8001954:	482d      	ldr	r0, [pc, #180]	; (8001a0c <GSM_Send_Data+0x1e8>)
 8001956:	f002 ff6f 	bl	8004838 <HAL_UART_Receive>
						    		printf("Received data1 %s\n",RxBuf);
 800195a:	492a      	ldr	r1, [pc, #168]	; (8001a04 <GSM_Send_Data+0x1e0>)
 800195c:	482c      	ldr	r0, [pc, #176]	; (8001a10 <GSM_Send_Data+0x1ec>)
 800195e:	f005 fc2b 	bl	80071b8 <iprintf>
						    		if(strstr(RxBuf,">"))
 8001962:	213e      	movs	r1, #62	; 0x3e
 8001964:	4827      	ldr	r0, [pc, #156]	; (8001a04 <GSM_Send_Data+0x1e0>)
 8001966:	f005 fdc3 	bl	80074f0 <strchr>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02b      	beq.n	80019c8 <GSM_Send_Data+0x1a4>
						    		{
						    		memset(RxBuf,0,200);
 8001970:	22c8      	movs	r2, #200	; 0xc8
 8001972:	2100      	movs	r1, #0
 8001974:	4823      	ldr	r0, [pc, #140]	; (8001a04 <GSM_Send_Data+0x1e0>)
 8001976:	f005 fdb3 	bl	80074e0 <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fc78 	bl	8000270 <strlen>
 8001980:	4603      	mov	r3, r0
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4820      	ldr	r0, [pc, #128]	; (8001a0c <GSM_Send_Data+0x1e8>)
 800198a:	f003 f81f 	bl	80049cc <HAL_UART_Transmit_IT>
						    		HAL_Delay(2000);
 800198e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001992:	f001 f885 	bl	8002aa0 <HAL_Delay>
						    		//HAL_UART_Transmit_IT(&huart4,(uint8_t*)"$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77", strlen("$GPGSV,2,1,08,02,74,042,45,04,18,190,36,07,67,279,42,12,29,323,36*77"));
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&z,1);
 8001996:	f107 030f 	add.w	r3, r7, #15
 800199a:	2201      	movs	r2, #1
 800199c:	4619      	mov	r1, r3
 800199e:	481b      	ldr	r0, [pc, #108]	; (8001a0c <GSM_Send_Data+0x1e8>)
 80019a0:	f003 f814 	bl	80049cc <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 80019a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019a8:	22c8      	movs	r2, #200	; 0xc8
 80019aa:	4916      	ldr	r1, [pc, #88]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <GSM_Send_Data+0x1e8>)
 80019ae:	f002 ff43 	bl	8004838 <HAL_UART_Receive>
						    		printf("Received data1 %s\n",RxBuf);
 80019b2:	4914      	ldr	r1, [pc, #80]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80019b4:	4816      	ldr	r0, [pc, #88]	; (8001a10 <GSM_Send_Data+0x1ec>)
 80019b6:	f005 fbff 	bl	80071b8 <iprintf>
						    		 memset(RxBuf,0,200);
 80019ba:	22c8      	movs	r2, #200	; 0xc8
 80019bc:	2100      	movs	r1, #0
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <GSM_Send_Data+0x1e0>)
 80019c0:	f005 fd8e 	bl	80074e0 <memset>
						    		return 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e011      	b.n	80019ec <GSM_Send_Data+0x1c8>
						    		}
						    		else
						    		{
						    			substate=1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
								if(cnt>5)
								{
									substate=2;
								}
							}
							break;
 80019cc:	e00c      	b.n	80019e8 <GSM_Send_Data+0x1c4>
								substate=0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
								cnt++;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	3301      	adds	r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
								if(cnt>5)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	dd04      	ble.n	80019e8 <GSM_Send_Data+0x1c4>
									substate=2;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
							break;
 80019e2:	e001      	b.n	80019e8 <GSM_Send_Data+0x1c4>
						case 2:
								return 1;  // GSM SEND failed
 80019e4:	2301      	movs	r3, #1
 80019e6:	e001      	b.n	80019ec <GSM_Send_Data+0x1c8>
							break;
 80019e8:	bf00      	nop
		{			switch(substate)
 80019ea:	e725      	b.n	8001838 <GSM_Send_Data+0x14>
					}

		}


}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800b514 	.word	0x0800b514
 80019f8:	200002c0 	.word	0x200002c0
 80019fc:	0800b524 	.word	0x0800b524
 8001a00:	0800b534 	.word	0x0800b534
 8001a04:	200001f4 	.word	0x200001f4
 8001a08:	0800b544 	.word	0x0800b544
 8001a0c:	20000708 	.word	0x20000708
 8001a10:	0800b554 	.word	0x0800b554
 8001a14:	0800b568 	.word	0x0800b568
 8001a18:	0800b594 	.word	0x0800b594

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09c      	sub	sp, #112	; 0x70
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int ret=0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a26:	f000 ffbf 	bl	80029a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2a:	f000 f851 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2e:	f000 f991 	bl	8001d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a32:	f000 f92f 	bl	8001c94 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001a36:	f000 f89d 	bl	8001b74 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001a3a:	f000 f95b 	bl	8001cf4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001a3e:	f000 f8c9 	bl	8001bd4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001a42:	f000 f8f7 	bl	8001c34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char *ptr=malloc(100);
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f004 fbca 	bl	80061e0 <malloc>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* USER CODE END WHILE */
	  /*HAL_UART_Receive_IT(&huart1, d, 100);
	  HAL_Delay(3000);*/

	 if(DATA_SEND_READY()==0)
 8001a50:	f7ff fb1e 	bl	8001090 <DATA_SEND_READY>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1fa      	bne.n	8001a50 <main+0x34>
	 {

		while( HAL_UART_Receive_IT(&huart1, gps.Data,750)==HAL_OK)
 8001a5a:	e01e      	b.n	8001a9a <main+0x7e>
		{
		 if(*gps.Data)
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <main+0x94>)
 8001a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <main+0x78>
		 {
			 //printf("GPS Recieved %s \n",gps.Data);
			 gpsData(&gps);
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <main+0x94>)
 8001a68:	f000 f9b0 	bl	8001dcc <gpsData>
			 printf("GPS Recieved %s \n",json_str);
 8001a6c:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <main+0x98>)
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <main+0x9c>)
 8001a70:	f005 fba2 	bl	80071b8 <iprintf>

			 if(GSM_Send_Data((uint8_t *)json_str)==0)
 8001a74:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <main+0x98>)
 8001a76:	f7ff fed5 	bl	8001824 <GSM_Send_Data>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <main+0x6c>
			 {
				 printf("Sending Worked to server\n");
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <main+0xa0>)
 8001a82:	f005 fbff 	bl	8007284 <puts>
 8001a86:	e008      	b.n	8001a9a <main+0x7e>

			 }
			 else
			 {
				 printf("Sending to server not worked\n");
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <main+0xa4>)
 8001a8a:	f005 fbfb 	bl	8007284 <puts>
				 DATA_SEND_READY();
 8001a8e:	f7ff faff 	bl	8001090 <DATA_SEND_READY>
 8001a92:	e002      	b.n	8001a9a <main+0x7e>
			 }
		 }
		 else
		 {
			 printf("GPS Recieved No DATA\n");
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <main+0xa8>)
 8001a96:	f005 fbf5 	bl	8007284 <puts>
		while( HAL_UART_Receive_IT(&huart1, gps.Data,750)==HAL_OK)
 8001a9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <main+0xac>)
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <main+0xb0>)
 8001aa2:	f002 fff1 	bl	8004a88 <HAL_UART_Receive_IT>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0d7      	beq.n	8001a5c <main+0x40>
	 if(DATA_SEND_READY()==0)
 8001aac:	e7d0      	b.n	8001a50 <main+0x34>
 8001aae:	bf00      	nop
 8001ab0:	20000328 	.word	0x20000328
 8001ab4:	200002c4 	.word	0x200002c4
 8001ab8:	0800b5a4 	.word	0x0800b5a4
 8001abc:	0800b5b8 	.word	0x0800b5b8
 8001ac0:	0800b5d4 	.word	0x0800b5d4
 8001ac4:	0800b5f4 	.word	0x0800b5f4
 8001ac8:	20000350 	.word	0x20000350
 8001acc:	20000818 	.word	0x20000818

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b096      	sub	sp, #88	; 0x58
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2244      	movs	r2, #68	; 0x44
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 fcfe 	bl	80074e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001af2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af6:	f001 fb3f 	bl	8003178 <HAL_PWREx_ControlVoltageScaling>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b00:	f000 fc4c 	bl	800239c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b04:	2302      	movs	r3, #2
 8001b06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b12:	2302      	movs	r3, #2
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b16:	2302      	movs	r3, #2
 8001b18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b1e:	230a      	movs	r3, #10
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b22:	2307      	movs	r3, #7
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fb76 	bl	8003224 <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b3e:	f000 fc2d 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	230f      	movs	r3, #15
 8001b44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2303      	movs	r3, #3
 8001b48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 ff3e 	bl	80039dc <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b66:	f000 fc19 	bl	800239c <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3758      	adds	r7, #88	; 0x58
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <MX_UART4_Init+0x5c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_UART4_Init+0x58>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_UART4_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_UART4_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_UART4_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_UART4_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_UART4_Init+0x58>)
 8001bb8:	f002 fdf0 	bl	800479c <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001bc2:	f000 fbeb 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000708 	.word	0x20000708
 8001bd0:	40004c00 	.word	0x40004c00

08001bd4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_UART5_Init+0x58>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_UART5_Init+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_UART5_Init+0x58>)
 8001be0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_UART5_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_UART5_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_UART5_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_UART5_Init+0x58>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_UART5_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_UART5_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_UART5_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_UART5_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_UART5_Init+0x58>)
 8001c18:	f002 fdc0 	bl	800479c <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 fbbb 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000790 	.word	0x20000790
 8001c30:	40005000 	.word	0x40005000

08001c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_USART1_UART_Init+0x5c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART1_UART_Init+0x58>)
 8001c78:	f002 fd90 	bl	800479c <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c82:	f000 fb8b 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000818 	.word	0x20000818
 8001c90:	40013800 	.word	0x40013800

08001c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001c9a:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <MX_USART2_UART_Init+0x5c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_USART2_UART_Init+0x58>)
 8001cd8:	f002 fd60 	bl	800479c <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ce2:	f000 fb5b 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200008a0 	.word	0x200008a0
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <MX_USART3_UART_Init+0x5c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_USART3_UART_Init+0x58>)
 8001d38:	f002 fd30 	bl	800479c <HAL_UART_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d42:	f000 fb2b 	bl	800239c <Error_Handler>



  /* USER CODE END USART3_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000928 	.word	0x20000928
 8001d50:	40004800 	.word	0x40004800

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_GPIO_Init+0x74>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000

08001dcc <gpsData>:

/* USER CODE BEGIN 4 */
void gpsData(gpsdata* data)
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af04      	add	r7, sp, #16
 8001dd2:	6078      	str	r0, [r7, #4]
	char *current_flag;
	int counter;
	int comma = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
	printf("in func\n");
 8001dd8:	485f      	ldr	r0, [pc, #380]	; (8001f58 <gpsData+0x18c>)
 8001dda:	f005 fa53 	bl	8007284 <puts>
			//HAL_UART_Receive(&GpsData->UartPort,(uint8_t*)GpsData->Data,700,HAL_MAX_DELAY);
	current_flag=strstr(data->Data,"GNGGA");
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3328      	adds	r3, #40	; 0x28
 8001de2:	495e      	ldr	r1, [pc, #376]	; (8001f5c <gpsData+0x190>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fba2 	bl	800752e <strstr>
 8001dea:	60b8      	str	r0, [r7, #8]
	//printf("string found\n");
	if(*current_flag=='G')
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b47      	cmp	r3, #71	; 0x47
 8001df2:	f040 80aa 	bne.w	8001f4a <gpsData+0x17e>
	{
	   counter=0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001dfa:	e00d      	b.n	8001e18 <gpsData+0x4c>
	   {
		   data->particular_flag_data[counter]=*(current_flag+counter);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	4413      	add	r3, r2
 8001e02:	7819      	ldrb	r1, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001e0e:	460a      	mov	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
		   counter++;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
	   while(*(current_flag+counter)!='*')
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b2a      	cmp	r3, #42	; 0x2a
 8001e22:	d1eb      	bne.n	8001dfc <gpsData+0x30>
	   }
	    printf(" string is %s", data->particular_flag_data);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	484c      	ldr	r0, [pc, #304]	; (8001f60 <gpsData+0x194>)
 8001e2e:	f005 f9c3 	bl	80071b8 <iprintf>
		sprintf(data->buffer,"%s",data->particular_flag_data);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f203 3016 	addw	r0, r3, #790	; 0x316
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f203 337a 	addw	r3, r3, #890	; 0x37a
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4948      	ldr	r1, [pc, #288]	; (8001f64 <gpsData+0x198>)
 8001e42:	f005 fa27 	bl	8007294 <siprintf>
		sscanf(data->buffer,"GNGGA,%lf,%f,%c,%f,%c,%d,",&data->time,&data->latitude,&data->N_OR_S,&data->longitude,&data->E_OR_W,&data->fix);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f203 3416 	addw	r4, r3, #790	; 0x316
 8001e4c:	687d      	ldr	r5, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0608 	add.w	r6, r3, #8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3321      	adds	r3, #33	; 0x21
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	320c      	adds	r2, #12
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	3122      	adds	r1, #34	; 0x22
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	3024      	adds	r0, #36	; 0x24
 8001e64:	9003      	str	r0, [sp, #12]
 8001e66:	9102      	str	r1, [sp, #8]
 8001e68:	9201      	str	r2, [sp, #4]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4633      	mov	r3, r6
 8001e6e:	462a      	mov	r2, r5
 8001e70:	493d      	ldr	r1, [pc, #244]	; (8001f68 <gpsData+0x19c>)
 8001e72:	4620      	mov	r0, r4
 8001e74:	f005 fa2e 	bl	80072d4 <siscanf>
        printf("lat:%f\n",data->latitude);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb63 	bl	8000548 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4839      	ldr	r0, [pc, #228]	; (8001f6c <gpsData+0x1a0>)
 8001e88:	f005 f996 	bl	80071b8 <iprintf>
        printf("lon:%f\n",data->longitude);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4835      	ldr	r0, [pc, #212]	; (8001f70 <gpsData+0x1a4>)
 8001e9c:	f005 f98c 	bl	80071b8 <iprintf>


		current_flag=strstr(data->Data,"RMC");
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3328      	adds	r3, #40	; 0x28
 8001ea4:	4933      	ldr	r1, [pc, #204]	; (8001f74 <gpsData+0x1a8>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fb41 	bl	800752e <strstr>
 8001eac:	60b8      	str	r0, [r7, #8]
			//printf("string found\n");
			if(*current_flag=='R')
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b52      	cmp	r3, #82	; 0x52
 8001eb4:	d132      	bne.n	8001f1c <gpsData+0x150>
			{
				printf("\nrmc ->%s\n",*current_flag);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	482e      	ldr	r0, [pc, #184]	; (8001f78 <gpsData+0x1ac>)
 8001ebe:	f005 f97b 	bl	80071b8 <iprintf>
				counter=0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]

				while(comma < 9) {
 8001ec6:	e00e      	b.n	8001ee6 <gpsData+0x11a>
					if(*(current_flag + counter) == ',')
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ed2:	d102      	bne.n	8001eda <gpsData+0x10e>
						comma++;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
					counter++;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
					if(comma == 9)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	d003      	beq.n	8001eee <gpsData+0x122>
				while(comma < 9) {
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	dded      	ble.n	8001ec8 <gpsData+0xfc>
 8001eec:	e000      	b.n	8001ef0 <gpsData+0x124>
						break;
 8001eee:	bf00      	nop

				}

				for(int i=counter; i < counter+7; i++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e00d      	b.n	8001f12 <gpsData+0x146>
					data->Date[i-counter]= *(current_flag+i);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	441a      	add	r2, r3
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	7811      	ldrb	r1, [r2, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	460a      	mov	r2, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
				for(int i=counter; i < counter+7; i++)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3306      	adds	r3, #6
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	ddec      	ble.n	8001ef6 <gpsData+0x12a>
//					   }

			}


		if(data->fix==1||data->fix==2||data->fix==6)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d007      	beq.n	8001f34 <gpsData+0x168>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d003      	beq.n	8001f34 <gpsData+0x168>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d106      	bne.n	8001f42 <gpsData+0x176>
		{
			printf("valid fix\n");
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <gpsData+0x1b0>)
 8001f36:	f005 f9a5 	bl	8007284 <puts>
			gps_data_extraction(data);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f824 	bl	8001f88 <gps_data_extraction>
	 }
	else
	{
		printf("no data\n");
	}
}
 8001f40:	e006      	b.n	8001f50 <gpsData+0x184>
			printf("invalid signal no fix\n");
 8001f42:	480f      	ldr	r0, [pc, #60]	; (8001f80 <gpsData+0x1b4>)
 8001f44:	f005 f99e 	bl	8007284 <puts>
}
 8001f48:	e002      	b.n	8001f50 <gpsData+0x184>
		printf("no data\n");
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <gpsData+0x1b8>)
 8001f4c:	f005 f99a 	bl	8007284 <puts>
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f58:	0800b60c 	.word	0x0800b60c
 8001f5c:	0800b614 	.word	0x0800b614
 8001f60:	0800b61c 	.word	0x0800b61c
 8001f64:	0800b62c 	.word	0x0800b62c
 8001f68:	0800b630 	.word	0x0800b630
 8001f6c:	0800b64c 	.word	0x0800b64c
 8001f70:	0800b654 	.word	0x0800b654
 8001f74:	0800b65c 	.word	0x0800b65c
 8001f78:	0800b660 	.word	0x0800b660
 8001f7c:	0800b66c 	.word	0x0800b66c
 8001f80:	0800b678 	.word	0x0800b678
 8001f84:	0800b690 	.word	0x0800b690

08001f88 <gps_data_extraction>:

static void gps_data_extraction(gpsdata* data)
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b09d      	sub	sp, #116	; 0x74
 8001f8c:	af0a      	add	r7, sp, #40	; 0x28
 8001f8e:	6078      	str	r0, [r7, #4]
	double Deg_Val=0.0,Min_Val=0.0,Sec_Val=0.0,lon=0.0,lat=0.0;
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int hr,min,sec;
	//int hours, minutes, seconds;

	lon=data->longitude;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9c7 2308 	strd	r2, r3, [r7, #32]
	lat=data->latitude;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if((data->E_OR_W=='E' && data->N_OR_S=='S')||(data->E_OR_W=='W' && data->N_OR_S=='N'))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ff6:	2b45      	cmp	r3, #69	; 0x45
 8001ff8:	d104      	bne.n	8002004 <gps_data_extraction+0x7c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002000:	2b53      	cmp	r3, #83	; 0x53
 8002002:	d00b      	beq.n	800201c <gps_data_extraction+0x94>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800200a:	2b57      	cmp	r3, #87	; 0x57
 800200c:	f040 8115 	bne.w	800223a <gps_data_extraction+0x2b2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002016:	2b4e      	cmp	r3, #78	; 0x4e
 8002018:	f040 810f 	bne.w	800223a <gps_data_extraction+0x2b2>
	{
		Deg_Val=(int)(lon/100);
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4bbd      	ldr	r3, [pc, #756]	; (8002318 <gps_data_extraction+0x390>)
 8002022:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002026:	f7fe fc11 	bl	800084c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fd91 	bl	8000b58 <__aeabi_d2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa73 	bl	8000524 <__aeabi_i2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lon-(Deg_Val*100));
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4bb3      	ldr	r3, [pc, #716]	; (8002318 <gps_data_extraction+0x390>)
 800204c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002050:	f7fe fad2 	bl	80005f8 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205c:	f7fe f914 	bl	8000288 <__aeabi_dsub>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fd76 	bl	8000b58 <__aeabi_d2iz>
 800206c:	4603      	mov	r3, r0
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa58 	bl	8000524 <__aeabi_i2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lon-(Deg_Val*100))-Min_Val)*100;
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4ba5      	ldr	r3, [pc, #660]	; (8002318 <gps_data_extraction+0x390>)
 8002082:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002086:	f7fe fab7 	bl	80005f8 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002092:	f7fe f8f9 	bl	8000288 <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020a2:	f7fe f8f1 	bl	8000288 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b99      	ldr	r3, [pc, #612]	; (8002318 <gps_data_extraction+0x390>)
 80020b4:	f7fe faa0 	bl	80005f8 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->longitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree))*-1;
 80020c0:	a38f      	add	r3, pc, #572	; (adr r3, 8002300 <gps_data_extraction+0x378>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020ca:	f7fe fa95 	bl	80005f8 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020da:	f7fe f8d7 	bl	800028c <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4614      	mov	r4, r2
 80020e4:	461d      	mov	r5, r3
 80020e6:	a388      	add	r3, pc, #544	; (adr r3, 8002308 <gps_data_extraction+0x380>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020f0:	f7fe fa82 	bl	80005f8 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe f8c6 	bl	800028c <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fd6e 	bl	8000be8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef1 7a67 	vneg.f32	s15, s15
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	edc3 7a03 	vstr	s15, [r3, #12]
		printf("longitude : %f\n",data->longitude);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa11 	bl	8000548 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	487c      	ldr	r0, [pc, #496]	; (800231c <gps_data_extraction+0x394>)
 800212c:	f005 f844 	bl	80071b8 <iprintf>

		Deg_Val=(int)((lat/100));
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b78      	ldr	r3, [pc, #480]	; (8002318 <gps_data_extraction+0x390>)
 8002136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800213a:	f7fe fb87 	bl	800084c <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd07 	bl	8000b58 <__aeabi_d2iz>
 800214a:	4603      	mov	r3, r0
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f9e9 	bl	8000524 <__aeabi_i2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		Min_Val=(int)(lat-(Deg_Val*100));
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <gps_data_extraction+0x390>)
 8002160:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002164:	f7fe fa48 	bl	80005f8 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002170:	f7fe f88a 	bl	8000288 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fcec 	bl	8000b58 <__aeabi_d2iz>
 8002180:	4603      	mov	r3, r0
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9ce 	bl	8000524 <__aeabi_i2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Sec_Val=((lat-(Deg_Val*100))-Min_Val)*10;
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	4b60      	ldr	r3, [pc, #384]	; (8002318 <gps_data_extraction+0x390>)
 8002196:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800219a:	f7fe fa2d 	bl	80005f8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a6:	f7fe f86f 	bl	8000288 <__aeabi_dsub>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021b6:	f7fe f867 	bl	8000288 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <gps_data_extraction+0x398>)
 80021c8:	f7fe fa16 	bl	80005f8 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		data->latitude=(Deg_Val+(Min_Val*Min_To_Degree)+(Sec_Val*Sec_To_Degree));
 80021d4:	a34a      	add	r3, pc, #296	; (adr r3, 8002300 <gps_data_extraction+0x378>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021de:	f7fe fa0b 	bl	80005f8 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021ee:	f7fe f84d 	bl	800028c <__adddf3>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	a343      	add	r3, pc, #268	; (adr r3, 8002308 <gps_data_extraction+0x380>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002204:	f7fe f9f8 	bl	80005f8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f83c 	bl	800028c <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fce4 	bl	8000be8 <__aeabi_d2f>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
		printf("latitude : %f\n",data->latitude);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f98c 	bl	8000548 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	483b      	ldr	r0, [pc, #236]	; (8002324 <gps_data_extraction+0x39c>)
 8002236:	f004 ffbf 	bl	80071b8 <iprintf>
	}
    hr=(int)((data->time)/10000);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	a333      	add	r3, pc, #204	; (adr r3, 8002310 <gps_data_extraction+0x388>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe fb01 	bl	800084c <__aeabi_ddiv>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f7fe fc81 	bl	8000b58 <__aeabi_d2iz>
 8002256:	4603      	mov	r3, r0
 8002258:	617b      	str	r3, [r7, #20]
   	min=(int)(data->time-(hr*10000))/100;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f242 7210 	movw	r2, #10000	; 0x2710
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f95a 	bl	8000524 <__aeabi_i2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	f7fe f806 	bl	8000288 <__aeabi_dsub>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fc68 	bl	8000b58 <__aeabi_d2iz>
 8002288:	4603      	mov	r3, r0
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <gps_data_extraction+0x3a0>)
 800228c:	fb82 1203 	smull	r1, r2, r2, r3
 8002290:	1152      	asrs	r2, r2, #5
 8002292:	17db      	asrs	r3, r3, #31
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	613b      	str	r3, [r7, #16]
   	sec=(int)(data->time-((hr*10000)+(min*100)));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80022a4:	fb03 f202 	mul.w	r2, r3, r2
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2164      	movs	r1, #100	; 0x64
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f936 	bl	8000524 <__aeabi_i2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fd ffe2 	bl	8000288 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc44 	bl	8000b58 <__aeabi_d2iz>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
   	int ist_hr = hr + 5;  // 5 hours difference
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3305      	adds	r3, #5
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
   	int ist_min = min + 30;  // 30 minutes difference
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	331e      	adds	r3, #30
 80022de:	60bb      	str	r3, [r7, #8]
    if(ist_hr>=24)
 80022e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e2:	2b17      	cmp	r3, #23
 80022e4:	dd02      	ble.n	80022ec <gps_data_extraction+0x364>
    {
    	ist_hr-=24;
 80022e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e8:	3b18      	subs	r3, #24
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
    }
   	// Adjusting for overflow
   	if (ist_min >= 60) {
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b3b      	cmp	r3, #59	; 0x3b
 80022f0:	dd1c      	ble.n	800232c <gps_data_extraction+0x3a4>
   	    ist_hr++;
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	3301      	adds	r3, #1
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
   	    ist_min -= 60;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	3b3c      	subs	r3, #60	; 0x3c
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	e015      	b.n	800232c <gps_data_extraction+0x3a4>
 8002300:	111fba11 	.word	0x111fba11
 8002304:	3f911111 	.word	0x3f911111
 8002308:	78d949ab 	.word	0x78d949ab
 800230c:	3f323456 	.word	0x3f323456
 8002310:	00000000 	.word	0x00000000
 8002314:	40c38800 	.word	0x40c38800
 8002318:	40590000 	.word	0x40590000
 800231c:	0800b698 	.word	0x0800b698
 8002320:	40240000 	.word	0x40240000
 8002324:	0800b6a8 	.word	0x0800b6a8
 8002328:	51eb851f 	.word	0x51eb851f
//
//	        // Format and store in gpsData
//	     sprintf(data->time, "%02d:%02d:%02d", hours, minutes, seconds);
			//sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":%s,\nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);

		sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":%d:%d:%d\nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,hr,min,sec,data->Date);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002340:	461e      	mov	r6, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8fe 	bl	8000548 <__aeabi_f2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002356:	4608      	mov	r0, r1
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	3118      	adds	r1, #24
 800235c:	9108      	str	r1, [sp, #32]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	9107      	str	r1, [sp, #28]
 8002362:	6939      	ldr	r1, [r7, #16]
 8002364:	9106      	str	r1, [sp, #24]
 8002366:	6979      	ldr	r1, [r7, #20]
 8002368:	9105      	str	r1, [sp, #20]
 800236a:	9004      	str	r0, [sp, #16]
 800236c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002370:	9600      	str	r6, [sp, #0]
 8002372:	4622      	mov	r2, r4
 8002374:	462b      	mov	r3, r5
 8002376:	4906      	ldr	r1, [pc, #24]	; (8002390 <gps_data_extraction+0x408>)
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <gps_data_extraction+0x40c>)
 800237a:	f004 ff8b 	bl	8007294 <siprintf>
	     //sprintf(json_str,"{\"latitude\":%f %c,\n \"longitude\":%f %c,\n \"time\":\"%s\" \nData = %s\n }",data->latitude,data->N_OR_S, data->longitude,data->E_OR_W,data->time,data->Date);
	     printf("json format is %s\n",json_str);
 800237e:	4905      	ldr	r1, [pc, #20]	; (8002394 <gps_data_extraction+0x40c>)
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <gps_data_extraction+0x410>)
 8002382:	f004 ff19 	bl	80071b8 <iprintf>

}
 8002386:	bf00      	nop
 8002388:	374c      	adds	r7, #76	; 0x4c
 800238a:	46bd      	mov	sp, r7
 800238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238e:	bf00      	nop
 8002390:	0800b6b8 	.word	0x0800b6b8
 8002394:	200002c4 	.word	0x200002c4
 8002398:	0800b700 	.word	0x0800b700

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>
	...

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_MspInit+0x44>)
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_MspInit+0x44>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_MspInit+0x44>)
 80023bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x44>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_MspInit+0x44>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_MspInit+0x44>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0b4      	sub	sp, #208	; 0xd0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800240c:	2288      	movs	r2, #136	; 0x88
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f005 f865 	bl	80074e0 <memset>
  if(huart->Instance==UART4)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4aa0      	ldr	r2, [pc, #640]	; (800269c <HAL_UART_MspInit+0x2ac>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d144      	bne.n	80024aa <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002420:	2308      	movs	r3, #8
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fcf9 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002438:	f7ff ffb0 	bl	800239c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800243c:	4b98      	ldr	r3, [pc, #608]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a97      	ldr	r2, [pc, #604]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b95      	ldr	r3, [pc, #596]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b92      	ldr	r3, [pc, #584]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a91      	ldr	r2, [pc, #580]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800246c:	2303      	movs	r3, #3
 800246e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002484:	2308      	movs	r3, #8
 8002486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f000 fcb8 	bl	8002e08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2034      	movs	r0, #52	; 0x34
 800249e:	f000 fbfe 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024a2:	2034      	movs	r0, #52	; 0x34
 80024a4:	f000 fc17 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a8:	e146      	b.n	8002738 <HAL_UART_MspInit+0x348>
  else if(huart->Instance==UART5)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7d      	ldr	r2, [pc, #500]	; (80026a4 <HAL_UART_MspInit+0x2b4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d165      	bne.n	8002580 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024b4:	2310      	movs	r3, #16
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fcaf 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80024cc:	f7ff ff66 	bl	800239c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024d0:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024da:	6593      	str	r3, [r2, #88]	; 0x58
 80024dc:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e8:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	4a6c      	ldr	r2, [pc, #432]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002500:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	4a66      	ldr	r2, [pc, #408]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002532:	2308      	movs	r3, #8
 8002534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800253c:	4619      	mov	r1, r3
 800253e:	485a      	ldr	r0, [pc, #360]	; (80026a8 <HAL_UART_MspInit+0x2b8>)
 8002540:	f000 fc62 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002544:	2304      	movs	r3, #4
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800255c:	2308      	movs	r3, #8
 800255e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002562:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002566:	4619      	mov	r1, r3
 8002568:	4850      	ldr	r0, [pc, #320]	; (80026ac <HAL_UART_MspInit+0x2bc>)
 800256a:	f000 fc4d 	bl	8002e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2035      	movs	r0, #53	; 0x35
 8002574:	f000 fb93 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002578:	2035      	movs	r0, #53	; 0x35
 800257a:	f000 fbac 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 800257e:	e0db      	b.n	8002738 <HAL_UART_MspInit+0x348>
  else if(huart->Instance==USART1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_UART_MspInit+0x2c0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d145      	bne.n	8002616 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800258a:	2301      	movs	r3, #1
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800258e:	2300      	movs	r3, #0
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fc44 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80025a2:	f7ff fefb 	bl	800239c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	4a3d      	ldr	r2, [pc, #244]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6613      	str	r3, [r2, #96]	; 0x60
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f0:	2307      	movs	r3, #7
 80025f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f000 fc02 	bl	8002e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2025      	movs	r0, #37	; 0x25
 800260a:	f000 fb48 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800260e:	2025      	movs	r0, #37	; 0x25
 8002610:	f000 fb61 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 8002614:	e090      	b.n	8002738 <HAL_UART_MspInit+0x348>
  else if(huart->Instance==USART2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_UART_MspInit+0x2c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d14b      	bne.n	80026b8 <HAL_UART_MspInit+0x2c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002620:	2302      	movs	r3, #2
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002624:	2300      	movs	r3, #0
 8002626:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fbf9 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8002638:	f7ff feb0 	bl	800239c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_UART_MspInit+0x2b0>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800266c:	230c      	movs	r3, #12
 800266e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002684:	2307      	movs	r3, #7
 8002686:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002694:	f000 fbb8 	bl	8002e08 <HAL_GPIO_Init>
}
 8002698:	e04e      	b.n	8002738 <HAL_UART_MspInit+0x348>
 800269a:	bf00      	nop
 800269c:	40004c00 	.word	0x40004c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40005000 	.word	0x40005000
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x350>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d13a      	bne.n	8002738 <HAL_UART_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c2:	2304      	movs	r3, #4
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 fba8 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80026da:	f7ff fe5f 	bl	800239c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_UART_MspInit+0x354>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_UART_MspInit+0x354>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_UART_MspInit+0x354>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_UART_MspInit+0x354>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <HAL_UART_MspInit+0x354>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_UART_MspInit+0x354>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800270e:	2330      	movs	r3, #48	; 0x30
 8002710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002726:	2307      	movs	r3, #7
 8002728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_UART_MspInit+0x358>)
 8002734:	f000 fb68 	bl	8002e08 <HAL_GPIO_Init>
}
 8002738:	bf00      	nop
 800273a:	37d0      	adds	r7, #208	; 0xd0
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40004800 	.word	0x40004800
 8002744:	40021000 	.word	0x40021000
 8002748:	48000800 	.word	0x48000800

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f000 f962 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <USART1_IRQHandler+0x10>)
 80027a6:	f002 f9bb 	bl	8004b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000818 	.word	0x20000818

080027b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <UART4_IRQHandler+0x10>)
 80027ba:	f002 f9b1 	bl	8004b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000708 	.word	0x20000708

080027c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <UART5_IRQHandler+0x10>)
 80027ce:	f002 f9a7 	bl	8004b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000790 	.word	0x20000790

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_kill>:

int _kill(int pid, int sig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027f6:	f004 ff0b 	bl	8007610 <__errno>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe7 	bl	80027ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800281e:	e7fe      	b.n	800281e <_exit+0x12>

08002820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
  }

  return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_close>:
  }
  return len;
}

int _close(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002882:	605a      	str	r2, [r3, #4]
  return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <_sbrk+0x5c>)
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <_sbrk+0x60>)
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <_sbrk+0x64>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <_sbrk+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f4:	f004 fe8c 	bl	8007610 <__errno>
 80028f8:	4603      	mov	r3, r0
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e009      	b.n	8002918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <_sbrk+0x64>)
 8002914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20018000 	.word	0x20018000
 8002924:	00000400 	.word	0x00000400
 8002928:	200009b0 	.word	0x200009b0
 800292c:	20000b08 	.word	0x20000b08

08002930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <SystemInit+0x20>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <SystemInit+0x20>)
 800293c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800298c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002958:	f7ff ffea 	bl	8002930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800295c:	480c      	ldr	r0, [pc, #48]	; (8002990 <LoopForever+0x6>)
  ldr r1, =_edata
 800295e:	490d      	ldr	r1, [pc, #52]	; (8002994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <LoopForever+0xe>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002974:	4c0a      	ldr	r4, [pc, #40]	; (80029a0 <LoopForever+0x16>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002982:	f004 fe4b 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002986:	f7ff f849 	bl	8001a1c <main>

0800298a <LoopForever>:

LoopForever:
    b LoopForever
 800298a:	e7fe      	b.n	800298a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800298c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002994:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002998:	0800bbbc 	.word	0x0800bbbc
  ldr r2, =_sbss
 800299c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80029a0:	20000b04 	.word	0x20000b04

080029a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029a4:	e7fe      	b.n	80029a4 <ADC1_2_IRQHandler>
	...

080029a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_Init+0x3c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_Init+0x3c>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029be:	2003      	movs	r0, #3
 80029c0:	f000 f962 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c4:	2000      	movs	r0, #0
 80029c6:	f000 f80f 	bl	80029e8 <HAL_InitTick>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	e001      	b.n	80029da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029d6:	f7ff fce7 	bl	80023a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029da:	79fb      	ldrb	r3, [r7, #7]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40022000 	.word	0x40022000

080029e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_InitTick+0x6c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_InitTick+0x70>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_InitTick+0x6c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f96d 	bl	8002cf2 <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d809      	bhi.n	8002a38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f000 f937 	bl	8002c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_InitTick+0x74>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e007      	b.n	8002a48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e004      	b.n	8002a48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e001      	b.n	8002a48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000008 	.word	0x20000008
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008
 8002a84:	200009b4 	.word	0x200009b4

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200009b4 	.word	0x200009b4

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_Delay+0x44>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__NVIC_SetPriorityGrouping>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d008      	beq.n	8002d34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e022      	b.n	8002d7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 020e 	bic.w	r2, r2, #14
 8002d42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f003 021c 	and.w	r2, r3, #28
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d005      	beq.n	8002daa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e029      	b.n	8002dfe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 020e 	bic.w	r2, r2, #14
 8002db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 021c 	and.w	r2, r3, #28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
    }
  }
  return status;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e17f      	b.n	8003118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8171 	beq.w	8003112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d005      	beq.n	8002e48 <HAL_GPIO_Init+0x40>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d118      	bne.n	8002ee8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d017      	beq.n	8002f24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d123      	bne.n	8002f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	6939      	ldr	r1, [r7, #16]
 8002f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80ac 	beq.w	8003112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	4a5e      	ldr	r2, [pc, #376]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fd2:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_GPIO_Init+0x334>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x242>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x338>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4e      	ldr	r2, [pc, #312]	; (8003144 <HAL_GPIO_Init+0x33c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <HAL_GPIO_Init+0x340>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x344>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x232>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_GPIO_Init+0x348>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x34c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x22a>
 800302e:	2306      	movs	r3, #6
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003032:	2307      	movs	r3, #7
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x244>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x244>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x244>
 800304a:	2300      	movs	r3, #0
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800305c:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_GPIO_Init+0x334>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_GPIO_Init+0x350>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800308e:	4a32      	ldr	r2, [pc, #200]	; (8003158 <HAL_GPIO_Init+0x350>)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_GPIO_Init+0x350>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_GPIO_Init+0x350>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f ae78 	bne.w	8002e18 <HAL_GPIO_Init+0x10>
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	48000400 	.word	0x48000400
 8003144:	48000800 	.word	0x48000800
 8003148:	48000c00 	.word	0x48000c00
 800314c:	48001000 	.word	0x48001000
 8003150:	48001400 	.word	0x48001400
 8003154:	48001800 	.word	0x48001800
 8003158:	40010400 	.word	0x40010400

0800315c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_PWREx_GetVoltageRange+0x18>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40007000 	.word	0x40007000

08003178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003186:	d130      	bne.n	80031ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d038      	beq.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319e:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2232      	movs	r2, #50	; 0x32
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	3301      	adds	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031bc:	e002      	b.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d0:	d102      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f2      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d110      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d007      	beq.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003200:	4a05      	ldr	r2, [pc, #20]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000
 800321c:	20000000 	.word	0x20000000
 8003220:	431bde83 	.word	0x431bde83

08003224 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e3ca      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	4b97      	ldr	r3, [pc, #604]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003240:	4b94      	ldr	r3, [pc, #592]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80e4 	beq.w	8003420 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_RCC_OscConfig+0x4a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	f040 808b 	bne.w	800337c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8087 	bne.w	800337c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e3a2      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	4b82      	ldr	r3, [pc, #520]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_RCC_OscConfig+0x7c>
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	e005      	b.n	80032ac <HAL_RCC_OscConfig+0x88>
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d223      	bcs.n	80032f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fd55 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e383      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c4:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	496d      	ldr	r1, [pc, #436]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	4968      	ldr	r1, [pc, #416]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
 80032f6:	e025      	b.n	8003344 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f8:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a65      	ldr	r2, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4960      	ldr	r1, [pc, #384]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	495b      	ldr	r1, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fd15 	bl	8003d64 <RCC_SetFlashLatencyFromMSIRange>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e343      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003344:	f000 fc4a 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b52      	ldr	r3, [pc, #328]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	4950      	ldr	r1, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x274>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_RCC_OscConfig+0x278>)
 8003362:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCC_OscConfig+0x27c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fb3d 	bl	80029e8 <HAL_InitTick>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d052      	beq.n	800341e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	e327      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003390:	f7ff fb7a 	bl	8002a88 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003398:	f7ff fb76 	bl	8002a88 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e310      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033aa:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a36      	ldr	r2, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4931      	ldr	r1, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	492c      	ldr	r1, [pc, #176]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
 80033e8:	e01a      	b.n	8003420 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f6:	f7ff fb47 	bl	8002a88 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fe:	f7ff fb43 	bl	8002a88 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e2dd      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x1da>
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d074      	beq.n	8003516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x21a>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d10e      	bne.n	8003456 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d064      	beq.n	8003514 <HAL_RCC_OscConfig+0x2f0>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d160      	bne.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e2ba      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x24a>
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e026      	b.n	80034bc <HAL_RCC_OscConfig+0x298>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003476:	d115      	bne.n	80034a4 <HAL_RCC_OscConfig+0x280>
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800347e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a02      	ldr	r2, [pc, #8]	; (8003494 <HAL_RCC_OscConfig+0x270>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x298>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	0800b720 	.word	0x0800b720
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000004 	.word	0x20000004
 80034a4:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a9f      	ldr	r2, [pc, #636]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a9c      	ldr	r2, [pc, #624]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7ff fae0 	bl	8002a88 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7ff fadc 	bl	8002a88 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e276      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	4b92      	ldr	r3, [pc, #584]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x2a8>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7ff facc 	bl	8002a88 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7ff fac8 	bl	8002a88 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e262      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2d0>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d060      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x310>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d119      	bne.n	8003562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d116      	bne.n	8003562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003534:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_OscConfig+0x328>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e23f      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	4973      	ldr	r1, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	e040      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d023      	beq.n	80035b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356a:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7ff fa87 	bl	8002a88 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7ff fa83 	bl	8002a88 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e21d      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003590:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	495f      	ldr	r1, [pc, #380]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	e018      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b5d      	ldr	r3, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7ff fa63 	bl	8002a88 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff fa5f 	bl	8002a88 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1f9      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03c      	beq.n	800366a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01c      	beq.n	8003632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	4a4a      	ldr	r2, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7ff fa3e 	bl	8002a88 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff fa3a 	bl	8002a88 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1d4      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCC_OscConfig+0x3ec>
 8003630:	e01b      	b.n	800366a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7ff fa21 	bl	8002a88 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7ff fa1d 	bl	8002a88 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1b7      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ef      	bne.n	800364a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80a6 	beq.w	80037c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d118      	bne.n	80036e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036bc:	f7ff f9e4 	bl	8002a88 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c4:	f7ff f9e0 	bl	8002a88 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e17a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_OscConfig+0x508>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d108      	bne.n	80036fc <HAL_RCC_OscConfig+0x4d8>
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fa:	e029      	b.n	8003750 <HAL_RCC_OscConfig+0x52c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d115      	bne.n	8003730 <HAL_RCC_OscConfig+0x50c>
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <HAL_RCC_OscConfig+0x504>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x52c>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	4b9c      	ldr	r3, [pc, #624]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a9b      	ldr	r2, [pc, #620]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003740:	4b98      	ldr	r3, [pc, #608]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a97      	ldr	r2, [pc, #604]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7ff f996 	bl	8002a88 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7ff f992 	bl	8002a88 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e12a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	4b8b      	ldr	r3, [pc, #556]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ed      	beq.n	8003760 <HAL_RCC_OscConfig+0x53c>
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7ff f97f 	bl	8002a88 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7ff f97b 	bl	8002a88 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e113      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a4:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ed      	bne.n	800378e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b2:	7ffb      	ldrb	r3, [r7, #31]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a79      	ldr	r2, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80fe 	beq.w	80039ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	f040 80d0 	bne.w	8003978 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037d8:	4b72      	ldr	r3, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d130      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	3b01      	subs	r3, #1
 80037f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d127      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11f      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003818:	2a07      	cmp	r2, #7
 800381a:	bf14      	ite	ne
 800381c:	2201      	movne	r2, #1
 800381e:	2200      	moveq	r2, #0
 8003820:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	3b01      	subs	r3, #1
 8003834:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d109      	bne.n	800384e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d06e      	beq.n	800392c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d069      	beq.n	8003928 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0ad      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800387c:	f7ff f904 	bl	8002a88 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7ff f900 	bl	8002a88 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e09a      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x784>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038b2:	3a01      	subs	r2, #1
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038bc:	0212      	lsls	r2, r2, #8
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038c4:	0852      	lsrs	r2, r2, #1
 80038c6:	3a01      	subs	r2, #1
 80038c8:	0552      	lsls	r2, r2, #21
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0652      	lsls	r2, r2, #25
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038dc:	0912      	lsrs	r2, r2, #4
 80038de:	0452      	lsls	r2, r2, #17
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4930      	ldr	r1, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003900:	f7ff f8c2 	bl	8002a88 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7ff f8be 	bl	8002a88 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e058      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003926:	e050      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04f      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d148      	bne.n	80039ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003950:	f7ff f89a 	bl	8002a88 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7ff f896 	bl	8002a88 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e030      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x734>
 8003976:	e028      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d023      	beq.n	80039c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_RCC_OscConfig+0x780>)
 8003984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7ff f87d 	bl	8002a88 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	e00c      	b.n	80039ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7ff f879 	bl	8002a88 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d905      	bls.n	80039ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e013      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
 80039a4:	40021000 	.word	0x40021000
 80039a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ec      	bne.n	8003992 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4905      	ldr	r1, [pc, #20]	; (80039d4 <HAL_RCC_OscConfig+0x7b0>)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x7b4>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
 80039c4:	e001      	b.n	80039ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	feeefffc 	.word	0xfeeefffc

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0e7      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d910      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	4970      	ldr	r1, [pc, #448]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b6e      	ldr	r3, [pc, #440]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cf      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d908      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4960      	ldr	r1, [pc, #384]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04c      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a62:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0a6      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e09a      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a92:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08e      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e086      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4943      	ldr	r1, [pc, #268]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fe ffe0 	bl	8002a88 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe ffdc 	bl	8002a88 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e06e      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d208      	bcs.n	8003b22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	492b      	ldr	r1, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d210      	bcs.n	8003b52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 0207 	bic.w	r2, r3, #7
 8003b38:	4923      	ldr	r1, [pc, #140]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e036      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4918      	ldr	r1, [pc, #96]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4910      	ldr	r1, [pc, #64]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b90:	f000 f824 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bac:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1fc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe ff17 	bl	80029e8 <HAL_InitTick>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	0800b720 	.word	0x0800b720
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d121      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d11e      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c10:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_GetSysClockFreq+0x110>)
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e004      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d134      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0xac>
 8003c80:	e005      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_GetSysClockFreq+0x110>)
 8003c84:	617b      	str	r3, [r7, #20]
      break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8a:	617b      	str	r3, [r7, #20]
      break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	617b      	str	r3, [r7, #20]
      break;
 8003c92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	fb03 f202 	mul.w	r2, r3, r2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	0e5b      	lsrs	r3, r3, #25
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	0800b738 	.word	0x0800b738
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4904      	ldr	r1, [pc, #16]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	0800b730 	.word	0x0800b730

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d3c:	f7ff ffda 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	0800b730 	.word	0x0800b730

08003d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d7c:	f7ff f9ee 	bl	800315c <HAL_PWREx_GetVoltageRange>
 8003d80:	6178      	str	r0, [r7, #20]
 8003d82:	e014      	b.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d9c:	f7ff f9de 	bl	800315c <HAL_PWREx_GetVoltageRange>
 8003da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d10b      	bne.n	8003dce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d919      	bls.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8003dc0:	d902      	bls.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e013      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc8:	2301      	movs	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	e010      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d902      	bls.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e00a      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d102      	bne.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003de0:	2302      	movs	r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	e004      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d101      	bne.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 0207 	bic.w	r2, r3, #7
 8003df8:	4909      	ldr	r1, [pc, #36]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40022000 	.word	0x40022000

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e30:	2300      	movs	r3, #0
 8003e32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d041      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e48:	d02a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e4e:	d824      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e5a:	d81e      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d010      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e66:	e018      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e68:	4b86      	ldr	r3, [pc, #536]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a85      	ldr	r2, [pc, #532]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e74:	e015      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fabb 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e86:	e00c      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fba6 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea8:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb6:	4973      	ldr	r1, [pc, #460]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d041      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed8:	d02a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ede:	d824      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eea:	d81e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef8:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a61      	ldr	r2, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fa73 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f16:	e00c      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb5e 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f38:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f46:	494f      	ldr	r1, [pc, #316]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f4e:	e001      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a0 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	4a40      	ldr	r2, [pc, #256]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	; 0x58
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f94:	2301      	movs	r3, #1
 8003f96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa4:	f7fe fd70 	bl	8002a88 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003faa:	e009      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fac:	f7fe fd6c 	bl	8002a88 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc0:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d019      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a20      	ldr	r2, [pc, #128]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe fd2b 	bl	8002a88 <HAL_GetTick>
 8004032:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	e00b      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe fd27 	bl	8002a88 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d902      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	74fb      	strb	r3, [r7, #19]
            break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ec      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004072:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7c7b      	ldrb	r3, [r7, #17]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b9e      	ldr	r3, [pc, #632]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	4a9d      	ldr	r2, [pc, #628]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ae:	4b98      	ldr	r3, [pc, #608]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f023 0203 	bic.w	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	4994      	ldr	r1, [pc, #592]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 020c 	bic.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	498c      	ldr	r1, [pc, #560]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f2:	4b87      	ldr	r3, [pc, #540]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	4983      	ldr	r1, [pc, #524]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004114:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	497b      	ldr	r1, [pc, #492]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	4972      	ldr	r1, [pc, #456]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004158:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	496a      	ldr	r1, [pc, #424]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	4961      	ldr	r1, [pc, #388]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800419c:	4b5c      	ldr	r3, [pc, #368]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	4959      	ldr	r1, [pc, #356]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041be:	4b54      	ldr	r3, [pc, #336]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	4950      	ldr	r1, [pc, #320]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	4948      	ldr	r1, [pc, #288]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	493f      	ldr	r1, [pc, #252]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d028      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004232:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004242:	d106      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a31      	ldr	r2, [pc, #196]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
 8004250:	e011      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425a:	d10c      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f8c8 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d028      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	491f      	ldr	r1, [pc, #124]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a0:	d106      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ac:	60d3      	str	r3, [r2, #12]
 80042ae:	e011      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f899 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fe:	d109      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a02      	ldr	r2, [pc, #8]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	e014      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f867 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004352:	4928      	ldr	r1, [pc, #160]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004362:	d10d      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f844 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d014      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	74bb      	strb	r3, [r7, #18]
 800437e:	e011      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3320      	adds	r3, #32
 800438e:	2102      	movs	r1, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f925 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043be:	490d      	ldr	r1, [pc, #52]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000

080043f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004406:	4b75      	ldr	r3, [pc, #468]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
       ||
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
       ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d047      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e044      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d018      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x86>
 800444c:	2b03      	cmp	r3, #3
 800444e:	d825      	bhi.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <RCCEx_PLLSAI1_Config+0x62>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d009      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x74>
 8004458:	e020      	b.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445a:	4b60      	ldr	r3, [pc, #384]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d11d      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446a:	e01a      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446c:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e013      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447e:	4b57      	ldr	r3, [pc, #348]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449a:	e006      	b.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	e004      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	430b      	orrs	r3, r1
 80044c8:	4944      	ldr	r1, [pc, #272]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d17d      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a40      	ldr	r2, [pc, #256]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fe fad2 	bl	8002a88 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e8:	f7fe face 	bl	8002a88 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
        break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d160      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0912      	lsrs	r2, r2, #4
 800452c:	0452      	lsls	r2, r2, #17
 800452e:	430a      	orrs	r2, r1
 8004530:	492a      	ldr	r1, [pc, #168]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
 8004536:	e027      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d112      	bne.n	8004564 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004546:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	0211      	lsls	r1, r2, #8
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6912      	ldr	r2, [r2, #16]
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	0552      	lsls	r2, r2, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	491f      	ldr	r1, [pc, #124]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
 8004562:	e011      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6952      	ldr	r2, [r2, #20]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	430a      	orrs	r2, r1
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe fa78 	bl	8002a88 <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459c:	f7fe fa74 	bl	8002a88 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
          break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d10d      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
       ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004612:	4b61      	ldr	r3, [pc, #388]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
       ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d047      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e044      	b.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d018      	beq.n	8004666 <RCCEx_PLLSAI2_Config+0x86>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d825      	bhi.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <RCCEx_PLLSAI2_Config+0x62>
 800463c:	2b02      	cmp	r3, #2
 800463e:	d009      	beq.n	8004654 <RCCEx_PLLSAI2_Config+0x74>
 8004640:	e020      	b.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004642:	4b55      	ldr	r3, [pc, #340]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11d      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e01a      	b.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004664:	e013      	b.n	800468e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004666:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004682:	e006      	b.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e004      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004692:	bf00      	nop
    }

    if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	430b      	orrs	r3, r1
 80046b0:	4939      	ldr	r1, [pc, #228]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d167      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a35      	ldr	r2, [pc, #212]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fe f9de 	bl	8002a88 <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d0:	f7fe f9da 	bl	8002a88 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d14a      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	0211      	lsls	r1, r2, #8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0912      	lsrs	r2, r2, #4
 8004714:	0452      	lsls	r2, r2, #17
 8004716:	430a      	orrs	r2, r1
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	614b      	str	r3, [r1, #20]
 800471e:	e011      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6912      	ldr	r2, [r2, #16]
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	430a      	orrs	r2, r1
 800473e:	4916      	ldr	r1, [pc, #88]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fe f99a 	bl	8002a88 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004758:	f7fe f996 	bl	8002a88 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
          break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e040      	b.n	8004830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd fe16 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 ff5e 	bl	80056a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fca3 	bl	8005134 <UART_SetConfig>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e01b      	b.n	8004830 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 ffdd 	bl	80057e8 <UART_CheckIdleState>
 800482e:	4603      	mov	r3, r0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484e:	2b20      	cmp	r3, #32
 8004850:	f040 80b6 	bne.w	80049c0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_UART_Receive+0x28>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0ae      	b.n	80049c2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487a:	f7fe f905 	bl	8002a88 <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d10e      	bne.n	80048b8 <HAL_UART_Receive+0x80>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <HAL_UART_Receive+0x76>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ac:	e02d      	b.n	800490a <HAL_UART_Receive+0xd2>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	22ff      	movs	r2, #255	; 0xff
 80048b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b6:	e028      	b.n	800490a <HAL_UART_Receive+0xd2>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_UART_Receive+0xa4>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <HAL_UART_Receive+0x9a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	22ff      	movs	r2, #255	; 0xff
 80048cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d0:	e01b      	b.n	800490a <HAL_UART_Receive+0xd2>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	227f      	movs	r2, #127	; 0x7f
 80048d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048da:	e016      	b.n	800490a <HAL_UART_Receive+0xd2>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e4:	d10d      	bne.n	8004902 <HAL_UART_Receive+0xca>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <HAL_UART_Receive+0xc0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	227f      	movs	r2, #127	; 0x7f
 80048f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f6:	e008      	b.n	800490a <HAL_UART_Receive+0xd2>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	223f      	movs	r2, #63	; 0x3f
 80048fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004900:	e003      	b.n	800490a <HAL_UART_Receive+0xd2>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004910:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d108      	bne.n	800492e <HAL_UART_Receive+0xf6>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	e003      	b.n	8004936 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004936:	e037      	b.n	80049a8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	2120      	movs	r1, #32
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fff8 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e033      	b.n	80049c2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004966:	b29a      	uxth	r2, r3
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	4013      	ands	r3, r2
 800496c:	b29a      	uxth	r2, r3
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	3302      	adds	r3, #2
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e00d      	b.n	8004996 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004980:	b29b      	uxth	r3, r3
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8a7b      	ldrh	r3, [r7, #18]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	4013      	ands	r3, r2
 800498a:	b2da      	uxtb	r2, r3
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1c1      	bne.n	8004938 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d147      	bne.n	8004a72 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Transmit_IT+0x22>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e040      	b.n	8004a74 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2221      	movs	r2, #33	; 0x21
 8004a1a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a24:	d107      	bne.n	8004a36 <HAL_UART_Transmit_IT+0x6a>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <HAL_UART_Transmit_IT+0xb4>)
 8004a32:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a34:	e002      	b.n	8004a3c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <HAL_UART_Transmit_IT+0xb8>)
 8004a3a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	623b      	str	r3, [r7, #32]
 8004a5c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	69f9      	ldr	r1, [r7, #28]
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e6      	bne.n	8004a3c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	372c      	adds	r7, #44	; 0x2c
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	08005d41 	.word	0x08005d41
 8004a84:	08005c89 	.word	0x08005c89

08004a88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d137      	bne.n	8004b10 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Receive_IT+0x24>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e030      	b.n	8004b12 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_UART_Receive_IT+0x94>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d01f      	beq.n	8004b00 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	613b      	str	r3, [r7, #16]
   return(result);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	69f9      	ldr	r1, [r7, #28]
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 ff7e 	bl	8005a08 <UART_Start_Receive_IT>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3728      	adds	r7, #40	; 0x28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40008000 	.word	0x40008000

08004b20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b0ba      	sub	sp, #232	; 0xe8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d115      	bne.n	8004b88 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00f      	beq.n	8004b88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 82ae 	beq.w	80050da <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
      }
      return;
 8004b86:	e2a8      	b.n	80050da <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8117 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ba2:	4b85      	ldr	r3, [pc, #532]	; (8004db8 <HAL_UART_IRQHandler+0x298>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 810a 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_UART_IRQHandler+0xbc>
 8004bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d011      	beq.n	8004c0c <HAL_UART_IRQHandler+0xec>
 8004be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <HAL_UART_IRQHandler+0x11c>
 8004c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c32:	f043 0202 	orr.w	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2208      	movs	r2, #8
 8004c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6e:	f043 0208 	orr.w	r2, r3, #8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d012      	beq.n	8004caa <HAL_UART_IRQHandler+0x18a>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8214 	beq.w	80050de <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04f      	beq.n	8004da2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 ff46 	bl	8005b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d141      	bne.n	8004d9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1d9      	bne.n	8004d16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <HAL_UART_IRQHandler+0x29c>)
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe f805 	bl	8002d86 <HAL_DMA_Abort_IT>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e00f      	b.n	8004db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f9b8 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e00b      	b.n	8004db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9b4 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e007      	b.n	8004db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9b0 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004db0:	e195      	b.n	80050de <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db2:	bf00      	nop
    return;
 8004db4:	e193      	b.n	80050de <HAL_UART_IRQHandler+0x5be>
 8004db6:	bf00      	nop
 8004db8:	04000120 	.word	0x04000120
 8004dbc:	08005c5d 	.word	0x08005c5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f040 814e 	bne.w	8005066 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8147 	beq.w	8005066 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8140 	beq.w	8005066 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2210      	movs	r2, #16
 8004dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	f040 80b8 	bne.w	8004f6e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8167 	beq.w	80050e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	f080 815f 	bcs.w	80050e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 8086 	bne.w	8004f4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1da      	bne.n	8004e40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e1      	bne.n	8004e8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e3      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1c:	f023 0310 	bic.w	r3, r3, #16
 8004f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e4      	bne.n	8004f0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd fedf 	bl	8002d0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8d8 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f6c:	e0b9      	b.n	80050e2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80ab 	beq.w	80050e6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e4      	bne.n	8004f9a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	623b      	str	r3, [r7, #32]
   return(result);
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ff4:	633a      	str	r2, [r7, #48]	; 0x30
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e3      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	60fb      	str	r3, [r7, #12]
   return(result);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	69b9      	ldr	r1, [r7, #24]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	617b      	str	r3, [r7, #20]
   return(result);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e4      	bne.n	800501c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f85c 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005064:	e03f      	b.n	80050e6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00e      	beq.n	8005090 <HAL_UART_IRQHandler+0x570>
 8005072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 f89f 	bl	80061cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800508e:	e02d      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01c      	beq.n	80050ea <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
    }
    return;
 80050b8:	e017      	b.n	80050ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <HAL_UART_IRQHandler+0x5cc>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fe94 	bl	8005e00 <UART_EndTransmit_IT>
    return;
 80050d8:	e008      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80050da:	bf00      	nop
 80050dc:	e006      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80050de:	bf00      	nop
 80050e0:	e004      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80050ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050ec:	37e8      	adds	r7, #232	; 0xe8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b08a      	sub	sp, #40	; 0x28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	431a      	orrs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4313      	orrs	r3, r2
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4ba4      	ldr	r3, [pc, #656]	; (80053f4 <UART_SetConfig+0x2c0>)
 8005164:	4013      	ands	r3, r2
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800516c:	430b      	orrs	r3, r1
 800516e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a99      	ldr	r2, [pc, #612]	; (80053f8 <UART_SetConfig+0x2c4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	4313      	orrs	r3, r2
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a90      	ldr	r2, [pc, #576]	; (80053fc <UART_SetConfig+0x2c8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d126      	bne.n	800520c <UART_SetConfig+0xd8>
 80051be:	4b90      	ldr	r3, [pc, #576]	; (8005400 <UART_SetConfig+0x2cc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d81b      	bhi.n	8005204 <UART_SetConfig+0xd0>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0xa0>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e116      	b.n	800541a <UART_SetConfig+0x2e6>
 80051ec:	2302      	movs	r3, #2
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e112      	b.n	800541a <UART_SetConfig+0x2e6>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e10e      	b.n	800541a <UART_SetConfig+0x2e6>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e10a      	b.n	800541a <UART_SetConfig+0x2e6>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e106      	b.n	800541a <UART_SetConfig+0x2e6>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <UART_SetConfig+0x2d0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d138      	bne.n	8005288 <UART_SetConfig+0x154>
 8005216:	4b7a      	ldr	r3, [pc, #488]	; (8005400 <UART_SetConfig+0x2cc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d82d      	bhi.n	8005280 <UART_SetConfig+0x14c>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0xf8>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005261 	.word	0x08005261
 8005230:	08005281 	.word	0x08005281
 8005234:	08005281 	.word	0x08005281
 8005238:	08005281 	.word	0x08005281
 800523c:	08005271 	.word	0x08005271
 8005240:	08005281 	.word	0x08005281
 8005244:	08005281 	.word	0x08005281
 8005248:	08005281 	.word	0x08005281
 800524c:	08005269 	.word	0x08005269
 8005250:	08005281 	.word	0x08005281
 8005254:	08005281 	.word	0x08005281
 8005258:	08005281 	.word	0x08005281
 800525c:	08005279 	.word	0x08005279
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005266:	e0d8      	b.n	800541a <UART_SetConfig+0x2e6>
 8005268:	2302      	movs	r3, #2
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e0d4      	b.n	800541a <UART_SetConfig+0x2e6>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e0d0      	b.n	800541a <UART_SetConfig+0x2e6>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e0cc      	b.n	800541a <UART_SetConfig+0x2e6>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e0c8      	b.n	800541a <UART_SetConfig+0x2e6>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a5e      	ldr	r2, [pc, #376]	; (8005408 <UART_SetConfig+0x2d4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d125      	bne.n	80052de <UART_SetConfig+0x1aa>
 8005292:	4b5b      	ldr	r3, [pc, #364]	; (8005400 <UART_SetConfig+0x2cc>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800529c:	2b30      	cmp	r3, #48	; 0x30
 800529e:	d016      	beq.n	80052ce <UART_SetConfig+0x19a>
 80052a0:	2b30      	cmp	r3, #48	; 0x30
 80052a2:	d818      	bhi.n	80052d6 <UART_SetConfig+0x1a2>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d00a      	beq.n	80052be <UART_SetConfig+0x18a>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d814      	bhi.n	80052d6 <UART_SetConfig+0x1a2>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <UART_SetConfig+0x182>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d008      	beq.n	80052c6 <UART_SetConfig+0x192>
 80052b4:	e00f      	b.n	80052d6 <UART_SetConfig+0x1a2>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052bc:	e0ad      	b.n	800541a <UART_SetConfig+0x2e6>
 80052be:	2302      	movs	r3, #2
 80052c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c4:	e0a9      	b.n	800541a <UART_SetConfig+0x2e6>
 80052c6:	2304      	movs	r3, #4
 80052c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052cc:	e0a5      	b.n	800541a <UART_SetConfig+0x2e6>
 80052ce:	2308      	movs	r3, #8
 80052d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d4:	e0a1      	b.n	800541a <UART_SetConfig+0x2e6>
 80052d6:	2310      	movs	r3, #16
 80052d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052dc:	e09d      	b.n	800541a <UART_SetConfig+0x2e6>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a4a      	ldr	r2, [pc, #296]	; (800540c <UART_SetConfig+0x2d8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d125      	bne.n	8005334 <UART_SetConfig+0x200>
 80052e8:	4b45      	ldr	r3, [pc, #276]	; (8005400 <UART_SetConfig+0x2cc>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052f2:	2bc0      	cmp	r3, #192	; 0xc0
 80052f4:	d016      	beq.n	8005324 <UART_SetConfig+0x1f0>
 80052f6:	2bc0      	cmp	r3, #192	; 0xc0
 80052f8:	d818      	bhi.n	800532c <UART_SetConfig+0x1f8>
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d00a      	beq.n	8005314 <UART_SetConfig+0x1e0>
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d814      	bhi.n	800532c <UART_SetConfig+0x1f8>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <UART_SetConfig+0x1d8>
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d008      	beq.n	800531c <UART_SetConfig+0x1e8>
 800530a:	e00f      	b.n	800532c <UART_SetConfig+0x1f8>
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e082      	b.n	800541a <UART_SetConfig+0x2e6>
 8005314:	2302      	movs	r3, #2
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e07e      	b.n	800541a <UART_SetConfig+0x2e6>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e07a      	b.n	800541a <UART_SetConfig+0x2e6>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e076      	b.n	800541a <UART_SetConfig+0x2e6>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e072      	b.n	800541a <UART_SetConfig+0x2e6>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <UART_SetConfig+0x2dc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d12a      	bne.n	8005394 <UART_SetConfig+0x260>
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <UART_SetConfig+0x2cc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534c:	d01a      	beq.n	8005384 <UART_SetConfig+0x250>
 800534e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005352:	d81b      	bhi.n	800538c <UART_SetConfig+0x258>
 8005354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005358:	d00c      	beq.n	8005374 <UART_SetConfig+0x240>
 800535a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535e:	d815      	bhi.n	800538c <UART_SetConfig+0x258>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <UART_SetConfig+0x238>
 8005364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005368:	d008      	beq.n	800537c <UART_SetConfig+0x248>
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x258>
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005372:	e052      	b.n	800541a <UART_SetConfig+0x2e6>
 8005374:	2302      	movs	r3, #2
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537a:	e04e      	b.n	800541a <UART_SetConfig+0x2e6>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005382:	e04a      	b.n	800541a <UART_SetConfig+0x2e6>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e046      	b.n	800541a <UART_SetConfig+0x2e6>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005392:	e042      	b.n	800541a <UART_SetConfig+0x2e6>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <UART_SetConfig+0x2c4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d13a      	bne.n	8005414 <UART_SetConfig+0x2e0>
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <UART_SetConfig+0x2cc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ac:	d01a      	beq.n	80053e4 <UART_SetConfig+0x2b0>
 80053ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b2:	d81b      	bhi.n	80053ec <UART_SetConfig+0x2b8>
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b8:	d00c      	beq.n	80053d4 <UART_SetConfig+0x2a0>
 80053ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053be:	d815      	bhi.n	80053ec <UART_SetConfig+0x2b8>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <UART_SetConfig+0x298>
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d008      	beq.n	80053dc <UART_SetConfig+0x2a8>
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x2b8>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d2:	e022      	b.n	800541a <UART_SetConfig+0x2e6>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053da:	e01e      	b.n	800541a <UART_SetConfig+0x2e6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e2:	e01a      	b.n	800541a <UART_SetConfig+0x2e6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e016      	b.n	800541a <UART_SetConfig+0x2e6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e012      	b.n	800541a <UART_SetConfig+0x2e6>
 80053f4:	efff69f3 	.word	0xefff69f3
 80053f8:	40008000 	.word	0x40008000
 80053fc:	40013800 	.word	0x40013800
 8005400:	40021000 	.word	0x40021000
 8005404:	40004400 	.word	0x40004400
 8005408:	40004800 	.word	0x40004800
 800540c:	40004c00 	.word	0x40004c00
 8005410:	40005000 	.word	0x40005000
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a9f      	ldr	r2, [pc, #636]	; (800569c <UART_SetConfig+0x568>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d17a      	bne.n	800551a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005428:	2b08      	cmp	r3, #8
 800542a:	d824      	bhi.n	8005476 <UART_SetConfig+0x342>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0x300>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005459 	.word	0x08005459
 8005438:	08005477 	.word	0x08005477
 800543c:	08005461 	.word	0x08005461
 8005440:	08005477 	.word	0x08005477
 8005444:	08005467 	.word	0x08005467
 8005448:	08005477 	.word	0x08005477
 800544c:	08005477 	.word	0x08005477
 8005450:	08005477 	.word	0x08005477
 8005454:	0800546f 	.word	0x0800546f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe fc58 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 800545c:	61f8      	str	r0, [r7, #28]
        break;
 800545e:	e010      	b.n	8005482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b8f      	ldr	r3, [pc, #572]	; (80056a0 <UART_SetConfig+0x56c>)
 8005462:	61fb      	str	r3, [r7, #28]
        break;
 8005464:	e00d      	b.n	8005482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7fe fbb9 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 800546a:	61f8      	str	r0, [r7, #28]
        break;
 800546c:	e009      	b.n	8005482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005472:	61fb      	str	r3, [r7, #28]
        break;
 8005474:	e005      	b.n	8005482 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80fb 	beq.w	8005680 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	429a      	cmp	r2, r3
 8005498:	d305      	bcc.n	80054a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d903      	bls.n	80054ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054ac:	e0e8      	b.n	8005680 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2200      	movs	r2, #0
 80054b2:	461c      	mov	r4, r3
 80054b4:	4615      	mov	r5, r2
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	022b      	lsls	r3, r5, #8
 80054c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054c4:	0222      	lsls	r2, r4, #8
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	6849      	ldr	r1, [r1, #4]
 80054ca:	0849      	lsrs	r1, r1, #1
 80054cc:	2000      	movs	r0, #0
 80054ce:	4688      	mov	r8, r1
 80054d0:	4681      	mov	r9, r0
 80054d2:	eb12 0a08 	adds.w	sl, r2, r8
 80054d6:	eb43 0b09 	adc.w	fp, r3, r9
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e8:	4650      	mov	r0, sl
 80054ea:	4659      	mov	r1, fp
 80054ec:	f7fb fbcc 	bl	8000c88 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4613      	mov	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d308      	bcc.n	8005512 <UART_SetConfig+0x3de>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005506:	d204      	bcs.n	8005512 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e0b6      	b.n	8005680 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005518:	e0b2      	b.n	8005680 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005522:	d15e      	bne.n	80055e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005528:	2b08      	cmp	r3, #8
 800552a:	d828      	bhi.n	800557e <UART_SetConfig+0x44a>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x400>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe fbd8 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 800555c:	61f8      	str	r0, [r7, #28]
        break;
 800555e:	e014      	b.n	800558a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe fbea 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005564:	61f8      	str	r0, [r7, #28]
        break;
 8005566:	e010      	b.n	800558a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <UART_SetConfig+0x56c>)
 800556a:	61fb      	str	r3, [r7, #28]
        break;
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fe fb35 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8005572:	61f8      	str	r0, [r7, #28]
        break;
 8005574:	e009      	b.n	800558a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61fb      	str	r3, [r7, #28]
        break;
 800557c:	e005      	b.n	800558a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d077      	beq.n	8005680 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005a      	lsls	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	441a      	add	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d916      	bls.n	80055da <UART_SetConfig+0x4a6>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d212      	bcs.n	80055da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f023 030f 	bic.w	r3, r3, #15
 80055bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	8afb      	ldrh	r3, [r7, #22]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	8afa      	ldrh	r2, [r7, #22]
 80055d6:	60da      	str	r2, [r3, #12]
 80055d8:	e052      	b.n	8005680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055e0:	e04e      	b.n	8005680 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d827      	bhi.n	800563a <UART_SetConfig+0x506>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x4bc>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	0800563b 	.word	0x0800563b
 8005600:	0800562b 	.word	0x0800562b
 8005604:	0800563b 	.word	0x0800563b
 8005608:	0800563b 	.word	0x0800563b
 800560c:	0800563b 	.word	0x0800563b
 8005610:	08005633 	.word	0x08005633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fb7a 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8005618:	61f8      	str	r0, [r7, #28]
        break;
 800561a:	e014      	b.n	8005646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fe fb8c 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005620:	61f8      	str	r0, [r7, #28]
        break;
 8005622:	e010      	b.n	8005646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <UART_SetConfig+0x56c>)
 8005626:	61fb      	str	r3, [r7, #28]
        break;
 8005628:	e00d      	b.n	8005646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7fe fad7 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 800562e:	61f8      	str	r0, [r7, #28]
        break;
 8005630:	e009      	b.n	8005646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	61fb      	str	r3, [r7, #28]
        break;
 8005638:	e005      	b.n	8005646 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005644:	bf00      	nop
    }

    if (pclk != 0U)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d019      	beq.n	8005680 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	085a      	lsrs	r2, r3, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	441a      	add	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d909      	bls.n	800567a <UART_SetConfig+0x546>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566c:	d205      	bcs.n	800567a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e002      	b.n	8005680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800568c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569a:	bf00      	nop
 800569c:	40008000 	.word	0x40008000
 80056a0:	00f42400 	.word	0x00f42400

080056a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01a      	beq.n	80057ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a2:	d10a      	bne.n	80057ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b098      	sub	sp, #96	; 0x60
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f8:	f7fd f946 	bl	8002a88 <HAL_GetTick>
 80057fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d12e      	bne.n	800586a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f88c 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d021      	beq.n	800586a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583a:	653b      	str	r3, [r7, #80]	; 0x50
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005844:	647b      	str	r3, [r7, #68]	; 0x44
 8005846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800584a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e062      	b.n	8005930 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b04      	cmp	r3, #4
 8005876:	d149      	bne.n	800590c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f856 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d03c      	beq.n	800590c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	623b      	str	r3, [r7, #32]
   return(result);
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b0:	633b      	str	r3, [r7, #48]	; 0x30
 80058b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	64bb      	str	r3, [r7, #72]	; 0x48
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	617b      	str	r3, [r7, #20]
   return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e011      	b.n	8005930 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3758      	adds	r7, #88	; 0x58
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005948:	e049      	b.n	80059de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d045      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fd f899 	bl	8002a88 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <UART_WaitOnFlagUntilTimeout+0x30>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e048      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d031      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b08      	cmp	r3, #8
 8005986:	d110      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2208      	movs	r2, #8
 800598e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f8ff 	bl	8005b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2208      	movs	r2, #8
 800599a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e029      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b8:	d111      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f8e5 	bl	8005b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e00f      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d0a6      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b097      	sub	sp, #92	; 0x5c
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d10e      	bne.n	8005a5a <UART_Start_Receive_IT+0x52>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <UART_Start_Receive_IT+0x48>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a4e:	e02d      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	22ff      	movs	r2, #255	; 0xff
 8005a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a58:	e028      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <UART_Start_Receive_IT+0x76>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <UART_Start_Receive_IT+0x6c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	22ff      	movs	r2, #255	; 0xff
 8005a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a72:	e01b      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	227f      	movs	r2, #127	; 0x7f
 8005a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7c:	e016      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a86:	d10d      	bne.n	8005aa4 <UART_Start_Receive_IT+0x9c>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <UART_Start_Receive_IT+0x92>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	227f      	movs	r2, #127	; 0x7f
 8005a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a98:	e008      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	223f      	movs	r2, #63	; 0x3f
 8005a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa2:	e003      	b.n	8005aac <UART_Start_Receive_IT+0xa4>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2222      	movs	r2, #34	; 0x22
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005adc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	d107      	bne.n	8005b0a <UART_Start_Receive_IT+0x102>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <UART_Start_Receive_IT+0x184>)
 8005b06:	669a      	str	r2, [r3, #104]	; 0x68
 8005b08:	e002      	b.n	8005b10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <UART_Start_Receive_IT+0x188>)
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d019      	beq.n	8005b4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
 8005b38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e6      	bne.n	8005b18 <UART_Start_Receive_IT+0x110>
 8005b4a:	e018      	b.n	8005b7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f043 0320 	orr.w	r3, r3, #32
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	69f9      	ldr	r1, [r7, #28]
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	375c      	adds	r7, #92	; 0x5c
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	08006011 	.word	0x08006011
 8005b90:	08005e55 	.word	0x08005e55

08005b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b095      	sub	sp, #84	; 0x54
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d118      	bne.n	8005c3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f023 0310 	bic.w	r3, r3, #16
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e6      	bne.n	8005c0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c50:	bf00      	nop
 8005c52:	3754      	adds	r7, #84	; 0x54
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fa44 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b08f      	sub	sp, #60	; 0x3c
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c94:	2b21      	cmp	r3, #33	; 0x21
 8005c96:	d14d      	bne.n	8005d34 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d132      	bne.n	8005d0a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e6      	bne.n	8005ca4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6979      	ldr	r1, [r7, #20]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	613b      	str	r3, [r7, #16]
   return(result);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e6      	bne.n	8005cd6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005d08:	e014      	b.n	8005d34 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b292      	uxth	r2, r2
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d34:	bf00      	nop
 8005d36:	373c      	adds	r7, #60	; 0x3c
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b091      	sub	sp, #68	; 0x44
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4c:	2b21      	cmp	r3, #33	; 0x21
 8005d4e:	d151      	bne.n	8005df4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d132      	bne.n	8005dc2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005dc0:	e018      	b.n	8005df4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005df4:	bf00      	nop
 8005df6:	3744      	adds	r7, #68	; 0x44
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	613b      	str	r3, [r7, #16]
   return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb f917 	bl	800107a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4c:	bf00      	nop
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b09c      	sub	sp, #112	; 0x70
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e6c:	2b22      	cmp	r3, #34	; 0x22
 8005e6e:	f040 80be 	bne.w	8005fee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e80:	b2d9      	uxtb	r1, r3
 8005e82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 80a3 	bne.w	8006002 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005edc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	667b      	str	r3, [r7, #100]	; 0x64
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a34      	ldr	r2, [pc, #208]	; (800600c <UART_RxISR_8BIT+0x1b8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d01f      	beq.n	8005f80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f62:	663b      	str	r3, [r7, #96]	; 0x60
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d12e      	bne.n	8005fe6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d103      	bne.n	8005fd6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff f89c 	bl	800511c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe4:	e00d      	b.n	8006002 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff f884 	bl	80050f4 <HAL_UART_RxCpltCallback>
}
 8005fec:	e009      	b.n	8006002 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	8b1b      	ldrh	r3, [r3, #24]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0208 	orr.w	r2, r2, #8
 8005ffe:	b292      	uxth	r2, r2
 8006000:	831a      	strh	r2, [r3, #24]
}
 8006002:	bf00      	nop
 8006004:	3770      	adds	r7, #112	; 0x70
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40008000 	.word	0x40008000

08006010 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b09c      	sub	sp, #112	; 0x70
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800601e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006028:	2b22      	cmp	r3, #34	; 0x22
 800602a:	f040 80be 	bne.w	80061aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006034:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800603e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006042:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006046:	4013      	ands	r3, r2
 8006048:	b29a      	uxth	r2, r3
 800604a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800604c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 80a3 	bne.w	80061be <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800608c:	667b      	str	r3, [r7, #100]	; 0x64
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006096:	657b      	str	r3, [r7, #84]	; 0x54
 8006098:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800609c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e6      	bne.n	8006078 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	663b      	str	r3, [r7, #96]	; 0x60
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ca:	643a      	str	r2, [r7, #64]	; 0x40
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <UART_RxISR_16BIT+0x1b8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d01f      	beq.n	800613c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	61fb      	str	r3, [r7, #28]
   return(result);
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800611e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e6      	bne.n	800610a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	2b01      	cmp	r3, #1
 8006142:	d12e      	bne.n	80061a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60bb      	str	r3, [r7, #8]
   return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0310 	bic.w	r3, r3, #16
 800615e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b10      	cmp	r3, #16
 8006188:	d103      	bne.n	8006192 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2210      	movs	r2, #16
 8006190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fe ffbe 	bl	800511c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a0:	e00d      	b.n	80061be <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fe ffa6 	bl	80050f4 <HAL_UART_RxCpltCallback>
}
 80061a8:	e009      	b.n	80061be <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	8b1b      	ldrh	r3, [r3, #24]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0208 	orr.w	r2, r2, #8
 80061ba:	b292      	uxth	r2, r2
 80061bc:	831a      	strh	r2, [r3, #24]
}
 80061be:	bf00      	nop
 80061c0:	3770      	adds	r7, #112	; 0x70
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40008000 	.word	0x40008000

080061cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <malloc>:
 80061e0:	4b02      	ldr	r3, [pc, #8]	; (80061ec <malloc+0xc>)
 80061e2:	4601      	mov	r1, r0
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	f000 b823 	b.w	8006230 <_malloc_r>
 80061ea:	bf00      	nop
 80061ec:	20000064 	.word	0x20000064

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f001 f9e6 	bl	80075cc <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f001 f9e1 	bl	80075cc <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f001 f9d6 	bl	80075cc <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	200009bc 	.word	0x200009bc

08006230 <_malloc_r>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2600      	movs	r6, #0
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006258:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800632c <_malloc_r+0xfc>
 800625c:	f000 f868 	bl	8006330 <__malloc_lock>
 8006260:	f8d8 3000 	ldr.w	r3, [r8]
 8006264:	461c      	mov	r4, r3
 8006266:	bb5c      	cbnz	r4, 80062c0 <_malloc_r+0x90>
 8006268:	4629      	mov	r1, r5
 800626a:	4638      	mov	r0, r7
 800626c:	f7ff ffc0 	bl	80061f0 <sbrk_aligned>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	4604      	mov	r4, r0
 8006274:	d155      	bne.n	8006322 <_malloc_r+0xf2>
 8006276:	f8d8 4000 	ldr.w	r4, [r8]
 800627a:	4626      	mov	r6, r4
 800627c:	2e00      	cmp	r6, #0
 800627e:	d145      	bne.n	800630c <_malloc_r+0xdc>
 8006280:	2c00      	cmp	r4, #0
 8006282:	d048      	beq.n	8006316 <_malloc_r+0xe6>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	4631      	mov	r1, r6
 8006288:	4638      	mov	r0, r7
 800628a:	eb04 0903 	add.w	r9, r4, r3
 800628e:	f001 f99d 	bl	80075cc <_sbrk_r>
 8006292:	4581      	cmp	r9, r0
 8006294:	d13f      	bne.n	8006316 <_malloc_r+0xe6>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1a6d      	subs	r5, r5, r1
 800629a:	4629      	mov	r1, r5
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff ffa7 	bl	80061f0 <sbrk_aligned>
 80062a2:	3001      	adds	r0, #1
 80062a4:	d037      	beq.n	8006316 <_malloc_r+0xe6>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	442b      	add	r3, r5
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	f8d8 3000 	ldr.w	r3, [r8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d038      	beq.n	8006326 <_malloc_r+0xf6>
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	42a2      	cmp	r2, r4
 80062b8:	d12b      	bne.n	8006312 <_malloc_r+0xe2>
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e00f      	b.n	80062e0 <_malloc_r+0xb0>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	1b52      	subs	r2, r2, r5
 80062c4:	d41f      	bmi.n	8006306 <_malloc_r+0xd6>
 80062c6:	2a0b      	cmp	r2, #11
 80062c8:	d917      	bls.n	80062fa <_malloc_r+0xca>
 80062ca:	1961      	adds	r1, r4, r5
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	6025      	str	r5, [r4, #0]
 80062d0:	bf18      	it	ne
 80062d2:	6059      	strne	r1, [r3, #4]
 80062d4:	6863      	ldr	r3, [r4, #4]
 80062d6:	bf08      	it	eq
 80062d8:	f8c8 1000 	streq.w	r1, [r8]
 80062dc:	5162      	str	r2, [r4, r5]
 80062de:	604b      	str	r3, [r1, #4]
 80062e0:	4638      	mov	r0, r7
 80062e2:	f104 060b 	add.w	r6, r4, #11
 80062e6:	f000 f829 	bl	800633c <__malloc_unlock>
 80062ea:	f026 0607 	bic.w	r6, r6, #7
 80062ee:	1d23      	adds	r3, r4, #4
 80062f0:	1af2      	subs	r2, r6, r3
 80062f2:	d0ae      	beq.n	8006252 <_malloc_r+0x22>
 80062f4:	1b9b      	subs	r3, r3, r6
 80062f6:	50a3      	str	r3, [r4, r2]
 80062f8:	e7ab      	b.n	8006252 <_malloc_r+0x22>
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	6862      	ldr	r2, [r4, #4]
 80062fe:	d1dd      	bne.n	80062bc <_malloc_r+0x8c>
 8006300:	f8c8 2000 	str.w	r2, [r8]
 8006304:	e7ec      	b.n	80062e0 <_malloc_r+0xb0>
 8006306:	4623      	mov	r3, r4
 8006308:	6864      	ldr	r4, [r4, #4]
 800630a:	e7ac      	b.n	8006266 <_malloc_r+0x36>
 800630c:	4634      	mov	r4, r6
 800630e:	6876      	ldr	r6, [r6, #4]
 8006310:	e7b4      	b.n	800627c <_malloc_r+0x4c>
 8006312:	4613      	mov	r3, r2
 8006314:	e7cc      	b.n	80062b0 <_malloc_r+0x80>
 8006316:	230c      	movs	r3, #12
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4638      	mov	r0, r7
 800631c:	f000 f80e 	bl	800633c <__malloc_unlock>
 8006320:	e797      	b.n	8006252 <_malloc_r+0x22>
 8006322:	6025      	str	r5, [r4, #0]
 8006324:	e7dc      	b.n	80062e0 <_malloc_r+0xb0>
 8006326:	605b      	str	r3, [r3, #4]
 8006328:	deff      	udf	#255	; 0xff
 800632a:	bf00      	nop
 800632c:	200009b8 	.word	0x200009b8

08006330 <__malloc_lock>:
 8006330:	4801      	ldr	r0, [pc, #4]	; (8006338 <__malloc_lock+0x8>)
 8006332:	f001 b998 	b.w	8007666 <__retarget_lock_acquire_recursive>
 8006336:	bf00      	nop
 8006338:	20000b00 	.word	0x20000b00

0800633c <__malloc_unlock>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__malloc_unlock+0x8>)
 800633e:	f001 b993 	b.w	8007668 <__retarget_lock_release_recursive>
 8006342:	bf00      	nop
 8006344:	20000b00 	.word	0x20000b00

08006348 <__cvt>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	ec55 4b10 	vmov	r4, r5, d0
 8006350:	2d00      	cmp	r5, #0
 8006352:	460e      	mov	r6, r1
 8006354:	4619      	mov	r1, r3
 8006356:	462b      	mov	r3, r5
 8006358:	bfbb      	ittet	lt
 800635a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800635e:	461d      	movlt	r5, r3
 8006360:	2300      	movge	r3, #0
 8006362:	232d      	movlt	r3, #45	; 0x2d
 8006364:	700b      	strb	r3, [r1, #0]
 8006366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006368:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800636c:	4691      	mov	r9, r2
 800636e:	f023 0820 	bic.w	r8, r3, #32
 8006372:	bfbc      	itt	lt
 8006374:	4622      	movlt	r2, r4
 8006376:	4614      	movlt	r4, r2
 8006378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800637c:	d005      	beq.n	800638a <__cvt+0x42>
 800637e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006382:	d100      	bne.n	8006386 <__cvt+0x3e>
 8006384:	3601      	adds	r6, #1
 8006386:	2102      	movs	r1, #2
 8006388:	e000      	b.n	800638c <__cvt+0x44>
 800638a:	2103      	movs	r1, #3
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	ab02      	add	r3, sp, #8
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	ec45 4b10 	vmov	d0, r4, r5
 8006398:	4653      	mov	r3, sl
 800639a:	4632      	mov	r2, r6
 800639c:	f001 f9f4 	bl	8007788 <_dtoa_r>
 80063a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063a4:	4607      	mov	r7, r0
 80063a6:	d102      	bne.n	80063ae <__cvt+0x66>
 80063a8:	f019 0f01 	tst.w	r9, #1
 80063ac:	d022      	beq.n	80063f4 <__cvt+0xac>
 80063ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063b2:	eb07 0906 	add.w	r9, r7, r6
 80063b6:	d110      	bne.n	80063da <__cvt+0x92>
 80063b8:	783b      	ldrb	r3, [r7, #0]
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d10a      	bne.n	80063d4 <__cvt+0x8c>
 80063be:	2200      	movs	r2, #0
 80063c0:	2300      	movs	r3, #0
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7fa fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ca:	b918      	cbnz	r0, 80063d4 <__cvt+0x8c>
 80063cc:	f1c6 0601 	rsb	r6, r6, #1
 80063d0:	f8ca 6000 	str.w	r6, [sl]
 80063d4:	f8da 3000 	ldr.w	r3, [sl]
 80063d8:	4499      	add	r9, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	2300      	movs	r3, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e6:	b108      	cbz	r0, 80063ec <__cvt+0xa4>
 80063e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80063ec:	2230      	movs	r2, #48	; 0x30
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	454b      	cmp	r3, r9
 80063f2:	d307      	bcc.n	8006404 <__cvt+0xbc>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f8:	1bdb      	subs	r3, r3, r7
 80063fa:	4638      	mov	r0, r7
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	b004      	add	sp, #16
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	9103      	str	r1, [sp, #12]
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e7f0      	b.n	80063ee <__cvt+0xa6>

0800640c <__exponent>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	4603      	mov	r3, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	bfb8      	it	lt
 8006414:	4249      	neglt	r1, r1
 8006416:	f803 2b02 	strb.w	r2, [r3], #2
 800641a:	bfb4      	ite	lt
 800641c:	222d      	movlt	r2, #45	; 0x2d
 800641e:	222b      	movge	r2, #43	; 0x2b
 8006420:	2909      	cmp	r1, #9
 8006422:	7042      	strb	r2, [r0, #1]
 8006424:	dd2a      	ble.n	800647c <__exponent+0x70>
 8006426:	f10d 0207 	add.w	r2, sp, #7
 800642a:	4617      	mov	r7, r2
 800642c:	260a      	movs	r6, #10
 800642e:	4694      	mov	ip, r2
 8006430:	fb91 f5f6 	sdiv	r5, r1, r6
 8006434:	fb06 1415 	mls	r4, r6, r5, r1
 8006438:	3430      	adds	r4, #48	; 0x30
 800643a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800643e:	460c      	mov	r4, r1
 8006440:	2c63      	cmp	r4, #99	; 0x63
 8006442:	f102 32ff 	add.w	r2, r2, #4294967295
 8006446:	4629      	mov	r1, r5
 8006448:	dcf1      	bgt.n	800642e <__exponent+0x22>
 800644a:	3130      	adds	r1, #48	; 0x30
 800644c:	f1ac 0402 	sub.w	r4, ip, #2
 8006450:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006454:	1c41      	adds	r1, r0, #1
 8006456:	4622      	mov	r2, r4
 8006458:	42ba      	cmp	r2, r7
 800645a:	d30a      	bcc.n	8006472 <__exponent+0x66>
 800645c:	f10d 0209 	add.w	r2, sp, #9
 8006460:	eba2 020c 	sub.w	r2, r2, ip
 8006464:	42bc      	cmp	r4, r7
 8006466:	bf88      	it	hi
 8006468:	2200      	movhi	r2, #0
 800646a:	4413      	add	r3, r2
 800646c:	1a18      	subs	r0, r3, r0
 800646e:	b003      	add	sp, #12
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006472:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006476:	f801 5f01 	strb.w	r5, [r1, #1]!
 800647a:	e7ed      	b.n	8006458 <__exponent+0x4c>
 800647c:	2330      	movs	r3, #48	; 0x30
 800647e:	3130      	adds	r1, #48	; 0x30
 8006480:	7083      	strb	r3, [r0, #2]
 8006482:	70c1      	strb	r1, [r0, #3]
 8006484:	1d03      	adds	r3, r0, #4
 8006486:	e7f1      	b.n	800646c <__exponent+0x60>

08006488 <_printf_float>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	ed2d 8b02 	vpush	{d8}
 8006490:	b08d      	sub	sp, #52	; 0x34
 8006492:	460c      	mov	r4, r1
 8006494:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006498:	4616      	mov	r6, r2
 800649a:	461f      	mov	r7, r3
 800649c:	4605      	mov	r5, r0
 800649e:	f001 f85d 	bl	800755c <_localeconv_r>
 80064a2:	f8d0 a000 	ldr.w	sl, [r0]
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7f9 fee2 	bl	8000270 <strlen>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930a      	str	r3, [sp, #40]	; 0x28
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	f8d8 3000 	ldr.w	r3, [r8]
 80064b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064bc:	3307      	adds	r3, #7
 80064be:	f023 0307 	bic.w	r3, r3, #7
 80064c2:	f103 0208 	add.w	r2, r3, #8
 80064c6:	f8c8 2000 	str.w	r2, [r8]
 80064ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064d2:	9307      	str	r3, [sp, #28]
 80064d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064d8:	ee08 0a10 	vmov	s16, r0
 80064dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80064e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064e4:	4b9e      	ldr	r3, [pc, #632]	; (8006760 <_printf_float+0x2d8>)
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	f7fa fb1f 	bl	8000b2c <__aeabi_dcmpun>
 80064ee:	bb88      	cbnz	r0, 8006554 <_printf_float+0xcc>
 80064f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f4:	4b9a      	ldr	r3, [pc, #616]	; (8006760 <_printf_float+0x2d8>)
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	f7fa faf9 	bl	8000af0 <__aeabi_dcmple>
 80064fe:	bb48      	cbnz	r0, 8006554 <_printf_float+0xcc>
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	4640      	mov	r0, r8
 8006506:	4649      	mov	r1, r9
 8006508:	f7fa fae8 	bl	8000adc <__aeabi_dcmplt>
 800650c:	b110      	cbz	r0, 8006514 <_printf_float+0x8c>
 800650e:	232d      	movs	r3, #45	; 0x2d
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	4a93      	ldr	r2, [pc, #588]	; (8006764 <_printf_float+0x2dc>)
 8006516:	4b94      	ldr	r3, [pc, #592]	; (8006768 <_printf_float+0x2e0>)
 8006518:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800651c:	bf94      	ite	ls
 800651e:	4690      	movls	r8, r2
 8006520:	4698      	movhi	r8, r3
 8006522:	2303      	movs	r3, #3
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	9b05      	ldr	r3, [sp, #20]
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	f04f 0900 	mov.w	r9, #0
 8006532:	9700      	str	r7, [sp, #0]
 8006534:	4633      	mov	r3, r6
 8006536:	aa0b      	add	r2, sp, #44	; 0x2c
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f9da 	bl	80068f4 <_printf_common>
 8006540:	3001      	adds	r0, #1
 8006542:	f040 8090 	bne.w	8006666 <_printf_float+0x1de>
 8006546:	f04f 30ff 	mov.w	r0, #4294967295
 800654a:	b00d      	add	sp, #52	; 0x34
 800654c:	ecbd 8b02 	vpop	{d8}
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	4640      	mov	r0, r8
 800655a:	4649      	mov	r1, r9
 800655c:	f7fa fae6 	bl	8000b2c <__aeabi_dcmpun>
 8006560:	b140      	cbz	r0, 8006574 <_printf_float+0xec>
 8006562:	464b      	mov	r3, r9
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbc      	itt	lt
 8006568:	232d      	movlt	r3, #45	; 0x2d
 800656a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800656e:	4a7f      	ldr	r2, [pc, #508]	; (800676c <_printf_float+0x2e4>)
 8006570:	4b7f      	ldr	r3, [pc, #508]	; (8006770 <_printf_float+0x2e8>)
 8006572:	e7d1      	b.n	8006518 <_printf_float+0x90>
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800657a:	9206      	str	r2, [sp, #24]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	d13f      	bne.n	8006600 <_printf_float+0x178>
 8006580:	2306      	movs	r3, #6
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	9b05      	ldr	r3, [sp, #20]
 8006586:	6861      	ldr	r1, [r4, #4]
 8006588:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800658c:	2300      	movs	r3, #0
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	ab0a      	add	r3, sp, #40	; 0x28
 8006592:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006596:	ab09      	add	r3, sp, #36	; 0x24
 8006598:	ec49 8b10 	vmov	d0, r8, r9
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065a4:	4628      	mov	r0, r5
 80065a6:	f7ff fecf 	bl	8006348 <__cvt>
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ae:	2b47      	cmp	r3, #71	; 0x47
 80065b0:	4680      	mov	r8, r0
 80065b2:	d108      	bne.n	80065c6 <_printf_float+0x13e>
 80065b4:	1cc8      	adds	r0, r1, #3
 80065b6:	db02      	blt.n	80065be <_printf_float+0x136>
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	4299      	cmp	r1, r3
 80065bc:	dd41      	ble.n	8006642 <_printf_float+0x1ba>
 80065be:	f1ab 0302 	sub.w	r3, fp, #2
 80065c2:	fa5f fb83 	uxtb.w	fp, r3
 80065c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ca:	d820      	bhi.n	800660e <_printf_float+0x186>
 80065cc:	3901      	subs	r1, #1
 80065ce:	465a      	mov	r2, fp
 80065d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065d4:	9109      	str	r1, [sp, #36]	; 0x24
 80065d6:	f7ff ff19 	bl	800640c <__exponent>
 80065da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065dc:	1813      	adds	r3, r2, r0
 80065de:	2a01      	cmp	r2, #1
 80065e0:	4681      	mov	r9, r0
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	dc02      	bgt.n	80065ec <_printf_float+0x164>
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	07d2      	lsls	r2, r2, #31
 80065ea:	d501      	bpl.n	80065f0 <_printf_float+0x168>
 80065ec:	3301      	adds	r3, #1
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d09c      	beq.n	8006532 <_printf_float+0xaa>
 80065f8:	232d      	movs	r3, #45	; 0x2d
 80065fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fe:	e798      	b.n	8006532 <_printf_float+0xaa>
 8006600:	9a06      	ldr	r2, [sp, #24]
 8006602:	2a47      	cmp	r2, #71	; 0x47
 8006604:	d1be      	bne.n	8006584 <_printf_float+0xfc>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1bc      	bne.n	8006584 <_printf_float+0xfc>
 800660a:	2301      	movs	r3, #1
 800660c:	e7b9      	b.n	8006582 <_printf_float+0xfa>
 800660e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006612:	d118      	bne.n	8006646 <_printf_float+0x1be>
 8006614:	2900      	cmp	r1, #0
 8006616:	6863      	ldr	r3, [r4, #4]
 8006618:	dd0b      	ble.n	8006632 <_printf_float+0x1aa>
 800661a:	6121      	str	r1, [r4, #16]
 800661c:	b913      	cbnz	r3, 8006624 <_printf_float+0x19c>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	07d0      	lsls	r0, r2, #31
 8006622:	d502      	bpl.n	800662a <_printf_float+0x1a2>
 8006624:	3301      	adds	r3, #1
 8006626:	440b      	add	r3, r1
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	65a1      	str	r1, [r4, #88]	; 0x58
 800662c:	f04f 0900 	mov.w	r9, #0
 8006630:	e7de      	b.n	80065f0 <_printf_float+0x168>
 8006632:	b913      	cbnz	r3, 800663a <_printf_float+0x1b2>
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	07d2      	lsls	r2, r2, #31
 8006638:	d501      	bpl.n	800663e <_printf_float+0x1b6>
 800663a:	3302      	adds	r3, #2
 800663c:	e7f4      	b.n	8006628 <_printf_float+0x1a0>
 800663e:	2301      	movs	r3, #1
 8006640:	e7f2      	b.n	8006628 <_printf_float+0x1a0>
 8006642:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006648:	4299      	cmp	r1, r3
 800664a:	db05      	blt.n	8006658 <_printf_float+0x1d0>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	6121      	str	r1, [r4, #16]
 8006650:	07d8      	lsls	r0, r3, #31
 8006652:	d5ea      	bpl.n	800662a <_printf_float+0x1a2>
 8006654:	1c4b      	adds	r3, r1, #1
 8006656:	e7e7      	b.n	8006628 <_printf_float+0x1a0>
 8006658:	2900      	cmp	r1, #0
 800665a:	bfd4      	ite	le
 800665c:	f1c1 0202 	rsble	r2, r1, #2
 8006660:	2201      	movgt	r2, #1
 8006662:	4413      	add	r3, r2
 8006664:	e7e0      	b.n	8006628 <_printf_float+0x1a0>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	055a      	lsls	r2, r3, #21
 800666a:	d407      	bmi.n	800667c <_printf_float+0x1f4>
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	4642      	mov	r2, r8
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	d12c      	bne.n	80066d4 <_printf_float+0x24c>
 800667a:	e764      	b.n	8006546 <_printf_float+0xbe>
 800667c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006680:	f240 80e0 	bls.w	8006844 <_printf_float+0x3bc>
 8006684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	f7fa fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006690:	2800      	cmp	r0, #0
 8006692:	d034      	beq.n	80066fe <_printf_float+0x276>
 8006694:	4a37      	ldr	r2, [pc, #220]	; (8006774 <_printf_float+0x2ec>)
 8006696:	2301      	movs	r3, #1
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f af51 	beq.w	8006546 <_printf_float+0xbe>
 80066a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a8:	429a      	cmp	r2, r3
 80066aa:	db02      	blt.n	80066b2 <_printf_float+0x22a>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07d8      	lsls	r0, r3, #31
 80066b0:	d510      	bpl.n	80066d4 <_printf_float+0x24c>
 80066b2:	ee18 3a10 	vmov	r3, s16
 80066b6:	4652      	mov	r2, sl
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af41 	beq.w	8006546 <_printf_float+0xbe>
 80066c4:	f04f 0800 	mov.w	r8, #0
 80066c8:	f104 091a 	add.w	r9, r4, #26
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	3b01      	subs	r3, #1
 80066d0:	4543      	cmp	r3, r8
 80066d2:	dc09      	bgt.n	80066e8 <_printf_float+0x260>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	079b      	lsls	r3, r3, #30
 80066d8:	f100 8107 	bmi.w	80068ea <_printf_float+0x462>
 80066dc:	68e0      	ldr	r0, [r4, #12]
 80066de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e0:	4298      	cmp	r0, r3
 80066e2:	bfb8      	it	lt
 80066e4:	4618      	movlt	r0, r3
 80066e6:	e730      	b.n	800654a <_printf_float+0xc2>
 80066e8:	2301      	movs	r3, #1
 80066ea:	464a      	mov	r2, r9
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f af27 	beq.w	8006546 <_printf_float+0xbe>
 80066f8:	f108 0801 	add.w	r8, r8, #1
 80066fc:	e7e6      	b.n	80066cc <_printf_float+0x244>
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	dc39      	bgt.n	8006778 <_printf_float+0x2f0>
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <_printf_float+0x2ec>)
 8006706:	2301      	movs	r3, #1
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	f43f af19 	beq.w	8006546 <_printf_float+0xbe>
 8006714:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006718:	4313      	orrs	r3, r2
 800671a:	d102      	bne.n	8006722 <_printf_float+0x29a>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07d9      	lsls	r1, r3, #31
 8006720:	d5d8      	bpl.n	80066d4 <_printf_float+0x24c>
 8006722:	ee18 3a10 	vmov	r3, s16
 8006726:	4652      	mov	r2, sl
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af09 	beq.w	8006546 <_printf_float+0xbe>
 8006734:	f04f 0900 	mov.w	r9, #0
 8006738:	f104 0a1a 	add.w	sl, r4, #26
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	425b      	negs	r3, r3
 8006740:	454b      	cmp	r3, r9
 8006742:	dc01      	bgt.n	8006748 <_printf_float+0x2c0>
 8006744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006746:	e792      	b.n	800666e <_printf_float+0x1e6>
 8006748:	2301      	movs	r3, #1
 800674a:	4652      	mov	r2, sl
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f aef7 	beq.w	8006546 <_printf_float+0xbe>
 8006758:	f109 0901 	add.w	r9, r9, #1
 800675c:	e7ee      	b.n	800673c <_printf_float+0x2b4>
 800675e:	bf00      	nop
 8006760:	7fefffff 	.word	0x7fefffff
 8006764:	0800b768 	.word	0x0800b768
 8006768:	0800b76c 	.word	0x0800b76c
 800676c:	0800b770 	.word	0x0800b770
 8006770:	0800b774 	.word	0x0800b774
 8006774:	0800bb00 	.word	0x0800bb00
 8006778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800677c:	429a      	cmp	r2, r3
 800677e:	bfa8      	it	ge
 8006780:	461a      	movge	r2, r3
 8006782:	2a00      	cmp	r2, #0
 8006784:	4691      	mov	r9, r2
 8006786:	dc37      	bgt.n	80067f8 <_printf_float+0x370>
 8006788:	f04f 0b00 	mov.w	fp, #0
 800678c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006790:	f104 021a 	add.w	r2, r4, #26
 8006794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	eba3 0309 	sub.w	r3, r3, r9
 800679c:	455b      	cmp	r3, fp
 800679e:	dc33      	bgt.n	8006808 <_printf_float+0x380>
 80067a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067a4:	429a      	cmp	r2, r3
 80067a6:	db3b      	blt.n	8006820 <_printf_float+0x398>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07da      	lsls	r2, r3, #31
 80067ac:	d438      	bmi.n	8006820 <_printf_float+0x398>
 80067ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067b2:	eba2 0903 	sub.w	r9, r2, r3
 80067b6:	9b05      	ldr	r3, [sp, #20]
 80067b8:	1ad2      	subs	r2, r2, r3
 80067ba:	4591      	cmp	r9, r2
 80067bc:	bfa8      	it	ge
 80067be:	4691      	movge	r9, r2
 80067c0:	f1b9 0f00 	cmp.w	r9, #0
 80067c4:	dc35      	bgt.n	8006832 <_printf_float+0x3aa>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ce:	f104 0a1a 	add.w	sl, r4, #26
 80067d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	eba3 0309 	sub.w	r3, r3, r9
 80067dc:	4543      	cmp	r3, r8
 80067de:	f77f af79 	ble.w	80066d4 <_printf_float+0x24c>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4652      	mov	r2, sl
 80067e6:	4631      	mov	r1, r6
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b8      	blx	r7
 80067ec:	3001      	adds	r0, #1
 80067ee:	f43f aeaa 	beq.w	8006546 <_printf_float+0xbe>
 80067f2:	f108 0801 	add.w	r8, r8, #1
 80067f6:	e7ec      	b.n	80067d2 <_printf_float+0x34a>
 80067f8:	4613      	mov	r3, r2
 80067fa:	4631      	mov	r1, r6
 80067fc:	4642      	mov	r2, r8
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	d1c0      	bne.n	8006788 <_printf_float+0x300>
 8006806:	e69e      	b.n	8006546 <_printf_float+0xbe>
 8006808:	2301      	movs	r3, #1
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	9205      	str	r2, [sp, #20]
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f ae97 	beq.w	8006546 <_printf_float+0xbe>
 8006818:	9a05      	ldr	r2, [sp, #20]
 800681a:	f10b 0b01 	add.w	fp, fp, #1
 800681e:	e7b9      	b.n	8006794 <_printf_float+0x30c>
 8006820:	ee18 3a10 	vmov	r3, s16
 8006824:	4652      	mov	r2, sl
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	d1be      	bne.n	80067ae <_printf_float+0x326>
 8006830:	e689      	b.n	8006546 <_printf_float+0xbe>
 8006832:	9a05      	ldr	r2, [sp, #20]
 8006834:	464b      	mov	r3, r9
 8006836:	4442      	add	r2, r8
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d1c1      	bne.n	80067c6 <_printf_float+0x33e>
 8006842:	e680      	b.n	8006546 <_printf_float+0xbe>
 8006844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006846:	2a01      	cmp	r2, #1
 8006848:	dc01      	bgt.n	800684e <_printf_float+0x3c6>
 800684a:	07db      	lsls	r3, r3, #31
 800684c:	d53a      	bpl.n	80068c4 <_printf_float+0x43c>
 800684e:	2301      	movs	r3, #1
 8006850:	4642      	mov	r2, r8
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae74 	beq.w	8006546 <_printf_float+0xbe>
 800685e:	ee18 3a10 	vmov	r3, s16
 8006862:	4652      	mov	r2, sl
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f ae6b 	beq.w	8006546 <_printf_float+0xbe>
 8006870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006874:	2200      	movs	r2, #0
 8006876:	2300      	movs	r3, #0
 8006878:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800687c:	f7fa f924 	bl	8000ac8 <__aeabi_dcmpeq>
 8006880:	b9d8      	cbnz	r0, 80068ba <_printf_float+0x432>
 8006882:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006886:	f108 0201 	add.w	r2, r8, #1
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	d10e      	bne.n	80068b2 <_printf_float+0x42a>
 8006894:	e657      	b.n	8006546 <_printf_float+0xbe>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f ae50 	beq.w	8006546 <_printf_float+0xbe>
 80068a6:	f108 0801 	add.w	r8, r8, #1
 80068aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ac:	3b01      	subs	r3, #1
 80068ae:	4543      	cmp	r3, r8
 80068b0:	dcf1      	bgt.n	8006896 <_printf_float+0x40e>
 80068b2:	464b      	mov	r3, r9
 80068b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068b8:	e6da      	b.n	8006670 <_printf_float+0x1e8>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	f104 0a1a 	add.w	sl, r4, #26
 80068c2:	e7f2      	b.n	80068aa <_printf_float+0x422>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4642      	mov	r2, r8
 80068c8:	e7df      	b.n	800688a <_printf_float+0x402>
 80068ca:	2301      	movs	r3, #1
 80068cc:	464a      	mov	r2, r9
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae36 	beq.w	8006546 <_printf_float+0xbe>
 80068da:	f108 0801 	add.w	r8, r8, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	4543      	cmp	r3, r8
 80068e6:	dcf0      	bgt.n	80068ca <_printf_float+0x442>
 80068e8:	e6f8      	b.n	80066dc <_printf_float+0x254>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0919 	add.w	r9, r4, #25
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x456>

080068f4 <_printf_common>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	4616      	mov	r6, r2
 80068fa:	4699      	mov	r9, r3
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006904:	4293      	cmp	r3, r2
 8006906:	bfb8      	it	lt
 8006908:	4613      	movlt	r3, r2
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006910:	4607      	mov	r7, r0
 8006912:	460c      	mov	r4, r1
 8006914:	b10a      	cbz	r2, 800691a <_printf_common+0x26>
 8006916:	3301      	adds	r3, #1
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	0699      	lsls	r1, r3, #26
 800691e:	bf42      	ittt	mi
 8006920:	6833      	ldrmi	r3, [r6, #0]
 8006922:	3302      	addmi	r3, #2
 8006924:	6033      	strmi	r3, [r6, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	f015 0506 	ands.w	r5, r5, #6
 800692c:	d106      	bne.n	800693c <_printf_common+0x48>
 800692e:	f104 0a19 	add.w	sl, r4, #25
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	6832      	ldr	r2, [r6, #0]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dc26      	bgt.n	800698a <_printf_common+0x96>
 800693c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006940:	1e13      	subs	r3, r2, #0
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	bf18      	it	ne
 8006946:	2301      	movne	r3, #1
 8006948:	0692      	lsls	r2, r2, #26
 800694a:	d42b      	bmi.n	80069a4 <_printf_common+0xb0>
 800694c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006950:	4649      	mov	r1, r9
 8006952:	4638      	mov	r0, r7
 8006954:	47c0      	blx	r8
 8006956:	3001      	adds	r0, #1
 8006958:	d01e      	beq.n	8006998 <_printf_common+0xa4>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	2b04      	cmp	r3, #4
 8006964:	bf02      	ittt	eq
 8006966:	68e5      	ldreq	r5, [r4, #12]
 8006968:	6833      	ldreq	r3, [r6, #0]
 800696a:	1aed      	subeq	r5, r5, r3
 800696c:	68a3      	ldr	r3, [r4, #8]
 800696e:	bf0c      	ite	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	2500      	movne	r5, #0
 8006976:	4293      	cmp	r3, r2
 8006978:	bfc4      	itt	gt
 800697a:	1a9b      	subgt	r3, r3, r2
 800697c:	18ed      	addgt	r5, r5, r3
 800697e:	2600      	movs	r6, #0
 8006980:	341a      	adds	r4, #26
 8006982:	42b5      	cmp	r5, r6
 8006984:	d11a      	bne.n	80069bc <_printf_common+0xc8>
 8006986:	2000      	movs	r0, #0
 8006988:	e008      	b.n	800699c <_printf_common+0xa8>
 800698a:	2301      	movs	r3, #1
 800698c:	4652      	mov	r2, sl
 800698e:	4649      	mov	r1, r9
 8006990:	4638      	mov	r0, r7
 8006992:	47c0      	blx	r8
 8006994:	3001      	adds	r0, #1
 8006996:	d103      	bne.n	80069a0 <_printf_common+0xac>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	3501      	adds	r5, #1
 80069a2:	e7c6      	b.n	8006932 <_printf_common+0x3e>
 80069a4:	18e1      	adds	r1, r4, r3
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	2030      	movs	r0, #48	; 0x30
 80069aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ae:	4422      	add	r2, r4
 80069b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7c7      	b.n	800694c <_printf_common+0x58>
 80069bc:	2301      	movs	r3, #1
 80069be:	4622      	mov	r2, r4
 80069c0:	4649      	mov	r1, r9
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d0e6      	beq.n	8006998 <_printf_common+0xa4>
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7d9      	b.n	8006982 <_printf_common+0x8e>
	...

080069d0 <_printf_i>:
 80069d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	7e0f      	ldrb	r7, [r1, #24]
 80069d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d8:	2f78      	cmp	r7, #120	; 0x78
 80069da:	4691      	mov	r9, r2
 80069dc:	4680      	mov	r8, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	469a      	mov	sl, r3
 80069e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069e6:	d807      	bhi.n	80069f8 <_printf_i+0x28>
 80069e8:	2f62      	cmp	r7, #98	; 0x62
 80069ea:	d80a      	bhi.n	8006a02 <_printf_i+0x32>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	f000 80d4 	beq.w	8006b9a <_printf_i+0x1ca>
 80069f2:	2f58      	cmp	r7, #88	; 0x58
 80069f4:	f000 80c0 	beq.w	8006b78 <_printf_i+0x1a8>
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a00:	e03a      	b.n	8006a78 <_printf_i+0xa8>
 8006a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a06:	2b15      	cmp	r3, #21
 8006a08:	d8f6      	bhi.n	80069f8 <_printf_i+0x28>
 8006a0a:	a101      	add	r1, pc, #4	; (adr r1, 8006a10 <_printf_i+0x40>)
 8006a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	080069f9 	.word	0x080069f9
 8006a1c:	080069f9 	.word	0x080069f9
 8006a20:	080069f9 	.word	0x080069f9
 8006a24:	080069f9 	.word	0x080069f9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069f9 	.word	0x080069f9
 8006a30:	080069f9 	.word	0x080069f9
 8006a34:	080069f9 	.word	0x080069f9
 8006a38:	080069f9 	.word	0x080069f9
 8006a3c:	08006b81 	.word	0x08006b81
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006b3b 	.word	0x08006b3b
 8006a48:	080069f9 	.word	0x080069f9
 8006a4c:	080069f9 	.word	0x080069f9
 8006a50:	08006ba3 	.word	0x08006ba3
 8006a54:	080069f9 	.word	0x080069f9
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	080069f9 	.word	0x080069f9
 8006a60:	080069f9 	.word	0x080069f9
 8006a64:	08006b43 	.word	0x08006b43
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e09f      	b.n	8006bbc <_printf_i+0x1ec>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	0607      	lsls	r7, r0, #24
 8006a82:	f103 0104 	add.w	r1, r3, #4
 8006a86:	6029      	str	r1, [r5, #0]
 8006a88:	d501      	bpl.n	8006a8e <_printf_i+0xbe>
 8006a8a:	681e      	ldr	r6, [r3, #0]
 8006a8c:	e003      	b.n	8006a96 <_printf_i+0xc6>
 8006a8e:	0646      	lsls	r6, r0, #25
 8006a90:	d5fb      	bpl.n	8006a8a <_printf_i+0xba>
 8006a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	da03      	bge.n	8006aa2 <_printf_i+0xd2>
 8006a9a:	232d      	movs	r3, #45	; 0x2d
 8006a9c:	4276      	negs	r6, r6
 8006a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa2:	485a      	ldr	r0, [pc, #360]	; (8006c0c <_printf_i+0x23c>)
 8006aa4:	230a      	movs	r3, #10
 8006aa6:	e012      	b.n	8006ace <_printf_i+0xfe>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	1d19      	adds	r1, r3, #4
 8006aae:	6029      	str	r1, [r5, #0]
 8006ab0:	0605      	lsls	r5, r0, #24
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_i+0xe8>
 8006ab4:	681e      	ldr	r6, [r3, #0]
 8006ab6:	e002      	b.n	8006abe <_printf_i+0xee>
 8006ab8:	0641      	lsls	r1, r0, #25
 8006aba:	d5fb      	bpl.n	8006ab4 <_printf_i+0xe4>
 8006abc:	881e      	ldrh	r6, [r3, #0]
 8006abe:	4853      	ldr	r0, [pc, #332]	; (8006c0c <_printf_i+0x23c>)
 8006ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2308      	moveq	r3, #8
 8006ac6:	230a      	movne	r3, #10
 8006ac8:	2100      	movs	r1, #0
 8006aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ace:	6865      	ldr	r5, [r4, #4]
 8006ad0:	60a5      	str	r5, [r4, #8]
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	bfa2      	ittt	ge
 8006ad6:	6821      	ldrge	r1, [r4, #0]
 8006ad8:	f021 0104 	bicge.w	r1, r1, #4
 8006adc:	6021      	strge	r1, [r4, #0]
 8006ade:	b90e      	cbnz	r6, 8006ae4 <_printf_i+0x114>
 8006ae0:	2d00      	cmp	r5, #0
 8006ae2:	d04b      	beq.n	8006b7c <_printf_i+0x1ac>
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006aea:	fb03 6711 	mls	r7, r3, r1, r6
 8006aee:	5dc7      	ldrb	r7, [r0, r7]
 8006af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af4:	4637      	mov	r7, r6
 8006af6:	42bb      	cmp	r3, r7
 8006af8:	460e      	mov	r6, r1
 8006afa:	d9f4      	bls.n	8006ae6 <_printf_i+0x116>
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d10b      	bne.n	8006b18 <_printf_i+0x148>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	07de      	lsls	r6, r3, #31
 8006b04:	d508      	bpl.n	8006b18 <_printf_i+0x148>
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	6861      	ldr	r1, [r4, #4]
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	bfde      	ittt	le
 8006b0e:	2330      	movle	r3, #48	; 0x30
 8006b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b18:	1b52      	subs	r2, r2, r5
 8006b1a:	6122      	str	r2, [r4, #16]
 8006b1c:	f8cd a000 	str.w	sl, [sp]
 8006b20:	464b      	mov	r3, r9
 8006b22:	aa03      	add	r2, sp, #12
 8006b24:	4621      	mov	r1, r4
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7ff fee4 	bl	80068f4 <_printf_common>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d14a      	bne.n	8006bc6 <_printf_i+0x1f6>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	b004      	add	sp, #16
 8006b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f043 0320 	orr.w	r3, r3, #32
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	4833      	ldr	r0, [pc, #204]	; (8006c10 <_printf_i+0x240>)
 8006b44:	2778      	movs	r7, #120	; 0x78
 8006b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	6829      	ldr	r1, [r5, #0]
 8006b4e:	061f      	lsls	r7, r3, #24
 8006b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b54:	d402      	bmi.n	8006b5c <_printf_i+0x18c>
 8006b56:	065f      	lsls	r7, r3, #25
 8006b58:	bf48      	it	mi
 8006b5a:	b2b6      	uxthmi	r6, r6
 8006b5c:	07df      	lsls	r7, r3, #31
 8006b5e:	bf48      	it	mi
 8006b60:	f043 0320 	orrmi.w	r3, r3, #32
 8006b64:	6029      	str	r1, [r5, #0]
 8006b66:	bf48      	it	mi
 8006b68:	6023      	strmi	r3, [r4, #0]
 8006b6a:	b91e      	cbnz	r6, 8006b74 <_printf_i+0x1a4>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	f023 0320 	bic.w	r3, r3, #32
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	2310      	movs	r3, #16
 8006b76:	e7a7      	b.n	8006ac8 <_printf_i+0xf8>
 8006b78:	4824      	ldr	r0, [pc, #144]	; (8006c0c <_printf_i+0x23c>)
 8006b7a:	e7e4      	b.n	8006b46 <_printf_i+0x176>
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	e7bd      	b.n	8006afc <_printf_i+0x12c>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	6826      	ldr	r6, [r4, #0]
 8006b84:	6961      	ldr	r1, [r4, #20]
 8006b86:	1d18      	adds	r0, r3, #4
 8006b88:	6028      	str	r0, [r5, #0]
 8006b8a:	0635      	lsls	r5, r6, #24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0x1c4>
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0x1ca>
 8006b94:	0670      	lsls	r0, r6, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0x1c0>
 8006b98:	8019      	strh	r1, [r3, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	e7bc      	b.n	8006b1c <_printf_i+0x14c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fb0e 	bl	80001d0 <memchr>
 8006bb4:	b108      	cbz	r0, 8006bba <_printf_i+0x1ea>
 8006bb6:	1b40      	subs	r0, r0, r5
 8006bb8:	6060      	str	r0, [r4, #4]
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	e7aa      	b.n	8006b1c <_printf_i+0x14c>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d0ad      	beq.n	8006b30 <_printf_i+0x160>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	d413      	bmi.n	8006c02 <_printf_i+0x232>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	4298      	cmp	r0, r3
 8006be0:	bfb8      	it	lt
 8006be2:	4618      	movlt	r0, r3
 8006be4:	e7a6      	b.n	8006b34 <_printf_i+0x164>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d09d      	beq.n	8006b30 <_printf_i+0x160>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	9903      	ldr	r1, [sp, #12]
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dcf2      	bgt.n	8006be6 <_printf_i+0x216>
 8006c00:	e7eb      	b.n	8006bda <_printf_i+0x20a>
 8006c02:	2500      	movs	r5, #0
 8006c04:	f104 0619 	add.w	r6, r4, #25
 8006c08:	e7f5      	b.n	8006bf6 <_printf_i+0x226>
 8006c0a:	bf00      	nop
 8006c0c:	0800b778 	.word	0x0800b778
 8006c10:	0800b789 	.word	0x0800b789

08006c14 <_scanf_float>:
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	4617      	mov	r7, r2
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	688b      	ldr	r3, [r1, #8]
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c26:	bf83      	ittte	hi
 8006c28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c2c:	195b      	addhi	r3, r3, r5
 8006c2e:	9302      	strhi	r3, [sp, #8]
 8006c30:	2300      	movls	r3, #0
 8006c32:	bf86      	itte	hi
 8006c34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c38:	608b      	strhi	r3, [r1, #8]
 8006c3a:	9302      	strls	r3, [sp, #8]
 8006c3c:	680b      	ldr	r3, [r1, #0]
 8006c3e:	468b      	mov	fp, r1
 8006c40:	2500      	movs	r5, #0
 8006c42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c46:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c4e:	4680      	mov	r8, r0
 8006c50:	460c      	mov	r4, r1
 8006c52:	465e      	mov	r6, fp
 8006c54:	46aa      	mov	sl, r5
 8006c56:	46a9      	mov	r9, r5
 8006c58:	9501      	str	r5, [sp, #4]
 8006c5a:	68a2      	ldr	r2, [r4, #8]
 8006c5c:	b152      	cbz	r2, 8006c74 <_scanf_float+0x60>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b4e      	cmp	r3, #78	; 0x4e
 8006c64:	d864      	bhi.n	8006d30 <_scanf_float+0x11c>
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d83c      	bhi.n	8006ce4 <_scanf_float+0xd0>
 8006c6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c6e:	b2c8      	uxtb	r0, r1
 8006c70:	280e      	cmp	r0, #14
 8006c72:	d93a      	bls.n	8006cea <_scanf_float+0xd6>
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	d003      	beq.n	8006c82 <_scanf_float+0x6e>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c86:	f1ba 0f01 	cmp.w	sl, #1
 8006c8a:	f200 8113 	bhi.w	8006eb4 <_scanf_float+0x2a0>
 8006c8e:	455e      	cmp	r6, fp
 8006c90:	f200 8105 	bhi.w	8006e9e <_scanf_float+0x28a>
 8006c94:	2501      	movs	r5, #1
 8006c96:	4628      	mov	r0, r5
 8006c98:	b007      	add	sp, #28
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ca2:	2a0d      	cmp	r2, #13
 8006ca4:	d8e6      	bhi.n	8006c74 <_scanf_float+0x60>
 8006ca6:	a101      	add	r1, pc, #4	; (adr r1, 8006cac <_scanf_float+0x98>)
 8006ca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cac:	08006deb 	.word	0x08006deb
 8006cb0:	08006c75 	.word	0x08006c75
 8006cb4:	08006c75 	.word	0x08006c75
 8006cb8:	08006c75 	.word	0x08006c75
 8006cbc:	08006e4b 	.word	0x08006e4b
 8006cc0:	08006e23 	.word	0x08006e23
 8006cc4:	08006c75 	.word	0x08006c75
 8006cc8:	08006c75 	.word	0x08006c75
 8006ccc:	08006df9 	.word	0x08006df9
 8006cd0:	08006c75 	.word	0x08006c75
 8006cd4:	08006c75 	.word	0x08006c75
 8006cd8:	08006c75 	.word	0x08006c75
 8006cdc:	08006c75 	.word	0x08006c75
 8006ce0:	08006db1 	.word	0x08006db1
 8006ce4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ce8:	e7db      	b.n	8006ca2 <_scanf_float+0x8e>
 8006cea:	290e      	cmp	r1, #14
 8006cec:	d8c2      	bhi.n	8006c74 <_scanf_float+0x60>
 8006cee:	a001      	add	r0, pc, #4	; (adr r0, 8006cf4 <_scanf_float+0xe0>)
 8006cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cf4:	08006da3 	.word	0x08006da3
 8006cf8:	08006c75 	.word	0x08006c75
 8006cfc:	08006da3 	.word	0x08006da3
 8006d00:	08006e37 	.word	0x08006e37
 8006d04:	08006c75 	.word	0x08006c75
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d8d 	.word	0x08006d8d
 8006d10:	08006d8d 	.word	0x08006d8d
 8006d14:	08006d8d 	.word	0x08006d8d
 8006d18:	08006d8d 	.word	0x08006d8d
 8006d1c:	08006d8d 	.word	0x08006d8d
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006d8d 	.word	0x08006d8d
 8006d30:	2b6e      	cmp	r3, #110	; 0x6e
 8006d32:	d809      	bhi.n	8006d48 <_scanf_float+0x134>
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d8b2      	bhi.n	8006c9e <_scanf_float+0x8a>
 8006d38:	2b54      	cmp	r3, #84	; 0x54
 8006d3a:	d077      	beq.n	8006e2c <_scanf_float+0x218>
 8006d3c:	2b59      	cmp	r3, #89	; 0x59
 8006d3e:	d199      	bne.n	8006c74 <_scanf_float+0x60>
 8006d40:	2d07      	cmp	r5, #7
 8006d42:	d197      	bne.n	8006c74 <_scanf_float+0x60>
 8006d44:	2508      	movs	r5, #8
 8006d46:	e029      	b.n	8006d9c <_scanf_float+0x188>
 8006d48:	2b74      	cmp	r3, #116	; 0x74
 8006d4a:	d06f      	beq.n	8006e2c <_scanf_float+0x218>
 8006d4c:	2b79      	cmp	r3, #121	; 0x79
 8006d4e:	e7f6      	b.n	8006d3e <_scanf_float+0x12a>
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	05c8      	lsls	r0, r1, #23
 8006d54:	d51a      	bpl.n	8006d8c <_scanf_float+0x178>
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d5c:	6021      	str	r1, [r4, #0]
 8006d5e:	f109 0901 	add.w	r9, r9, #1
 8006d62:	b11b      	cbz	r3, 8006d6c <_scanf_float+0x158>
 8006d64:	3b01      	subs	r3, #1
 8006d66:	3201      	adds	r2, #1
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	60a2      	str	r2, [r4, #8]
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	60a3      	str	r3, [r4, #8]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	f340 8084 	ble.w	8006e8c <_scanf_float+0x278>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	e766      	b.n	8006c5a <_scanf_float+0x46>
 8006d8c:	eb1a 0f05 	cmn.w	sl, r5
 8006d90:	f47f af70 	bne.w	8006c74 <_scanf_float+0x60>
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8006da0:	e7e4      	b.n	8006d6c <_scanf_float+0x158>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	0610      	lsls	r0, r2, #24
 8006da6:	f57f af65 	bpl.w	8006c74 <_scanf_float+0x60>
 8006daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dae:	e7f4      	b.n	8006d9a <_scanf_float+0x186>
 8006db0:	f1ba 0f00 	cmp.w	sl, #0
 8006db4:	d10e      	bne.n	8006dd4 <_scanf_float+0x1c0>
 8006db6:	f1b9 0f00 	cmp.w	r9, #0
 8006dba:	d10e      	bne.n	8006dda <_scanf_float+0x1c6>
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006dc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dc6:	d108      	bne.n	8006dda <_scanf_float+0x1c6>
 8006dc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	f04f 0a01 	mov.w	sl, #1
 8006dd2:	e7e3      	b.n	8006d9c <_scanf_float+0x188>
 8006dd4:	f1ba 0f02 	cmp.w	sl, #2
 8006dd8:	d055      	beq.n	8006e86 <_scanf_float+0x272>
 8006dda:	2d01      	cmp	r5, #1
 8006ddc:	d002      	beq.n	8006de4 <_scanf_float+0x1d0>
 8006dde:	2d04      	cmp	r5, #4
 8006de0:	f47f af48 	bne.w	8006c74 <_scanf_float+0x60>
 8006de4:	3501      	adds	r5, #1
 8006de6:	b2ed      	uxtb	r5, r5
 8006de8:	e7d8      	b.n	8006d9c <_scanf_float+0x188>
 8006dea:	f1ba 0f01 	cmp.w	sl, #1
 8006dee:	f47f af41 	bne.w	8006c74 <_scanf_float+0x60>
 8006df2:	f04f 0a02 	mov.w	sl, #2
 8006df6:	e7d1      	b.n	8006d9c <_scanf_float+0x188>
 8006df8:	b97d      	cbnz	r5, 8006e1a <_scanf_float+0x206>
 8006dfa:	f1b9 0f00 	cmp.w	r9, #0
 8006dfe:	f47f af3c 	bne.w	8006c7a <_scanf_float+0x66>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e0c:	f47f af39 	bne.w	8006c82 <_scanf_float+0x6e>
 8006e10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	2501      	movs	r5, #1
 8006e18:	e7c0      	b.n	8006d9c <_scanf_float+0x188>
 8006e1a:	2d03      	cmp	r5, #3
 8006e1c:	d0e2      	beq.n	8006de4 <_scanf_float+0x1d0>
 8006e1e:	2d05      	cmp	r5, #5
 8006e20:	e7de      	b.n	8006de0 <_scanf_float+0x1cc>
 8006e22:	2d02      	cmp	r5, #2
 8006e24:	f47f af26 	bne.w	8006c74 <_scanf_float+0x60>
 8006e28:	2503      	movs	r5, #3
 8006e2a:	e7b7      	b.n	8006d9c <_scanf_float+0x188>
 8006e2c:	2d06      	cmp	r5, #6
 8006e2e:	f47f af21 	bne.w	8006c74 <_scanf_float+0x60>
 8006e32:	2507      	movs	r5, #7
 8006e34:	e7b2      	b.n	8006d9c <_scanf_float+0x188>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	0591      	lsls	r1, r2, #22
 8006e3a:	f57f af1b 	bpl.w	8006c74 <_scanf_float+0x60>
 8006e3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e48:	e7a8      	b.n	8006d9c <_scanf_float+0x188>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e54:	d006      	beq.n	8006e64 <_scanf_float+0x250>
 8006e56:	0550      	lsls	r0, r2, #21
 8006e58:	f57f af0c 	bpl.w	8006c74 <_scanf_float+0x60>
 8006e5c:	f1b9 0f00 	cmp.w	r9, #0
 8006e60:	f43f af0f 	beq.w	8006c82 <_scanf_float+0x6e>
 8006e64:	0591      	lsls	r1, r2, #22
 8006e66:	bf58      	it	pl
 8006e68:	9901      	ldrpl	r1, [sp, #4]
 8006e6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e6e:	bf58      	it	pl
 8006e70:	eba9 0101 	subpl.w	r1, r9, r1
 8006e74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e78:	bf58      	it	pl
 8006e7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	f04f 0900 	mov.w	r9, #0
 8006e84:	e78a      	b.n	8006d9c <_scanf_float+0x188>
 8006e86:	f04f 0a03 	mov.w	sl, #3
 8006e8a:	e787      	b.n	8006d9c <_scanf_float+0x188>
 8006e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e90:	4639      	mov	r1, r7
 8006e92:	4640      	mov	r0, r8
 8006e94:	4798      	blx	r3
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f aedf 	beq.w	8006c5a <_scanf_float+0x46>
 8006e9c:	e6ea      	b.n	8006c74 <_scanf_float+0x60>
 8006e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4798      	blx	r3
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	e6ec      	b.n	8006c8e <_scanf_float+0x7a>
 8006eb4:	1e6b      	subs	r3, r5, #1
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d825      	bhi.n	8006f06 <_scanf_float+0x2f2>
 8006eba:	2d02      	cmp	r5, #2
 8006ebc:	d836      	bhi.n	8006f2c <_scanf_float+0x318>
 8006ebe:	455e      	cmp	r6, fp
 8006ec0:	f67f aee8 	bls.w	8006c94 <_scanf_float+0x80>
 8006ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4798      	blx	r3
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	e7f1      	b.n	8006ebe <_scanf_float+0x2aa>
 8006eda:	9802      	ldr	r0, [sp, #8]
 8006edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8006efa:	f1ba 0f02 	cmp.w	sl, #2
 8006efe:	d1ec      	bne.n	8006eda <_scanf_float+0x2c6>
 8006f00:	3d03      	subs	r5, #3
 8006f02:	b2ed      	uxtb	r5, r5
 8006f04:	1b76      	subs	r6, r6, r5
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	05da      	lsls	r2, r3, #23
 8006f0a:	d52f      	bpl.n	8006f6c <_scanf_float+0x358>
 8006f0c:	055b      	lsls	r3, r3, #21
 8006f0e:	d510      	bpl.n	8006f32 <_scanf_float+0x31e>
 8006f10:	455e      	cmp	r6, fp
 8006f12:	f67f aebf 	bls.w	8006c94 <_scanf_float+0x80>
 8006f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4640      	mov	r0, r8
 8006f22:	4798      	blx	r3
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	e7f1      	b.n	8006f10 <_scanf_float+0x2fc>
 8006f2c:	46aa      	mov	sl, r5
 8006f2e:	9602      	str	r6, [sp, #8]
 8006f30:	e7df      	b.n	8006ef2 <_scanf_float+0x2de>
 8006f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	2965      	cmp	r1, #101	; 0x65
 8006f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	d00c      	beq.n	8006f60 <_scanf_float+0x34c>
 8006f46:	2945      	cmp	r1, #69	; 0x45
 8006f48:	d00a      	beq.n	8006f60 <_scanf_float+0x34c>
 8006f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f4e:	463a      	mov	r2, r7
 8006f50:	4640      	mov	r0, r8
 8006f52:	4798      	blx	r3
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	1eb5      	subs	r5, r6, #2
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f64:	463a      	mov	r2, r7
 8006f66:	4640      	mov	r0, r8
 8006f68:	4798      	blx	r3
 8006f6a:	462e      	mov	r6, r5
 8006f6c:	6825      	ldr	r5, [r4, #0]
 8006f6e:	f015 0510 	ands.w	r5, r5, #16
 8006f72:	d158      	bne.n	8007026 <_scanf_float+0x412>
 8006f74:	7035      	strb	r5, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d11c      	bne.n	8006fbc <_scanf_float+0x3a8>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	454b      	cmp	r3, r9
 8006f86:	eba3 0209 	sub.w	r2, r3, r9
 8006f8a:	d124      	bne.n	8006fd6 <_scanf_float+0x3c2>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4659      	mov	r1, fp
 8006f90:	4640      	mov	r0, r8
 8006f92:	f002 fcf1 	bl	8009978 <_strtod_r>
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	6821      	ldr	r1, [r4, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f011 0f02 	tst.w	r1, #2
 8006fa0:	ec57 6b10 	vmov	r6, r7, d0
 8006fa4:	f103 0204 	add.w	r2, r3, #4
 8006fa8:	d020      	beq.n	8006fec <_scanf_float+0x3d8>
 8006faa:	9903      	ldr	r1, [sp, #12]
 8006fac:	600a      	str	r2, [r1, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	e9c3 6700 	strd	r6, r7, [r3]
 8006fb4:	68e3      	ldr	r3, [r4, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60e3      	str	r3, [r4, #12]
 8006fba:	e66c      	b.n	8006c96 <_scanf_float+0x82>
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0e4      	beq.n	8006f8c <_scanf_float+0x378>
 8006fc2:	9905      	ldr	r1, [sp, #20]
 8006fc4:	230a      	movs	r3, #10
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	3101      	adds	r1, #1
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f002 fd5c 	bl	8009a88 <_strtol_r>
 8006fd0:	9b04      	ldr	r3, [sp, #16]
 8006fd2:	9e05      	ldr	r6, [sp, #20]
 8006fd4:	1ac2      	subs	r2, r0, r3
 8006fd6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fda:	429e      	cmp	r6, r3
 8006fdc:	bf28      	it	cs
 8006fde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006fe2:	4912      	ldr	r1, [pc, #72]	; (800702c <_scanf_float+0x418>)
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f000 f955 	bl	8007294 <siprintf>
 8006fea:	e7cf      	b.n	8006f8c <_scanf_float+0x378>
 8006fec:	f011 0f04 	tst.w	r1, #4
 8006ff0:	9903      	ldr	r1, [sp, #12]
 8006ff2:	600a      	str	r2, [r1, #0]
 8006ff4:	d1db      	bne.n	8006fae <_scanf_float+0x39a>
 8006ff6:	f8d3 8000 	ldr.w	r8, [r3]
 8006ffa:	ee10 2a10 	vmov	r2, s0
 8006ffe:	ee10 0a10 	vmov	r0, s0
 8007002:	463b      	mov	r3, r7
 8007004:	4639      	mov	r1, r7
 8007006:	f7f9 fd91 	bl	8000b2c <__aeabi_dcmpun>
 800700a:	b128      	cbz	r0, 8007018 <_scanf_float+0x404>
 800700c:	4808      	ldr	r0, [pc, #32]	; (8007030 <_scanf_float+0x41c>)
 800700e:	f000 fb2d 	bl	800766c <nanf>
 8007012:	ed88 0a00 	vstr	s0, [r8]
 8007016:	e7cd      	b.n	8006fb4 <_scanf_float+0x3a0>
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 fde4 	bl	8000be8 <__aeabi_d2f>
 8007020:	f8c8 0000 	str.w	r0, [r8]
 8007024:	e7c6      	b.n	8006fb4 <_scanf_float+0x3a0>
 8007026:	2500      	movs	r5, #0
 8007028:	e635      	b.n	8006c96 <_scanf_float+0x82>
 800702a:	bf00      	nop
 800702c:	0800b79a 	.word	0x0800b79a
 8007030:	0800bb48 	.word	0x0800bb48

08007034 <std>:
 8007034:	2300      	movs	r3, #0
 8007036:	b510      	push	{r4, lr}
 8007038:	4604      	mov	r4, r0
 800703a:	e9c0 3300 	strd	r3, r3, [r0]
 800703e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007042:	6083      	str	r3, [r0, #8]
 8007044:	8181      	strh	r1, [r0, #12]
 8007046:	6643      	str	r3, [r0, #100]	; 0x64
 8007048:	81c2      	strh	r2, [r0, #14]
 800704a:	6183      	str	r3, [r0, #24]
 800704c:	4619      	mov	r1, r3
 800704e:	2208      	movs	r2, #8
 8007050:	305c      	adds	r0, #92	; 0x5c
 8007052:	f000 fa45 	bl	80074e0 <memset>
 8007056:	4b0d      	ldr	r3, [pc, #52]	; (800708c <std+0x58>)
 8007058:	6263      	str	r3, [r4, #36]	; 0x24
 800705a:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <std+0x5c>)
 800705c:	62a3      	str	r3, [r4, #40]	; 0x28
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <std+0x60>)
 8007060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007062:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <std+0x64>)
 8007064:	6323      	str	r3, [r4, #48]	; 0x30
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <std+0x68>)
 8007068:	6224      	str	r4, [r4, #32]
 800706a:	429c      	cmp	r4, r3
 800706c:	d006      	beq.n	800707c <std+0x48>
 800706e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007072:	4294      	cmp	r4, r2
 8007074:	d002      	beq.n	800707c <std+0x48>
 8007076:	33d0      	adds	r3, #208	; 0xd0
 8007078:	429c      	cmp	r4, r3
 800707a:	d105      	bne.n	8007088 <std+0x54>
 800707c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f000 baee 	b.w	8007664 <__retarget_lock_init_recursive>
 8007088:	bd10      	pop	{r4, pc}
 800708a:	bf00      	nop
 800708c:	0800732d 	.word	0x0800732d
 8007090:	08007353 	.word	0x08007353
 8007094:	0800738b 	.word	0x0800738b
 8007098:	080073af 	.word	0x080073af
 800709c:	200009c0 	.word	0x200009c0

080070a0 <stdio_exit_handler>:
 80070a0:	4a02      	ldr	r2, [pc, #8]	; (80070ac <stdio_exit_handler+0xc>)
 80070a2:	4903      	ldr	r1, [pc, #12]	; (80070b0 <stdio_exit_handler+0x10>)
 80070a4:	4803      	ldr	r0, [pc, #12]	; (80070b4 <stdio_exit_handler+0x14>)
 80070a6:	f000 b869 	b.w	800717c <_fwalk_sglue>
 80070aa:	bf00      	nop
 80070ac:	2000000c 	.word	0x2000000c
 80070b0:	0800a711 	.word	0x0800a711
 80070b4:	20000018 	.word	0x20000018

080070b8 <cleanup_stdio>:
 80070b8:	6841      	ldr	r1, [r0, #4]
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <cleanup_stdio+0x34>)
 80070bc:	4299      	cmp	r1, r3
 80070be:	b510      	push	{r4, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	d001      	beq.n	80070c8 <cleanup_stdio+0x10>
 80070c4:	f003 fb24 	bl	800a710 <_fflush_r>
 80070c8:	68a1      	ldr	r1, [r4, #8]
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <cleanup_stdio+0x38>)
 80070cc:	4299      	cmp	r1, r3
 80070ce:	d002      	beq.n	80070d6 <cleanup_stdio+0x1e>
 80070d0:	4620      	mov	r0, r4
 80070d2:	f003 fb1d 	bl	800a710 <_fflush_r>
 80070d6:	68e1      	ldr	r1, [r4, #12]
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <cleanup_stdio+0x3c>)
 80070da:	4299      	cmp	r1, r3
 80070dc:	d004      	beq.n	80070e8 <cleanup_stdio+0x30>
 80070de:	4620      	mov	r0, r4
 80070e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e4:	f003 bb14 	b.w	800a710 <_fflush_r>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	bf00      	nop
 80070ec:	200009c0 	.word	0x200009c0
 80070f0:	20000a28 	.word	0x20000a28
 80070f4:	20000a90 	.word	0x20000a90

080070f8 <global_stdio_init.part.0>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <global_stdio_init.part.0+0x30>)
 80070fc:	4c0b      	ldr	r4, [pc, #44]	; (800712c <global_stdio_init.part.0+0x34>)
 80070fe:	4a0c      	ldr	r2, [pc, #48]	; (8007130 <global_stdio_init.part.0+0x38>)
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	4620      	mov	r0, r4
 8007104:	2200      	movs	r2, #0
 8007106:	2104      	movs	r1, #4
 8007108:	f7ff ff94 	bl	8007034 <std>
 800710c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007110:	2201      	movs	r2, #1
 8007112:	2109      	movs	r1, #9
 8007114:	f7ff ff8e 	bl	8007034 <std>
 8007118:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800711c:	2202      	movs	r2, #2
 800711e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007122:	2112      	movs	r1, #18
 8007124:	f7ff bf86 	b.w	8007034 <std>
 8007128:	20000af8 	.word	0x20000af8
 800712c:	200009c0 	.word	0x200009c0
 8007130:	080070a1 	.word	0x080070a1

08007134 <__sfp_lock_acquire>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__sfp_lock_acquire+0x8>)
 8007136:	f000 ba96 	b.w	8007666 <__retarget_lock_acquire_recursive>
 800713a:	bf00      	nop
 800713c:	20000b01 	.word	0x20000b01

08007140 <__sfp_lock_release>:
 8007140:	4801      	ldr	r0, [pc, #4]	; (8007148 <__sfp_lock_release+0x8>)
 8007142:	f000 ba91 	b.w	8007668 <__retarget_lock_release_recursive>
 8007146:	bf00      	nop
 8007148:	20000b01 	.word	0x20000b01

0800714c <__sinit>:
 800714c:	b510      	push	{r4, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	f7ff fff0 	bl	8007134 <__sfp_lock_acquire>
 8007154:	6a23      	ldr	r3, [r4, #32]
 8007156:	b11b      	cbz	r3, 8007160 <__sinit+0x14>
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f7ff bff0 	b.w	8007140 <__sfp_lock_release>
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <__sinit+0x28>)
 8007162:	6223      	str	r3, [r4, #32]
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <__sinit+0x2c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f5      	bne.n	8007158 <__sinit+0xc>
 800716c:	f7ff ffc4 	bl	80070f8 <global_stdio_init.part.0>
 8007170:	e7f2      	b.n	8007158 <__sinit+0xc>
 8007172:	bf00      	nop
 8007174:	080070b9 	.word	0x080070b9
 8007178:	20000af8 	.word	0x20000af8

0800717c <_fwalk_sglue>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4607      	mov	r7, r0
 8007182:	4688      	mov	r8, r1
 8007184:	4614      	mov	r4, r2
 8007186:	2600      	movs	r6, #0
 8007188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800718c:	f1b9 0901 	subs.w	r9, r9, #1
 8007190:	d505      	bpl.n	800719e <_fwalk_sglue+0x22>
 8007192:	6824      	ldr	r4, [r4, #0]
 8007194:	2c00      	cmp	r4, #0
 8007196:	d1f7      	bne.n	8007188 <_fwalk_sglue+0xc>
 8007198:	4630      	mov	r0, r6
 800719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d907      	bls.n	80071b4 <_fwalk_sglue+0x38>
 80071a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071a8:	3301      	adds	r3, #1
 80071aa:	d003      	beq.n	80071b4 <_fwalk_sglue+0x38>
 80071ac:	4629      	mov	r1, r5
 80071ae:	4638      	mov	r0, r7
 80071b0:	47c0      	blx	r8
 80071b2:	4306      	orrs	r6, r0
 80071b4:	3568      	adds	r5, #104	; 0x68
 80071b6:	e7e9      	b.n	800718c <_fwalk_sglue+0x10>

080071b8 <iprintf>:
 80071b8:	b40f      	push	{r0, r1, r2, r3}
 80071ba:	b507      	push	{r0, r1, r2, lr}
 80071bc:	4906      	ldr	r1, [pc, #24]	; (80071d8 <iprintf+0x20>)
 80071be:	ab04      	add	r3, sp, #16
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c6:	6881      	ldr	r1, [r0, #8]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	f002 ffb3 	bl	800a134 <_vfiprintf_r>
 80071ce:	b003      	add	sp, #12
 80071d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d4:	b004      	add	sp, #16
 80071d6:	4770      	bx	lr
 80071d8:	20000064 	.word	0x20000064

080071dc <_puts_r>:
 80071dc:	6a03      	ldr	r3, [r0, #32]
 80071de:	b570      	push	{r4, r5, r6, lr}
 80071e0:	6884      	ldr	r4, [r0, #8]
 80071e2:	4605      	mov	r5, r0
 80071e4:	460e      	mov	r6, r1
 80071e6:	b90b      	cbnz	r3, 80071ec <_puts_r+0x10>
 80071e8:	f7ff ffb0 	bl	800714c <__sinit>
 80071ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d405      	bmi.n	80071fe <_puts_r+0x22>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	0598      	lsls	r0, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_puts_r+0x22>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f000 fa34 	bl	8007666 <__retarget_lock_acquire_recursive>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	0719      	lsls	r1, r3, #28
 8007202:	d513      	bpl.n	800722c <_puts_r+0x50>
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	b18b      	cbz	r3, 800722c <_puts_r+0x50>
 8007208:	3e01      	subs	r6, #1
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007210:	3b01      	subs	r3, #1
 8007212:	60a3      	str	r3, [r4, #8]
 8007214:	b9e9      	cbnz	r1, 8007252 <_puts_r+0x76>
 8007216:	2b00      	cmp	r3, #0
 8007218:	da2e      	bge.n	8007278 <_puts_r+0x9c>
 800721a:	4622      	mov	r2, r4
 800721c:	210a      	movs	r1, #10
 800721e:	4628      	mov	r0, r5
 8007220:	f000 f8c9 	bl	80073b6 <__swbuf_r>
 8007224:	3001      	adds	r0, #1
 8007226:	d007      	beq.n	8007238 <_puts_r+0x5c>
 8007228:	250a      	movs	r5, #10
 800722a:	e007      	b.n	800723c <_puts_r+0x60>
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 f8fe 	bl	8007430 <__swsetup_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	d0e7      	beq.n	8007208 <_puts_r+0x2c>
 8007238:	f04f 35ff 	mov.w	r5, #4294967295
 800723c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800723e:	07da      	lsls	r2, r3, #31
 8007240:	d405      	bmi.n	800724e <_puts_r+0x72>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	059b      	lsls	r3, r3, #22
 8007246:	d402      	bmi.n	800724e <_puts_r+0x72>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f000 fa0d 	bl	8007668 <__retarget_lock_release_recursive>
 800724e:	4628      	mov	r0, r5
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	2b00      	cmp	r3, #0
 8007254:	da04      	bge.n	8007260 <_puts_r+0x84>
 8007256:	69a2      	ldr	r2, [r4, #24]
 8007258:	429a      	cmp	r2, r3
 800725a:	dc06      	bgt.n	800726a <_puts_r+0x8e>
 800725c:	290a      	cmp	r1, #10
 800725e:	d004      	beq.n	800726a <_puts_r+0x8e>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6022      	str	r2, [r4, #0]
 8007266:	7019      	strb	r1, [r3, #0]
 8007268:	e7cf      	b.n	800720a <_puts_r+0x2e>
 800726a:	4622      	mov	r2, r4
 800726c:	4628      	mov	r0, r5
 800726e:	f000 f8a2 	bl	80073b6 <__swbuf_r>
 8007272:	3001      	adds	r0, #1
 8007274:	d1c9      	bne.n	800720a <_puts_r+0x2e>
 8007276:	e7df      	b.n	8007238 <_puts_r+0x5c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	250a      	movs	r5, #10
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	6022      	str	r2, [r4, #0]
 8007280:	701d      	strb	r5, [r3, #0]
 8007282:	e7db      	b.n	800723c <_puts_r+0x60>

08007284 <puts>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <puts+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f7ff bfa7 	b.w	80071dc <_puts_r>
 800728e:	bf00      	nop
 8007290:	20000064 	.word	0x20000064

08007294 <siprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b500      	push	{lr}
 8007298:	b09c      	sub	sp, #112	; 0x70
 800729a:	ab1d      	add	r3, sp, #116	; 0x74
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <siprintf+0x38>)
 80072a6:	9107      	str	r1, [sp, #28]
 80072a8:	9104      	str	r1, [sp, #16]
 80072aa:	4909      	ldr	r1, [pc, #36]	; (80072d0 <siprintf+0x3c>)
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	f002 fc42 	bl	8009b40 <_svfiprintf_r>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	b01c      	add	sp, #112	; 0x70
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	20000064 	.word	0x20000064
 80072d0:	ffff0208 	.word	0xffff0208

080072d4 <siscanf>:
 80072d4:	b40e      	push	{r1, r2, r3}
 80072d6:	b510      	push	{r4, lr}
 80072d8:	b09f      	sub	sp, #124	; 0x7c
 80072da:	ac21      	add	r4, sp, #132	; 0x84
 80072dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80072e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80072ea:	9004      	str	r0, [sp, #16]
 80072ec:	9008      	str	r0, [sp, #32]
 80072ee:	f7f8 ffbf 	bl	8000270 <strlen>
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <siscanf+0x50>)
 80072f4:	9005      	str	r0, [sp, #20]
 80072f6:	9009      	str	r0, [sp, #36]	; 0x24
 80072f8:	930d      	str	r3, [sp, #52]	; 0x34
 80072fa:	480b      	ldr	r0, [pc, #44]	; (8007328 <siscanf+0x54>)
 80072fc:	9a01      	ldr	r2, [sp, #4]
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9403      	str	r4, [sp, #12]
 8007302:	2300      	movs	r3, #0
 8007304:	9311      	str	r3, [sp, #68]	; 0x44
 8007306:	9316      	str	r3, [sp, #88]	; 0x58
 8007308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800730c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007310:	a904      	add	r1, sp, #16
 8007312:	4623      	mov	r3, r4
 8007314:	f002 fd6c 	bl	8009df0 <__ssvfiscanf_r>
 8007318:	b01f      	add	sp, #124	; 0x7c
 800731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731e:	b003      	add	sp, #12
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	0800734f 	.word	0x0800734f
 8007328:	20000064 	.word	0x20000064

0800732c <__sread>:
 800732c:	b510      	push	{r4, lr}
 800732e:	460c      	mov	r4, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	f000 f938 	bl	80075a8 <_read_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	bfab      	itete	ge
 800733c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800733e:	89a3      	ldrhlt	r3, [r4, #12]
 8007340:	181b      	addge	r3, r3, r0
 8007342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007346:	bfac      	ite	ge
 8007348:	6563      	strge	r3, [r4, #84]	; 0x54
 800734a:	81a3      	strhlt	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__seofread>:
 800734e:	2000      	movs	r0, #0
 8007350:	4770      	bx	lr

08007352 <__swrite>:
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	461f      	mov	r7, r3
 8007358:	898b      	ldrh	r3, [r1, #12]
 800735a:	05db      	lsls	r3, r3, #23
 800735c:	4605      	mov	r5, r0
 800735e:	460c      	mov	r4, r1
 8007360:	4616      	mov	r6, r2
 8007362:	d505      	bpl.n	8007370 <__swrite+0x1e>
 8007364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007368:	2302      	movs	r3, #2
 800736a:	2200      	movs	r2, #0
 800736c:	f000 f90a 	bl	8007584 <_lseek_r>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	4632      	mov	r2, r6
 800737e:	463b      	mov	r3, r7
 8007380:	4628      	mov	r0, r5
 8007382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007386:	f000 b931 	b.w	80075ec <_write_r>

0800738a <__sseek>:
 800738a:	b510      	push	{r4, lr}
 800738c:	460c      	mov	r4, r1
 800738e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007392:	f000 f8f7 	bl	8007584 <_lseek_r>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	bf15      	itete	ne
 800739c:	6560      	strne	r0, [r4, #84]	; 0x54
 800739e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073a6:	81a3      	strheq	r3, [r4, #12]
 80073a8:	bf18      	it	ne
 80073aa:	81a3      	strhne	r3, [r4, #12]
 80073ac:	bd10      	pop	{r4, pc}

080073ae <__sclose>:
 80073ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b2:	f000 b8d7 	b.w	8007564 <_close_r>

080073b6 <__swbuf_r>:
 80073b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b8:	460e      	mov	r6, r1
 80073ba:	4614      	mov	r4, r2
 80073bc:	4605      	mov	r5, r0
 80073be:	b118      	cbz	r0, 80073c8 <__swbuf_r+0x12>
 80073c0:	6a03      	ldr	r3, [r0, #32]
 80073c2:	b90b      	cbnz	r3, 80073c8 <__swbuf_r+0x12>
 80073c4:	f7ff fec2 	bl	800714c <__sinit>
 80073c8:	69a3      	ldr	r3, [r4, #24]
 80073ca:	60a3      	str	r3, [r4, #8]
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	071a      	lsls	r2, r3, #28
 80073d0:	d525      	bpl.n	800741e <__swbuf_r+0x68>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	b31b      	cbz	r3, 800741e <__swbuf_r+0x68>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	6922      	ldr	r2, [r4, #16]
 80073da:	1a98      	subs	r0, r3, r2
 80073dc:	6963      	ldr	r3, [r4, #20]
 80073de:	b2f6      	uxtb	r6, r6
 80073e0:	4283      	cmp	r3, r0
 80073e2:	4637      	mov	r7, r6
 80073e4:	dc04      	bgt.n	80073f0 <__swbuf_r+0x3a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f003 f991 	bl	800a710 <_fflush_r>
 80073ee:	b9e0      	cbnz	r0, 800742a <__swbuf_r+0x74>
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	6022      	str	r2, [r4, #0]
 80073fc:	701e      	strb	r6, [r3, #0]
 80073fe:	6962      	ldr	r2, [r4, #20]
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	429a      	cmp	r2, r3
 8007404:	d004      	beq.n	8007410 <__swbuf_r+0x5a>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	07db      	lsls	r3, r3, #31
 800740a:	d506      	bpl.n	800741a <__swbuf_r+0x64>
 800740c:	2e0a      	cmp	r6, #10
 800740e:	d104      	bne.n	800741a <__swbuf_r+0x64>
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f003 f97c 	bl	800a710 <_fflush_r>
 8007418:	b938      	cbnz	r0, 800742a <__swbuf_r+0x74>
 800741a:	4638      	mov	r0, r7
 800741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f805 	bl	8007430 <__swsetup_r>
 8007426:	2800      	cmp	r0, #0
 8007428:	d0d5      	beq.n	80073d6 <__swbuf_r+0x20>
 800742a:	f04f 37ff 	mov.w	r7, #4294967295
 800742e:	e7f4      	b.n	800741a <__swbuf_r+0x64>

08007430 <__swsetup_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <__swsetup_r+0xac>)
 8007434:	4605      	mov	r5, r0
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	460c      	mov	r4, r1
 800743a:	b118      	cbz	r0, 8007444 <__swsetup_r+0x14>
 800743c:	6a03      	ldr	r3, [r0, #32]
 800743e:	b90b      	cbnz	r3, 8007444 <__swsetup_r+0x14>
 8007440:	f7ff fe84 	bl	800714c <__sinit>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800744a:	0718      	lsls	r0, r3, #28
 800744c:	d422      	bmi.n	8007494 <__swsetup_r+0x64>
 800744e:	06d9      	lsls	r1, r3, #27
 8007450:	d407      	bmi.n	8007462 <__swsetup_r+0x32>
 8007452:	2309      	movs	r3, #9
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	e034      	b.n	80074cc <__swsetup_r+0x9c>
 8007462:	0758      	lsls	r0, r3, #29
 8007464:	d512      	bpl.n	800748c <__swsetup_r+0x5c>
 8007466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007468:	b141      	cbz	r1, 800747c <__swsetup_r+0x4c>
 800746a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800746e:	4299      	cmp	r1, r3
 8007470:	d002      	beq.n	8007478 <__swsetup_r+0x48>
 8007472:	4628      	mov	r0, r5
 8007474:	f000 ff7a 	bl	800836c <_free_r>
 8007478:	2300      	movs	r3, #0
 800747a:	6363      	str	r3, [r4, #52]	; 0x34
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	2300      	movs	r3, #0
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f043 0308 	orr.w	r3, r3, #8
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b94b      	cbnz	r3, 80074ac <__swsetup_r+0x7c>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800749e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a2:	d003      	beq.n	80074ac <__swsetup_r+0x7c>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f003 f980 	bl	800a7ac <__smakebuf_r>
 80074ac:	89a0      	ldrh	r0, [r4, #12]
 80074ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b2:	f010 0301 	ands.w	r3, r0, #1
 80074b6:	d00a      	beq.n	80074ce <__swsetup_r+0x9e>
 80074b8:	2300      	movs	r3, #0
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	6963      	ldr	r3, [r4, #20]
 80074be:	425b      	negs	r3, r3
 80074c0:	61a3      	str	r3, [r4, #24]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	b943      	cbnz	r3, 80074d8 <__swsetup_r+0xa8>
 80074c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074ca:	d1c4      	bne.n	8007456 <__swsetup_r+0x26>
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	0781      	lsls	r1, r0, #30
 80074d0:	bf58      	it	pl
 80074d2:	6963      	ldrpl	r3, [r4, #20]
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	e7f4      	b.n	80074c2 <__swsetup_r+0x92>
 80074d8:	2000      	movs	r0, #0
 80074da:	e7f7      	b.n	80074cc <__swsetup_r+0x9c>
 80074dc:	20000064 	.word	0x20000064

080074e0 <memset>:
 80074e0:	4402      	add	r2, r0
 80074e2:	4603      	mov	r3, r0
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d100      	bne.n	80074ea <memset+0xa>
 80074e8:	4770      	bx	lr
 80074ea:	f803 1b01 	strb.w	r1, [r3], #1
 80074ee:	e7f9      	b.n	80074e4 <memset+0x4>

080074f0 <strchr>:
 80074f0:	b2c9      	uxtb	r1, r1
 80074f2:	4603      	mov	r3, r0
 80074f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f8:	b11a      	cbz	r2, 8007502 <strchr+0x12>
 80074fa:	428a      	cmp	r2, r1
 80074fc:	d1f9      	bne.n	80074f2 <strchr+0x2>
 80074fe:	4618      	mov	r0, r3
 8007500:	4770      	bx	lr
 8007502:	2900      	cmp	r1, #0
 8007504:	bf18      	it	ne
 8007506:	2300      	movne	r3, #0
 8007508:	e7f9      	b.n	80074fe <strchr+0xe>

0800750a <strncmp>:
 800750a:	b510      	push	{r4, lr}
 800750c:	b16a      	cbz	r2, 800752a <strncmp+0x20>
 800750e:	3901      	subs	r1, #1
 8007510:	1884      	adds	r4, r0, r2
 8007512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007516:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800751a:	429a      	cmp	r2, r3
 800751c:	d103      	bne.n	8007526 <strncmp+0x1c>
 800751e:	42a0      	cmp	r0, r4
 8007520:	d001      	beq.n	8007526 <strncmp+0x1c>
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1f5      	bne.n	8007512 <strncmp+0x8>
 8007526:	1ad0      	subs	r0, r2, r3
 8007528:	bd10      	pop	{r4, pc}
 800752a:	4610      	mov	r0, r2
 800752c:	e7fc      	b.n	8007528 <strncmp+0x1e>

0800752e <strstr>:
 800752e:	780a      	ldrb	r2, [r1, #0]
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	b96a      	cbnz	r2, 8007550 <strstr+0x22>
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	429a      	cmp	r2, r3
 8007538:	d109      	bne.n	800754e <strstr+0x20>
 800753a:	460c      	mov	r4, r1
 800753c:	4605      	mov	r5, r0
 800753e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f6      	beq.n	8007534 <strstr+0x6>
 8007546:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800754a:	429e      	cmp	r6, r3
 800754c:	d0f7      	beq.n	800753e <strstr+0x10>
 800754e:	3001      	adds	r0, #1
 8007550:	7803      	ldrb	r3, [r0, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ef      	bne.n	8007536 <strstr+0x8>
 8007556:	4618      	mov	r0, r3
 8007558:	e7ec      	b.n	8007534 <strstr+0x6>
	...

0800755c <_localeconv_r>:
 800755c:	4800      	ldr	r0, [pc, #0]	; (8007560 <_localeconv_r+0x4>)
 800755e:	4770      	bx	lr
 8007560:	20000158 	.word	0x20000158

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_close_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fb f973 	bl	800285a <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20000afc 	.word	0x20000afc

08007584 <_lseek_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d07      	ldr	r5, [pc, #28]	; (80075a4 <_lseek_r+0x20>)
 8007588:	4604      	mov	r4, r0
 800758a:	4608      	mov	r0, r1
 800758c:	4611      	mov	r1, r2
 800758e:	2200      	movs	r2, #0
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7fb f988 	bl	80028a8 <_lseek>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_lseek_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_lseek_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20000afc 	.word	0x20000afc

080075a8 <_read_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d07      	ldr	r5, [pc, #28]	; (80075c8 <_read_r+0x20>)
 80075ac:	4604      	mov	r4, r0
 80075ae:	4608      	mov	r0, r1
 80075b0:	4611      	mov	r1, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7fb f932 	bl	8002820 <_read>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_read_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_read_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	20000afc 	.word	0x20000afc

080075cc <_sbrk_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d06      	ldr	r5, [pc, #24]	; (80075e8 <_sbrk_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f7fb f974 	bl	80028c4 <_sbrk>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_sbrk_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_sbrk_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000afc 	.word	0x20000afc

080075ec <_write_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	; (800760c <_write_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7f9 fd1f 	bl	800103e <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_write_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_write_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000afc 	.word	0x20000afc

08007610 <__errno>:
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <__errno+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000064 	.word	0x20000064

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f003 fe72 	bl	800b318 <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	0800bbb4 	.word	0x0800bbb4
 8007658:	0800bbb4 	.word	0x0800bbb4
 800765c:	0800bbb4 	.word	0x0800bbb4
 8007660:	0800bbb8 	.word	0x0800bbb8

08007664 <__retarget_lock_init_recursive>:
 8007664:	4770      	bx	lr

08007666 <__retarget_lock_acquire_recursive>:
 8007666:	4770      	bx	lr

08007668 <__retarget_lock_release_recursive>:
 8007668:	4770      	bx	lr
	...

0800766c <nanf>:
 800766c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007674 <nanf+0x8>
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	7fc00000 	.word	0x7fc00000

08007678 <quorem>:
 8007678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	6903      	ldr	r3, [r0, #16]
 800767e:	690c      	ldr	r4, [r1, #16]
 8007680:	42a3      	cmp	r3, r4
 8007682:	4607      	mov	r7, r0
 8007684:	db7e      	blt.n	8007784 <quorem+0x10c>
 8007686:	3c01      	subs	r4, #1
 8007688:	f101 0814 	add.w	r8, r1, #20
 800768c:	f100 0514 	add.w	r5, r0, #20
 8007690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800769a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800769e:	3301      	adds	r3, #1
 80076a0:	429a      	cmp	r2, r3
 80076a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80076ae:	d331      	bcc.n	8007714 <quorem+0x9c>
 80076b0:	f04f 0e00 	mov.w	lr, #0
 80076b4:	4640      	mov	r0, r8
 80076b6:	46ac      	mov	ip, r5
 80076b8:	46f2      	mov	sl, lr
 80076ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80076be:	b293      	uxth	r3, r2
 80076c0:	fb06 e303 	mla	r3, r6, r3, lr
 80076c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076c8:	0c1a      	lsrs	r2, r3, #16
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ebaa 0303 	sub.w	r3, sl, r3
 80076d0:	f8dc a000 	ldr.w	sl, [ip]
 80076d4:	fa13 f38a 	uxtah	r3, r3, sl
 80076d8:	fb06 220e 	mla	r2, r6, lr, r2
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076e4:	b292      	uxth	r2, r2
 80076e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80076f2:	4581      	cmp	r9, r0
 80076f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f8:	f84c 3b04 	str.w	r3, [ip], #4
 80076fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007700:	d2db      	bcs.n	80076ba <quorem+0x42>
 8007702:	f855 300b 	ldr.w	r3, [r5, fp]
 8007706:	b92b      	cbnz	r3, 8007714 <quorem+0x9c>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	3b04      	subs	r3, #4
 800770c:	429d      	cmp	r5, r3
 800770e:	461a      	mov	r2, r3
 8007710:	d32c      	bcc.n	800776c <quorem+0xf4>
 8007712:	613c      	str	r4, [r7, #16]
 8007714:	4638      	mov	r0, r7
 8007716:	f001 f93b 	bl	8008990 <__mcmp>
 800771a:	2800      	cmp	r0, #0
 800771c:	db22      	blt.n	8007764 <quorem+0xec>
 800771e:	3601      	adds	r6, #1
 8007720:	4629      	mov	r1, r5
 8007722:	2000      	movs	r0, #0
 8007724:	f858 2b04 	ldr.w	r2, [r8], #4
 8007728:	f8d1 c000 	ldr.w	ip, [r1]
 800772c:	b293      	uxth	r3, r2
 800772e:	1ac3      	subs	r3, r0, r3
 8007730:	0c12      	lsrs	r2, r2, #16
 8007732:	fa13 f38c 	uxtah	r3, r3, ip
 8007736:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800773a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800773e:	b29b      	uxth	r3, r3
 8007740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007744:	45c1      	cmp	r9, r8
 8007746:	f841 3b04 	str.w	r3, [r1], #4
 800774a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800774e:	d2e9      	bcs.n	8007724 <quorem+0xac>
 8007750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007754:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007758:	b922      	cbnz	r2, 8007764 <quorem+0xec>
 800775a:	3b04      	subs	r3, #4
 800775c:	429d      	cmp	r5, r3
 800775e:	461a      	mov	r2, r3
 8007760:	d30a      	bcc.n	8007778 <quorem+0x100>
 8007762:	613c      	str	r4, [r7, #16]
 8007764:	4630      	mov	r0, r6
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	3b04      	subs	r3, #4
 8007770:	2a00      	cmp	r2, #0
 8007772:	d1ce      	bne.n	8007712 <quorem+0x9a>
 8007774:	3c01      	subs	r4, #1
 8007776:	e7c9      	b.n	800770c <quorem+0x94>
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	3b04      	subs	r3, #4
 800777c:	2a00      	cmp	r2, #0
 800777e:	d1f0      	bne.n	8007762 <quorem+0xea>
 8007780:	3c01      	subs	r4, #1
 8007782:	e7eb      	b.n	800775c <quorem+0xe4>
 8007784:	2000      	movs	r0, #0
 8007786:	e7ee      	b.n	8007766 <quorem+0xee>

08007788 <_dtoa_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ed2d 8b04 	vpush	{d8-d9}
 8007790:	69c5      	ldr	r5, [r0, #28]
 8007792:	b093      	sub	sp, #76	; 0x4c
 8007794:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007798:	ec57 6b10 	vmov	r6, r7, d0
 800779c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077a0:	9107      	str	r1, [sp, #28]
 80077a2:	4604      	mov	r4, r0
 80077a4:	920a      	str	r2, [sp, #40]	; 0x28
 80077a6:	930d      	str	r3, [sp, #52]	; 0x34
 80077a8:	b975      	cbnz	r5, 80077c8 <_dtoa_r+0x40>
 80077aa:	2010      	movs	r0, #16
 80077ac:	f7fe fd18 	bl	80061e0 <malloc>
 80077b0:	4602      	mov	r2, r0
 80077b2:	61e0      	str	r0, [r4, #28]
 80077b4:	b920      	cbnz	r0, 80077c0 <_dtoa_r+0x38>
 80077b6:	4bae      	ldr	r3, [pc, #696]	; (8007a70 <_dtoa_r+0x2e8>)
 80077b8:	21ef      	movs	r1, #239	; 0xef
 80077ba:	48ae      	ldr	r0, [pc, #696]	; (8007a74 <_dtoa_r+0x2ec>)
 80077bc:	f003 f8f8 	bl	800a9b0 <__assert_func>
 80077c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077c4:	6005      	str	r5, [r0, #0]
 80077c6:	60c5      	str	r5, [r0, #12]
 80077c8:	69e3      	ldr	r3, [r4, #28]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	b151      	cbz	r1, 80077e4 <_dtoa_r+0x5c>
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	604a      	str	r2, [r1, #4]
 80077d2:	2301      	movs	r3, #1
 80077d4:	4093      	lsls	r3, r2
 80077d6:	608b      	str	r3, [r1, #8]
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fe53 	bl	8008484 <_Bfree>
 80077de:	69e3      	ldr	r3, [r4, #28]
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	1e3b      	subs	r3, r7, #0
 80077e6:	bfbb      	ittet	lt
 80077e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	9303      	strlt	r3, [sp, #12]
 80077ee:	2300      	movge	r3, #0
 80077f0:	2201      	movlt	r2, #1
 80077f2:	bfac      	ite	ge
 80077f4:	f8c8 3000 	strge.w	r3, [r8]
 80077f8:	f8c8 2000 	strlt.w	r2, [r8]
 80077fc:	4b9e      	ldr	r3, [pc, #632]	; (8007a78 <_dtoa_r+0x2f0>)
 80077fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007802:	ea33 0308 	bics.w	r3, r3, r8
 8007806:	d11b      	bne.n	8007840 <_dtoa_r+0xb8>
 8007808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800780a:	f242 730f 	movw	r3, #9999	; 0x270f
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007814:	4333      	orrs	r3, r6
 8007816:	f000 8593 	beq.w	8008340 <_dtoa_r+0xbb8>
 800781a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800781c:	b963      	cbnz	r3, 8007838 <_dtoa_r+0xb0>
 800781e:	4b97      	ldr	r3, [pc, #604]	; (8007a7c <_dtoa_r+0x2f4>)
 8007820:	e027      	b.n	8007872 <_dtoa_r+0xea>
 8007822:	4b97      	ldr	r3, [pc, #604]	; (8007a80 <_dtoa_r+0x2f8>)
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	9800      	ldr	r0, [sp, #0]
 800782e:	b013      	add	sp, #76	; 0x4c
 8007830:	ecbd 8b04 	vpop	{d8-d9}
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	4b90      	ldr	r3, [pc, #576]	; (8007a7c <_dtoa_r+0x2f4>)
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	3303      	adds	r3, #3
 800783e:	e7f3      	b.n	8007828 <_dtoa_r+0xa0>
 8007840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	ec51 0b17 	vmov	r0, r1, d7
 800784a:	eeb0 8a47 	vmov.f32	s16, s14
 800784e:	eef0 8a67 	vmov.f32	s17, s15
 8007852:	2300      	movs	r3, #0
 8007854:	f7f9 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8007858:	4681      	mov	r9, r0
 800785a:	b160      	cbz	r0, 8007876 <_dtoa_r+0xee>
 800785c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800785e:	2301      	movs	r3, #1
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8568 	beq.w	800833a <_dtoa_r+0xbb2>
 800786a:	4b86      	ldr	r3, [pc, #536]	; (8007a84 <_dtoa_r+0x2fc>)
 800786c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	e7da      	b.n	800782c <_dtoa_r+0xa4>
 8007876:	aa10      	add	r2, sp, #64	; 0x40
 8007878:	a911      	add	r1, sp, #68	; 0x44
 800787a:	4620      	mov	r0, r4
 800787c:	eeb0 0a48 	vmov.f32	s0, s16
 8007880:	eef0 0a68 	vmov.f32	s1, s17
 8007884:	f001 f99a 	bl	8008bbc <__d2b>
 8007888:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800788c:	4682      	mov	sl, r0
 800788e:	2d00      	cmp	r5, #0
 8007890:	d07f      	beq.n	8007992 <_dtoa_r+0x20a>
 8007892:	ee18 3a90 	vmov	r3, s17
 8007896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800789a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800789e:	ec51 0b18 	vmov	r0, r1, d8
 80078a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80078ae:	4619      	mov	r1, r3
 80078b0:	2200      	movs	r2, #0
 80078b2:	4b75      	ldr	r3, [pc, #468]	; (8007a88 <_dtoa_r+0x300>)
 80078b4:	f7f8 fce8 	bl	8000288 <__aeabi_dsub>
 80078b8:	a367      	add	r3, pc, #412	; (adr r3, 8007a58 <_dtoa_r+0x2d0>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fe9b 	bl	80005f8 <__aeabi_dmul>
 80078c2:	a367      	add	r3, pc, #412	; (adr r3, 8007a60 <_dtoa_r+0x2d8>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f8 fce0 	bl	800028c <__adddf3>
 80078cc:	4606      	mov	r6, r0
 80078ce:	4628      	mov	r0, r5
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f8 fe27 	bl	8000524 <__aeabi_i2d>
 80078d6:	a364      	add	r3, pc, #400	; (adr r3, 8007a68 <_dtoa_r+0x2e0>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f8 fe8c 	bl	80005f8 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	f7f9 f932 	bl	8000b58 <__aeabi_d2iz>
 80078f4:	2200      	movs	r2, #0
 80078f6:	4683      	mov	fp, r0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f9 f8ed 	bl	8000adc <__aeabi_dcmplt>
 8007902:	b148      	cbz	r0, 8007918 <_dtoa_r+0x190>
 8007904:	4658      	mov	r0, fp
 8007906:	f7f8 fe0d 	bl	8000524 <__aeabi_i2d>
 800790a:	4632      	mov	r2, r6
 800790c:	463b      	mov	r3, r7
 800790e:	f7f9 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8007912:	b908      	cbnz	r0, 8007918 <_dtoa_r+0x190>
 8007914:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007918:	f1bb 0f16 	cmp.w	fp, #22
 800791c:	d857      	bhi.n	80079ce <_dtoa_r+0x246>
 800791e:	4b5b      	ldr	r3, [pc, #364]	; (8007a8c <_dtoa_r+0x304>)
 8007920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	ec51 0b18 	vmov	r0, r1, d8
 800792c:	f7f9 f8d6 	bl	8000adc <__aeabi_dcmplt>
 8007930:	2800      	cmp	r0, #0
 8007932:	d04e      	beq.n	80079d2 <_dtoa_r+0x24a>
 8007934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007938:	2300      	movs	r3, #0
 800793a:	930c      	str	r3, [sp, #48]	; 0x30
 800793c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800793e:	1b5b      	subs	r3, r3, r5
 8007940:	1e5a      	subs	r2, r3, #1
 8007942:	bf45      	ittet	mi
 8007944:	f1c3 0301 	rsbmi	r3, r3, #1
 8007948:	9305      	strmi	r3, [sp, #20]
 800794a:	2300      	movpl	r3, #0
 800794c:	2300      	movmi	r3, #0
 800794e:	9206      	str	r2, [sp, #24]
 8007950:	bf54      	ite	pl
 8007952:	9305      	strpl	r3, [sp, #20]
 8007954:	9306      	strmi	r3, [sp, #24]
 8007956:	f1bb 0f00 	cmp.w	fp, #0
 800795a:	db3c      	blt.n	80079d6 <_dtoa_r+0x24e>
 800795c:	9b06      	ldr	r3, [sp, #24]
 800795e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007962:	445b      	add	r3, fp
 8007964:	9306      	str	r3, [sp, #24]
 8007966:	2300      	movs	r3, #0
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	9b07      	ldr	r3, [sp, #28]
 800796c:	2b09      	cmp	r3, #9
 800796e:	d868      	bhi.n	8007a42 <_dtoa_r+0x2ba>
 8007970:	2b05      	cmp	r3, #5
 8007972:	bfc4      	itt	gt
 8007974:	3b04      	subgt	r3, #4
 8007976:	9307      	strgt	r3, [sp, #28]
 8007978:	9b07      	ldr	r3, [sp, #28]
 800797a:	f1a3 0302 	sub.w	r3, r3, #2
 800797e:	bfcc      	ite	gt
 8007980:	2500      	movgt	r5, #0
 8007982:	2501      	movle	r5, #1
 8007984:	2b03      	cmp	r3, #3
 8007986:	f200 8085 	bhi.w	8007a94 <_dtoa_r+0x30c>
 800798a:	e8df f003 	tbb	[pc, r3]
 800798e:	3b2e      	.short	0x3b2e
 8007990:	5839      	.short	0x5839
 8007992:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007996:	441d      	add	r5, r3
 8007998:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800799c:	2b20      	cmp	r3, #32
 800799e:	bfc1      	itttt	gt
 80079a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80079a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80079ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079b0:	bfd6      	itet	le
 80079b2:	f1c3 0320 	rsble	r3, r3, #32
 80079b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80079ba:	fa06 f003 	lslle.w	r0, r6, r3
 80079be:	f7f8 fda1 	bl	8000504 <__aeabi_ui2d>
 80079c2:	2201      	movs	r2, #1
 80079c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079c8:	3d01      	subs	r5, #1
 80079ca:	920e      	str	r2, [sp, #56]	; 0x38
 80079cc:	e76f      	b.n	80078ae <_dtoa_r+0x126>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7b3      	b.n	800793a <_dtoa_r+0x1b2>
 80079d2:	900c      	str	r0, [sp, #48]	; 0x30
 80079d4:	e7b2      	b.n	800793c <_dtoa_r+0x1b4>
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	eba3 030b 	sub.w	r3, r3, fp
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	f1cb 0300 	rsb	r3, fp, #0
 80079e2:	9308      	str	r3, [sp, #32]
 80079e4:	2300      	movs	r3, #0
 80079e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e8:	e7bf      	b.n	800796a <_dtoa_r+0x1e2>
 80079ea:	2300      	movs	r3, #0
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dc52      	bgt.n	8007a9a <_dtoa_r+0x312>
 80079f4:	2301      	movs	r3, #1
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	461a      	mov	r2, r3
 80079fc:	920a      	str	r2, [sp, #40]	; 0x28
 80079fe:	e00b      	b.n	8007a18 <_dtoa_r+0x290>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7f3      	b.n	80079ec <_dtoa_r+0x264>
 8007a04:	2300      	movs	r3, #0
 8007a06:	9309      	str	r3, [sp, #36]	; 0x24
 8007a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0a:	445b      	add	r3, fp
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	bfb8      	it	lt
 8007a16:	2301      	movlt	r3, #1
 8007a18:	69e0      	ldr	r0, [r4, #28]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	f102 0614 	add.w	r6, r2, #20
 8007a22:	429e      	cmp	r6, r3
 8007a24:	d93d      	bls.n	8007aa2 <_dtoa_r+0x31a>
 8007a26:	6041      	str	r1, [r0, #4]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fceb 	bl	8008404 <_Balloc>
 8007a2e:	9000      	str	r0, [sp, #0]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d139      	bne.n	8007aa8 <_dtoa_r+0x320>
 8007a34:	4b16      	ldr	r3, [pc, #88]	; (8007a90 <_dtoa_r+0x308>)
 8007a36:	4602      	mov	r2, r0
 8007a38:	f240 11af 	movw	r1, #431	; 0x1af
 8007a3c:	e6bd      	b.n	80077ba <_dtoa_r+0x32>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e7e1      	b.n	8007a06 <_dtoa_r+0x27e>
 8007a42:	2501      	movs	r5, #1
 8007a44:	2300      	movs	r3, #0
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	9509      	str	r5, [sp, #36]	; 0x24
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2312      	movs	r3, #18
 8007a56:	e7d1      	b.n	80079fc <_dtoa_r+0x274>
 8007a58:	636f4361 	.word	0x636f4361
 8007a5c:	3fd287a7 	.word	0x3fd287a7
 8007a60:	8b60c8b3 	.word	0x8b60c8b3
 8007a64:	3fc68a28 	.word	0x3fc68a28
 8007a68:	509f79fb 	.word	0x509f79fb
 8007a6c:	3fd34413 	.word	0x3fd34413
 8007a70:	0800b7ac 	.word	0x0800b7ac
 8007a74:	0800b7c3 	.word	0x0800b7c3
 8007a78:	7ff00000 	.word	0x7ff00000
 8007a7c:	0800b7a8 	.word	0x0800b7a8
 8007a80:	0800b79f 	.word	0x0800b79f
 8007a84:	0800bb01 	.word	0x0800bb01
 8007a88:	3ff80000 	.word	0x3ff80000
 8007a8c:	0800b8b0 	.word	0x0800b8b0
 8007a90:	0800b81b 	.word	0x0800b81b
 8007a94:	2301      	movs	r3, #1
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
 8007a98:	e7d7      	b.n	8007a4a <_dtoa_r+0x2c2>
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	e7ba      	b.n	8007a18 <_dtoa_r+0x290>
 8007aa2:	3101      	adds	r1, #1
 8007aa4:	0052      	lsls	r2, r2, #1
 8007aa6:	e7ba      	b.n	8007a1e <_dtoa_r+0x296>
 8007aa8:	69e3      	ldr	r3, [r4, #28]
 8007aaa:	9a00      	ldr	r2, [sp, #0]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	2b0e      	cmp	r3, #14
 8007ab2:	f200 80a8 	bhi.w	8007c06 <_dtoa_r+0x47e>
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	f000 80a5 	beq.w	8007c06 <_dtoa_r+0x47e>
 8007abc:	f1bb 0f00 	cmp.w	fp, #0
 8007ac0:	dd38      	ble.n	8007b34 <_dtoa_r+0x3ac>
 8007ac2:	4bc0      	ldr	r3, [pc, #768]	; (8007dc4 <_dtoa_r+0x63c>)
 8007ac4:	f00b 020f 	and.w	r2, fp, #15
 8007ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007acc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ad0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ad4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ad8:	d019      	beq.n	8007b0e <_dtoa_r+0x386>
 8007ada:	4bbb      	ldr	r3, [pc, #748]	; (8007dc8 <_dtoa_r+0x640>)
 8007adc:	ec51 0b18 	vmov	r0, r1, d8
 8007ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ae4:	f7f8 feb2 	bl	800084c <__aeabi_ddiv>
 8007ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aec:	f008 080f 	and.w	r8, r8, #15
 8007af0:	2503      	movs	r5, #3
 8007af2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007dc8 <_dtoa_r+0x640>
 8007af6:	f1b8 0f00 	cmp.w	r8, #0
 8007afa:	d10a      	bne.n	8007b12 <_dtoa_r+0x38a>
 8007afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b00:	4632      	mov	r2, r6
 8007b02:	463b      	mov	r3, r7
 8007b04:	f7f8 fea2 	bl	800084c <__aeabi_ddiv>
 8007b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b0c:	e02b      	b.n	8007b66 <_dtoa_r+0x3de>
 8007b0e:	2502      	movs	r5, #2
 8007b10:	e7ef      	b.n	8007af2 <_dtoa_r+0x36a>
 8007b12:	f018 0f01 	tst.w	r8, #1
 8007b16:	d008      	beq.n	8007b2a <_dtoa_r+0x3a2>
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	3501      	adds	r5, #1
 8007b26:	4606      	mov	r6, r0
 8007b28:	460f      	mov	r7, r1
 8007b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b2e:	f109 0908 	add.w	r9, r9, #8
 8007b32:	e7e0      	b.n	8007af6 <_dtoa_r+0x36e>
 8007b34:	f000 809f 	beq.w	8007c76 <_dtoa_r+0x4ee>
 8007b38:	f1cb 0600 	rsb	r6, fp, #0
 8007b3c:	4ba1      	ldr	r3, [pc, #644]	; (8007dc4 <_dtoa_r+0x63c>)
 8007b3e:	4fa2      	ldr	r7, [pc, #648]	; (8007dc8 <_dtoa_r+0x640>)
 8007b40:	f006 020f 	and.w	r2, r6, #15
 8007b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	ec51 0b18 	vmov	r0, r1, d8
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b58:	1136      	asrs	r6, r6, #4
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2502      	movs	r5, #2
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	d17e      	bne.n	8007c60 <_dtoa_r+0x4d8>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d0      	bne.n	8007b08 <_dtoa_r+0x380>
 8007b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8084 	beq.w	8007c7a <_dtoa_r+0x4f2>
 8007b72:	4b96      	ldr	r3, [pc, #600]	; (8007dcc <_dtoa_r+0x644>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d07b      	beq.n	8007c7a <_dtoa_r+0x4f2>
 8007b82:	9b04      	ldr	r3, [sp, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d078      	beq.n	8007c7a <_dtoa_r+0x4f2>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dd39      	ble.n	8007c02 <_dtoa_r+0x47a>
 8007b8e:	4b90      	ldr	r3, [pc, #576]	; (8007dd0 <_dtoa_r+0x648>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	4640      	mov	r0, r8
 8007b94:	4649      	mov	r1, r9
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b9e:	9e01      	ldr	r6, [sp, #4]
 8007ba0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7f8 fcba 	bl	8000524 <__aeabi_i2d>
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	4b86      	ldr	r3, [pc, #536]	; (8007dd4 <_dtoa_r+0x64c>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f7f8 fb66 	bl	800028c <__adddf3>
 8007bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d158      	bne.n	8007c80 <_dtoa_r+0x4f8>
 8007bce:	4b82      	ldr	r3, [pc, #520]	; (8007dd8 <_dtoa_r+0x650>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bde:	4680      	mov	r8, r0
 8007be0:	4689      	mov	r9, r1
 8007be2:	f7f8 ff99 	bl	8000b18 <__aeabi_dcmpgt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f040 8296 	bne.w	8008118 <_dtoa_r+0x990>
 8007bec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 ff70 	bl	8000adc <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 8289 	bne.w	8008114 <_dtoa_r+0x98c>
 8007c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f2c0 814e 	blt.w	8007eaa <_dtoa_r+0x722>
 8007c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c12:	f300 814a 	bgt.w	8007eaa <_dtoa_r+0x722>
 8007c16:	4b6b      	ldr	r3, [pc, #428]	; (8007dc4 <_dtoa_r+0x63c>)
 8007c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f280 80dc 	bge.w	8007de0 <_dtoa_r+0x658>
 8007c28:	9b04      	ldr	r3, [sp, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f300 80d8 	bgt.w	8007de0 <_dtoa_r+0x658>
 8007c30:	f040 826f 	bne.w	8008112 <_dtoa_r+0x98a>
 8007c34:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <_dtoa_r+0x650>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8007c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c44:	f7f8 ff5e 	bl	8000b04 <__aeabi_dcmpge>
 8007c48:	9e04      	ldr	r6, [sp, #16]
 8007c4a:	4637      	mov	r7, r6
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f040 8245 	bne.w	80080dc <_dtoa_r+0x954>
 8007c52:	9d00      	ldr	r5, [sp, #0]
 8007c54:	2331      	movs	r3, #49	; 0x31
 8007c56:	f805 3b01 	strb.w	r3, [r5], #1
 8007c5a:	f10b 0b01 	add.w	fp, fp, #1
 8007c5e:	e241      	b.n	80080e4 <_dtoa_r+0x95c>
 8007c60:	07f2      	lsls	r2, r6, #31
 8007c62:	d505      	bpl.n	8007c70 <_dtoa_r+0x4e8>
 8007c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	2301      	movs	r3, #1
 8007c70:	1076      	asrs	r6, r6, #1
 8007c72:	3708      	adds	r7, #8
 8007c74:	e773      	b.n	8007b5e <_dtoa_r+0x3d6>
 8007c76:	2502      	movs	r5, #2
 8007c78:	e775      	b.n	8007b66 <_dtoa_r+0x3de>
 8007c7a:	9e04      	ldr	r6, [sp, #16]
 8007c7c:	465f      	mov	r7, fp
 8007c7e:	e792      	b.n	8007ba6 <_dtoa_r+0x41e>
 8007c80:	9900      	ldr	r1, [sp, #0]
 8007c82:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <_dtoa_r+0x63c>)
 8007c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c88:	4431      	add	r1, r6
 8007c8a:	9102      	str	r1, [sp, #8]
 8007c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8e:	eeb0 9a47 	vmov.f32	s18, s14
 8007c92:	eef0 9a67 	vmov.f32	s19, s15
 8007c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d044      	beq.n	8007d2c <_dtoa_r+0x5a4>
 8007ca2:	494e      	ldr	r1, [pc, #312]	; (8007ddc <_dtoa_r+0x654>)
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f7f8 fdd1 	bl	800084c <__aeabi_ddiv>
 8007caa:	ec53 2b19 	vmov	r2, r3, d9
 8007cae:	f7f8 faeb 	bl	8000288 <__aeabi_dsub>
 8007cb2:	9d00      	ldr	r5, [sp, #0]
 8007cb4:	ec41 0b19 	vmov	d9, r0, r1
 8007cb8:	4649      	mov	r1, r9
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7f8 ff4c 	bl	8000b58 <__aeabi_d2iz>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	f7f8 fc2f 	bl	8000524 <__aeabi_i2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	3630      	adds	r6, #48	; 0x30
 8007cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd8:	ec53 2b19 	vmov	r2, r3, d9
 8007cdc:	4680      	mov	r8, r0
 8007cde:	4689      	mov	r9, r1
 8007ce0:	f7f8 fefc 	bl	8000adc <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d164      	bne.n	8007db2 <_dtoa_r+0x62a>
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	4937      	ldr	r1, [pc, #220]	; (8007dcc <_dtoa_r+0x644>)
 8007cee:	2000      	movs	r0, #0
 8007cf0:	f7f8 faca 	bl	8000288 <__aeabi_dsub>
 8007cf4:	ec53 2b19 	vmov	r2, r3, d9
 8007cf8:	f7f8 fef0 	bl	8000adc <__aeabi_dcmplt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f040 80b6 	bne.w	8007e6e <_dtoa_r+0x6e6>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	429d      	cmp	r5, r3
 8007d06:	f43f af7c 	beq.w	8007c02 <_dtoa_r+0x47a>
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <_dtoa_r+0x648>)
 8007d0c:	ec51 0b19 	vmov	r0, r1, d9
 8007d10:	2200      	movs	r2, #0
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	4b2e      	ldr	r3, [pc, #184]	; (8007dd0 <_dtoa_r+0x648>)
 8007d18:	ec41 0b19 	vmov	d9, r0, r1
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fc69 	bl	80005f8 <__aeabi_dmul>
 8007d26:	4680      	mov	r8, r0
 8007d28:	4689      	mov	r9, r1
 8007d2a:	e7c5      	b.n	8007cb8 <_dtoa_r+0x530>
 8007d2c:	ec51 0b17 	vmov	r0, r1, d7
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	9b02      	ldr	r3, [sp, #8]
 8007d36:	9d00      	ldr	r5, [sp, #0]
 8007d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d3a:	ec41 0b19 	vmov	d9, r0, r1
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4640      	mov	r0, r8
 8007d42:	f7f8 ff09 	bl	8000b58 <__aeabi_d2iz>
 8007d46:	4606      	mov	r6, r0
 8007d48:	f7f8 fbec 	bl	8000524 <__aeabi_i2d>
 8007d4c:	3630      	adds	r6, #48	; 0x30
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 fa97 	bl	8000288 <__aeabi_dsub>
 8007d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	429d      	cmp	r5, r3
 8007d62:	4680      	mov	r8, r0
 8007d64:	4689      	mov	r9, r1
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	d124      	bne.n	8007db6 <_dtoa_r+0x62e>
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <_dtoa_r+0x654>)
 8007d6e:	ec51 0b19 	vmov	r0, r1, d9
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	f7f8 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d173      	bne.n	8007e6e <_dtoa_r+0x6e6>
 8007d86:	ec53 2b19 	vmov	r2, r3, d9
 8007d8a:	4914      	ldr	r1, [pc, #80]	; (8007ddc <_dtoa_r+0x654>)
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f7f8 fa7b 	bl	8000288 <__aeabi_dsub>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f43f af2f 	beq.w	8007c02 <_dtoa_r+0x47a>
 8007da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007da6:	1e6b      	subs	r3, r5, #1
 8007da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dae:	2b30      	cmp	r3, #48	; 0x30
 8007db0:	d0f8      	beq.n	8007da4 <_dtoa_r+0x61c>
 8007db2:	46bb      	mov	fp, r7
 8007db4:	e04a      	b.n	8007e4c <_dtoa_r+0x6c4>
 8007db6:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <_dtoa_r+0x648>)
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	e7bd      	b.n	8007d3e <_dtoa_r+0x5b6>
 8007dc2:	bf00      	nop
 8007dc4:	0800b8b0 	.word	0x0800b8b0
 8007dc8:	0800b888 	.word	0x0800b888
 8007dcc:	3ff00000 	.word	0x3ff00000
 8007dd0:	40240000 	.word	0x40240000
 8007dd4:	401c0000 	.word	0x401c0000
 8007dd8:	40140000 	.word	0x40140000
 8007ddc:	3fe00000 	.word	0x3fe00000
 8007de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007de4:	9d00      	ldr	r5, [sp, #0]
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	4630      	mov	r0, r6
 8007dec:	4639      	mov	r1, r7
 8007dee:	f7f8 fd2d 	bl	800084c <__aeabi_ddiv>
 8007df2:	f7f8 feb1 	bl	8000b58 <__aeabi_d2iz>
 8007df6:	9001      	str	r0, [sp, #4]
 8007df8:	f7f8 fb94 	bl	8000524 <__aeabi_i2d>
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fa3c 	bl	8000288 <__aeabi_dsub>
 8007e10:	9e01      	ldr	r6, [sp, #4]
 8007e12:	9f04      	ldr	r7, [sp, #16]
 8007e14:	3630      	adds	r6, #48	; 0x30
 8007e16:	f805 6b01 	strb.w	r6, [r5], #1
 8007e1a:	9e00      	ldr	r6, [sp, #0]
 8007e1c:	1bae      	subs	r6, r5, r6
 8007e1e:	42b7      	cmp	r7, r6
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	d134      	bne.n	8007e90 <_dtoa_r+0x708>
 8007e26:	f7f8 fa31 	bl	800028c <__adddf3>
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	f7f8 fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8007e36:	b9c8      	cbnz	r0, 8007e6c <_dtoa_r+0x6e4>
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	b110      	cbz	r0, 8007e4c <_dtoa_r+0x6c4>
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	07db      	lsls	r3, r3, #31
 8007e4a:	d40f      	bmi.n	8007e6c <_dtoa_r+0x6e4>
 8007e4c:	4651      	mov	r1, sl
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fb18 	bl	8008484 <_Bfree>
 8007e54:	2300      	movs	r3, #0
 8007e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e58:	702b      	strb	r3, [r5, #0]
 8007e5a:	f10b 0301 	add.w	r3, fp, #1
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f43f ace2 	beq.w	800782c <_dtoa_r+0xa4>
 8007e68:	601d      	str	r5, [r3, #0]
 8007e6a:	e4df      	b.n	800782c <_dtoa_r+0xa4>
 8007e6c:	465f      	mov	r7, fp
 8007e6e:	462b      	mov	r3, r5
 8007e70:	461d      	mov	r5, r3
 8007e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e76:	2a39      	cmp	r2, #57	; 0x39
 8007e78:	d106      	bne.n	8007e88 <_dtoa_r+0x700>
 8007e7a:	9a00      	ldr	r2, [sp, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d1f7      	bne.n	8007e70 <_dtoa_r+0x6e8>
 8007e80:	9900      	ldr	r1, [sp, #0]
 8007e82:	2230      	movs	r2, #48	; 0x30
 8007e84:	3701      	adds	r7, #1
 8007e86:	700a      	strb	r2, [r1, #0]
 8007e88:	781a      	ldrb	r2, [r3, #0]
 8007e8a:	3201      	adds	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e790      	b.n	8007db2 <_dtoa_r+0x62a>
 8007e90:	4ba3      	ldr	r3, [pc, #652]	; (8008120 <_dtoa_r+0x998>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	f7f8 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d09e      	beq.n	8007de6 <_dtoa_r+0x65e>
 8007ea8:	e7d0      	b.n	8007e4c <_dtoa_r+0x6c4>
 8007eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	f000 80ca 	beq.w	8008046 <_dtoa_r+0x8be>
 8007eb2:	9a07      	ldr	r2, [sp, #28]
 8007eb4:	2a01      	cmp	r2, #1
 8007eb6:	f300 80ad 	bgt.w	8008014 <_dtoa_r+0x88c>
 8007eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	f000 80a5 	beq.w	800800c <_dtoa_r+0x884>
 8007ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ec6:	9e08      	ldr	r6, [sp, #32]
 8007ec8:	9d05      	ldr	r5, [sp, #20]
 8007eca:	9a05      	ldr	r2, [sp, #20]
 8007ecc:	441a      	add	r2, r3
 8007ece:	9205      	str	r2, [sp, #20]
 8007ed0:	9a06      	ldr	r2, [sp, #24]
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	441a      	add	r2, r3
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	9206      	str	r2, [sp, #24]
 8007eda:	f000 fbd3 	bl	8008684 <__i2b>
 8007ede:	4607      	mov	r7, r0
 8007ee0:	b165      	cbz	r5, 8007efc <_dtoa_r+0x774>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd09      	ble.n	8007efc <_dtoa_r+0x774>
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	9a05      	ldr	r2, [sp, #20]
 8007eec:	bfa8      	it	ge
 8007eee:	462b      	movge	r3, r5
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	9205      	str	r2, [sp, #20]
 8007ef4:	9a06      	ldr	r2, [sp, #24]
 8007ef6:	1aed      	subs	r5, r5, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	9306      	str	r3, [sp, #24]
 8007efc:	9b08      	ldr	r3, [sp, #32]
 8007efe:	b1f3      	cbz	r3, 8007f3e <_dtoa_r+0x7b6>
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80a3 	beq.w	800804e <_dtoa_r+0x8c6>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	dd10      	ble.n	8007f2e <_dtoa_r+0x7a6>
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	4632      	mov	r2, r6
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fc77 	bl	8008804 <__pow5mult>
 8007f16:	4652      	mov	r2, sl
 8007f18:	4601      	mov	r1, r0
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fbc7 	bl	80086b0 <__multiply>
 8007f22:	4651      	mov	r1, sl
 8007f24:	4680      	mov	r8, r0
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 faac 	bl	8008484 <_Bfree>
 8007f2c:	46c2      	mov	sl, r8
 8007f2e:	9b08      	ldr	r3, [sp, #32]
 8007f30:	1b9a      	subs	r2, r3, r6
 8007f32:	d004      	beq.n	8007f3e <_dtoa_r+0x7b6>
 8007f34:	4651      	mov	r1, sl
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 fc64 	bl	8008804 <__pow5mult>
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fb9f 	bl	8008684 <__i2b>
 8007f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	f340 8081 	ble.w	8008052 <_dtoa_r+0x8ca>
 8007f50:	461a      	mov	r2, r3
 8007f52:	4601      	mov	r1, r0
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fc55 	bl	8008804 <__pow5mult>
 8007f5a:	9b07      	ldr	r3, [sp, #28]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	4606      	mov	r6, r0
 8007f60:	dd7a      	ble.n	8008058 <_dtoa_r+0x8d0>
 8007f62:	f04f 0800 	mov.w	r8, #0
 8007f66:	6933      	ldr	r3, [r6, #16]
 8007f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f6c:	6918      	ldr	r0, [r3, #16]
 8007f6e:	f000 fb3b 	bl	80085e8 <__hi0bits>
 8007f72:	f1c0 0020 	rsb	r0, r0, #32
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	4418      	add	r0, r3
 8007f7a:	f010 001f 	ands.w	r0, r0, #31
 8007f7e:	f000 8094 	beq.w	80080aa <_dtoa_r+0x922>
 8007f82:	f1c0 0320 	rsb	r3, r0, #32
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	f340 8085 	ble.w	8008096 <_dtoa_r+0x90e>
 8007f8c:	9b05      	ldr	r3, [sp, #20]
 8007f8e:	f1c0 001c 	rsb	r0, r0, #28
 8007f92:	4403      	add	r3, r0
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	4403      	add	r3, r0
 8007f9a:	4405      	add	r5, r0
 8007f9c:	9306      	str	r3, [sp, #24]
 8007f9e:	9b05      	ldr	r3, [sp, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dd05      	ble.n	8007fb0 <_dtoa_r+0x828>
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fc85 	bl	80088b8 <__lshift>
 8007fae:	4682      	mov	sl, r0
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dd05      	ble.n	8007fc2 <_dtoa_r+0x83a>
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fc7c 	bl	80088b8 <__lshift>
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d072      	beq.n	80080ae <_dtoa_r+0x926>
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4650      	mov	r0, sl
 8007fcc:	f000 fce0 	bl	8008990 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	da6c      	bge.n	80080ae <_dtoa_r+0x926>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4651      	mov	r1, sl
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fa74 	bl	80084c8 <__multadd>
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 81b0 	beq.w	800834e <_dtoa_r+0xbc6>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	220a      	movs	r2, #10
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fa67 	bl	80084c8 <__multadd>
 8007ffa:	9b01      	ldr	r3, [sp, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	4607      	mov	r7, r0
 8008000:	f300 8096 	bgt.w	8008130 <_dtoa_r+0x9a8>
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	2b02      	cmp	r3, #2
 8008008:	dc59      	bgt.n	80080be <_dtoa_r+0x936>
 800800a:	e091      	b.n	8008130 <_dtoa_r+0x9a8>
 800800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008012:	e758      	b.n	8007ec6 <_dtoa_r+0x73e>
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	1e5e      	subs	r6, r3, #1
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	42b3      	cmp	r3, r6
 800801c:	bfbf      	itttt	lt
 800801e:	9b08      	ldrlt	r3, [sp, #32]
 8008020:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008022:	9608      	strlt	r6, [sp, #32]
 8008024:	1af3      	sublt	r3, r6, r3
 8008026:	bfb4      	ite	lt
 8008028:	18d2      	addlt	r2, r2, r3
 800802a:	1b9e      	subge	r6, r3, r6
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	bfbc      	itt	lt
 8008030:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008032:	2600      	movlt	r6, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfb7      	itett	lt
 8008038:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800803c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008040:	1a9d      	sublt	r5, r3, r2
 8008042:	2300      	movlt	r3, #0
 8008044:	e741      	b.n	8007eca <_dtoa_r+0x742>
 8008046:	9e08      	ldr	r6, [sp, #32]
 8008048:	9d05      	ldr	r5, [sp, #20]
 800804a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800804c:	e748      	b.n	8007ee0 <_dtoa_r+0x758>
 800804e:	9a08      	ldr	r2, [sp, #32]
 8008050:	e770      	b.n	8007f34 <_dtoa_r+0x7ac>
 8008052:	9b07      	ldr	r3, [sp, #28]
 8008054:	2b01      	cmp	r3, #1
 8008056:	dc19      	bgt.n	800808c <_dtoa_r+0x904>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	b9bb      	cbnz	r3, 800808c <_dtoa_r+0x904>
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008062:	b99b      	cbnz	r3, 800808c <_dtoa_r+0x904>
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800806a:	0d1b      	lsrs	r3, r3, #20
 800806c:	051b      	lsls	r3, r3, #20
 800806e:	b183      	cbz	r3, 8008092 <_dtoa_r+0x90a>
 8008070:	9b05      	ldr	r3, [sp, #20]
 8008072:	3301      	adds	r3, #1
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	3301      	adds	r3, #1
 800807a:	9306      	str	r3, [sp, #24]
 800807c:	f04f 0801 	mov.w	r8, #1
 8008080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008082:	2b00      	cmp	r3, #0
 8008084:	f47f af6f 	bne.w	8007f66 <_dtoa_r+0x7de>
 8008088:	2001      	movs	r0, #1
 800808a:	e774      	b.n	8007f76 <_dtoa_r+0x7ee>
 800808c:	f04f 0800 	mov.w	r8, #0
 8008090:	e7f6      	b.n	8008080 <_dtoa_r+0x8f8>
 8008092:	4698      	mov	r8, r3
 8008094:	e7f4      	b.n	8008080 <_dtoa_r+0x8f8>
 8008096:	d082      	beq.n	8007f9e <_dtoa_r+0x816>
 8008098:	9a05      	ldr	r2, [sp, #20]
 800809a:	331c      	adds	r3, #28
 800809c:	441a      	add	r2, r3
 800809e:	9205      	str	r2, [sp, #20]
 80080a0:	9a06      	ldr	r2, [sp, #24]
 80080a2:	441a      	add	r2, r3
 80080a4:	441d      	add	r5, r3
 80080a6:	9206      	str	r2, [sp, #24]
 80080a8:	e779      	b.n	8007f9e <_dtoa_r+0x816>
 80080aa:	4603      	mov	r3, r0
 80080ac:	e7f4      	b.n	8008098 <_dtoa_r+0x910>
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc37      	bgt.n	8008124 <_dtoa_r+0x99c>
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	dd34      	ble.n	8008124 <_dtoa_r+0x99c>
 80080ba:	9b04      	ldr	r3, [sp, #16]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	b963      	cbnz	r3, 80080dc <_dtoa_r+0x954>
 80080c2:	4631      	mov	r1, r6
 80080c4:	2205      	movs	r2, #5
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f9fe 	bl	80084c8 <__multadd>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4606      	mov	r6, r0
 80080d0:	4650      	mov	r0, sl
 80080d2:	f000 fc5d 	bl	8008990 <__mcmp>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f73f adbb 	bgt.w	8007c52 <_dtoa_r+0x4ca>
 80080dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080de:	9d00      	ldr	r5, [sp, #0]
 80080e0:	ea6f 0b03 	mvn.w	fp, r3
 80080e4:	f04f 0800 	mov.w	r8, #0
 80080e8:	4631      	mov	r1, r6
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f9ca 	bl	8008484 <_Bfree>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f43f aeab 	beq.w	8007e4c <_dtoa_r+0x6c4>
 80080f6:	f1b8 0f00 	cmp.w	r8, #0
 80080fa:	d005      	beq.n	8008108 <_dtoa_r+0x980>
 80080fc:	45b8      	cmp	r8, r7
 80080fe:	d003      	beq.n	8008108 <_dtoa_r+0x980>
 8008100:	4641      	mov	r1, r8
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f9be 	bl	8008484 <_Bfree>
 8008108:	4639      	mov	r1, r7
 800810a:	4620      	mov	r0, r4
 800810c:	f000 f9ba 	bl	8008484 <_Bfree>
 8008110:	e69c      	b.n	8007e4c <_dtoa_r+0x6c4>
 8008112:	2600      	movs	r6, #0
 8008114:	4637      	mov	r7, r6
 8008116:	e7e1      	b.n	80080dc <_dtoa_r+0x954>
 8008118:	46bb      	mov	fp, r7
 800811a:	4637      	mov	r7, r6
 800811c:	e599      	b.n	8007c52 <_dtoa_r+0x4ca>
 800811e:	bf00      	nop
 8008120:	40240000 	.word	0x40240000
 8008124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80c8 	beq.w	80082bc <_dtoa_r+0xb34>
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	2d00      	cmp	r5, #0
 8008132:	dd05      	ble.n	8008140 <_dtoa_r+0x9b8>
 8008134:	4639      	mov	r1, r7
 8008136:	462a      	mov	r2, r5
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fbbd 	bl	80088b8 <__lshift>
 800813e:	4607      	mov	r7, r0
 8008140:	f1b8 0f00 	cmp.w	r8, #0
 8008144:	d05b      	beq.n	80081fe <_dtoa_r+0xa76>
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f95b 	bl	8008404 <_Balloc>
 800814e:	4605      	mov	r5, r0
 8008150:	b928      	cbnz	r0, 800815e <_dtoa_r+0x9d6>
 8008152:	4b83      	ldr	r3, [pc, #524]	; (8008360 <_dtoa_r+0xbd8>)
 8008154:	4602      	mov	r2, r0
 8008156:	f240 21ef 	movw	r1, #751	; 0x2ef
 800815a:	f7ff bb2e 	b.w	80077ba <_dtoa_r+0x32>
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	3202      	adds	r2, #2
 8008162:	0092      	lsls	r2, r2, #2
 8008164:	f107 010c 	add.w	r1, r7, #12
 8008168:	300c      	adds	r0, #12
 800816a:	f002 fc0b 	bl	800a984 <memcpy>
 800816e:	2201      	movs	r2, #1
 8008170:	4629      	mov	r1, r5
 8008172:	4620      	mov	r0, r4
 8008174:	f000 fba0 	bl	80088b8 <__lshift>
 8008178:	9b00      	ldr	r3, [sp, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008182:	4413      	add	r3, r2
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	9b02      	ldr	r3, [sp, #8]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	46b8      	mov	r8, r7
 800818e:	9306      	str	r3, [sp, #24]
 8008190:	4607      	mov	r7, r0
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	4631      	mov	r1, r6
 8008196:	3b01      	subs	r3, #1
 8008198:	4650      	mov	r0, sl
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	f7ff fa6c 	bl	8007678 <quorem>
 80081a0:	4641      	mov	r1, r8
 80081a2:	9002      	str	r0, [sp, #8]
 80081a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081a8:	4650      	mov	r0, sl
 80081aa:	f000 fbf1 	bl	8008990 <__mcmp>
 80081ae:	463a      	mov	r2, r7
 80081b0:	9005      	str	r0, [sp, #20]
 80081b2:	4631      	mov	r1, r6
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 fc07 	bl	80089c8 <__mdiff>
 80081ba:	68c2      	ldr	r2, [r0, #12]
 80081bc:	4605      	mov	r5, r0
 80081be:	bb02      	cbnz	r2, 8008202 <_dtoa_r+0xa7a>
 80081c0:	4601      	mov	r1, r0
 80081c2:	4650      	mov	r0, sl
 80081c4:	f000 fbe4 	bl	8008990 <__mcmp>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4629      	mov	r1, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	9209      	str	r2, [sp, #36]	; 0x24
 80081d0:	f000 f958 	bl	8008484 <_Bfree>
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d8:	9d04      	ldr	r5, [sp, #16]
 80081da:	ea43 0102 	orr.w	r1, r3, r2
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	4319      	orrs	r1, r3
 80081e2:	d110      	bne.n	8008206 <_dtoa_r+0xa7e>
 80081e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081e8:	d029      	beq.n	800823e <_dtoa_r+0xab6>
 80081ea:	9b05      	ldr	r3, [sp, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dd02      	ble.n	80081f6 <_dtoa_r+0xa6e>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	f883 9000 	strb.w	r9, [r3]
 80081fc:	e774      	b.n	80080e8 <_dtoa_r+0x960>
 80081fe:	4638      	mov	r0, r7
 8008200:	e7ba      	b.n	8008178 <_dtoa_r+0x9f0>
 8008202:	2201      	movs	r2, #1
 8008204:	e7e1      	b.n	80081ca <_dtoa_r+0xa42>
 8008206:	9b05      	ldr	r3, [sp, #20]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db04      	blt.n	8008216 <_dtoa_r+0xa8e>
 800820c:	9907      	ldr	r1, [sp, #28]
 800820e:	430b      	orrs	r3, r1
 8008210:	9906      	ldr	r1, [sp, #24]
 8008212:	430b      	orrs	r3, r1
 8008214:	d120      	bne.n	8008258 <_dtoa_r+0xad0>
 8008216:	2a00      	cmp	r2, #0
 8008218:	dded      	ble.n	80081f6 <_dtoa_r+0xa6e>
 800821a:	4651      	mov	r1, sl
 800821c:	2201      	movs	r2, #1
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fb4a 	bl	80088b8 <__lshift>
 8008224:	4631      	mov	r1, r6
 8008226:	4682      	mov	sl, r0
 8008228:	f000 fbb2 	bl	8008990 <__mcmp>
 800822c:	2800      	cmp	r0, #0
 800822e:	dc03      	bgt.n	8008238 <_dtoa_r+0xab0>
 8008230:	d1e1      	bne.n	80081f6 <_dtoa_r+0xa6e>
 8008232:	f019 0f01 	tst.w	r9, #1
 8008236:	d0de      	beq.n	80081f6 <_dtoa_r+0xa6e>
 8008238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800823c:	d1d8      	bne.n	80081f0 <_dtoa_r+0xa68>
 800823e:	9a01      	ldr	r2, [sp, #4]
 8008240:	2339      	movs	r3, #57	; 0x39
 8008242:	7013      	strb	r3, [r2, #0]
 8008244:	462b      	mov	r3, r5
 8008246:	461d      	mov	r5, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800824e:	2a39      	cmp	r2, #57	; 0x39
 8008250:	d06c      	beq.n	800832c <_dtoa_r+0xba4>
 8008252:	3201      	adds	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e747      	b.n	80080e8 <_dtoa_r+0x960>
 8008258:	2a00      	cmp	r2, #0
 800825a:	dd07      	ble.n	800826c <_dtoa_r+0xae4>
 800825c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008260:	d0ed      	beq.n	800823e <_dtoa_r+0xab6>
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	f109 0301 	add.w	r3, r9, #1
 8008268:	7013      	strb	r3, [r2, #0]
 800826a:	e73d      	b.n	80080e8 <_dtoa_r+0x960>
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	9a08      	ldr	r2, [sp, #32]
 8008270:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008274:	4293      	cmp	r3, r2
 8008276:	d043      	beq.n	8008300 <_dtoa_r+0xb78>
 8008278:	4651      	mov	r1, sl
 800827a:	2300      	movs	r3, #0
 800827c:	220a      	movs	r2, #10
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f922 	bl	80084c8 <__multadd>
 8008284:	45b8      	cmp	r8, r7
 8008286:	4682      	mov	sl, r0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	f04f 020a 	mov.w	r2, #10
 8008290:	4641      	mov	r1, r8
 8008292:	4620      	mov	r0, r4
 8008294:	d107      	bne.n	80082a6 <_dtoa_r+0xb1e>
 8008296:	f000 f917 	bl	80084c8 <__multadd>
 800829a:	4680      	mov	r8, r0
 800829c:	4607      	mov	r7, r0
 800829e:	9b04      	ldr	r3, [sp, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	e775      	b.n	8008192 <_dtoa_r+0xa0a>
 80082a6:	f000 f90f 	bl	80084c8 <__multadd>
 80082aa:	4639      	mov	r1, r7
 80082ac:	4680      	mov	r8, r0
 80082ae:	2300      	movs	r3, #0
 80082b0:	220a      	movs	r2, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f908 	bl	80084c8 <__multadd>
 80082b8:	4607      	mov	r7, r0
 80082ba:	e7f0      	b.n	800829e <_dtoa_r+0xb16>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	9d00      	ldr	r5, [sp, #0]
 80082c2:	4631      	mov	r1, r6
 80082c4:	4650      	mov	r0, sl
 80082c6:	f7ff f9d7 	bl	8007678 <quorem>
 80082ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	f805 9b01 	strb.w	r9, [r5], #1
 80082d4:	1aea      	subs	r2, r5, r3
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	4293      	cmp	r3, r2
 80082da:	dd07      	ble.n	80082ec <_dtoa_r+0xb64>
 80082dc:	4651      	mov	r1, sl
 80082de:	2300      	movs	r3, #0
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f8f0 	bl	80084c8 <__multadd>
 80082e8:	4682      	mov	sl, r0
 80082ea:	e7ea      	b.n	80082c2 <_dtoa_r+0xb3a>
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfc8      	it	gt
 80082f2:	461d      	movgt	r5, r3
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	bfd8      	it	le
 80082f8:	2501      	movle	r5, #1
 80082fa:	441d      	add	r5, r3
 80082fc:	f04f 0800 	mov.w	r8, #0
 8008300:	4651      	mov	r1, sl
 8008302:	2201      	movs	r2, #1
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fad7 	bl	80088b8 <__lshift>
 800830a:	4631      	mov	r1, r6
 800830c:	4682      	mov	sl, r0
 800830e:	f000 fb3f 	bl	8008990 <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	dc96      	bgt.n	8008244 <_dtoa_r+0xabc>
 8008316:	d102      	bne.n	800831e <_dtoa_r+0xb96>
 8008318:	f019 0f01 	tst.w	r9, #1
 800831c:	d192      	bne.n	8008244 <_dtoa_r+0xabc>
 800831e:	462b      	mov	r3, r5
 8008320:	461d      	mov	r5, r3
 8008322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008326:	2a30      	cmp	r2, #48	; 0x30
 8008328:	d0fa      	beq.n	8008320 <_dtoa_r+0xb98>
 800832a:	e6dd      	b.n	80080e8 <_dtoa_r+0x960>
 800832c:	9a00      	ldr	r2, [sp, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d189      	bne.n	8008246 <_dtoa_r+0xabe>
 8008332:	f10b 0b01 	add.w	fp, fp, #1
 8008336:	2331      	movs	r3, #49	; 0x31
 8008338:	e796      	b.n	8008268 <_dtoa_r+0xae0>
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <_dtoa_r+0xbdc>)
 800833c:	f7ff ba99 	b.w	8007872 <_dtoa_r+0xea>
 8008340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008342:	2b00      	cmp	r3, #0
 8008344:	f47f aa6d 	bne.w	8007822 <_dtoa_r+0x9a>
 8008348:	4b07      	ldr	r3, [pc, #28]	; (8008368 <_dtoa_r+0xbe0>)
 800834a:	f7ff ba92 	b.w	8007872 <_dtoa_r+0xea>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dcb5      	bgt.n	80082c0 <_dtoa_r+0xb38>
 8008354:	9b07      	ldr	r3, [sp, #28]
 8008356:	2b02      	cmp	r3, #2
 8008358:	f73f aeb1 	bgt.w	80080be <_dtoa_r+0x936>
 800835c:	e7b0      	b.n	80082c0 <_dtoa_r+0xb38>
 800835e:	bf00      	nop
 8008360:	0800b81b 	.word	0x0800b81b
 8008364:	0800bb00 	.word	0x0800bb00
 8008368:	0800b79f 	.word	0x0800b79f

0800836c <_free_r>:
 800836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836e:	2900      	cmp	r1, #0
 8008370:	d044      	beq.n	80083fc <_free_r+0x90>
 8008372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008376:	9001      	str	r0, [sp, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f1a1 0404 	sub.w	r4, r1, #4
 800837e:	bfb8      	it	lt
 8008380:	18e4      	addlt	r4, r4, r3
 8008382:	f7fd ffd5 	bl	8006330 <__malloc_lock>
 8008386:	4a1e      	ldr	r2, [pc, #120]	; (8008400 <_free_r+0x94>)
 8008388:	9801      	ldr	r0, [sp, #4]
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	b933      	cbnz	r3, 800839c <_free_r+0x30>
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	6014      	str	r4, [r2, #0]
 8008392:	b003      	add	sp, #12
 8008394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008398:	f7fd bfd0 	b.w	800633c <__malloc_unlock>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d908      	bls.n	80083b2 <_free_r+0x46>
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1961      	adds	r1, r4, r5
 80083a4:	428b      	cmp	r3, r1
 80083a6:	bf01      	itttt	eq
 80083a8:	6819      	ldreq	r1, [r3, #0]
 80083aa:	685b      	ldreq	r3, [r3, #4]
 80083ac:	1949      	addeq	r1, r1, r5
 80083ae:	6021      	streq	r1, [r4, #0]
 80083b0:	e7ed      	b.n	800838e <_free_r+0x22>
 80083b2:	461a      	mov	r2, r3
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	b10b      	cbz	r3, 80083bc <_free_r+0x50>
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	d9fa      	bls.n	80083b2 <_free_r+0x46>
 80083bc:	6811      	ldr	r1, [r2, #0]
 80083be:	1855      	adds	r5, r2, r1
 80083c0:	42a5      	cmp	r5, r4
 80083c2:	d10b      	bne.n	80083dc <_free_r+0x70>
 80083c4:	6824      	ldr	r4, [r4, #0]
 80083c6:	4421      	add	r1, r4
 80083c8:	1854      	adds	r4, r2, r1
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	6011      	str	r1, [r2, #0]
 80083ce:	d1e0      	bne.n	8008392 <_free_r+0x26>
 80083d0:	681c      	ldr	r4, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	6053      	str	r3, [r2, #4]
 80083d6:	440c      	add	r4, r1
 80083d8:	6014      	str	r4, [r2, #0]
 80083da:	e7da      	b.n	8008392 <_free_r+0x26>
 80083dc:	d902      	bls.n	80083e4 <_free_r+0x78>
 80083de:	230c      	movs	r3, #12
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	e7d6      	b.n	8008392 <_free_r+0x26>
 80083e4:	6825      	ldr	r5, [r4, #0]
 80083e6:	1961      	adds	r1, r4, r5
 80083e8:	428b      	cmp	r3, r1
 80083ea:	bf04      	itt	eq
 80083ec:	6819      	ldreq	r1, [r3, #0]
 80083ee:	685b      	ldreq	r3, [r3, #4]
 80083f0:	6063      	str	r3, [r4, #4]
 80083f2:	bf04      	itt	eq
 80083f4:	1949      	addeq	r1, r1, r5
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	6054      	str	r4, [r2, #4]
 80083fa:	e7ca      	b.n	8008392 <_free_r+0x26>
 80083fc:	b003      	add	sp, #12
 80083fe:	bd30      	pop	{r4, r5, pc}
 8008400:	200009b8 	.word	0x200009b8

08008404 <_Balloc>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	69c6      	ldr	r6, [r0, #28]
 8008408:	4604      	mov	r4, r0
 800840a:	460d      	mov	r5, r1
 800840c:	b976      	cbnz	r6, 800842c <_Balloc+0x28>
 800840e:	2010      	movs	r0, #16
 8008410:	f7fd fee6 	bl	80061e0 <malloc>
 8008414:	4602      	mov	r2, r0
 8008416:	61e0      	str	r0, [r4, #28]
 8008418:	b920      	cbnz	r0, 8008424 <_Balloc+0x20>
 800841a:	4b18      	ldr	r3, [pc, #96]	; (800847c <_Balloc+0x78>)
 800841c:	4818      	ldr	r0, [pc, #96]	; (8008480 <_Balloc+0x7c>)
 800841e:	216b      	movs	r1, #107	; 0x6b
 8008420:	f002 fac6 	bl	800a9b0 <__assert_func>
 8008424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008428:	6006      	str	r6, [r0, #0]
 800842a:	60c6      	str	r6, [r0, #12]
 800842c:	69e6      	ldr	r6, [r4, #28]
 800842e:	68f3      	ldr	r3, [r6, #12]
 8008430:	b183      	cbz	r3, 8008454 <_Balloc+0x50>
 8008432:	69e3      	ldr	r3, [r4, #28]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800843a:	b9b8      	cbnz	r0, 800846c <_Balloc+0x68>
 800843c:	2101      	movs	r1, #1
 800843e:	fa01 f605 	lsl.w	r6, r1, r5
 8008442:	1d72      	adds	r2, r6, #5
 8008444:	0092      	lsls	r2, r2, #2
 8008446:	4620      	mov	r0, r4
 8008448:	f002 fad0 	bl	800a9ec <_calloc_r>
 800844c:	b160      	cbz	r0, 8008468 <_Balloc+0x64>
 800844e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008452:	e00e      	b.n	8008472 <_Balloc+0x6e>
 8008454:	2221      	movs	r2, #33	; 0x21
 8008456:	2104      	movs	r1, #4
 8008458:	4620      	mov	r0, r4
 800845a:	f002 fac7 	bl	800a9ec <_calloc_r>
 800845e:	69e3      	ldr	r3, [r4, #28]
 8008460:	60f0      	str	r0, [r6, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <_Balloc+0x2e>
 8008468:	2000      	movs	r0, #0
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008472:	2300      	movs	r3, #0
 8008474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008478:	e7f7      	b.n	800846a <_Balloc+0x66>
 800847a:	bf00      	nop
 800847c:	0800b7ac 	.word	0x0800b7ac
 8008480:	0800b82c 	.word	0x0800b82c

08008484 <_Bfree>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	69c6      	ldr	r6, [r0, #28]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b976      	cbnz	r6, 80084ac <_Bfree+0x28>
 800848e:	2010      	movs	r0, #16
 8008490:	f7fd fea6 	bl	80061e0 <malloc>
 8008494:	4602      	mov	r2, r0
 8008496:	61e8      	str	r0, [r5, #28]
 8008498:	b920      	cbnz	r0, 80084a4 <_Bfree+0x20>
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <_Bfree+0x3c>)
 800849c:	4809      	ldr	r0, [pc, #36]	; (80084c4 <_Bfree+0x40>)
 800849e:	218f      	movs	r1, #143	; 0x8f
 80084a0:	f002 fa86 	bl	800a9b0 <__assert_func>
 80084a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084a8:	6006      	str	r6, [r0, #0]
 80084aa:	60c6      	str	r6, [r0, #12]
 80084ac:	b13c      	cbz	r4, 80084be <_Bfree+0x3a>
 80084ae:	69eb      	ldr	r3, [r5, #28]
 80084b0:	6862      	ldr	r2, [r4, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084b8:	6021      	str	r1, [r4, #0]
 80084ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	0800b7ac 	.word	0x0800b7ac
 80084c4:	0800b82c 	.word	0x0800b82c

080084c8 <__multadd>:
 80084c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084cc:	690d      	ldr	r5, [r1, #16]
 80084ce:	4607      	mov	r7, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	461e      	mov	r6, r3
 80084d4:	f101 0c14 	add.w	ip, r1, #20
 80084d8:	2000      	movs	r0, #0
 80084da:	f8dc 3000 	ldr.w	r3, [ip]
 80084de:	b299      	uxth	r1, r3
 80084e0:	fb02 6101 	mla	r1, r2, r1, r6
 80084e4:	0c1e      	lsrs	r6, r3, #16
 80084e6:	0c0b      	lsrs	r3, r1, #16
 80084e8:	fb02 3306 	mla	r3, r2, r6, r3
 80084ec:	b289      	uxth	r1, r1
 80084ee:	3001      	adds	r0, #1
 80084f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084f4:	4285      	cmp	r5, r0
 80084f6:	f84c 1b04 	str.w	r1, [ip], #4
 80084fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084fe:	dcec      	bgt.n	80084da <__multadd+0x12>
 8008500:	b30e      	cbz	r6, 8008546 <__multadd+0x7e>
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	42ab      	cmp	r3, r5
 8008506:	dc19      	bgt.n	800853c <__multadd+0x74>
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	4638      	mov	r0, r7
 800850c:	3101      	adds	r1, #1
 800850e:	f7ff ff79 	bl	8008404 <_Balloc>
 8008512:	4680      	mov	r8, r0
 8008514:	b928      	cbnz	r0, 8008522 <__multadd+0x5a>
 8008516:	4602      	mov	r2, r0
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <__multadd+0x84>)
 800851a:	480d      	ldr	r0, [pc, #52]	; (8008550 <__multadd+0x88>)
 800851c:	21ba      	movs	r1, #186	; 0xba
 800851e:	f002 fa47 	bl	800a9b0 <__assert_func>
 8008522:	6922      	ldr	r2, [r4, #16]
 8008524:	3202      	adds	r2, #2
 8008526:	f104 010c 	add.w	r1, r4, #12
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	300c      	adds	r0, #12
 800852e:	f002 fa29 	bl	800a984 <memcpy>
 8008532:	4621      	mov	r1, r4
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff ffa5 	bl	8008484 <_Bfree>
 800853a:	4644      	mov	r4, r8
 800853c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008540:	3501      	adds	r5, #1
 8008542:	615e      	str	r6, [r3, #20]
 8008544:	6125      	str	r5, [r4, #16]
 8008546:	4620      	mov	r0, r4
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	0800b81b 	.word	0x0800b81b
 8008550:	0800b82c 	.word	0x0800b82c

08008554 <__s2b>:
 8008554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	4615      	mov	r5, r2
 800855c:	461f      	mov	r7, r3
 800855e:	2209      	movs	r2, #9
 8008560:	3308      	adds	r3, #8
 8008562:	4606      	mov	r6, r0
 8008564:	fb93 f3f2 	sdiv	r3, r3, r2
 8008568:	2100      	movs	r1, #0
 800856a:	2201      	movs	r2, #1
 800856c:	429a      	cmp	r2, r3
 800856e:	db09      	blt.n	8008584 <__s2b+0x30>
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ff47 	bl	8008404 <_Balloc>
 8008576:	b940      	cbnz	r0, 800858a <__s2b+0x36>
 8008578:	4602      	mov	r2, r0
 800857a:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <__s2b+0x8c>)
 800857c:	4819      	ldr	r0, [pc, #100]	; (80085e4 <__s2b+0x90>)
 800857e:	21d3      	movs	r1, #211	; 0xd3
 8008580:	f002 fa16 	bl	800a9b0 <__assert_func>
 8008584:	0052      	lsls	r2, r2, #1
 8008586:	3101      	adds	r1, #1
 8008588:	e7f0      	b.n	800856c <__s2b+0x18>
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	6143      	str	r3, [r0, #20]
 800858e:	2d09      	cmp	r5, #9
 8008590:	f04f 0301 	mov.w	r3, #1
 8008594:	6103      	str	r3, [r0, #16]
 8008596:	dd16      	ble.n	80085c6 <__s2b+0x72>
 8008598:	f104 0909 	add.w	r9, r4, #9
 800859c:	46c8      	mov	r8, r9
 800859e:	442c      	add	r4, r5
 80085a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085a4:	4601      	mov	r1, r0
 80085a6:	3b30      	subs	r3, #48	; 0x30
 80085a8:	220a      	movs	r2, #10
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7ff ff8c 	bl	80084c8 <__multadd>
 80085b0:	45a0      	cmp	r8, r4
 80085b2:	d1f5      	bne.n	80085a0 <__s2b+0x4c>
 80085b4:	f1a5 0408 	sub.w	r4, r5, #8
 80085b8:	444c      	add	r4, r9
 80085ba:	1b2d      	subs	r5, r5, r4
 80085bc:	1963      	adds	r3, r4, r5
 80085be:	42bb      	cmp	r3, r7
 80085c0:	db04      	blt.n	80085cc <__s2b+0x78>
 80085c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c6:	340a      	adds	r4, #10
 80085c8:	2509      	movs	r5, #9
 80085ca:	e7f6      	b.n	80085ba <__s2b+0x66>
 80085cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085d0:	4601      	mov	r1, r0
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	220a      	movs	r2, #10
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff76 	bl	80084c8 <__multadd>
 80085dc:	e7ee      	b.n	80085bc <__s2b+0x68>
 80085de:	bf00      	nop
 80085e0:	0800b81b 	.word	0x0800b81b
 80085e4:	0800b82c 	.word	0x0800b82c

080085e8 <__hi0bits>:
 80085e8:	0c03      	lsrs	r3, r0, #16
 80085ea:	041b      	lsls	r3, r3, #16
 80085ec:	b9d3      	cbnz	r3, 8008624 <__hi0bits+0x3c>
 80085ee:	0400      	lsls	r0, r0, #16
 80085f0:	2310      	movs	r3, #16
 80085f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085f6:	bf04      	itt	eq
 80085f8:	0200      	lsleq	r0, r0, #8
 80085fa:	3308      	addeq	r3, #8
 80085fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008600:	bf04      	itt	eq
 8008602:	0100      	lsleq	r0, r0, #4
 8008604:	3304      	addeq	r3, #4
 8008606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800860a:	bf04      	itt	eq
 800860c:	0080      	lsleq	r0, r0, #2
 800860e:	3302      	addeq	r3, #2
 8008610:	2800      	cmp	r0, #0
 8008612:	db05      	blt.n	8008620 <__hi0bits+0x38>
 8008614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008618:	f103 0301 	add.w	r3, r3, #1
 800861c:	bf08      	it	eq
 800861e:	2320      	moveq	r3, #32
 8008620:	4618      	mov	r0, r3
 8008622:	4770      	bx	lr
 8008624:	2300      	movs	r3, #0
 8008626:	e7e4      	b.n	80085f2 <__hi0bits+0xa>

08008628 <__lo0bits>:
 8008628:	6803      	ldr	r3, [r0, #0]
 800862a:	f013 0207 	ands.w	r2, r3, #7
 800862e:	d00c      	beq.n	800864a <__lo0bits+0x22>
 8008630:	07d9      	lsls	r1, r3, #31
 8008632:	d422      	bmi.n	800867a <__lo0bits+0x52>
 8008634:	079a      	lsls	r2, r3, #30
 8008636:	bf49      	itett	mi
 8008638:	085b      	lsrmi	r3, r3, #1
 800863a:	089b      	lsrpl	r3, r3, #2
 800863c:	6003      	strmi	r3, [r0, #0]
 800863e:	2201      	movmi	r2, #1
 8008640:	bf5c      	itt	pl
 8008642:	6003      	strpl	r3, [r0, #0]
 8008644:	2202      	movpl	r2, #2
 8008646:	4610      	mov	r0, r2
 8008648:	4770      	bx	lr
 800864a:	b299      	uxth	r1, r3
 800864c:	b909      	cbnz	r1, 8008652 <__lo0bits+0x2a>
 800864e:	0c1b      	lsrs	r3, r3, #16
 8008650:	2210      	movs	r2, #16
 8008652:	b2d9      	uxtb	r1, r3
 8008654:	b909      	cbnz	r1, 800865a <__lo0bits+0x32>
 8008656:	3208      	adds	r2, #8
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	0719      	lsls	r1, r3, #28
 800865c:	bf04      	itt	eq
 800865e:	091b      	lsreq	r3, r3, #4
 8008660:	3204      	addeq	r2, #4
 8008662:	0799      	lsls	r1, r3, #30
 8008664:	bf04      	itt	eq
 8008666:	089b      	lsreq	r3, r3, #2
 8008668:	3202      	addeq	r2, #2
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	d403      	bmi.n	8008676 <__lo0bits+0x4e>
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	f102 0201 	add.w	r2, r2, #1
 8008674:	d003      	beq.n	800867e <__lo0bits+0x56>
 8008676:	6003      	str	r3, [r0, #0]
 8008678:	e7e5      	b.n	8008646 <__lo0bits+0x1e>
 800867a:	2200      	movs	r2, #0
 800867c:	e7e3      	b.n	8008646 <__lo0bits+0x1e>
 800867e:	2220      	movs	r2, #32
 8008680:	e7e1      	b.n	8008646 <__lo0bits+0x1e>
	...

08008684 <__i2b>:
 8008684:	b510      	push	{r4, lr}
 8008686:	460c      	mov	r4, r1
 8008688:	2101      	movs	r1, #1
 800868a:	f7ff febb 	bl	8008404 <_Balloc>
 800868e:	4602      	mov	r2, r0
 8008690:	b928      	cbnz	r0, 800869e <__i2b+0x1a>
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <__i2b+0x24>)
 8008694:	4805      	ldr	r0, [pc, #20]	; (80086ac <__i2b+0x28>)
 8008696:	f240 1145 	movw	r1, #325	; 0x145
 800869a:	f002 f989 	bl	800a9b0 <__assert_func>
 800869e:	2301      	movs	r3, #1
 80086a0:	6144      	str	r4, [r0, #20]
 80086a2:	6103      	str	r3, [r0, #16]
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	0800b81b 	.word	0x0800b81b
 80086ac:	0800b82c 	.word	0x0800b82c

080086b0 <__multiply>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	4691      	mov	r9, r2
 80086b6:	690a      	ldr	r2, [r1, #16]
 80086b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086bc:	429a      	cmp	r2, r3
 80086be:	bfb8      	it	lt
 80086c0:	460b      	movlt	r3, r1
 80086c2:	460c      	mov	r4, r1
 80086c4:	bfbc      	itt	lt
 80086c6:	464c      	movlt	r4, r9
 80086c8:	4699      	movlt	r9, r3
 80086ca:	6927      	ldr	r7, [r4, #16]
 80086cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	6861      	ldr	r1, [r4, #4]
 80086d4:	eb07 060a 	add.w	r6, r7, sl
 80086d8:	42b3      	cmp	r3, r6
 80086da:	b085      	sub	sp, #20
 80086dc:	bfb8      	it	lt
 80086de:	3101      	addlt	r1, #1
 80086e0:	f7ff fe90 	bl	8008404 <_Balloc>
 80086e4:	b930      	cbnz	r0, 80086f4 <__multiply+0x44>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b44      	ldr	r3, [pc, #272]	; (80087fc <__multiply+0x14c>)
 80086ea:	4845      	ldr	r0, [pc, #276]	; (8008800 <__multiply+0x150>)
 80086ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80086f0:	f002 f95e 	bl	800a9b0 <__assert_func>
 80086f4:	f100 0514 	add.w	r5, r0, #20
 80086f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086fc:	462b      	mov	r3, r5
 80086fe:	2200      	movs	r2, #0
 8008700:	4543      	cmp	r3, r8
 8008702:	d321      	bcc.n	8008748 <__multiply+0x98>
 8008704:	f104 0314 	add.w	r3, r4, #20
 8008708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800870c:	f109 0314 	add.w	r3, r9, #20
 8008710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008714:	9202      	str	r2, [sp, #8]
 8008716:	1b3a      	subs	r2, r7, r4
 8008718:	3a15      	subs	r2, #21
 800871a:	f022 0203 	bic.w	r2, r2, #3
 800871e:	3204      	adds	r2, #4
 8008720:	f104 0115 	add.w	r1, r4, #21
 8008724:	428f      	cmp	r7, r1
 8008726:	bf38      	it	cc
 8008728:	2204      	movcc	r2, #4
 800872a:	9201      	str	r2, [sp, #4]
 800872c:	9a02      	ldr	r2, [sp, #8]
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	429a      	cmp	r2, r3
 8008732:	d80c      	bhi.n	800874e <__multiply+0x9e>
 8008734:	2e00      	cmp	r6, #0
 8008736:	dd03      	ble.n	8008740 <__multiply+0x90>
 8008738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05b      	beq.n	80087f8 <__multiply+0x148>
 8008740:	6106      	str	r6, [r0, #16]
 8008742:	b005      	add	sp, #20
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	f843 2b04 	str.w	r2, [r3], #4
 800874c:	e7d8      	b.n	8008700 <__multiply+0x50>
 800874e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008752:	f1ba 0f00 	cmp.w	sl, #0
 8008756:	d024      	beq.n	80087a2 <__multiply+0xf2>
 8008758:	f104 0e14 	add.w	lr, r4, #20
 800875c:	46a9      	mov	r9, r5
 800875e:	f04f 0c00 	mov.w	ip, #0
 8008762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008766:	f8d9 1000 	ldr.w	r1, [r9]
 800876a:	fa1f fb82 	uxth.w	fp, r2
 800876e:	b289      	uxth	r1, r1
 8008770:	fb0a 110b 	mla	r1, sl, fp, r1
 8008774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008778:	f8d9 2000 	ldr.w	r2, [r9]
 800877c:	4461      	add	r1, ip
 800877e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008782:	fb0a c20b 	mla	r2, sl, fp, ip
 8008786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800878a:	b289      	uxth	r1, r1
 800878c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008790:	4577      	cmp	r7, lr
 8008792:	f849 1b04 	str.w	r1, [r9], #4
 8008796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800879a:	d8e2      	bhi.n	8008762 <__multiply+0xb2>
 800879c:	9a01      	ldr	r2, [sp, #4]
 800879e:	f845 c002 	str.w	ip, [r5, r2]
 80087a2:	9a03      	ldr	r2, [sp, #12]
 80087a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087a8:	3304      	adds	r3, #4
 80087aa:	f1b9 0f00 	cmp.w	r9, #0
 80087ae:	d021      	beq.n	80087f4 <__multiply+0x144>
 80087b0:	6829      	ldr	r1, [r5, #0]
 80087b2:	f104 0c14 	add.w	ip, r4, #20
 80087b6:	46ae      	mov	lr, r5
 80087b8:	f04f 0a00 	mov.w	sl, #0
 80087bc:	f8bc b000 	ldrh.w	fp, [ip]
 80087c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087c4:	fb09 220b 	mla	r2, r9, fp, r2
 80087c8:	4452      	add	r2, sl
 80087ca:	b289      	uxth	r1, r1
 80087cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087d0:	f84e 1b04 	str.w	r1, [lr], #4
 80087d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087dc:	f8be 1000 	ldrh.w	r1, [lr]
 80087e0:	fb09 110a 	mla	r1, r9, sl, r1
 80087e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087e8:	4567      	cmp	r7, ip
 80087ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087ee:	d8e5      	bhi.n	80087bc <__multiply+0x10c>
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	50a9      	str	r1, [r5, r2]
 80087f4:	3504      	adds	r5, #4
 80087f6:	e799      	b.n	800872c <__multiply+0x7c>
 80087f8:	3e01      	subs	r6, #1
 80087fa:	e79b      	b.n	8008734 <__multiply+0x84>
 80087fc:	0800b81b 	.word	0x0800b81b
 8008800:	0800b82c 	.word	0x0800b82c

08008804 <__pow5mult>:
 8008804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008808:	4615      	mov	r5, r2
 800880a:	f012 0203 	ands.w	r2, r2, #3
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	d007      	beq.n	8008824 <__pow5mult+0x20>
 8008814:	4c25      	ldr	r4, [pc, #148]	; (80088ac <__pow5mult+0xa8>)
 8008816:	3a01      	subs	r2, #1
 8008818:	2300      	movs	r3, #0
 800881a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800881e:	f7ff fe53 	bl	80084c8 <__multadd>
 8008822:	4607      	mov	r7, r0
 8008824:	10ad      	asrs	r5, r5, #2
 8008826:	d03d      	beq.n	80088a4 <__pow5mult+0xa0>
 8008828:	69f4      	ldr	r4, [r6, #28]
 800882a:	b97c      	cbnz	r4, 800884c <__pow5mult+0x48>
 800882c:	2010      	movs	r0, #16
 800882e:	f7fd fcd7 	bl	80061e0 <malloc>
 8008832:	4602      	mov	r2, r0
 8008834:	61f0      	str	r0, [r6, #28]
 8008836:	b928      	cbnz	r0, 8008844 <__pow5mult+0x40>
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <__pow5mult+0xac>)
 800883a:	481e      	ldr	r0, [pc, #120]	; (80088b4 <__pow5mult+0xb0>)
 800883c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008840:	f002 f8b6 	bl	800a9b0 <__assert_func>
 8008844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008848:	6004      	str	r4, [r0, #0]
 800884a:	60c4      	str	r4, [r0, #12]
 800884c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008854:	b94c      	cbnz	r4, 800886a <__pow5mult+0x66>
 8008856:	f240 2171 	movw	r1, #625	; 0x271
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff ff12 	bl	8008684 <__i2b>
 8008860:	2300      	movs	r3, #0
 8008862:	f8c8 0008 	str.w	r0, [r8, #8]
 8008866:	4604      	mov	r4, r0
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	07eb      	lsls	r3, r5, #31
 8008870:	d50a      	bpl.n	8008888 <__pow5mult+0x84>
 8008872:	4639      	mov	r1, r7
 8008874:	4622      	mov	r2, r4
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff1a 	bl	80086b0 <__multiply>
 800887c:	4639      	mov	r1, r7
 800887e:	4680      	mov	r8, r0
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff fdff 	bl	8008484 <_Bfree>
 8008886:	4647      	mov	r7, r8
 8008888:	106d      	asrs	r5, r5, #1
 800888a:	d00b      	beq.n	80088a4 <__pow5mult+0xa0>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	b938      	cbnz	r0, 80088a0 <__pow5mult+0x9c>
 8008890:	4622      	mov	r2, r4
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff ff0b 	bl	80086b0 <__multiply>
 800889a:	6020      	str	r0, [r4, #0]
 800889c:	f8c0 9000 	str.w	r9, [r0]
 80088a0:	4604      	mov	r4, r0
 80088a2:	e7e4      	b.n	800886e <__pow5mult+0x6a>
 80088a4:	4638      	mov	r0, r7
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	bf00      	nop
 80088ac:	0800b978 	.word	0x0800b978
 80088b0:	0800b7ac 	.word	0x0800b7ac
 80088b4:	0800b82c 	.word	0x0800b82c

080088b8 <__lshift>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	460c      	mov	r4, r1
 80088be:	6849      	ldr	r1, [r1, #4]
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	4607      	mov	r7, r0
 80088ca:	4691      	mov	r9, r2
 80088cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088d0:	f108 0601 	add.w	r6, r8, #1
 80088d4:	42b3      	cmp	r3, r6
 80088d6:	db0b      	blt.n	80088f0 <__lshift+0x38>
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff fd93 	bl	8008404 <_Balloc>
 80088de:	4605      	mov	r5, r0
 80088e0:	b948      	cbnz	r0, 80088f6 <__lshift+0x3e>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b28      	ldr	r3, [pc, #160]	; (8008988 <__lshift+0xd0>)
 80088e6:	4829      	ldr	r0, [pc, #164]	; (800898c <__lshift+0xd4>)
 80088e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80088ec:	f002 f860 	bl	800a9b0 <__assert_func>
 80088f0:	3101      	adds	r1, #1
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	e7ee      	b.n	80088d4 <__lshift+0x1c>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f100 0114 	add.w	r1, r0, #20
 80088fc:	f100 0210 	add.w	r2, r0, #16
 8008900:	4618      	mov	r0, r3
 8008902:	4553      	cmp	r3, sl
 8008904:	db33      	blt.n	800896e <__lshift+0xb6>
 8008906:	6920      	ldr	r0, [r4, #16]
 8008908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800890c:	f104 0314 	add.w	r3, r4, #20
 8008910:	f019 091f 	ands.w	r9, r9, #31
 8008914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008918:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800891c:	d02b      	beq.n	8008976 <__lshift+0xbe>
 800891e:	f1c9 0e20 	rsb	lr, r9, #32
 8008922:	468a      	mov	sl, r1
 8008924:	2200      	movs	r2, #0
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	fa00 f009 	lsl.w	r0, r0, r9
 800892c:	4310      	orrs	r0, r2
 800892e:	f84a 0b04 	str.w	r0, [sl], #4
 8008932:	f853 2b04 	ldr.w	r2, [r3], #4
 8008936:	459c      	cmp	ip, r3
 8008938:	fa22 f20e 	lsr.w	r2, r2, lr
 800893c:	d8f3      	bhi.n	8008926 <__lshift+0x6e>
 800893e:	ebac 0304 	sub.w	r3, ip, r4
 8008942:	3b15      	subs	r3, #21
 8008944:	f023 0303 	bic.w	r3, r3, #3
 8008948:	3304      	adds	r3, #4
 800894a:	f104 0015 	add.w	r0, r4, #21
 800894e:	4584      	cmp	ip, r0
 8008950:	bf38      	it	cc
 8008952:	2304      	movcc	r3, #4
 8008954:	50ca      	str	r2, [r1, r3]
 8008956:	b10a      	cbz	r2, 800895c <__lshift+0xa4>
 8008958:	f108 0602 	add.w	r6, r8, #2
 800895c:	3e01      	subs	r6, #1
 800895e:	4638      	mov	r0, r7
 8008960:	612e      	str	r6, [r5, #16]
 8008962:	4621      	mov	r1, r4
 8008964:	f7ff fd8e 	bl	8008484 <_Bfree>
 8008968:	4628      	mov	r0, r5
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008972:	3301      	adds	r3, #1
 8008974:	e7c5      	b.n	8008902 <__lshift+0x4a>
 8008976:	3904      	subs	r1, #4
 8008978:	f853 2b04 	ldr.w	r2, [r3], #4
 800897c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008980:	459c      	cmp	ip, r3
 8008982:	d8f9      	bhi.n	8008978 <__lshift+0xc0>
 8008984:	e7ea      	b.n	800895c <__lshift+0xa4>
 8008986:	bf00      	nop
 8008988:	0800b81b 	.word	0x0800b81b
 800898c:	0800b82c 	.word	0x0800b82c

08008990 <__mcmp>:
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	6902      	ldr	r2, [r0, #16]
 8008994:	690c      	ldr	r4, [r1, #16]
 8008996:	1b12      	subs	r2, r2, r4
 8008998:	d10e      	bne.n	80089b8 <__mcmp+0x28>
 800899a:	f100 0314 	add.w	r3, r0, #20
 800899e:	3114      	adds	r1, #20
 80089a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089b0:	42a5      	cmp	r5, r4
 80089b2:	d003      	beq.n	80089bc <__mcmp+0x2c>
 80089b4:	d305      	bcc.n	80089c2 <__mcmp+0x32>
 80089b6:	2201      	movs	r2, #1
 80089b8:	4610      	mov	r0, r2
 80089ba:	bd30      	pop	{r4, r5, pc}
 80089bc:	4283      	cmp	r3, r0
 80089be:	d3f3      	bcc.n	80089a8 <__mcmp+0x18>
 80089c0:	e7fa      	b.n	80089b8 <__mcmp+0x28>
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	e7f7      	b.n	80089b8 <__mcmp+0x28>

080089c8 <__mdiff>:
 80089c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	4606      	mov	r6, r0
 80089d0:	4611      	mov	r1, r2
 80089d2:	4620      	mov	r0, r4
 80089d4:	4690      	mov	r8, r2
 80089d6:	f7ff ffdb 	bl	8008990 <__mcmp>
 80089da:	1e05      	subs	r5, r0, #0
 80089dc:	d110      	bne.n	8008a00 <__mdiff+0x38>
 80089de:	4629      	mov	r1, r5
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fd0f 	bl	8008404 <_Balloc>
 80089e6:	b930      	cbnz	r0, 80089f6 <__mdiff+0x2e>
 80089e8:	4b3a      	ldr	r3, [pc, #232]	; (8008ad4 <__mdiff+0x10c>)
 80089ea:	4602      	mov	r2, r0
 80089ec:	f240 2137 	movw	r1, #567	; 0x237
 80089f0:	4839      	ldr	r0, [pc, #228]	; (8008ad8 <__mdiff+0x110>)
 80089f2:	f001 ffdd 	bl	800a9b0 <__assert_func>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a00:	bfa4      	itt	ge
 8008a02:	4643      	movge	r3, r8
 8008a04:	46a0      	movge	r8, r4
 8008a06:	4630      	mov	r0, r6
 8008a08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a0c:	bfa6      	itte	ge
 8008a0e:	461c      	movge	r4, r3
 8008a10:	2500      	movge	r5, #0
 8008a12:	2501      	movlt	r5, #1
 8008a14:	f7ff fcf6 	bl	8008404 <_Balloc>
 8008a18:	b920      	cbnz	r0, 8008a24 <__mdiff+0x5c>
 8008a1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ad4 <__mdiff+0x10c>)
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	f240 2145 	movw	r1, #581	; 0x245
 8008a22:	e7e5      	b.n	80089f0 <__mdiff+0x28>
 8008a24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a28:	6926      	ldr	r6, [r4, #16]
 8008a2a:	60c5      	str	r5, [r0, #12]
 8008a2c:	f104 0914 	add.w	r9, r4, #20
 8008a30:	f108 0514 	add.w	r5, r8, #20
 8008a34:	f100 0e14 	add.w	lr, r0, #20
 8008a38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a40:	f108 0210 	add.w	r2, r8, #16
 8008a44:	46f2      	mov	sl, lr
 8008a46:	2100      	movs	r1, #0
 8008a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a50:	fa11 f88b 	uxtah	r8, r1, fp
 8008a54:	b299      	uxth	r1, r3
 8008a56:	0c1b      	lsrs	r3, r3, #16
 8008a58:	eba8 0801 	sub.w	r8, r8, r1
 8008a5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a64:	fa1f f888 	uxth.w	r8, r8
 8008a68:	1419      	asrs	r1, r3, #16
 8008a6a:	454e      	cmp	r6, r9
 8008a6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a70:	f84a 3b04 	str.w	r3, [sl], #4
 8008a74:	d8e8      	bhi.n	8008a48 <__mdiff+0x80>
 8008a76:	1b33      	subs	r3, r6, r4
 8008a78:	3b15      	subs	r3, #21
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	3304      	adds	r3, #4
 8008a80:	3415      	adds	r4, #21
 8008a82:	42a6      	cmp	r6, r4
 8008a84:	bf38      	it	cc
 8008a86:	2304      	movcc	r3, #4
 8008a88:	441d      	add	r5, r3
 8008a8a:	4473      	add	r3, lr
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	462e      	mov	r6, r5
 8008a90:	4566      	cmp	r6, ip
 8008a92:	d30e      	bcc.n	8008ab2 <__mdiff+0xea>
 8008a94:	f10c 0203 	add.w	r2, ip, #3
 8008a98:	1b52      	subs	r2, r2, r5
 8008a9a:	f022 0203 	bic.w	r2, r2, #3
 8008a9e:	3d03      	subs	r5, #3
 8008aa0:	45ac      	cmp	ip, r5
 8008aa2:	bf38      	it	cc
 8008aa4:	2200      	movcc	r2, #0
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008aac:	b17a      	cbz	r2, 8008ace <__mdiff+0x106>
 8008aae:	6107      	str	r7, [r0, #16]
 8008ab0:	e7a4      	b.n	80089fc <__mdiff+0x34>
 8008ab2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ab6:	fa11 f288 	uxtah	r2, r1, r8
 8008aba:	1414      	asrs	r4, r2, #16
 8008abc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ac6:	f84e 2b04 	str.w	r2, [lr], #4
 8008aca:	1421      	asrs	r1, r4, #16
 8008acc:	e7e0      	b.n	8008a90 <__mdiff+0xc8>
 8008ace:	3f01      	subs	r7, #1
 8008ad0:	e7ea      	b.n	8008aa8 <__mdiff+0xe0>
 8008ad2:	bf00      	nop
 8008ad4:	0800b81b 	.word	0x0800b81b
 8008ad8:	0800b82c 	.word	0x0800b82c

08008adc <__ulp>:
 8008adc:	b082      	sub	sp, #8
 8008ade:	ed8d 0b00 	vstr	d0, [sp]
 8008ae2:	9a01      	ldr	r2, [sp, #4]
 8008ae4:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <__ulp+0x48>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dc08      	bgt.n	8008b02 <__ulp+0x26>
 8008af0:	425b      	negs	r3, r3
 8008af2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008af6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008afa:	da04      	bge.n	8008b06 <__ulp+0x2a>
 8008afc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b00:	4113      	asrs	r3, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	e008      	b.n	8008b18 <__ulp+0x3c>
 8008b06:	f1a2 0314 	sub.w	r3, r2, #20
 8008b0a:	2b1e      	cmp	r3, #30
 8008b0c:	bfda      	itte	le
 8008b0e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008b12:	40da      	lsrle	r2, r3
 8008b14:	2201      	movgt	r2, #1
 8008b16:	2300      	movs	r3, #0
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	ec41 0b10 	vmov	d0, r0, r1
 8008b20:	b002      	add	sp, #8
 8008b22:	4770      	bx	lr
 8008b24:	7ff00000 	.word	0x7ff00000

08008b28 <__b2d>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	6906      	ldr	r6, [r0, #16]
 8008b2e:	f100 0814 	add.w	r8, r0, #20
 8008b32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b36:	1f37      	subs	r7, r6, #4
 8008b38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7ff fd53 	bl	80085e8 <__hi0bits>
 8008b42:	f1c0 0320 	rsb	r3, r0, #32
 8008b46:	280a      	cmp	r0, #10
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	491b      	ldr	r1, [pc, #108]	; (8008bb8 <__b2d+0x90>)
 8008b4c:	dc15      	bgt.n	8008b7a <__b2d+0x52>
 8008b4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b52:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b56:	45b8      	cmp	r8, r7
 8008b58:	ea43 0501 	orr.w	r5, r3, r1
 8008b5c:	bf34      	ite	cc
 8008b5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b62:	2300      	movcs	r3, #0
 8008b64:	3015      	adds	r0, #21
 8008b66:	fa02 f000 	lsl.w	r0, r2, r0
 8008b6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b6e:	4303      	orrs	r3, r0
 8008b70:	461c      	mov	r4, r3
 8008b72:	ec45 4b10 	vmov	d0, r4, r5
 8008b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7a:	45b8      	cmp	r8, r7
 8008b7c:	bf3a      	itte	cc
 8008b7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b82:	f1a6 0708 	subcc.w	r7, r6, #8
 8008b86:	2300      	movcs	r3, #0
 8008b88:	380b      	subs	r0, #11
 8008b8a:	d012      	beq.n	8008bb2 <__b2d+0x8a>
 8008b8c:	f1c0 0120 	rsb	r1, r0, #32
 8008b90:	fa23 f401 	lsr.w	r4, r3, r1
 8008b94:	4082      	lsls	r2, r0
 8008b96:	4322      	orrs	r2, r4
 8008b98:	4547      	cmp	r7, r8
 8008b9a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008b9e:	bf8c      	ite	hi
 8008ba0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ba4:	2200      	movls	r2, #0
 8008ba6:	4083      	lsls	r3, r0
 8008ba8:	40ca      	lsrs	r2, r1
 8008baa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	e7de      	b.n	8008b70 <__b2d+0x48>
 8008bb2:	ea42 0501 	orr.w	r5, r2, r1
 8008bb6:	e7db      	b.n	8008b70 <__b2d+0x48>
 8008bb8:	3ff00000 	.word	0x3ff00000

08008bbc <__d2b>:
 8008bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	ec59 8b10 	vmov	r8, r9, d0
 8008bc8:	4616      	mov	r6, r2
 8008bca:	f7ff fc1b 	bl	8008404 <_Balloc>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	b930      	cbnz	r0, 8008be0 <__d2b+0x24>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <__d2b+0xac>)
 8008bd6:	4825      	ldr	r0, [pc, #148]	; (8008c6c <__d2b+0xb0>)
 8008bd8:	f240 310f 	movw	r1, #783	; 0x30f
 8008bdc:	f001 fee8 	bl	800a9b0 <__assert_func>
 8008be0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008be4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be8:	bb2d      	cbnz	r5, 8008c36 <__d2b+0x7a>
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	f1b8 0300 	subs.w	r3, r8, #0
 8008bf0:	d026      	beq.n	8008c40 <__d2b+0x84>
 8008bf2:	4668      	mov	r0, sp
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f7ff fd17 	bl	8008628 <__lo0bits>
 8008bfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bfe:	b1e8      	cbz	r0, 8008c3c <__d2b+0x80>
 8008c00:	f1c0 0320 	rsb	r3, r0, #32
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	40c2      	lsrs	r2, r0
 8008c0c:	6163      	str	r3, [r4, #20]
 8008c0e:	9201      	str	r2, [sp, #4]
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	61a3      	str	r3, [r4, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bf14      	ite	ne
 8008c18:	2202      	movne	r2, #2
 8008c1a:	2201      	moveq	r2, #1
 8008c1c:	6122      	str	r2, [r4, #16]
 8008c1e:	b1bd      	cbz	r5, 8008c50 <__d2b+0x94>
 8008c20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c24:	4405      	add	r5, r0
 8008c26:	603d      	str	r5, [r7, #0]
 8008c28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	b003      	add	sp, #12
 8008c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c3a:	e7d6      	b.n	8008bea <__d2b+0x2e>
 8008c3c:	6161      	str	r1, [r4, #20]
 8008c3e:	e7e7      	b.n	8008c10 <__d2b+0x54>
 8008c40:	a801      	add	r0, sp, #4
 8008c42:	f7ff fcf1 	bl	8008628 <__lo0bits>
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	6163      	str	r3, [r4, #20]
 8008c4a:	3020      	adds	r0, #32
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	e7e5      	b.n	8008c1c <__d2b+0x60>
 8008c50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c58:	6038      	str	r0, [r7, #0]
 8008c5a:	6918      	ldr	r0, [r3, #16]
 8008c5c:	f7ff fcc4 	bl	80085e8 <__hi0bits>
 8008c60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c64:	e7e2      	b.n	8008c2c <__d2b+0x70>
 8008c66:	bf00      	nop
 8008c68:	0800b81b 	.word	0x0800b81b
 8008c6c:	0800b82c 	.word	0x0800b82c

08008c70 <__ratio>:
 8008c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4688      	mov	r8, r1
 8008c76:	4669      	mov	r1, sp
 8008c78:	4681      	mov	r9, r0
 8008c7a:	f7ff ff55 	bl	8008b28 <__b2d>
 8008c7e:	a901      	add	r1, sp, #4
 8008c80:	4640      	mov	r0, r8
 8008c82:	ec55 4b10 	vmov	r4, r5, d0
 8008c86:	f7ff ff4f 	bl	8008b28 <__b2d>
 8008c8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c92:	eba3 0c02 	sub.w	ip, r3, r2
 8008c96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ca0:	ec51 0b10 	vmov	r0, r1, d0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfd6      	itet	le
 8008ca8:	460a      	movle	r2, r1
 8008caa:	462a      	movgt	r2, r5
 8008cac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cb0:	468b      	mov	fp, r1
 8008cb2:	462f      	mov	r7, r5
 8008cb4:	bfd4      	ite	le
 8008cb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	ee10 2a10 	vmov	r2, s0
 8008cc4:	465b      	mov	r3, fp
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 fdc0 	bl	800084c <__aeabi_ddiv>
 8008ccc:	ec41 0b10 	vmov	d0, r0, r1
 8008cd0:	b003      	add	sp, #12
 8008cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cd6 <__copybits>:
 8008cd6:	3901      	subs	r1, #1
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	1149      	asrs	r1, r1, #5
 8008cdc:	6914      	ldr	r4, [r2, #16]
 8008cde:	3101      	adds	r1, #1
 8008ce0:	f102 0314 	add.w	r3, r2, #20
 8008ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cec:	1f05      	subs	r5, r0, #4
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	d30c      	bcc.n	8008d0c <__copybits+0x36>
 8008cf2:	1aa3      	subs	r3, r4, r2
 8008cf4:	3b11      	subs	r3, #17
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	3211      	adds	r2, #17
 8008cfc:	42a2      	cmp	r2, r4
 8008cfe:	bf88      	it	hi
 8008d00:	2300      	movhi	r3, #0
 8008d02:	4418      	add	r0, r3
 8008d04:	2300      	movs	r3, #0
 8008d06:	4288      	cmp	r0, r1
 8008d08:	d305      	bcc.n	8008d16 <__copybits+0x40>
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d10:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d14:	e7eb      	b.n	8008cee <__copybits+0x18>
 8008d16:	f840 3b04 	str.w	r3, [r0], #4
 8008d1a:	e7f4      	b.n	8008d06 <__copybits+0x30>

08008d1c <__any_on>:
 8008d1c:	f100 0214 	add.w	r2, r0, #20
 8008d20:	6900      	ldr	r0, [r0, #16]
 8008d22:	114b      	asrs	r3, r1, #5
 8008d24:	4298      	cmp	r0, r3
 8008d26:	b510      	push	{r4, lr}
 8008d28:	db11      	blt.n	8008d4e <__any_on+0x32>
 8008d2a:	dd0a      	ble.n	8008d42 <__any_on+0x26>
 8008d2c:	f011 011f 	ands.w	r1, r1, #31
 8008d30:	d007      	beq.n	8008d42 <__any_on+0x26>
 8008d32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d36:	fa24 f001 	lsr.w	r0, r4, r1
 8008d3a:	fa00 f101 	lsl.w	r1, r0, r1
 8008d3e:	428c      	cmp	r4, r1
 8008d40:	d10b      	bne.n	8008d5a <__any_on+0x3e>
 8008d42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d803      	bhi.n	8008d52 <__any_on+0x36>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	4603      	mov	r3, r0
 8008d50:	e7f7      	b.n	8008d42 <__any_on+0x26>
 8008d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d0f5      	beq.n	8008d46 <__any_on+0x2a>
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7f6      	b.n	8008d4c <__any_on+0x30>

08008d5e <sulp>:
 8008d5e:	b570      	push	{r4, r5, r6, lr}
 8008d60:	4604      	mov	r4, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	ec45 4b10 	vmov	d0, r4, r5
 8008d68:	4616      	mov	r6, r2
 8008d6a:	f7ff feb7 	bl	8008adc <__ulp>
 8008d6e:	ec51 0b10 	vmov	r0, r1, d0
 8008d72:	b17e      	cbz	r6, 8008d94 <sulp+0x36>
 8008d74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd09      	ble.n	8008d94 <sulp+0x36>
 8008d80:	051b      	lsls	r3, r3, #20
 8008d82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d86:	2400      	movs	r4, #0
 8008d88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d98 <_strtod_l>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	ed2d 8b02 	vpush	{d8}
 8008da0:	b09b      	sub	sp, #108	; 0x6c
 8008da2:	4604      	mov	r4, r0
 8008da4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008da6:	2200      	movs	r2, #0
 8008da8:	9216      	str	r2, [sp, #88]	; 0x58
 8008daa:	460d      	mov	r5, r1
 8008dac:	f04f 0800 	mov.w	r8, #0
 8008db0:	f04f 0900 	mov.w	r9, #0
 8008db4:	460a      	mov	r2, r1
 8008db6:	9215      	str	r2, [sp, #84]	; 0x54
 8008db8:	7811      	ldrb	r1, [r2, #0]
 8008dba:	292b      	cmp	r1, #43	; 0x2b
 8008dbc:	d04c      	beq.n	8008e58 <_strtod_l+0xc0>
 8008dbe:	d83a      	bhi.n	8008e36 <_strtod_l+0x9e>
 8008dc0:	290d      	cmp	r1, #13
 8008dc2:	d834      	bhi.n	8008e2e <_strtod_l+0x96>
 8008dc4:	2908      	cmp	r1, #8
 8008dc6:	d834      	bhi.n	8008e32 <_strtod_l+0x9a>
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	d03d      	beq.n	8008e48 <_strtod_l+0xb0>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008dd2:	7832      	ldrb	r2, [r6, #0]
 8008dd4:	2a30      	cmp	r2, #48	; 0x30
 8008dd6:	f040 80b4 	bne.w	8008f42 <_strtod_l+0x1aa>
 8008dda:	7872      	ldrb	r2, [r6, #1]
 8008ddc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008de0:	2a58      	cmp	r2, #88	; 0x58
 8008de2:	d170      	bne.n	8008ec6 <_strtod_l+0x12e>
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	ab16      	add	r3, sp, #88	; 0x58
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4a8e      	ldr	r2, [pc, #568]	; (8009028 <_strtod_l+0x290>)
 8008df0:	ab17      	add	r3, sp, #92	; 0x5c
 8008df2:	a915      	add	r1, sp, #84	; 0x54
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 fe77 	bl	800aae8 <__gethex>
 8008dfa:	f010 070f 	ands.w	r7, r0, #15
 8008dfe:	4605      	mov	r5, r0
 8008e00:	d005      	beq.n	8008e0e <_strtod_l+0x76>
 8008e02:	2f06      	cmp	r7, #6
 8008e04:	d12a      	bne.n	8008e5c <_strtod_l+0xc4>
 8008e06:	3601      	adds	r6, #1
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9615      	str	r6, [sp, #84]	; 0x54
 8008e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 857f 	bne.w	8009914 <_strtod_l+0xb7c>
 8008e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e18:	b1db      	cbz	r3, 8008e52 <_strtod_l+0xba>
 8008e1a:	4642      	mov	r2, r8
 8008e1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e20:	ec43 2b10 	vmov	d0, r2, r3
 8008e24:	b01b      	add	sp, #108	; 0x6c
 8008e26:	ecbd 8b02 	vpop	{d8}
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	2920      	cmp	r1, #32
 8008e30:	d1cc      	bne.n	8008dcc <_strtod_l+0x34>
 8008e32:	3201      	adds	r2, #1
 8008e34:	e7bf      	b.n	8008db6 <_strtod_l+0x1e>
 8008e36:	292d      	cmp	r1, #45	; 0x2d
 8008e38:	d1c8      	bne.n	8008dcc <_strtod_l+0x34>
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	910a      	str	r1, [sp, #40]	; 0x28
 8008e3e:	1c51      	adds	r1, r2, #1
 8008e40:	9115      	str	r1, [sp, #84]	; 0x54
 8008e42:	7852      	ldrb	r2, [r2, #1]
 8008e44:	2a00      	cmp	r2, #0
 8008e46:	d1c3      	bne.n	8008dd0 <_strtod_l+0x38>
 8008e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e4a:	9515      	str	r5, [sp, #84]	; 0x54
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 855f 	bne.w	8009910 <_strtod_l+0xb78>
 8008e52:	4642      	mov	r2, r8
 8008e54:	464b      	mov	r3, r9
 8008e56:	e7e3      	b.n	8008e20 <_strtod_l+0x88>
 8008e58:	2100      	movs	r1, #0
 8008e5a:	e7ef      	b.n	8008e3c <_strtod_l+0xa4>
 8008e5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e5e:	b13a      	cbz	r2, 8008e70 <_strtod_l+0xd8>
 8008e60:	2135      	movs	r1, #53	; 0x35
 8008e62:	a818      	add	r0, sp, #96	; 0x60
 8008e64:	f7ff ff37 	bl	8008cd6 <__copybits>
 8008e68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff fb0a 	bl	8008484 <_Bfree>
 8008e70:	3f01      	subs	r7, #1
 8008e72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e74:	2f04      	cmp	r7, #4
 8008e76:	d806      	bhi.n	8008e86 <_strtod_l+0xee>
 8008e78:	e8df f007 	tbb	[pc, r7]
 8008e7c:	201d0314 	.word	0x201d0314
 8008e80:	14          	.byte	0x14
 8008e81:	00          	.byte	0x00
 8008e82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008e86:	05e9      	lsls	r1, r5, #23
 8008e88:	bf48      	it	mi
 8008e8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e92:	0d1b      	lsrs	r3, r3, #20
 8008e94:	051b      	lsls	r3, r3, #20
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1b9      	bne.n	8008e0e <_strtod_l+0x76>
 8008e9a:	f7fe fbb9 	bl	8007610 <__errno>
 8008e9e:	2322      	movs	r3, #34	; 0x22
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	e7b4      	b.n	8008e0e <_strtod_l+0x76>
 8008ea4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008ea8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008eac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008eb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008eb4:	e7e7      	b.n	8008e86 <_strtod_l+0xee>
 8008eb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009030 <_strtod_l+0x298>
 8008eba:	e7e4      	b.n	8008e86 <_strtod_l+0xee>
 8008ebc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ec0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ec4:	e7df      	b.n	8008e86 <_strtod_l+0xee>
 8008ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	9215      	str	r2, [sp, #84]	; 0x54
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b30      	cmp	r3, #48	; 0x30
 8008ed0:	d0f9      	beq.n	8008ec6 <_strtod_l+0x12e>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d09b      	beq.n	8008e0e <_strtod_l+0x76>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f04f 0a00 	mov.w	sl, #0
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ee6:	46d3      	mov	fp, sl
 8008ee8:	220a      	movs	r2, #10
 8008eea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008eec:	7806      	ldrb	r6, [r0, #0]
 8008eee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ef2:	b2d9      	uxtb	r1, r3
 8008ef4:	2909      	cmp	r1, #9
 8008ef6:	d926      	bls.n	8008f46 <_strtod_l+0x1ae>
 8008ef8:	494c      	ldr	r1, [pc, #304]	; (800902c <_strtod_l+0x294>)
 8008efa:	2201      	movs	r2, #1
 8008efc:	f7fe fb05 	bl	800750a <strncmp>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d030      	beq.n	8008f66 <_strtod_l+0x1ce>
 8008f04:	2000      	movs	r0, #0
 8008f06:	4632      	mov	r2, r6
 8008f08:	9005      	str	r0, [sp, #20]
 8008f0a:	465e      	mov	r6, fp
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2a65      	cmp	r2, #101	; 0x65
 8008f10:	d001      	beq.n	8008f16 <_strtod_l+0x17e>
 8008f12:	2a45      	cmp	r2, #69	; 0x45
 8008f14:	d113      	bne.n	8008f3e <_strtod_l+0x1a6>
 8008f16:	b91e      	cbnz	r6, 8008f20 <_strtod_l+0x188>
 8008f18:	9a04      	ldr	r2, [sp, #16]
 8008f1a:	4302      	orrs	r2, r0
 8008f1c:	d094      	beq.n	8008e48 <_strtod_l+0xb0>
 8008f1e:	2600      	movs	r6, #0
 8008f20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008f22:	1c6a      	adds	r2, r5, #1
 8008f24:	9215      	str	r2, [sp, #84]	; 0x54
 8008f26:	786a      	ldrb	r2, [r5, #1]
 8008f28:	2a2b      	cmp	r2, #43	; 0x2b
 8008f2a:	d074      	beq.n	8009016 <_strtod_l+0x27e>
 8008f2c:	2a2d      	cmp	r2, #45	; 0x2d
 8008f2e:	d078      	beq.n	8009022 <_strtod_l+0x28a>
 8008f30:	f04f 0c00 	mov.w	ip, #0
 8008f34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f38:	2909      	cmp	r1, #9
 8008f3a:	d97f      	bls.n	800903c <_strtod_l+0x2a4>
 8008f3c:	9515      	str	r5, [sp, #84]	; 0x54
 8008f3e:	2700      	movs	r7, #0
 8008f40:	e09e      	b.n	8009080 <_strtod_l+0x2e8>
 8008f42:	2300      	movs	r3, #0
 8008f44:	e7c8      	b.n	8008ed8 <_strtod_l+0x140>
 8008f46:	f1bb 0f08 	cmp.w	fp, #8
 8008f4a:	bfd8      	it	le
 8008f4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f4e:	f100 0001 	add.w	r0, r0, #1
 8008f52:	bfda      	itte	le
 8008f54:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f58:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f5e:	f10b 0b01 	add.w	fp, fp, #1
 8008f62:	9015      	str	r0, [sp, #84]	; 0x54
 8008f64:	e7c1      	b.n	8008eea <_strtod_l+0x152>
 8008f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	9215      	str	r2, [sp, #84]	; 0x54
 8008f6c:	785a      	ldrb	r2, [r3, #1]
 8008f6e:	f1bb 0f00 	cmp.w	fp, #0
 8008f72:	d037      	beq.n	8008fe4 <_strtod_l+0x24c>
 8008f74:	9005      	str	r0, [sp, #20]
 8008f76:	465e      	mov	r6, fp
 8008f78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d912      	bls.n	8008fa6 <_strtod_l+0x20e>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7c4      	b.n	8008f0e <_strtod_l+0x176>
 8008f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	9215      	str	r2, [sp, #84]	; 0x54
 8008f8a:	785a      	ldrb	r2, [r3, #1]
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	2a30      	cmp	r2, #48	; 0x30
 8008f90:	d0f8      	beq.n	8008f84 <_strtod_l+0x1ec>
 8008f92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	f200 84c1 	bhi.w	800991e <_strtod_l+0xb86>
 8008f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f9e:	9005      	str	r0, [sp, #20]
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	3a30      	subs	r2, #48	; 0x30
 8008fa8:	f100 0301 	add.w	r3, r0, #1
 8008fac:	d014      	beq.n	8008fd8 <_strtod_l+0x240>
 8008fae:	9905      	ldr	r1, [sp, #20]
 8008fb0:	4419      	add	r1, r3
 8008fb2:	9105      	str	r1, [sp, #20]
 8008fb4:	4633      	mov	r3, r6
 8008fb6:	eb00 0c06 	add.w	ip, r0, r6
 8008fba:	210a      	movs	r1, #10
 8008fbc:	4563      	cmp	r3, ip
 8008fbe:	d113      	bne.n	8008fe8 <_strtod_l+0x250>
 8008fc0:	1833      	adds	r3, r6, r0
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	f106 0601 	add.w	r6, r6, #1
 8008fc8:	4406      	add	r6, r0
 8008fca:	dc1a      	bgt.n	8009002 <_strtod_l+0x26a>
 8008fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fce:	230a      	movs	r3, #10
 8008fd0:	fb03 2301 	mla	r3, r3, r1, r2
 8008fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fda:	1c51      	adds	r1, r2, #1
 8008fdc:	9115      	str	r1, [sp, #84]	; 0x54
 8008fde:	7852      	ldrb	r2, [r2, #1]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	e7c9      	b.n	8008f78 <_strtod_l+0x1e0>
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	e7d2      	b.n	8008f8e <_strtod_l+0x1f6>
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	f103 0301 	add.w	r3, r3, #1
 8008fee:	dc03      	bgt.n	8008ff8 <_strtod_l+0x260>
 8008ff0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ff2:	434f      	muls	r7, r1
 8008ff4:	9709      	str	r7, [sp, #36]	; 0x24
 8008ff6:	e7e1      	b.n	8008fbc <_strtod_l+0x224>
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	bfd8      	it	le
 8008ffc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009000:	e7dc      	b.n	8008fbc <_strtod_l+0x224>
 8009002:	2e10      	cmp	r6, #16
 8009004:	bfdc      	itt	le
 8009006:	230a      	movle	r3, #10
 8009008:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800900c:	e7e3      	b.n	8008fd6 <_strtod_l+0x23e>
 800900e:	2300      	movs	r3, #0
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	2301      	movs	r3, #1
 8009014:	e780      	b.n	8008f18 <_strtod_l+0x180>
 8009016:	f04f 0c00 	mov.w	ip, #0
 800901a:	1caa      	adds	r2, r5, #2
 800901c:	9215      	str	r2, [sp, #84]	; 0x54
 800901e:	78aa      	ldrb	r2, [r5, #2]
 8009020:	e788      	b.n	8008f34 <_strtod_l+0x19c>
 8009022:	f04f 0c01 	mov.w	ip, #1
 8009026:	e7f8      	b.n	800901a <_strtod_l+0x282>
 8009028:	0800b988 	.word	0x0800b988
 800902c:	0800b984 	.word	0x0800b984
 8009030:	7ff00000 	.word	0x7ff00000
 8009034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009036:	1c51      	adds	r1, r2, #1
 8009038:	9115      	str	r1, [sp, #84]	; 0x54
 800903a:	7852      	ldrb	r2, [r2, #1]
 800903c:	2a30      	cmp	r2, #48	; 0x30
 800903e:	d0f9      	beq.n	8009034 <_strtod_l+0x29c>
 8009040:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009044:	2908      	cmp	r1, #8
 8009046:	f63f af7a 	bhi.w	8008f3e <_strtod_l+0x1a6>
 800904a:	3a30      	subs	r2, #48	; 0x30
 800904c:	9208      	str	r2, [sp, #32]
 800904e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009050:	920c      	str	r2, [sp, #48]	; 0x30
 8009052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009054:	1c57      	adds	r7, r2, #1
 8009056:	9715      	str	r7, [sp, #84]	; 0x54
 8009058:	7852      	ldrb	r2, [r2, #1]
 800905a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800905e:	f1be 0f09 	cmp.w	lr, #9
 8009062:	d938      	bls.n	80090d6 <_strtod_l+0x33e>
 8009064:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009066:	1a7f      	subs	r7, r7, r1
 8009068:	2f08      	cmp	r7, #8
 800906a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800906e:	dc03      	bgt.n	8009078 <_strtod_l+0x2e0>
 8009070:	9908      	ldr	r1, [sp, #32]
 8009072:	428f      	cmp	r7, r1
 8009074:	bfa8      	it	ge
 8009076:	460f      	movge	r7, r1
 8009078:	f1bc 0f00 	cmp.w	ip, #0
 800907c:	d000      	beq.n	8009080 <_strtod_l+0x2e8>
 800907e:	427f      	negs	r7, r7
 8009080:	2e00      	cmp	r6, #0
 8009082:	d14f      	bne.n	8009124 <_strtod_l+0x38c>
 8009084:	9904      	ldr	r1, [sp, #16]
 8009086:	4301      	orrs	r1, r0
 8009088:	f47f aec1 	bne.w	8008e0e <_strtod_l+0x76>
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f aedb 	bne.w	8008e48 <_strtod_l+0xb0>
 8009092:	2a69      	cmp	r2, #105	; 0x69
 8009094:	d029      	beq.n	80090ea <_strtod_l+0x352>
 8009096:	dc26      	bgt.n	80090e6 <_strtod_l+0x34e>
 8009098:	2a49      	cmp	r2, #73	; 0x49
 800909a:	d026      	beq.n	80090ea <_strtod_l+0x352>
 800909c:	2a4e      	cmp	r2, #78	; 0x4e
 800909e:	f47f aed3 	bne.w	8008e48 <_strtod_l+0xb0>
 80090a2:	499b      	ldr	r1, [pc, #620]	; (8009310 <_strtod_l+0x578>)
 80090a4:	a815      	add	r0, sp, #84	; 0x54
 80090a6:	f001 ff5f 	bl	800af68 <__match>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f43f aecc 	beq.w	8008e48 <_strtod_l+0xb0>
 80090b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b28      	cmp	r3, #40	; 0x28
 80090b6:	d12f      	bne.n	8009118 <_strtod_l+0x380>
 80090b8:	4996      	ldr	r1, [pc, #600]	; (8009314 <_strtod_l+0x57c>)
 80090ba:	aa18      	add	r2, sp, #96	; 0x60
 80090bc:	a815      	add	r0, sp, #84	; 0x54
 80090be:	f001 ff67 	bl	800af90 <__hexnan>
 80090c2:	2805      	cmp	r0, #5
 80090c4:	d128      	bne.n	8009118 <_strtod_l+0x380>
 80090c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80090d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80090d4:	e69b      	b.n	8008e0e <_strtod_l+0x76>
 80090d6:	9f08      	ldr	r7, [sp, #32]
 80090d8:	210a      	movs	r1, #10
 80090da:	fb01 2107 	mla	r1, r1, r7, r2
 80090de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80090e2:	9208      	str	r2, [sp, #32]
 80090e4:	e7b5      	b.n	8009052 <_strtod_l+0x2ba>
 80090e6:	2a6e      	cmp	r2, #110	; 0x6e
 80090e8:	e7d9      	b.n	800909e <_strtod_l+0x306>
 80090ea:	498b      	ldr	r1, [pc, #556]	; (8009318 <_strtod_l+0x580>)
 80090ec:	a815      	add	r0, sp, #84	; 0x54
 80090ee:	f001 ff3b 	bl	800af68 <__match>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f aea8 	beq.w	8008e48 <_strtod_l+0xb0>
 80090f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090fa:	4988      	ldr	r1, [pc, #544]	; (800931c <_strtod_l+0x584>)
 80090fc:	3b01      	subs	r3, #1
 80090fe:	a815      	add	r0, sp, #84	; 0x54
 8009100:	9315      	str	r3, [sp, #84]	; 0x54
 8009102:	f001 ff31 	bl	800af68 <__match>
 8009106:	b910      	cbnz	r0, 800910e <_strtod_l+0x376>
 8009108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800910a:	3301      	adds	r3, #1
 800910c:	9315      	str	r3, [sp, #84]	; 0x54
 800910e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800932c <_strtod_l+0x594>
 8009112:	f04f 0800 	mov.w	r8, #0
 8009116:	e67a      	b.n	8008e0e <_strtod_l+0x76>
 8009118:	4881      	ldr	r0, [pc, #516]	; (8009320 <_strtod_l+0x588>)
 800911a:	f001 fc41 	bl	800a9a0 <nan>
 800911e:	ec59 8b10 	vmov	r8, r9, d0
 8009122:	e674      	b.n	8008e0e <_strtod_l+0x76>
 8009124:	9b05      	ldr	r3, [sp, #20]
 8009126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009128:	1afb      	subs	r3, r7, r3
 800912a:	f1bb 0f00 	cmp.w	fp, #0
 800912e:	bf08      	it	eq
 8009130:	46b3      	moveq	fp, r6
 8009132:	2e10      	cmp	r6, #16
 8009134:	9308      	str	r3, [sp, #32]
 8009136:	4635      	mov	r5, r6
 8009138:	bfa8      	it	ge
 800913a:	2510      	movge	r5, #16
 800913c:	f7f7 f9e2 	bl	8000504 <__aeabi_ui2d>
 8009140:	2e09      	cmp	r6, #9
 8009142:	4680      	mov	r8, r0
 8009144:	4689      	mov	r9, r1
 8009146:	dd13      	ble.n	8009170 <_strtod_l+0x3d8>
 8009148:	4b76      	ldr	r3, [pc, #472]	; (8009324 <_strtod_l+0x58c>)
 800914a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800914e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	4680      	mov	r8, r0
 8009158:	4650      	mov	r0, sl
 800915a:	4689      	mov	r9, r1
 800915c:	f7f7 f9d2 	bl	8000504 <__aeabi_ui2d>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4640      	mov	r0, r8
 8009166:	4649      	mov	r1, r9
 8009168:	f7f7 f890 	bl	800028c <__adddf3>
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	2e0f      	cmp	r6, #15
 8009172:	dc38      	bgt.n	80091e6 <_strtod_l+0x44e>
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f43f ae49 	beq.w	8008e0e <_strtod_l+0x76>
 800917c:	dd24      	ble.n	80091c8 <_strtod_l+0x430>
 800917e:	2b16      	cmp	r3, #22
 8009180:	dc0b      	bgt.n	800919a <_strtod_l+0x402>
 8009182:	4968      	ldr	r1, [pc, #416]	; (8009324 <_strtod_l+0x58c>)
 8009184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800918c:	4642      	mov	r2, r8
 800918e:	464b      	mov	r3, r9
 8009190:	f7f7 fa32 	bl	80005f8 <__aeabi_dmul>
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	e639      	b.n	8008e0e <_strtod_l+0x76>
 800919a:	9a08      	ldr	r2, [sp, #32]
 800919c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80091a0:	4293      	cmp	r3, r2
 80091a2:	db20      	blt.n	80091e6 <_strtod_l+0x44e>
 80091a4:	4c5f      	ldr	r4, [pc, #380]	; (8009324 <_strtod_l+0x58c>)
 80091a6:	f1c6 060f 	rsb	r6, r6, #15
 80091aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	1b9e      	subs	r6, r3, r6
 80091be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80091c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091c6:	e7e3      	b.n	8009190 <_strtod_l+0x3f8>
 80091c8:	9b08      	ldr	r3, [sp, #32]
 80091ca:	3316      	adds	r3, #22
 80091cc:	db0b      	blt.n	80091e6 <_strtod_l+0x44e>
 80091ce:	9b05      	ldr	r3, [sp, #20]
 80091d0:	1bdf      	subs	r7, r3, r7
 80091d2:	4b54      	ldr	r3, [pc, #336]	; (8009324 <_strtod_l+0x58c>)
 80091d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 fb34 	bl	800084c <__aeabi_ddiv>
 80091e4:	e7d6      	b.n	8009194 <_strtod_l+0x3fc>
 80091e6:	9b08      	ldr	r3, [sp, #32]
 80091e8:	1b75      	subs	r5, r6, r5
 80091ea:	441d      	add	r5, r3
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	dd70      	ble.n	80092d2 <_strtod_l+0x53a>
 80091f0:	f015 030f 	ands.w	r3, r5, #15
 80091f4:	d00a      	beq.n	800920c <_strtod_l+0x474>
 80091f6:	494b      	ldr	r1, [pc, #300]	; (8009324 <_strtod_l+0x58c>)
 80091f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091fc:	4642      	mov	r2, r8
 80091fe:	464b      	mov	r3, r9
 8009200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	4680      	mov	r8, r0
 800920a:	4689      	mov	r9, r1
 800920c:	f035 050f 	bics.w	r5, r5, #15
 8009210:	d04d      	beq.n	80092ae <_strtod_l+0x516>
 8009212:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009216:	dd22      	ble.n	800925e <_strtod_l+0x4c6>
 8009218:	2500      	movs	r5, #0
 800921a:	46ab      	mov	fp, r5
 800921c:	9509      	str	r5, [sp, #36]	; 0x24
 800921e:	9505      	str	r5, [sp, #20]
 8009220:	2322      	movs	r3, #34	; 0x22
 8009222:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800932c <_strtod_l+0x594>
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	f04f 0800 	mov.w	r8, #0
 800922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	f43f aded 	beq.w	8008e0e <_strtod_l+0x76>
 8009234:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009236:	4620      	mov	r0, r4
 8009238:	f7ff f924 	bl	8008484 <_Bfree>
 800923c:	9905      	ldr	r1, [sp, #20]
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff f920 	bl	8008484 <_Bfree>
 8009244:	4659      	mov	r1, fp
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff f91c 	bl	8008484 <_Bfree>
 800924c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800924e:	4620      	mov	r0, r4
 8009250:	f7ff f918 	bl	8008484 <_Bfree>
 8009254:	4629      	mov	r1, r5
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff f914 	bl	8008484 <_Bfree>
 800925c:	e5d7      	b.n	8008e0e <_strtod_l+0x76>
 800925e:	4b32      	ldr	r3, [pc, #200]	; (8009328 <_strtod_l+0x590>)
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	2300      	movs	r3, #0
 8009264:	112d      	asrs	r5, r5, #4
 8009266:	4640      	mov	r0, r8
 8009268:	4649      	mov	r1, r9
 800926a:	469a      	mov	sl, r3
 800926c:	2d01      	cmp	r5, #1
 800926e:	dc21      	bgt.n	80092b4 <_strtod_l+0x51c>
 8009270:	b10b      	cbz	r3, 8009276 <_strtod_l+0x4de>
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	492c      	ldr	r1, [pc, #176]	; (8009328 <_strtod_l+0x590>)
 8009278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800927c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	4b27      	ldr	r3, [pc, #156]	; (800932c <_strtod_l+0x594>)
 800928e:	460a      	mov	r2, r1
 8009290:	400b      	ands	r3, r1
 8009292:	4927      	ldr	r1, [pc, #156]	; (8009330 <_strtod_l+0x598>)
 8009294:	428b      	cmp	r3, r1
 8009296:	4680      	mov	r8, r0
 8009298:	d8be      	bhi.n	8009218 <_strtod_l+0x480>
 800929a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800929e:	428b      	cmp	r3, r1
 80092a0:	bf86      	itte	hi
 80092a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009334 <_strtod_l+0x59c>
 80092a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80092aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80092ae:	2300      	movs	r3, #0
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	e07b      	b.n	80093ac <_strtod_l+0x614>
 80092b4:	07ea      	lsls	r2, r5, #31
 80092b6:	d505      	bpl.n	80092c4 <_strtod_l+0x52c>
 80092b8:	9b04      	ldr	r3, [sp, #16]
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	2301      	movs	r3, #1
 80092c4:	9a04      	ldr	r2, [sp, #16]
 80092c6:	3208      	adds	r2, #8
 80092c8:	f10a 0a01 	add.w	sl, sl, #1
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	9204      	str	r2, [sp, #16]
 80092d0:	e7cc      	b.n	800926c <_strtod_l+0x4d4>
 80092d2:	d0ec      	beq.n	80092ae <_strtod_l+0x516>
 80092d4:	426d      	negs	r5, r5
 80092d6:	f015 020f 	ands.w	r2, r5, #15
 80092da:	d00a      	beq.n	80092f2 <_strtod_l+0x55a>
 80092dc:	4b11      	ldr	r3, [pc, #68]	; (8009324 <_strtod_l+0x58c>)
 80092de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f7 faaf 	bl	800084c <__aeabi_ddiv>
 80092ee:	4680      	mov	r8, r0
 80092f0:	4689      	mov	r9, r1
 80092f2:	112d      	asrs	r5, r5, #4
 80092f4:	d0db      	beq.n	80092ae <_strtod_l+0x516>
 80092f6:	2d1f      	cmp	r5, #31
 80092f8:	dd1e      	ble.n	8009338 <_strtod_l+0x5a0>
 80092fa:	2500      	movs	r5, #0
 80092fc:	46ab      	mov	fp, r5
 80092fe:	9509      	str	r5, [sp, #36]	; 0x24
 8009300:	9505      	str	r5, [sp, #20]
 8009302:	2322      	movs	r3, #34	; 0x22
 8009304:	f04f 0800 	mov.w	r8, #0
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	e78d      	b.n	800922c <_strtod_l+0x494>
 8009310:	0800b775 	.word	0x0800b775
 8009314:	0800b99c 	.word	0x0800b99c
 8009318:	0800b76d 	.word	0x0800b76d
 800931c:	0800b7a2 	.word	0x0800b7a2
 8009320:	0800bb48 	.word	0x0800bb48
 8009324:	0800b8b0 	.word	0x0800b8b0
 8009328:	0800b888 	.word	0x0800b888
 800932c:	7ff00000 	.word	0x7ff00000
 8009330:	7ca00000 	.word	0x7ca00000
 8009334:	7fefffff 	.word	0x7fefffff
 8009338:	f015 0310 	ands.w	r3, r5, #16
 800933c:	bf18      	it	ne
 800933e:	236a      	movne	r3, #106	; 0x6a
 8009340:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80096e4 <_strtod_l+0x94c>
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	2300      	movs	r3, #0
 800934c:	07ea      	lsls	r2, r5, #31
 800934e:	d504      	bpl.n	800935a <_strtod_l+0x5c2>
 8009350:	e9da 2300 	ldrd	r2, r3, [sl]
 8009354:	f7f7 f950 	bl	80005f8 <__aeabi_dmul>
 8009358:	2301      	movs	r3, #1
 800935a:	106d      	asrs	r5, r5, #1
 800935c:	f10a 0a08 	add.w	sl, sl, #8
 8009360:	d1f4      	bne.n	800934c <_strtod_l+0x5b4>
 8009362:	b10b      	cbz	r3, 8009368 <_strtod_l+0x5d0>
 8009364:	4680      	mov	r8, r0
 8009366:	4689      	mov	r9, r1
 8009368:	9b04      	ldr	r3, [sp, #16]
 800936a:	b1bb      	cbz	r3, 800939c <_strtod_l+0x604>
 800936c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009370:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009374:	2b00      	cmp	r3, #0
 8009376:	4649      	mov	r1, r9
 8009378:	dd10      	ble.n	800939c <_strtod_l+0x604>
 800937a:	2b1f      	cmp	r3, #31
 800937c:	f340 811e 	ble.w	80095bc <_strtod_l+0x824>
 8009380:	2b34      	cmp	r3, #52	; 0x34
 8009382:	bfde      	ittt	le
 8009384:	f04f 33ff 	movle.w	r3, #4294967295
 8009388:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800938c:	4093      	lslle	r3, r2
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	bfcc      	ite	gt
 8009394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009398:	ea03 0901 	andle.w	r9, r3, r1
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f7 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1a6      	bne.n	80092fa <_strtod_l+0x562>
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093b2:	4633      	mov	r3, r6
 80093b4:	465a      	mov	r2, fp
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff f8cc 	bl	8008554 <__s2b>
 80093bc:	9009      	str	r0, [sp, #36]	; 0x24
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f af2a 	beq.w	8009218 <_strtod_l+0x480>
 80093c4:	9a08      	ldr	r2, [sp, #32]
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	eba3 0307 	sub.w	r3, r3, r7
 80093ce:	bfa8      	it	ge
 80093d0:	2300      	movge	r3, #0
 80093d2:	930c      	str	r3, [sp, #48]	; 0x30
 80093d4:	2500      	movs	r5, #0
 80093d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093da:	9312      	str	r3, [sp, #72]	; 0x48
 80093dc:	46ab      	mov	fp, r5
 80093de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e0:	4620      	mov	r0, r4
 80093e2:	6859      	ldr	r1, [r3, #4]
 80093e4:	f7ff f80e 	bl	8008404 <_Balloc>
 80093e8:	9005      	str	r0, [sp, #20]
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f43f af18 	beq.w	8009220 <_strtod_l+0x488>
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	3202      	adds	r2, #2
 80093f6:	f103 010c 	add.w	r1, r3, #12
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	300c      	adds	r0, #12
 80093fe:	f001 fac1 	bl	800a984 <memcpy>
 8009402:	ec49 8b10 	vmov	d0, r8, r9
 8009406:	aa18      	add	r2, sp, #96	; 0x60
 8009408:	a917      	add	r1, sp, #92	; 0x5c
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff fbd6 	bl	8008bbc <__d2b>
 8009410:	ec49 8b18 	vmov	d8, r8, r9
 8009414:	9016      	str	r0, [sp, #88]	; 0x58
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f af02 	beq.w	8009220 <_strtod_l+0x488>
 800941c:	2101      	movs	r1, #1
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff f930 	bl	8008684 <__i2b>
 8009424:	4683      	mov	fp, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f aefa 	beq.w	8009220 <_strtod_l+0x488>
 800942c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800942e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009430:	2e00      	cmp	r6, #0
 8009432:	bfab      	itete	ge
 8009434:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009436:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800943a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800943e:	bfac      	ite	ge
 8009440:	eb06 0a03 	addge.w	sl, r6, r3
 8009444:	1b9f      	sublt	r7, r3, r6
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	1af6      	subs	r6, r6, r3
 800944a:	4416      	add	r6, r2
 800944c:	4ba0      	ldr	r3, [pc, #640]	; (80096d0 <_strtod_l+0x938>)
 800944e:	3e01      	subs	r6, #1
 8009450:	429e      	cmp	r6, r3
 8009452:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009456:	f280 80c4 	bge.w	80095e2 <_strtod_l+0x84a>
 800945a:	1b9b      	subs	r3, r3, r6
 800945c:	2b1f      	cmp	r3, #31
 800945e:	eba2 0203 	sub.w	r2, r2, r3
 8009462:	f04f 0101 	mov.w	r1, #1
 8009466:	f300 80b0 	bgt.w	80095ca <_strtod_l+0x832>
 800946a:	fa01 f303 	lsl.w	r3, r1, r3
 800946e:	930e      	str	r3, [sp, #56]	; 0x38
 8009470:	2300      	movs	r3, #0
 8009472:	930d      	str	r3, [sp, #52]	; 0x34
 8009474:	eb0a 0602 	add.w	r6, sl, r2
 8009478:	9b04      	ldr	r3, [sp, #16]
 800947a:	45b2      	cmp	sl, r6
 800947c:	4417      	add	r7, r2
 800947e:	441f      	add	r7, r3
 8009480:	4653      	mov	r3, sl
 8009482:	bfa8      	it	ge
 8009484:	4633      	movge	r3, r6
 8009486:	42bb      	cmp	r3, r7
 8009488:	bfa8      	it	ge
 800948a:	463b      	movge	r3, r7
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfc2      	ittt	gt
 8009490:	1af6      	subgt	r6, r6, r3
 8009492:	1aff      	subgt	r7, r7, r3
 8009494:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800949a:	2b00      	cmp	r3, #0
 800949c:	dd17      	ble.n	80094ce <_strtod_l+0x736>
 800949e:	4659      	mov	r1, fp
 80094a0:	461a      	mov	r2, r3
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7ff f9ae 	bl	8008804 <__pow5mult>
 80094a8:	4683      	mov	fp, r0
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f43f aeb8 	beq.w	8009220 <_strtod_l+0x488>
 80094b0:	4601      	mov	r1, r0
 80094b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff f8fb 	bl	80086b0 <__multiply>
 80094ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80094bc:	2800      	cmp	r0, #0
 80094be:	f43f aeaf 	beq.w	8009220 <_strtod_l+0x488>
 80094c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094c4:	4620      	mov	r0, r4
 80094c6:	f7fe ffdd 	bl	8008484 <_Bfree>
 80094ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094cc:	9316      	str	r3, [sp, #88]	; 0x58
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	f300 808c 	bgt.w	80095ec <_strtod_l+0x854>
 80094d4:	9b08      	ldr	r3, [sp, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dd08      	ble.n	80094ec <_strtod_l+0x754>
 80094da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094dc:	9905      	ldr	r1, [sp, #20]
 80094de:	4620      	mov	r0, r4
 80094e0:	f7ff f990 	bl	8008804 <__pow5mult>
 80094e4:	9005      	str	r0, [sp, #20]
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f43f ae9a 	beq.w	8009220 <_strtod_l+0x488>
 80094ec:	2f00      	cmp	r7, #0
 80094ee:	dd08      	ble.n	8009502 <_strtod_l+0x76a>
 80094f0:	9905      	ldr	r1, [sp, #20]
 80094f2:	463a      	mov	r2, r7
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7ff f9df 	bl	80088b8 <__lshift>
 80094fa:	9005      	str	r0, [sp, #20]
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f43f ae8f 	beq.w	8009220 <_strtod_l+0x488>
 8009502:	f1ba 0f00 	cmp.w	sl, #0
 8009506:	dd08      	ble.n	800951a <_strtod_l+0x782>
 8009508:	4659      	mov	r1, fp
 800950a:	4652      	mov	r2, sl
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff f9d3 	bl	80088b8 <__lshift>
 8009512:	4683      	mov	fp, r0
 8009514:	2800      	cmp	r0, #0
 8009516:	f43f ae83 	beq.w	8009220 <_strtod_l+0x488>
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800951e:	4620      	mov	r0, r4
 8009520:	f7ff fa52 	bl	80089c8 <__mdiff>
 8009524:	4605      	mov	r5, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f ae7a 	beq.w	8009220 <_strtod_l+0x488>
 800952c:	68c3      	ldr	r3, [r0, #12]
 800952e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009530:	2300      	movs	r3, #0
 8009532:	60c3      	str	r3, [r0, #12]
 8009534:	4659      	mov	r1, fp
 8009536:	f7ff fa2b 	bl	8008990 <__mcmp>
 800953a:	2800      	cmp	r0, #0
 800953c:	da60      	bge.n	8009600 <_strtod_l+0x868>
 800953e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009540:	ea53 0308 	orrs.w	r3, r3, r8
 8009544:	f040 8084 	bne.w	8009650 <_strtod_l+0x8b8>
 8009548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800954c:	2b00      	cmp	r3, #0
 800954e:	d17f      	bne.n	8009650 <_strtod_l+0x8b8>
 8009550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009554:	0d1b      	lsrs	r3, r3, #20
 8009556:	051b      	lsls	r3, r3, #20
 8009558:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800955c:	d978      	bls.n	8009650 <_strtod_l+0x8b8>
 800955e:	696b      	ldr	r3, [r5, #20]
 8009560:	b913      	cbnz	r3, 8009568 <_strtod_l+0x7d0>
 8009562:	692b      	ldr	r3, [r5, #16]
 8009564:	2b01      	cmp	r3, #1
 8009566:	dd73      	ble.n	8009650 <_strtod_l+0x8b8>
 8009568:	4629      	mov	r1, r5
 800956a:	2201      	movs	r2, #1
 800956c:	4620      	mov	r0, r4
 800956e:	f7ff f9a3 	bl	80088b8 <__lshift>
 8009572:	4659      	mov	r1, fp
 8009574:	4605      	mov	r5, r0
 8009576:	f7ff fa0b 	bl	8008990 <__mcmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	dd68      	ble.n	8009650 <_strtod_l+0x8b8>
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	4a54      	ldr	r2, [pc, #336]	; (80096d4 <_strtod_l+0x93c>)
 8009582:	464b      	mov	r3, r9
 8009584:	2900      	cmp	r1, #0
 8009586:	f000 8084 	beq.w	8009692 <_strtod_l+0x8fa>
 800958a:	ea02 0109 	and.w	r1, r2, r9
 800958e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009592:	dc7e      	bgt.n	8009692 <_strtod_l+0x8fa>
 8009594:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009598:	f77f aeb3 	ble.w	8009302 <_strtod_l+0x56a>
 800959c:	4b4e      	ldr	r3, [pc, #312]	; (80096d8 <_strtod_l+0x940>)
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	2200      	movs	r2, #0
 80095a4:	f7f7 f828 	bl	80005f8 <__aeabi_dmul>
 80095a8:	4b4a      	ldr	r3, [pc, #296]	; (80096d4 <_strtod_l+0x93c>)
 80095aa:	400b      	ands	r3, r1
 80095ac:	4680      	mov	r8, r0
 80095ae:	4689      	mov	r9, r1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f ae3f 	bne.w	8009234 <_strtod_l+0x49c>
 80095b6:	2322      	movs	r3, #34	; 0x22
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	e63b      	b.n	8009234 <_strtod_l+0x49c>
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	ea03 0808 	and.w	r8, r3, r8
 80095c8:	e6e8      	b.n	800939c <_strtod_l+0x604>
 80095ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80095ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80095d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80095d6:	36e2      	adds	r6, #226	; 0xe2
 80095d8:	fa01 f306 	lsl.w	r3, r1, r6
 80095dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80095e0:	e748      	b.n	8009474 <_strtod_l+0x6dc>
 80095e2:	2100      	movs	r1, #0
 80095e4:	2301      	movs	r3, #1
 80095e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80095ea:	e743      	b.n	8009474 <_strtod_l+0x6dc>
 80095ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095ee:	4632      	mov	r2, r6
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff f961 	bl	80088b8 <__lshift>
 80095f6:	9016      	str	r0, [sp, #88]	; 0x58
 80095f8:	2800      	cmp	r0, #0
 80095fa:	f47f af6b 	bne.w	80094d4 <_strtod_l+0x73c>
 80095fe:	e60f      	b.n	8009220 <_strtod_l+0x488>
 8009600:	46ca      	mov	sl, r9
 8009602:	d171      	bne.n	80096e8 <_strtod_l+0x950>
 8009604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800960a:	b352      	cbz	r2, 8009662 <_strtod_l+0x8ca>
 800960c:	4a33      	ldr	r2, [pc, #204]	; (80096dc <_strtod_l+0x944>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d12a      	bne.n	8009668 <_strtod_l+0x8d0>
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	4641      	mov	r1, r8
 8009616:	b1fb      	cbz	r3, 8009658 <_strtod_l+0x8c0>
 8009618:	4b2e      	ldr	r3, [pc, #184]	; (80096d4 <_strtod_l+0x93c>)
 800961a:	ea09 0303 	and.w	r3, r9, r3
 800961e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	d81a      	bhi.n	800965e <_strtod_l+0x8c6>
 8009628:	0d1b      	lsrs	r3, r3, #20
 800962a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	4299      	cmp	r1, r3
 8009634:	d118      	bne.n	8009668 <_strtod_l+0x8d0>
 8009636:	4b2a      	ldr	r3, [pc, #168]	; (80096e0 <_strtod_l+0x948>)
 8009638:	459a      	cmp	sl, r3
 800963a:	d102      	bne.n	8009642 <_strtod_l+0x8aa>
 800963c:	3101      	adds	r1, #1
 800963e:	f43f adef 	beq.w	8009220 <_strtod_l+0x488>
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <_strtod_l+0x93c>)
 8009644:	ea0a 0303 	and.w	r3, sl, r3
 8009648:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800964c:	f04f 0800 	mov.w	r8, #0
 8009650:	9b04      	ldr	r3, [sp, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1a2      	bne.n	800959c <_strtod_l+0x804>
 8009656:	e5ed      	b.n	8009234 <_strtod_l+0x49c>
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	e7e9      	b.n	8009632 <_strtod_l+0x89a>
 800965e:	4613      	mov	r3, r2
 8009660:	e7e7      	b.n	8009632 <_strtod_l+0x89a>
 8009662:	ea53 0308 	orrs.w	r3, r3, r8
 8009666:	d08a      	beq.n	800957e <_strtod_l+0x7e6>
 8009668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800966a:	b1e3      	cbz	r3, 80096a6 <_strtod_l+0x90e>
 800966c:	ea13 0f0a 	tst.w	r3, sl
 8009670:	d0ee      	beq.n	8009650 <_strtod_l+0x8b8>
 8009672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009674:	9a04      	ldr	r2, [sp, #16]
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	b1c3      	cbz	r3, 80096ae <_strtod_l+0x916>
 800967c:	f7ff fb6f 	bl	8008d5e <sulp>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	ec51 0b18 	vmov	r0, r1, d8
 8009688:	f7f6 fe00 	bl	800028c <__adddf3>
 800968c:	4680      	mov	r8, r0
 800968e:	4689      	mov	r9, r1
 8009690:	e7de      	b.n	8009650 <_strtod_l+0x8b8>
 8009692:	4013      	ands	r3, r2
 8009694:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009698:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800969c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096a0:	f04f 38ff 	mov.w	r8, #4294967295
 80096a4:	e7d4      	b.n	8009650 <_strtod_l+0x8b8>
 80096a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a8:	ea13 0f08 	tst.w	r3, r8
 80096ac:	e7e0      	b.n	8009670 <_strtod_l+0x8d8>
 80096ae:	f7ff fb56 	bl	8008d5e <sulp>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	ec51 0b18 	vmov	r0, r1, d8
 80096ba:	f7f6 fde5 	bl	8000288 <__aeabi_dsub>
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	4680      	mov	r8, r0
 80096c4:	4689      	mov	r9, r1
 80096c6:	f7f7 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0c0      	beq.n	8009650 <_strtod_l+0x8b8>
 80096ce:	e618      	b.n	8009302 <_strtod_l+0x56a>
 80096d0:	fffffc02 	.word	0xfffffc02
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	39500000 	.word	0x39500000
 80096dc:	000fffff 	.word	0x000fffff
 80096e0:	7fefffff 	.word	0x7fefffff
 80096e4:	0800b9b0 	.word	0x0800b9b0
 80096e8:	4659      	mov	r1, fp
 80096ea:	4628      	mov	r0, r5
 80096ec:	f7ff fac0 	bl	8008c70 <__ratio>
 80096f0:	ec57 6b10 	vmov	r6, r7, d0
 80096f4:	ee10 0a10 	vmov	r0, s0
 80096f8:	2200      	movs	r2, #0
 80096fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096fe:	4639      	mov	r1, r7
 8009700:	f7f7 f9f6 	bl	8000af0 <__aeabi_dcmple>
 8009704:	2800      	cmp	r0, #0
 8009706:	d071      	beq.n	80097ec <_strtod_l+0xa54>
 8009708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d17c      	bne.n	8009808 <_strtod_l+0xa70>
 800970e:	f1b8 0f00 	cmp.w	r8, #0
 8009712:	d15a      	bne.n	80097ca <_strtod_l+0xa32>
 8009714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009718:	2b00      	cmp	r3, #0
 800971a:	d15d      	bne.n	80097d8 <_strtod_l+0xa40>
 800971c:	4b90      	ldr	r3, [pc, #576]	; (8009960 <_strtod_l+0xbc8>)
 800971e:	2200      	movs	r2, #0
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f7 f9da 	bl	8000adc <__aeabi_dcmplt>
 8009728:	2800      	cmp	r0, #0
 800972a:	d15c      	bne.n	80097e6 <_strtod_l+0xa4e>
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	4b8c      	ldr	r3, [pc, #560]	; (8009964 <_strtod_l+0xbcc>)
 8009732:	2200      	movs	r2, #0
 8009734:	f7f6 ff60 	bl	80005f8 <__aeabi_dmul>
 8009738:	4606      	mov	r6, r0
 800973a:	460f      	mov	r7, r1
 800973c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009740:	9606      	str	r6, [sp, #24]
 8009742:	9307      	str	r3, [sp, #28]
 8009744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800974c:	4b86      	ldr	r3, [pc, #536]	; (8009968 <_strtod_l+0xbd0>)
 800974e:	ea0a 0303 	and.w	r3, sl, r3
 8009752:	930d      	str	r3, [sp, #52]	; 0x34
 8009754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009756:	4b85      	ldr	r3, [pc, #532]	; (800996c <_strtod_l+0xbd4>)
 8009758:	429a      	cmp	r2, r3
 800975a:	f040 8090 	bne.w	800987e <_strtod_l+0xae6>
 800975e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009762:	ec49 8b10 	vmov	d0, r8, r9
 8009766:	f7ff f9b9 	bl	8008adc <__ulp>
 800976a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800976e:	ec51 0b10 	vmov	r0, r1, d0
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	4642      	mov	r2, r8
 8009778:	464b      	mov	r3, r9
 800977a:	f7f6 fd87 	bl	800028c <__adddf3>
 800977e:	460b      	mov	r3, r1
 8009780:	4979      	ldr	r1, [pc, #484]	; (8009968 <_strtod_l+0xbd0>)
 8009782:	4a7b      	ldr	r2, [pc, #492]	; (8009970 <_strtod_l+0xbd8>)
 8009784:	4019      	ands	r1, r3
 8009786:	4291      	cmp	r1, r2
 8009788:	4680      	mov	r8, r0
 800978a:	d944      	bls.n	8009816 <_strtod_l+0xa7e>
 800978c:	ee18 2a90 	vmov	r2, s17
 8009790:	4b78      	ldr	r3, [pc, #480]	; (8009974 <_strtod_l+0xbdc>)
 8009792:	429a      	cmp	r2, r3
 8009794:	d104      	bne.n	80097a0 <_strtod_l+0xa08>
 8009796:	ee18 3a10 	vmov	r3, s16
 800979a:	3301      	adds	r3, #1
 800979c:	f43f ad40 	beq.w	8009220 <_strtod_l+0x488>
 80097a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009974 <_strtod_l+0xbdc>
 80097a4:	f04f 38ff 	mov.w	r8, #4294967295
 80097a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7fe fe6a 	bl	8008484 <_Bfree>
 80097b0:	9905      	ldr	r1, [sp, #20]
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7fe fe66 	bl	8008484 <_Bfree>
 80097b8:	4659      	mov	r1, fp
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7fe fe62 	bl	8008484 <_Bfree>
 80097c0:	4629      	mov	r1, r5
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7fe fe5e 	bl	8008484 <_Bfree>
 80097c8:	e609      	b.n	80093de <_strtod_l+0x646>
 80097ca:	f1b8 0f01 	cmp.w	r8, #1
 80097ce:	d103      	bne.n	80097d8 <_strtod_l+0xa40>
 80097d0:	f1b9 0f00 	cmp.w	r9, #0
 80097d4:	f43f ad95 	beq.w	8009302 <_strtod_l+0x56a>
 80097d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009930 <_strtod_l+0xb98>
 80097dc:	4f60      	ldr	r7, [pc, #384]	; (8009960 <_strtod_l+0xbc8>)
 80097de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097e2:	2600      	movs	r6, #0
 80097e4:	e7ae      	b.n	8009744 <_strtod_l+0x9ac>
 80097e6:	4f5f      	ldr	r7, [pc, #380]	; (8009964 <_strtod_l+0xbcc>)
 80097e8:	2600      	movs	r6, #0
 80097ea:	e7a7      	b.n	800973c <_strtod_l+0x9a4>
 80097ec:	4b5d      	ldr	r3, [pc, #372]	; (8009964 <_strtod_l+0xbcc>)
 80097ee:	4630      	mov	r0, r6
 80097f0:	4639      	mov	r1, r7
 80097f2:	2200      	movs	r2, #0
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d09c      	beq.n	800973c <_strtod_l+0x9a4>
 8009802:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009806:	e79d      	b.n	8009744 <_strtod_l+0x9ac>
 8009808:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009938 <_strtod_l+0xba0>
 800980c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009810:	ec57 6b17 	vmov	r6, r7, d7
 8009814:	e796      	b.n	8009744 <_strtod_l+0x9ac>
 8009816:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	46ca      	mov	sl, r9
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1c2      	bne.n	80097a8 <_strtod_l+0xa10>
 8009822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009828:	0d1b      	lsrs	r3, r3, #20
 800982a:	051b      	lsls	r3, r3, #20
 800982c:	429a      	cmp	r2, r3
 800982e:	d1bb      	bne.n	80097a8 <_strtod_l+0xa10>
 8009830:	4630      	mov	r0, r6
 8009832:	4639      	mov	r1, r7
 8009834:	f7f7 fa40 	bl	8000cb8 <__aeabi_d2lz>
 8009838:	f7f6 feb0 	bl	800059c <__aeabi_l2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fd20 	bl	8000288 <__aeabi_dsub>
 8009848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800984a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800984e:	ea43 0308 	orr.w	r3, r3, r8
 8009852:	4313      	orrs	r3, r2
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	d054      	beq.n	8009904 <_strtod_l+0xb6c>
 800985a:	a339      	add	r3, pc, #228	; (adr r3, 8009940 <_strtod_l+0xba8>)
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f7 f93c 	bl	8000adc <__aeabi_dcmplt>
 8009864:	2800      	cmp	r0, #0
 8009866:	f47f ace5 	bne.w	8009234 <_strtod_l+0x49c>
 800986a:	a337      	add	r3, pc, #220	; (adr r3, 8009948 <_strtod_l+0xbb0>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f7 f950 	bl	8000b18 <__aeabi_dcmpgt>
 8009878:	2800      	cmp	r0, #0
 800987a:	d095      	beq.n	80097a8 <_strtod_l+0xa10>
 800987c:	e4da      	b.n	8009234 <_strtod_l+0x49c>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	b333      	cbz	r3, 80098d0 <_strtod_l+0xb38>
 8009882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009884:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009888:	d822      	bhi.n	80098d0 <_strtod_l+0xb38>
 800988a:	a331      	add	r3, pc, #196	; (adr r3, 8009950 <_strtod_l+0xbb8>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f92c 	bl	8000af0 <__aeabi_dcmple>
 8009898:	b1a0      	cbz	r0, 80098c4 <_strtod_l+0xb2c>
 800989a:	4639      	mov	r1, r7
 800989c:	4630      	mov	r0, r6
 800989e:	f7f7 f983 	bl	8000ba8 <__aeabi_d2uiz>
 80098a2:	2801      	cmp	r0, #1
 80098a4:	bf38      	it	cc
 80098a6:	2001      	movcc	r0, #1
 80098a8:	f7f6 fe2c 	bl	8000504 <__aeabi_ui2d>
 80098ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	bb23      	cbnz	r3, 80098fe <_strtod_l+0xb66>
 80098b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098b8:	9010      	str	r0, [sp, #64]	; 0x40
 80098ba:	9311      	str	r3, [sp, #68]	; 0x44
 80098bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80098c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80098d4:	eeb0 0a48 	vmov.f32	s0, s16
 80098d8:	eef0 0a68 	vmov.f32	s1, s17
 80098dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80098e0:	f7ff f8fc 	bl	8008adc <__ulp>
 80098e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80098e8:	ec53 2b10 	vmov	r2, r3, d0
 80098ec:	f7f6 fe84 	bl	80005f8 <__aeabi_dmul>
 80098f0:	ec53 2b18 	vmov	r2, r3, d8
 80098f4:	f7f6 fcca 	bl	800028c <__adddf3>
 80098f8:	4680      	mov	r8, r0
 80098fa:	4689      	mov	r9, r1
 80098fc:	e78d      	b.n	800981a <_strtod_l+0xa82>
 80098fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009902:	e7db      	b.n	80098bc <_strtod_l+0xb24>
 8009904:	a314      	add	r3, pc, #80	; (adr r3, 8009958 <_strtod_l+0xbc0>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f7 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800990e:	e7b3      	b.n	8009878 <_strtod_l+0xae0>
 8009910:	2300      	movs	r3, #0
 8009912:	930a      	str	r3, [sp, #40]	; 0x28
 8009914:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	f7ff ba7c 	b.w	8008e16 <_strtod_l+0x7e>
 800991e:	2a65      	cmp	r2, #101	; 0x65
 8009920:	f43f ab75 	beq.w	800900e <_strtod_l+0x276>
 8009924:	2a45      	cmp	r2, #69	; 0x45
 8009926:	f43f ab72 	beq.w	800900e <_strtod_l+0x276>
 800992a:	2301      	movs	r3, #1
 800992c:	f7ff bbaa 	b.w	8009084 <_strtod_l+0x2ec>
 8009930:	00000000 	.word	0x00000000
 8009934:	bff00000 	.word	0xbff00000
 8009938:	00000000 	.word	0x00000000
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	94a03595 	.word	0x94a03595
 8009944:	3fdfffff 	.word	0x3fdfffff
 8009948:	35afe535 	.word	0x35afe535
 800994c:	3fe00000 	.word	0x3fe00000
 8009950:	ffc00000 	.word	0xffc00000
 8009954:	41dfffff 	.word	0x41dfffff
 8009958:	94a03595 	.word	0x94a03595
 800995c:	3fcfffff 	.word	0x3fcfffff
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	3fe00000 	.word	0x3fe00000
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	7fe00000 	.word	0x7fe00000
 8009970:	7c9fffff 	.word	0x7c9fffff
 8009974:	7fefffff 	.word	0x7fefffff

08009978 <_strtod_r>:
 8009978:	4b01      	ldr	r3, [pc, #4]	; (8009980 <_strtod_r+0x8>)
 800997a:	f7ff ba0d 	b.w	8008d98 <_strtod_l>
 800997e:	bf00      	nop
 8009980:	20000068 	.word	0x20000068

08009984 <_strtol_l.constprop.0>:
 8009984:	2b01      	cmp	r3, #1
 8009986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998a:	d001      	beq.n	8009990 <_strtol_l.constprop.0+0xc>
 800998c:	2b24      	cmp	r3, #36	; 0x24
 800998e:	d906      	bls.n	800999e <_strtol_l.constprop.0+0x1a>
 8009990:	f7fd fe3e 	bl	8007610 <__errno>
 8009994:	2316      	movs	r3, #22
 8009996:	6003      	str	r3, [r0, #0]
 8009998:	2000      	movs	r0, #0
 800999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a84 <_strtol_l.constprop.0+0x100>
 80099a2:	460d      	mov	r5, r1
 80099a4:	462e      	mov	r6, r5
 80099a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80099ae:	f017 0708 	ands.w	r7, r7, #8
 80099b2:	d1f7      	bne.n	80099a4 <_strtol_l.constprop.0+0x20>
 80099b4:	2c2d      	cmp	r4, #45	; 0x2d
 80099b6:	d132      	bne.n	8009a1e <_strtol_l.constprop.0+0x9a>
 80099b8:	782c      	ldrb	r4, [r5, #0]
 80099ba:	2701      	movs	r7, #1
 80099bc:	1cb5      	adds	r5, r6, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d05b      	beq.n	8009a7a <_strtol_l.constprop.0+0xf6>
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d109      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 80099c6:	2c30      	cmp	r4, #48	; 0x30
 80099c8:	d107      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 80099ca:	782c      	ldrb	r4, [r5, #0]
 80099cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099d0:	2c58      	cmp	r4, #88	; 0x58
 80099d2:	d14d      	bne.n	8009a70 <_strtol_l.constprop.0+0xec>
 80099d4:	786c      	ldrb	r4, [r5, #1]
 80099d6:	2310      	movs	r3, #16
 80099d8:	3502      	adds	r5, #2
 80099da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80099de:	f108 38ff 	add.w	r8, r8, #4294967295
 80099e2:	f04f 0e00 	mov.w	lr, #0
 80099e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80099ea:	4676      	mov	r6, lr
 80099ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80099f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80099f4:	f1bc 0f09 	cmp.w	ip, #9
 80099f8:	d816      	bhi.n	8009a28 <_strtol_l.constprop.0+0xa4>
 80099fa:	4664      	mov	r4, ip
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	dd24      	ble.n	8009a4a <_strtol_l.constprop.0+0xc6>
 8009a00:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a04:	d008      	beq.n	8009a18 <_strtol_l.constprop.0+0x94>
 8009a06:	45b1      	cmp	r9, r6
 8009a08:	d31c      	bcc.n	8009a44 <_strtol_l.constprop.0+0xc0>
 8009a0a:	d101      	bne.n	8009a10 <_strtol_l.constprop.0+0x8c>
 8009a0c:	45a2      	cmp	sl, r4
 8009a0e:	db19      	blt.n	8009a44 <_strtol_l.constprop.0+0xc0>
 8009a10:	fb06 4603 	mla	r6, r6, r3, r4
 8009a14:	f04f 0e01 	mov.w	lr, #1
 8009a18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a1c:	e7e8      	b.n	80099f0 <_strtol_l.constprop.0+0x6c>
 8009a1e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a20:	bf04      	itt	eq
 8009a22:	782c      	ldrbeq	r4, [r5, #0]
 8009a24:	1cb5      	addeq	r5, r6, #2
 8009a26:	e7ca      	b.n	80099be <_strtol_l.constprop.0+0x3a>
 8009a28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a2c:	f1bc 0f19 	cmp.w	ip, #25
 8009a30:	d801      	bhi.n	8009a36 <_strtol_l.constprop.0+0xb2>
 8009a32:	3c37      	subs	r4, #55	; 0x37
 8009a34:	e7e2      	b.n	80099fc <_strtol_l.constprop.0+0x78>
 8009a36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a3a:	f1bc 0f19 	cmp.w	ip, #25
 8009a3e:	d804      	bhi.n	8009a4a <_strtol_l.constprop.0+0xc6>
 8009a40:	3c57      	subs	r4, #87	; 0x57
 8009a42:	e7db      	b.n	80099fc <_strtol_l.constprop.0+0x78>
 8009a44:	f04f 3eff 	mov.w	lr, #4294967295
 8009a48:	e7e6      	b.n	8009a18 <_strtol_l.constprop.0+0x94>
 8009a4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a4e:	d105      	bne.n	8009a5c <_strtol_l.constprop.0+0xd8>
 8009a50:	2322      	movs	r3, #34	; 0x22
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	4646      	mov	r6, r8
 8009a56:	b942      	cbnz	r2, 8009a6a <_strtol_l.constprop.0+0xe6>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	e79e      	b.n	800999a <_strtol_l.constprop.0+0x16>
 8009a5c:	b107      	cbz	r7, 8009a60 <_strtol_l.constprop.0+0xdc>
 8009a5e:	4276      	negs	r6, r6
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d0f9      	beq.n	8009a58 <_strtol_l.constprop.0+0xd4>
 8009a64:	f1be 0f00 	cmp.w	lr, #0
 8009a68:	d000      	beq.n	8009a6c <_strtol_l.constprop.0+0xe8>
 8009a6a:	1e69      	subs	r1, r5, #1
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	e7f3      	b.n	8009a58 <_strtol_l.constprop.0+0xd4>
 8009a70:	2430      	movs	r4, #48	; 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1b1      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 8009a76:	2308      	movs	r3, #8
 8009a78:	e7af      	b.n	80099da <_strtol_l.constprop.0+0x56>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d0a5      	beq.n	80099ca <_strtol_l.constprop.0+0x46>
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e7ab      	b.n	80099da <_strtol_l.constprop.0+0x56>
 8009a82:	bf00      	nop
 8009a84:	0800b9d9 	.word	0x0800b9d9

08009a88 <_strtol_r>:
 8009a88:	f7ff bf7c 	b.w	8009984 <_strtol_l.constprop.0>

08009a8c <__ssputs_r>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	688e      	ldr	r6, [r1, #8]
 8009a92:	461f      	mov	r7, r3
 8009a94:	42be      	cmp	r6, r7
 8009a96:	680b      	ldr	r3, [r1, #0]
 8009a98:	4682      	mov	sl, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	4690      	mov	r8, r2
 8009a9e:	d82c      	bhi.n	8009afa <__ssputs_r+0x6e>
 8009aa0:	898a      	ldrh	r2, [r1, #12]
 8009aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009aa6:	d026      	beq.n	8009af6 <__ssputs_r+0x6a>
 8009aa8:	6965      	ldr	r5, [r4, #20]
 8009aaa:	6909      	ldr	r1, [r1, #16]
 8009aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ab0:	eba3 0901 	sub.w	r9, r3, r1
 8009ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ab8:	1c7b      	adds	r3, r7, #1
 8009aba:	444b      	add	r3, r9
 8009abc:	106d      	asrs	r5, r5, #1
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	bf38      	it	cc
 8009ac2:	461d      	movcc	r5, r3
 8009ac4:	0553      	lsls	r3, r2, #21
 8009ac6:	d527      	bpl.n	8009b18 <__ssputs_r+0x8c>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7fc fbb1 	bl	8006230 <_malloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	b360      	cbz	r0, 8009b2c <__ssputs_r+0xa0>
 8009ad2:	6921      	ldr	r1, [r4, #16]
 8009ad4:	464a      	mov	r2, r9
 8009ad6:	f000 ff55 	bl	800a984 <memcpy>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	6126      	str	r6, [r4, #16]
 8009ae8:	6165      	str	r5, [r4, #20]
 8009aea:	444e      	add	r6, r9
 8009aec:	eba5 0509 	sub.w	r5, r5, r9
 8009af0:	6026      	str	r6, [r4, #0]
 8009af2:	60a5      	str	r5, [r4, #8]
 8009af4:	463e      	mov	r6, r7
 8009af6:	42be      	cmp	r6, r7
 8009af8:	d900      	bls.n	8009afc <__ssputs_r+0x70>
 8009afa:	463e      	mov	r6, r7
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	4632      	mov	r2, r6
 8009b00:	4641      	mov	r1, r8
 8009b02:	f000 ff02 	bl	800a90a <memmove>
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	1b9b      	subs	r3, r3, r6
 8009b0a:	60a3      	str	r3, [r4, #8]
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	4433      	add	r3, r6
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	2000      	movs	r0, #0
 8009b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b18:	462a      	mov	r2, r5
 8009b1a:	f001 fae6 	bl	800b0ea <_realloc_r>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1e0      	bne.n	8009ae6 <__ssputs_r+0x5a>
 8009b24:	6921      	ldr	r1, [r4, #16]
 8009b26:	4650      	mov	r0, sl
 8009b28:	f7fe fc20 	bl	800836c <_free_r>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	f8ca 3000 	str.w	r3, [sl]
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	e7e9      	b.n	8009b14 <__ssputs_r+0x88>

08009b40 <_svfiprintf_r>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4698      	mov	r8, r3
 8009b46:	898b      	ldrh	r3, [r1, #12]
 8009b48:	061b      	lsls	r3, r3, #24
 8009b4a:	b09d      	sub	sp, #116	; 0x74
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	4614      	mov	r4, r2
 8009b52:	d50e      	bpl.n	8009b72 <_svfiprintf_r+0x32>
 8009b54:	690b      	ldr	r3, [r1, #16]
 8009b56:	b963      	cbnz	r3, 8009b72 <_svfiprintf_r+0x32>
 8009b58:	2140      	movs	r1, #64	; 0x40
 8009b5a:	f7fc fb69 	bl	8006230 <_malloc_r>
 8009b5e:	6028      	str	r0, [r5, #0]
 8009b60:	6128      	str	r0, [r5, #16]
 8009b62:	b920      	cbnz	r0, 8009b6e <_svfiprintf_r+0x2e>
 8009b64:	230c      	movs	r3, #12
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	e0d0      	b.n	8009d10 <_svfiprintf_r+0x1d0>
 8009b6e:	2340      	movs	r3, #64	; 0x40
 8009b70:	616b      	str	r3, [r5, #20]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9309      	str	r3, [sp, #36]	; 0x24
 8009b76:	2320      	movs	r3, #32
 8009b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b80:	2330      	movs	r3, #48	; 0x30
 8009b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d28 <_svfiprintf_r+0x1e8>
 8009b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b8a:	f04f 0901 	mov.w	r9, #1
 8009b8e:	4623      	mov	r3, r4
 8009b90:	469a      	mov	sl, r3
 8009b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b96:	b10a      	cbz	r2, 8009b9c <_svfiprintf_r+0x5c>
 8009b98:	2a25      	cmp	r2, #37	; 0x25
 8009b9a:	d1f9      	bne.n	8009b90 <_svfiprintf_r+0x50>
 8009b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ba0:	d00b      	beq.n	8009bba <_svfiprintf_r+0x7a>
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ff6f 	bl	8009a8c <__ssputs_r>
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f000 80a9 	beq.w	8009d06 <_svfiprintf_r+0x1c6>
 8009bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb6:	445a      	add	r2, fp
 8009bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bba:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 80a1 	beq.w	8009d06 <_svfiprintf_r+0x1c6>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bce:	f10a 0a01 	add.w	sl, sl, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bda:	931a      	str	r3, [sp, #104]	; 0x68
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2205      	movs	r2, #5
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	4850      	ldr	r0, [pc, #320]	; (8009d28 <_svfiprintf_r+0x1e8>)
 8009be6:	f7f6 faf3 	bl	80001d0 <memchr>
 8009bea:	9a04      	ldr	r2, [sp, #16]
 8009bec:	b9d8      	cbnz	r0, 8009c26 <_svfiprintf_r+0xe6>
 8009bee:	06d0      	lsls	r0, r2, #27
 8009bf0:	bf44      	itt	mi
 8009bf2:	2320      	movmi	r3, #32
 8009bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf8:	0711      	lsls	r1, r2, #28
 8009bfa:	bf44      	itt	mi
 8009bfc:	232b      	movmi	r3, #43	; 0x2b
 8009bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c02:	f89a 3000 	ldrb.w	r3, [sl]
 8009c06:	2b2a      	cmp	r3, #42	; 0x2a
 8009c08:	d015      	beq.n	8009c36 <_svfiprintf_r+0xf6>
 8009c0a:	9a07      	ldr	r2, [sp, #28]
 8009c0c:	4654      	mov	r4, sl
 8009c0e:	2000      	movs	r0, #0
 8009c10:	f04f 0c0a 	mov.w	ip, #10
 8009c14:	4621      	mov	r1, r4
 8009c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c1a:	3b30      	subs	r3, #48	; 0x30
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	d94d      	bls.n	8009cbc <_svfiprintf_r+0x17c>
 8009c20:	b1b0      	cbz	r0, 8009c50 <_svfiprintf_r+0x110>
 8009c22:	9207      	str	r2, [sp, #28]
 8009c24:	e014      	b.n	8009c50 <_svfiprintf_r+0x110>
 8009c26:	eba0 0308 	sub.w	r3, r0, r8
 8009c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	46a2      	mov	sl, r4
 8009c34:	e7d2      	b.n	8009bdc <_svfiprintf_r+0x9c>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	1d19      	adds	r1, r3, #4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	9103      	str	r1, [sp, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfbb      	ittet	lt
 8009c42:	425b      	neglt	r3, r3
 8009c44:	f042 0202 	orrlt.w	r2, r2, #2
 8009c48:	9307      	strge	r3, [sp, #28]
 8009c4a:	9307      	strlt	r3, [sp, #28]
 8009c4c:	bfb8      	it	lt
 8009c4e:	9204      	strlt	r2, [sp, #16]
 8009c50:	7823      	ldrb	r3, [r4, #0]
 8009c52:	2b2e      	cmp	r3, #46	; 0x2e
 8009c54:	d10c      	bne.n	8009c70 <_svfiprintf_r+0x130>
 8009c56:	7863      	ldrb	r3, [r4, #1]
 8009c58:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5a:	d134      	bne.n	8009cc6 <_svfiprintf_r+0x186>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d1a      	adds	r2, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9203      	str	r2, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfb8      	it	lt
 8009c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c6c:	3402      	adds	r4, #2
 8009c6e:	9305      	str	r3, [sp, #20]
 8009c70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d38 <_svfiprintf_r+0x1f8>
 8009c74:	7821      	ldrb	r1, [r4, #0]
 8009c76:	2203      	movs	r2, #3
 8009c78:	4650      	mov	r0, sl
 8009c7a:	f7f6 faa9 	bl	80001d0 <memchr>
 8009c7e:	b138      	cbz	r0, 8009c90 <_svfiprintf_r+0x150>
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	eba0 000a 	sub.w	r0, r0, sl
 8009c86:	2240      	movs	r2, #64	; 0x40
 8009c88:	4082      	lsls	r2, r0
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	9304      	str	r3, [sp, #16]
 8009c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c94:	4825      	ldr	r0, [pc, #148]	; (8009d2c <_svfiprintf_r+0x1ec>)
 8009c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c9a:	2206      	movs	r2, #6
 8009c9c:	f7f6 fa98 	bl	80001d0 <memchr>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d038      	beq.n	8009d16 <_svfiprintf_r+0x1d6>
 8009ca4:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <_svfiprintf_r+0x1f0>)
 8009ca6:	bb1b      	cbnz	r3, 8009cf0 <_svfiprintf_r+0x1b0>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	3307      	adds	r3, #7
 8009cac:	f023 0307 	bic.w	r3, r3, #7
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb6:	4433      	add	r3, r6
 8009cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cba:	e768      	b.n	8009b8e <_svfiprintf_r+0x4e>
 8009cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7a6      	b.n	8009c14 <_svfiprintf_r+0xd4>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	3401      	adds	r4, #1
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f04f 0c0a 	mov.w	ip, #10
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd8:	3a30      	subs	r2, #48	; 0x30
 8009cda:	2a09      	cmp	r2, #9
 8009cdc:	d903      	bls.n	8009ce6 <_svfiprintf_r+0x1a6>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0c6      	beq.n	8009c70 <_svfiprintf_r+0x130>
 8009ce2:	9105      	str	r1, [sp, #20]
 8009ce4:	e7c4      	b.n	8009c70 <_svfiprintf_r+0x130>
 8009ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cea:	4604      	mov	r4, r0
 8009cec:	2301      	movs	r3, #1
 8009cee:	e7f0      	b.n	8009cd2 <_svfiprintf_r+0x192>
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <_svfiprintf_r+0x1f4>)
 8009cf8:	a904      	add	r1, sp, #16
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f7fc fbc4 	bl	8006488 <_printf_float>
 8009d00:	1c42      	adds	r2, r0, #1
 8009d02:	4606      	mov	r6, r0
 8009d04:	d1d6      	bne.n	8009cb4 <_svfiprintf_r+0x174>
 8009d06:	89ab      	ldrh	r3, [r5, #12]
 8009d08:	065b      	lsls	r3, r3, #25
 8009d0a:	f53f af2d 	bmi.w	8009b68 <_svfiprintf_r+0x28>
 8009d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d10:	b01d      	add	sp, #116	; 0x74
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	ab03      	add	r3, sp, #12
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	462a      	mov	r2, r5
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <_svfiprintf_r+0x1f4>)
 8009d1e:	a904      	add	r1, sp, #16
 8009d20:	4638      	mov	r0, r7
 8009d22:	f7fc fe55 	bl	80069d0 <_printf_i>
 8009d26:	e7eb      	b.n	8009d00 <_svfiprintf_r+0x1c0>
 8009d28:	0800bad9 	.word	0x0800bad9
 8009d2c:	0800bae3 	.word	0x0800bae3
 8009d30:	08006489 	.word	0x08006489
 8009d34:	08009a8d 	.word	0x08009a8d
 8009d38:	0800badf 	.word	0x0800badf

08009d3c <_sungetc_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	1c4b      	adds	r3, r1, #1
 8009d40:	4614      	mov	r4, r2
 8009d42:	d103      	bne.n	8009d4c <_sungetc_r+0x10>
 8009d44:	f04f 35ff 	mov.w	r5, #4294967295
 8009d48:	4628      	mov	r0, r5
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	8993      	ldrh	r3, [r2, #12]
 8009d4e:	f023 0320 	bic.w	r3, r3, #32
 8009d52:	8193      	strh	r3, [r2, #12]
 8009d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d56:	6852      	ldr	r2, [r2, #4]
 8009d58:	b2cd      	uxtb	r5, r1
 8009d5a:	b18b      	cbz	r3, 8009d80 <_sungetc_r+0x44>
 8009d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	dd08      	ble.n	8009d74 <_sungetc_r+0x38>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	6022      	str	r2, [r4, #0]
 8009d68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009d6c:	6863      	ldr	r3, [r4, #4]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	6063      	str	r3, [r4, #4]
 8009d72:	e7e9      	b.n	8009d48 <_sungetc_r+0xc>
 8009d74:	4621      	mov	r1, r4
 8009d76:	f000 fd8e 	bl	800a896 <__submore>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d0f1      	beq.n	8009d62 <_sungetc_r+0x26>
 8009d7e:	e7e1      	b.n	8009d44 <_sungetc_r+0x8>
 8009d80:	6921      	ldr	r1, [r4, #16]
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	b151      	cbz	r1, 8009d9c <_sungetc_r+0x60>
 8009d86:	4299      	cmp	r1, r3
 8009d88:	d208      	bcs.n	8009d9c <_sungetc_r+0x60>
 8009d8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009d8e:	42a9      	cmp	r1, r5
 8009d90:	d104      	bne.n	8009d9c <_sungetc_r+0x60>
 8009d92:	3b01      	subs	r3, #1
 8009d94:	3201      	adds	r2, #1
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	6062      	str	r2, [r4, #4]
 8009d9a:	e7d5      	b.n	8009d48 <_sungetc_r+0xc>
 8009d9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009da4:	6363      	str	r3, [r4, #52]	; 0x34
 8009da6:	2303      	movs	r3, #3
 8009da8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009daa:	4623      	mov	r3, r4
 8009dac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	2301      	movs	r3, #1
 8009db4:	e7dc      	b.n	8009d70 <_sungetc_r+0x34>

08009db6 <__ssrefill_r>:
 8009db6:	b510      	push	{r4, lr}
 8009db8:	460c      	mov	r4, r1
 8009dba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009dbc:	b169      	cbz	r1, 8009dda <__ssrefill_r+0x24>
 8009dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	d001      	beq.n	8009dca <__ssrefill_r+0x14>
 8009dc6:	f7fe fad1 	bl	800836c <_free_r>
 8009dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	2000      	movs	r0, #0
 8009dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8009dd2:	b113      	cbz	r3, 8009dda <__ssrefill_r+0x24>
 8009dd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	2300      	movs	r3, #0
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f043 0320 	orr.w	r3, r3, #32
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	e7f3      	b.n	8009dd8 <__ssrefill_r+0x22>

08009df0 <__ssvfiscanf_r>:
 8009df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009e00:	49a6      	ldr	r1, [pc, #664]	; (800a09c <__ssvfiscanf_r+0x2ac>)
 8009e02:	91a0      	str	r1, [sp, #640]	; 0x280
 8009e04:	f10d 0804 	add.w	r8, sp, #4
 8009e08:	49a5      	ldr	r1, [pc, #660]	; (800a0a0 <__ssvfiscanf_r+0x2b0>)
 8009e0a:	4fa6      	ldr	r7, [pc, #664]	; (800a0a4 <__ssvfiscanf_r+0x2b4>)
 8009e0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a0a8 <__ssvfiscanf_r+0x2b8>
 8009e10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009e14:	4606      	mov	r6, r0
 8009e16:	91a1      	str	r1, [sp, #644]	; 0x284
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	7813      	ldrb	r3, [r2, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 815a 	beq.w	800a0d6 <__ssvfiscanf_r+0x2e6>
 8009e22:	5cf9      	ldrb	r1, [r7, r3]
 8009e24:	f011 0108 	ands.w	r1, r1, #8
 8009e28:	f102 0501 	add.w	r5, r2, #1
 8009e2c:	d019      	beq.n	8009e62 <__ssvfiscanf_r+0x72>
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dd0f      	ble.n	8009e54 <__ssvfiscanf_r+0x64>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	5cba      	ldrb	r2, [r7, r2]
 8009e3a:	0712      	lsls	r2, r2, #28
 8009e3c:	d401      	bmi.n	8009e42 <__ssvfiscanf_r+0x52>
 8009e3e:	462a      	mov	r2, r5
 8009e40:	e7eb      	b.n	8009e1a <__ssvfiscanf_r+0x2a>
 8009e42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e44:	3201      	adds	r2, #1
 8009e46:	9245      	str	r2, [sp, #276]	; 0x114
 8009e48:	6862      	ldr	r2, [r4, #4]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	3a01      	subs	r2, #1
 8009e4e:	6062      	str	r2, [r4, #4]
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	e7ec      	b.n	8009e2e <__ssvfiscanf_r+0x3e>
 8009e54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e56:	4621      	mov	r1, r4
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4798      	blx	r3
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d0e9      	beq.n	8009e34 <__ssvfiscanf_r+0x44>
 8009e60:	e7ed      	b.n	8009e3e <__ssvfiscanf_r+0x4e>
 8009e62:	2b25      	cmp	r3, #37	; 0x25
 8009e64:	d012      	beq.n	8009e8c <__ssvfiscanf_r+0x9c>
 8009e66:	469a      	mov	sl, r3
 8009e68:	6863      	ldr	r3, [r4, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f340 8091 	ble.w	8009f92 <__ssvfiscanf_r+0x1a2>
 8009e70:	6822      	ldr	r2, [r4, #0]
 8009e72:	7813      	ldrb	r3, [r2, #0]
 8009e74:	4553      	cmp	r3, sl
 8009e76:	f040 812e 	bne.w	800a0d6 <__ssvfiscanf_r+0x2e6>
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	6063      	str	r3, [r4, #4]
 8009e80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009e82:	3201      	adds	r2, #1
 8009e84:	3301      	adds	r3, #1
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	9345      	str	r3, [sp, #276]	; 0x114
 8009e8a:	e7d8      	b.n	8009e3e <__ssvfiscanf_r+0x4e>
 8009e8c:	9141      	str	r1, [sp, #260]	; 0x104
 8009e8e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009e90:	7853      	ldrb	r3, [r2, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	bf02      	ittt	eq
 8009e96:	2310      	moveq	r3, #16
 8009e98:	1c95      	addeq	r5, r2, #2
 8009e9a:	9341      	streq	r3, [sp, #260]	; 0x104
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	46aa      	mov	sl, r5
 8009ea0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009ea4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009ea8:	2b09      	cmp	r3, #9
 8009eaa:	d91c      	bls.n	8009ee6 <__ssvfiscanf_r+0xf6>
 8009eac:	487e      	ldr	r0, [pc, #504]	; (800a0a8 <__ssvfiscanf_r+0x2b8>)
 8009eae:	2203      	movs	r2, #3
 8009eb0:	f7f6 f98e 	bl	80001d0 <memchr>
 8009eb4:	b138      	cbz	r0, 8009ec6 <__ssvfiscanf_r+0xd6>
 8009eb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009eb8:	eba0 0009 	sub.w	r0, r0, r9
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4083      	lsls	r3, r0
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	9341      	str	r3, [sp, #260]	; 0x104
 8009ec4:	4655      	mov	r5, sl
 8009ec6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009eca:	2b78      	cmp	r3, #120	; 0x78
 8009ecc:	d806      	bhi.n	8009edc <__ssvfiscanf_r+0xec>
 8009ece:	2b57      	cmp	r3, #87	; 0x57
 8009ed0:	d810      	bhi.n	8009ef4 <__ssvfiscanf_r+0x104>
 8009ed2:	2b25      	cmp	r3, #37	; 0x25
 8009ed4:	d0c7      	beq.n	8009e66 <__ssvfiscanf_r+0x76>
 8009ed6:	d857      	bhi.n	8009f88 <__ssvfiscanf_r+0x198>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d065      	beq.n	8009fa8 <__ssvfiscanf_r+0x1b8>
 8009edc:	2303      	movs	r3, #3
 8009ede:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ee0:	230a      	movs	r3, #10
 8009ee2:	9342      	str	r3, [sp, #264]	; 0x108
 8009ee4:	e076      	b.n	8009fd4 <__ssvfiscanf_r+0x1e4>
 8009ee6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009ee8:	fb02 1103 	mla	r1, r2, r3, r1
 8009eec:	3930      	subs	r1, #48	; 0x30
 8009eee:	9143      	str	r1, [sp, #268]	; 0x10c
 8009ef0:	4655      	mov	r5, sl
 8009ef2:	e7d4      	b.n	8009e9e <__ssvfiscanf_r+0xae>
 8009ef4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009ef8:	2a20      	cmp	r2, #32
 8009efa:	d8ef      	bhi.n	8009edc <__ssvfiscanf_r+0xec>
 8009efc:	a101      	add	r1, pc, #4	; (adr r1, 8009f04 <__ssvfiscanf_r+0x114>)
 8009efe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009fb7 	.word	0x08009fb7
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009edd 	.word	0x08009edd
 8009f10:	0800a015 	.word	0x0800a015
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	08009edd 	.word	0x08009edd
 8009f24:	08009edd 	.word	0x08009edd
 8009f28:	08009edd 	.word	0x08009edd
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	0800a02b 	.word	0x0800a02b
 8009f34:	0800a011 	.word	0x0800a011
 8009f38:	08009f8f 	.word	0x08009f8f
 8009f3c:	08009f8f 	.word	0x08009f8f
 8009f40:	08009f8f 	.word	0x08009f8f
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	08009fcd 	.word	0x08009fcd
 8009f4c:	08009edd 	.word	0x08009edd
 8009f50:	08009edd 	.word	0x08009edd
 8009f54:	08009edd 	.word	0x08009edd
 8009f58:	08009edd 	.word	0x08009edd
 8009f5c:	0800a03b 	.word	0x0800a03b
 8009f60:	0800a009 	.word	0x0800a009
 8009f64:	08009faf 	.word	0x08009faf
 8009f68:	08009edd 	.word	0x08009edd
 8009f6c:	08009edd 	.word	0x08009edd
 8009f70:	0800a037 	.word	0x0800a037
 8009f74:	08009edd 	.word	0x08009edd
 8009f78:	0800a011 	.word	0x0800a011
 8009f7c:	08009edd 	.word	0x08009edd
 8009f80:	08009edd 	.word	0x08009edd
 8009f84:	08009fb7 	.word	0x08009fb7
 8009f88:	3b45      	subs	r3, #69	; 0x45
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d8a6      	bhi.n	8009edc <__ssvfiscanf_r+0xec>
 8009f8e:	2305      	movs	r3, #5
 8009f90:	e01f      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 8009f92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f94:	4621      	mov	r1, r4
 8009f96:	4630      	mov	r0, r6
 8009f98:	4798      	blx	r3
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	f43f af68 	beq.w	8009e70 <__ssvfiscanf_r+0x80>
 8009fa0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f040 808d 	bne.w	800a0c2 <__ssvfiscanf_r+0x2d2>
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	e08f      	b.n	800a0ce <__ssvfiscanf_r+0x2de>
 8009fae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fb0:	f042 0220 	orr.w	r2, r2, #32
 8009fb4:	9241      	str	r2, [sp, #260]	; 0x104
 8009fb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fbc:	9241      	str	r2, [sp, #260]	; 0x104
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	2b6f      	cmp	r3, #111	; 0x6f
 8009fc2:	9242      	str	r2, [sp, #264]	; 0x108
 8009fc4:	bf34      	ite	cc
 8009fc6:	2303      	movcc	r3, #3
 8009fc8:	2304      	movcs	r3, #4
 8009fca:	e002      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9342      	str	r3, [sp, #264]	; 0x108
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8009fd4:	6863      	ldr	r3, [r4, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dd3d      	ble.n	800a056 <__ssvfiscanf_r+0x266>
 8009fda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fdc:	0659      	lsls	r1, r3, #25
 8009fde:	d404      	bmi.n	8009fea <__ssvfiscanf_r+0x1fa>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	781a      	ldrb	r2, [r3, #0]
 8009fe4:	5cba      	ldrb	r2, [r7, r2]
 8009fe6:	0712      	lsls	r2, r2, #28
 8009fe8:	d43c      	bmi.n	800a064 <__ssvfiscanf_r+0x274>
 8009fea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	dc4b      	bgt.n	800a088 <__ssvfiscanf_r+0x298>
 8009ff0:	466b      	mov	r3, sp
 8009ff2:	4622      	mov	r2, r4
 8009ff4:	a941      	add	r1, sp, #260	; 0x104
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f000 f9b6 	bl	800a368 <_scanf_chars>
 8009ffc:	2801      	cmp	r0, #1
 8009ffe:	d06a      	beq.n	800a0d6 <__ssvfiscanf_r+0x2e6>
 800a000:	2802      	cmp	r0, #2
 800a002:	f47f af1c 	bne.w	8009e3e <__ssvfiscanf_r+0x4e>
 800a006:	e7cb      	b.n	8009fa0 <__ssvfiscanf_r+0x1b0>
 800a008:	2308      	movs	r3, #8
 800a00a:	9342      	str	r3, [sp, #264]	; 0x108
 800a00c:	2304      	movs	r3, #4
 800a00e:	e7e0      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 800a010:	220a      	movs	r2, #10
 800a012:	e7d5      	b.n	8009fc0 <__ssvfiscanf_r+0x1d0>
 800a014:	4629      	mov	r1, r5
 800a016:	4640      	mov	r0, r8
 800a018:	f000 fc04 	bl	800a824 <__sccl>
 800a01c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	9341      	str	r3, [sp, #260]	; 0x104
 800a024:	4605      	mov	r5, r0
 800a026:	2301      	movs	r3, #1
 800a028:	e7d3      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 800a02a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a030:	9341      	str	r3, [sp, #260]	; 0x104
 800a032:	2300      	movs	r3, #0
 800a034:	e7cd      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 800a036:	2302      	movs	r3, #2
 800a038:	e7cb      	b.n	8009fd2 <__ssvfiscanf_r+0x1e2>
 800a03a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a03c:	06c3      	lsls	r3, r0, #27
 800a03e:	f53f aefe 	bmi.w	8009e3e <__ssvfiscanf_r+0x4e>
 800a042:	9b00      	ldr	r3, [sp, #0]
 800a044:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a046:	1d19      	adds	r1, r3, #4
 800a048:	9100      	str	r1, [sp, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	07c0      	lsls	r0, r0, #31
 800a04e:	bf4c      	ite	mi
 800a050:	801a      	strhmi	r2, [r3, #0]
 800a052:	601a      	strpl	r2, [r3, #0]
 800a054:	e6f3      	b.n	8009e3e <__ssvfiscanf_r+0x4e>
 800a056:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a058:	4621      	mov	r1, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	4798      	blx	r3
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0bb      	beq.n	8009fda <__ssvfiscanf_r+0x1ea>
 800a062:	e79d      	b.n	8009fa0 <__ssvfiscanf_r+0x1b0>
 800a064:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a066:	3201      	adds	r2, #1
 800a068:	9245      	str	r2, [sp, #276]	; 0x114
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	3a01      	subs	r2, #1
 800a06e:	2a00      	cmp	r2, #0
 800a070:	6062      	str	r2, [r4, #4]
 800a072:	dd02      	ble.n	800a07a <__ssvfiscanf_r+0x28a>
 800a074:	3301      	adds	r3, #1
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	e7b2      	b.n	8009fe0 <__ssvfiscanf_r+0x1f0>
 800a07a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a07c:	4621      	mov	r1, r4
 800a07e:	4630      	mov	r0, r6
 800a080:	4798      	blx	r3
 800a082:	2800      	cmp	r0, #0
 800a084:	d0ac      	beq.n	8009fe0 <__ssvfiscanf_r+0x1f0>
 800a086:	e78b      	b.n	8009fa0 <__ssvfiscanf_r+0x1b0>
 800a088:	2b04      	cmp	r3, #4
 800a08a:	dc0f      	bgt.n	800a0ac <__ssvfiscanf_r+0x2bc>
 800a08c:	466b      	mov	r3, sp
 800a08e:	4622      	mov	r2, r4
 800a090:	a941      	add	r1, sp, #260	; 0x104
 800a092:	4630      	mov	r0, r6
 800a094:	f000 f9c2 	bl	800a41c <_scanf_i>
 800a098:	e7b0      	b.n	8009ffc <__ssvfiscanf_r+0x20c>
 800a09a:	bf00      	nop
 800a09c:	08009d3d 	.word	0x08009d3d
 800a0a0:	08009db7 	.word	0x08009db7
 800a0a4:	0800b9d9 	.word	0x0800b9d9
 800a0a8:	0800badf 	.word	0x0800badf
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <__ssvfiscanf_r+0x2ec>)
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f43f aec5 	beq.w	8009e3e <__ssvfiscanf_r+0x4e>
 800a0b4:	466b      	mov	r3, sp
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	a941      	add	r1, sp, #260	; 0x104
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7fc fdaa 	bl	8006c14 <_scanf_float>
 800a0c0:	e79c      	b.n	8009ffc <__ssvfiscanf_r+0x20c>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0c8:	bf18      	it	ne
 800a0ca:	f04f 30ff 	movne.w	r0, #4294967295
 800a0ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a0d8:	e7f9      	b.n	800a0ce <__ssvfiscanf_r+0x2de>
 800a0da:	bf00      	nop
 800a0dc:	08006c15 	.word	0x08006c15

0800a0e0 <__sfputc_r>:
 800a0e0:	6893      	ldr	r3, [r2, #8]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	b410      	push	{r4}
 800a0e8:	6093      	str	r3, [r2, #8]
 800a0ea:	da08      	bge.n	800a0fe <__sfputc_r+0x1e>
 800a0ec:	6994      	ldr	r4, [r2, #24]
 800a0ee:	42a3      	cmp	r3, r4
 800a0f0:	db01      	blt.n	800a0f6 <__sfputc_r+0x16>
 800a0f2:	290a      	cmp	r1, #10
 800a0f4:	d103      	bne.n	800a0fe <__sfputc_r+0x1e>
 800a0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0fa:	f7fd b95c 	b.w	80073b6 <__swbuf_r>
 800a0fe:	6813      	ldr	r3, [r2, #0]
 800a100:	1c58      	adds	r0, r3, #1
 800a102:	6010      	str	r0, [r2, #0]
 800a104:	7019      	strb	r1, [r3, #0]
 800a106:	4608      	mov	r0, r1
 800a108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <__sfputs_r>:
 800a10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a110:	4606      	mov	r6, r0
 800a112:	460f      	mov	r7, r1
 800a114:	4614      	mov	r4, r2
 800a116:	18d5      	adds	r5, r2, r3
 800a118:	42ac      	cmp	r4, r5
 800a11a:	d101      	bne.n	800a120 <__sfputs_r+0x12>
 800a11c:	2000      	movs	r0, #0
 800a11e:	e007      	b.n	800a130 <__sfputs_r+0x22>
 800a120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a124:	463a      	mov	r2, r7
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ffda 	bl	800a0e0 <__sfputc_r>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d1f3      	bne.n	800a118 <__sfputs_r+0xa>
 800a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a134 <_vfiprintf_r>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	460d      	mov	r5, r1
 800a13a:	b09d      	sub	sp, #116	; 0x74
 800a13c:	4614      	mov	r4, r2
 800a13e:	4698      	mov	r8, r3
 800a140:	4606      	mov	r6, r0
 800a142:	b118      	cbz	r0, 800a14c <_vfiprintf_r+0x18>
 800a144:	6a03      	ldr	r3, [r0, #32]
 800a146:	b90b      	cbnz	r3, 800a14c <_vfiprintf_r+0x18>
 800a148:	f7fd f800 	bl	800714c <__sinit>
 800a14c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a14e:	07d9      	lsls	r1, r3, #31
 800a150:	d405      	bmi.n	800a15e <_vfiprintf_r+0x2a>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d402      	bmi.n	800a15e <_vfiprintf_r+0x2a>
 800a158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15a:	f7fd fa84 	bl	8007666 <__retarget_lock_acquire_recursive>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	071b      	lsls	r3, r3, #28
 800a162:	d501      	bpl.n	800a168 <_vfiprintf_r+0x34>
 800a164:	692b      	ldr	r3, [r5, #16]
 800a166:	b99b      	cbnz	r3, 800a190 <_vfiprintf_r+0x5c>
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7fd f960 	bl	8007430 <__swsetup_r>
 800a170:	b170      	cbz	r0, 800a190 <_vfiprintf_r+0x5c>
 800a172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a174:	07dc      	lsls	r4, r3, #31
 800a176:	d504      	bpl.n	800a182 <_vfiprintf_r+0x4e>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	b01d      	add	sp, #116	; 0x74
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	0598      	lsls	r0, r3, #22
 800a186:	d4f7      	bmi.n	800a178 <_vfiprintf_r+0x44>
 800a188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a18a:	f7fd fa6d 	bl	8007668 <__retarget_lock_release_recursive>
 800a18e:	e7f3      	b.n	800a178 <_vfiprintf_r+0x44>
 800a190:	2300      	movs	r3, #0
 800a192:	9309      	str	r3, [sp, #36]	; 0x24
 800a194:	2320      	movs	r3, #32
 800a196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a19e:	2330      	movs	r3, #48	; 0x30
 800a1a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a354 <_vfiprintf_r+0x220>
 800a1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1a8:	f04f 0901 	mov.w	r9, #1
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	469a      	mov	sl, r3
 800a1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b4:	b10a      	cbz	r2, 800a1ba <_vfiprintf_r+0x86>
 800a1b6:	2a25      	cmp	r2, #37	; 0x25
 800a1b8:	d1f9      	bne.n	800a1ae <_vfiprintf_r+0x7a>
 800a1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a1be:	d00b      	beq.n	800a1d8 <_vfiprintf_r+0xa4>
 800a1c0:	465b      	mov	r3, fp
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7ff ffa1 	bl	800a10e <__sfputs_r>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f000 80a9 	beq.w	800a324 <_vfiprintf_r+0x1f0>
 800a1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d4:	445a      	add	r2, fp
 800a1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 80a1 	beq.w	800a324 <_vfiprintf_r+0x1f0>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ec:	f10a 0a01 	add.w	sl, sl, #1
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a1fa:	4654      	mov	r4, sl
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a202:	4854      	ldr	r0, [pc, #336]	; (800a354 <_vfiprintf_r+0x220>)
 800a204:	f7f5 ffe4 	bl	80001d0 <memchr>
 800a208:	9a04      	ldr	r2, [sp, #16]
 800a20a:	b9d8      	cbnz	r0, 800a244 <_vfiprintf_r+0x110>
 800a20c:	06d1      	lsls	r1, r2, #27
 800a20e:	bf44      	itt	mi
 800a210:	2320      	movmi	r3, #32
 800a212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a216:	0713      	lsls	r3, r2, #28
 800a218:	bf44      	itt	mi
 800a21a:	232b      	movmi	r3, #43	; 0x2b
 800a21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a220:	f89a 3000 	ldrb.w	r3, [sl]
 800a224:	2b2a      	cmp	r3, #42	; 0x2a
 800a226:	d015      	beq.n	800a254 <_vfiprintf_r+0x120>
 800a228:	9a07      	ldr	r2, [sp, #28]
 800a22a:	4654      	mov	r4, sl
 800a22c:	2000      	movs	r0, #0
 800a22e:	f04f 0c0a 	mov.w	ip, #10
 800a232:	4621      	mov	r1, r4
 800a234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a238:	3b30      	subs	r3, #48	; 0x30
 800a23a:	2b09      	cmp	r3, #9
 800a23c:	d94d      	bls.n	800a2da <_vfiprintf_r+0x1a6>
 800a23e:	b1b0      	cbz	r0, 800a26e <_vfiprintf_r+0x13a>
 800a240:	9207      	str	r2, [sp, #28]
 800a242:	e014      	b.n	800a26e <_vfiprintf_r+0x13a>
 800a244:	eba0 0308 	sub.w	r3, r0, r8
 800a248:	fa09 f303 	lsl.w	r3, r9, r3
 800a24c:	4313      	orrs	r3, r2
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	46a2      	mov	sl, r4
 800a252:	e7d2      	b.n	800a1fa <_vfiprintf_r+0xc6>
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	1d19      	adds	r1, r3, #4
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	9103      	str	r1, [sp, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfbb      	ittet	lt
 800a260:	425b      	neglt	r3, r3
 800a262:	f042 0202 	orrlt.w	r2, r2, #2
 800a266:	9307      	strge	r3, [sp, #28]
 800a268:	9307      	strlt	r3, [sp, #28]
 800a26a:	bfb8      	it	lt
 800a26c:	9204      	strlt	r2, [sp, #16]
 800a26e:	7823      	ldrb	r3, [r4, #0]
 800a270:	2b2e      	cmp	r3, #46	; 0x2e
 800a272:	d10c      	bne.n	800a28e <_vfiprintf_r+0x15a>
 800a274:	7863      	ldrb	r3, [r4, #1]
 800a276:	2b2a      	cmp	r3, #42	; 0x2a
 800a278:	d134      	bne.n	800a2e4 <_vfiprintf_r+0x1b0>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	9203      	str	r2, [sp, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfb8      	it	lt
 800a286:	f04f 33ff 	movlt.w	r3, #4294967295
 800a28a:	3402      	adds	r4, #2
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a364 <_vfiprintf_r+0x230>
 800a292:	7821      	ldrb	r1, [r4, #0]
 800a294:	2203      	movs	r2, #3
 800a296:	4650      	mov	r0, sl
 800a298:	f7f5 ff9a 	bl	80001d0 <memchr>
 800a29c:	b138      	cbz	r0, 800a2ae <_vfiprintf_r+0x17a>
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	eba0 000a 	sub.w	r0, r0, sl
 800a2a4:	2240      	movs	r2, #64	; 0x40
 800a2a6:	4082      	lsls	r2, r0
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	3401      	adds	r4, #1
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b2:	4829      	ldr	r0, [pc, #164]	; (800a358 <_vfiprintf_r+0x224>)
 800a2b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2b8:	2206      	movs	r2, #6
 800a2ba:	f7f5 ff89 	bl	80001d0 <memchr>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d03f      	beq.n	800a342 <_vfiprintf_r+0x20e>
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <_vfiprintf_r+0x228>)
 800a2c4:	bb1b      	cbnz	r3, 800a30e <_vfiprintf_r+0x1da>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	3307      	adds	r3, #7
 800a2ca:	f023 0307 	bic.w	r3, r3, #7
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	443b      	add	r3, r7
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	e768      	b.n	800a1ac <_vfiprintf_r+0x78>
 800a2da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2de:	460c      	mov	r4, r1
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	e7a6      	b.n	800a232 <_vfiprintf_r+0xfe>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	9305      	str	r3, [sp, #20]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	f04f 0c0a 	mov.w	ip, #10
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f6:	3a30      	subs	r2, #48	; 0x30
 800a2f8:	2a09      	cmp	r2, #9
 800a2fa:	d903      	bls.n	800a304 <_vfiprintf_r+0x1d0>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0c6      	beq.n	800a28e <_vfiprintf_r+0x15a>
 800a300:	9105      	str	r1, [sp, #20]
 800a302:	e7c4      	b.n	800a28e <_vfiprintf_r+0x15a>
 800a304:	fb0c 2101 	mla	r1, ip, r1, r2
 800a308:	4604      	mov	r4, r0
 800a30a:	2301      	movs	r3, #1
 800a30c:	e7f0      	b.n	800a2f0 <_vfiprintf_r+0x1bc>
 800a30e:	ab03      	add	r3, sp, #12
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	462a      	mov	r2, r5
 800a314:	4b12      	ldr	r3, [pc, #72]	; (800a360 <_vfiprintf_r+0x22c>)
 800a316:	a904      	add	r1, sp, #16
 800a318:	4630      	mov	r0, r6
 800a31a:	f7fc f8b5 	bl	8006488 <_printf_float>
 800a31e:	4607      	mov	r7, r0
 800a320:	1c78      	adds	r0, r7, #1
 800a322:	d1d6      	bne.n	800a2d2 <_vfiprintf_r+0x19e>
 800a324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d405      	bmi.n	800a336 <_vfiprintf_r+0x202>
 800a32a:	89ab      	ldrh	r3, [r5, #12]
 800a32c:	059a      	lsls	r2, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_vfiprintf_r+0x202>
 800a330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a332:	f7fd f999 	bl	8007668 <__retarget_lock_release_recursive>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	065b      	lsls	r3, r3, #25
 800a33a:	f53f af1d 	bmi.w	800a178 <_vfiprintf_r+0x44>
 800a33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a340:	e71c      	b.n	800a17c <_vfiprintf_r+0x48>
 800a342:	ab03      	add	r3, sp, #12
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	462a      	mov	r2, r5
 800a348:	4b05      	ldr	r3, [pc, #20]	; (800a360 <_vfiprintf_r+0x22c>)
 800a34a:	a904      	add	r1, sp, #16
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7fc fb3f 	bl	80069d0 <_printf_i>
 800a352:	e7e4      	b.n	800a31e <_vfiprintf_r+0x1ea>
 800a354:	0800bad9 	.word	0x0800bad9
 800a358:	0800bae3 	.word	0x0800bae3
 800a35c:	08006489 	.word	0x08006489
 800a360:	0800a10f 	.word	0x0800a10f
 800a364:	0800badf 	.word	0x0800badf

0800a368 <_scanf_chars>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4615      	mov	r5, r2
 800a36e:	688a      	ldr	r2, [r1, #8]
 800a370:	4680      	mov	r8, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b932      	cbnz	r2, 800a384 <_scanf_chars+0x1c>
 800a376:	698a      	ldr	r2, [r1, #24]
 800a378:	2a00      	cmp	r2, #0
 800a37a:	bf0c      	ite	eq
 800a37c:	2201      	moveq	r2, #1
 800a37e:	f04f 32ff 	movne.w	r2, #4294967295
 800a382:	608a      	str	r2, [r1, #8]
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a418 <_scanf_chars+0xb0>
 800a38a:	06d1      	lsls	r1, r2, #27
 800a38c:	bf5f      	itttt	pl
 800a38e:	681a      	ldrpl	r2, [r3, #0]
 800a390:	1d11      	addpl	r1, r2, #4
 800a392:	6019      	strpl	r1, [r3, #0]
 800a394:	6816      	ldrpl	r6, [r2, #0]
 800a396:	2700      	movs	r7, #0
 800a398:	69a0      	ldr	r0, [r4, #24]
 800a39a:	b188      	cbz	r0, 800a3c0 <_scanf_chars+0x58>
 800a39c:	2801      	cmp	r0, #1
 800a39e:	d107      	bne.n	800a3b0 <_scanf_chars+0x48>
 800a3a0:	682a      	ldr	r2, [r5, #0]
 800a3a2:	7811      	ldrb	r1, [r2, #0]
 800a3a4:	6962      	ldr	r2, [r4, #20]
 800a3a6:	5c52      	ldrb	r2, [r2, r1]
 800a3a8:	b952      	cbnz	r2, 800a3c0 <_scanf_chars+0x58>
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d031      	beq.n	800a412 <_scanf_chars+0xaa>
 800a3ae:	e022      	b.n	800a3f6 <_scanf_chars+0x8e>
 800a3b0:	2802      	cmp	r0, #2
 800a3b2:	d120      	bne.n	800a3f6 <_scanf_chars+0x8e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a3bc:	071b      	lsls	r3, r3, #28
 800a3be:	d41a      	bmi.n	800a3f6 <_scanf_chars+0x8e>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	06da      	lsls	r2, r3, #27
 800a3c4:	bf5e      	ittt	pl
 800a3c6:	682b      	ldrpl	r3, [r5, #0]
 800a3c8:	781b      	ldrbpl	r3, [r3, #0]
 800a3ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a3ce:	682a      	ldr	r2, [r5, #0]
 800a3d0:	686b      	ldr	r3, [r5, #4]
 800a3d2:	3201      	adds	r2, #1
 800a3d4:	602a      	str	r2, [r5, #0]
 800a3d6:	68a2      	ldr	r2, [r4, #8]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	3a01      	subs	r2, #1
 800a3dc:	606b      	str	r3, [r5, #4]
 800a3de:	3701      	adds	r7, #1
 800a3e0:	60a2      	str	r2, [r4, #8]
 800a3e2:	b142      	cbz	r2, 800a3f6 <_scanf_chars+0x8e>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dcd7      	bgt.n	800a398 <_scanf_chars+0x30>
 800a3e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	4798      	blx	r3
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0d0      	beq.n	800a398 <_scanf_chars+0x30>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	f013 0310 	ands.w	r3, r3, #16
 800a3fc:	d105      	bne.n	800a40a <_scanf_chars+0xa2>
 800a3fe:	68e2      	ldr	r2, [r4, #12]
 800a400:	3201      	adds	r2, #1
 800a402:	60e2      	str	r2, [r4, #12]
 800a404:	69a2      	ldr	r2, [r4, #24]
 800a406:	b102      	cbz	r2, 800a40a <_scanf_chars+0xa2>
 800a408:	7033      	strb	r3, [r6, #0]
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	443b      	add	r3, r7
 800a40e:	6123      	str	r3, [r4, #16]
 800a410:	2000      	movs	r0, #0
 800a412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a416:	bf00      	nop
 800a418:	0800b9d9 	.word	0x0800b9d9

0800a41c <_scanf_i>:
 800a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a420:	4698      	mov	r8, r3
 800a422:	4b74      	ldr	r3, [pc, #464]	; (800a5f4 <_scanf_i+0x1d8>)
 800a424:	460c      	mov	r4, r1
 800a426:	4682      	mov	sl, r0
 800a428:	4616      	mov	r6, r2
 800a42a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a42e:	b087      	sub	sp, #28
 800a430:	ab03      	add	r3, sp, #12
 800a432:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a436:	4b70      	ldr	r3, [pc, #448]	; (800a5f8 <_scanf_i+0x1dc>)
 800a438:	69a1      	ldr	r1, [r4, #24]
 800a43a:	4a70      	ldr	r2, [pc, #448]	; (800a5fc <_scanf_i+0x1e0>)
 800a43c:	2903      	cmp	r1, #3
 800a43e:	bf18      	it	ne
 800a440:	461a      	movne	r2, r3
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	9201      	str	r2, [sp, #4]
 800a446:	1e5a      	subs	r2, r3, #1
 800a448:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a44c:	bf88      	it	hi
 800a44e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a452:	4627      	mov	r7, r4
 800a454:	bf82      	ittt	hi
 800a456:	eb03 0905 	addhi.w	r9, r3, r5
 800a45a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a45e:	60a3      	strhi	r3, [r4, #8]
 800a460:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a464:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a468:	bf98      	it	ls
 800a46a:	f04f 0900 	movls.w	r9, #0
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	463d      	mov	r5, r7
 800a472:	f04f 0b00 	mov.w	fp, #0
 800a476:	6831      	ldr	r1, [r6, #0]
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	7809      	ldrb	r1, [r1, #0]
 800a47c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a480:	2202      	movs	r2, #2
 800a482:	f7f5 fea5 	bl	80001d0 <memchr>
 800a486:	b328      	cbz	r0, 800a4d4 <_scanf_i+0xb8>
 800a488:	f1bb 0f01 	cmp.w	fp, #1
 800a48c:	d159      	bne.n	800a542 <_scanf_i+0x126>
 800a48e:	6862      	ldr	r2, [r4, #4]
 800a490:	b92a      	cbnz	r2, 800a49e <_scanf_i+0x82>
 800a492:	6822      	ldr	r2, [r4, #0]
 800a494:	2308      	movs	r3, #8
 800a496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a49a:	6063      	str	r3, [r4, #4]
 800a49c:	6022      	str	r2, [r4, #0]
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	68a2      	ldr	r2, [r4, #8]
 800a4a8:	1e51      	subs	r1, r2, #1
 800a4aa:	60a1      	str	r1, [r4, #8]
 800a4ac:	b192      	cbz	r2, 800a4d4 <_scanf_i+0xb8>
 800a4ae:	6832      	ldr	r2, [r6, #0]
 800a4b0:	1c51      	adds	r1, r2, #1
 800a4b2:	6031      	str	r1, [r6, #0]
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	f805 2b01 	strb.w	r2, [r5], #1
 800a4ba:	6872      	ldr	r2, [r6, #4]
 800a4bc:	3a01      	subs	r2, #1
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	6072      	str	r2, [r6, #4]
 800a4c2:	dc07      	bgt.n	800a4d4 <_scanf_i+0xb8>
 800a4c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4790      	blx	r2
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f040 8085 	bne.w	800a5de <_scanf_i+0x1c2>
 800a4d4:	f10b 0b01 	add.w	fp, fp, #1
 800a4d8:	f1bb 0f03 	cmp.w	fp, #3
 800a4dc:	d1cb      	bne.n	800a476 <_scanf_i+0x5a>
 800a4de:	6863      	ldr	r3, [r4, #4]
 800a4e0:	b90b      	cbnz	r3, 800a4e6 <_scanf_i+0xca>
 800a4e2:	230a      	movs	r3, #10
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	4945      	ldr	r1, [pc, #276]	; (800a600 <_scanf_i+0x1e4>)
 800a4ea:	6960      	ldr	r0, [r4, #20]
 800a4ec:	1ac9      	subs	r1, r1, r3
 800a4ee:	f000 f999 	bl	800a824 <__sccl>
 800a4f2:	f04f 0b00 	mov.w	fp, #0
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d03d      	beq.n	800a57a <_scanf_i+0x15e>
 800a4fe:	6831      	ldr	r1, [r6, #0]
 800a500:	6960      	ldr	r0, [r4, #20]
 800a502:	f891 c000 	ldrb.w	ip, [r1]
 800a506:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d035      	beq.n	800a57a <_scanf_i+0x15e>
 800a50e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a512:	d124      	bne.n	800a55e <_scanf_i+0x142>
 800a514:	0510      	lsls	r0, r2, #20
 800a516:	d522      	bpl.n	800a55e <_scanf_i+0x142>
 800a518:	f10b 0b01 	add.w	fp, fp, #1
 800a51c:	f1b9 0f00 	cmp.w	r9, #0
 800a520:	d003      	beq.n	800a52a <_scanf_i+0x10e>
 800a522:	3301      	adds	r3, #1
 800a524:	f109 39ff 	add.w	r9, r9, #4294967295
 800a528:	60a3      	str	r3, [r4, #8]
 800a52a:	6873      	ldr	r3, [r6, #4]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	6073      	str	r3, [r6, #4]
 800a532:	dd1b      	ble.n	800a56c <_scanf_i+0x150>
 800a534:	6833      	ldr	r3, [r6, #0]
 800a536:	3301      	adds	r3, #1
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	60a3      	str	r3, [r4, #8]
 800a540:	e7d9      	b.n	800a4f6 <_scanf_i+0xda>
 800a542:	f1bb 0f02 	cmp.w	fp, #2
 800a546:	d1ae      	bne.n	800a4a6 <_scanf_i+0x8a>
 800a548:	6822      	ldr	r2, [r4, #0]
 800a54a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a54e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a552:	d1bf      	bne.n	800a4d4 <_scanf_i+0xb8>
 800a554:	2310      	movs	r3, #16
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a55c:	e7a2      	b.n	800a4a4 <_scanf_i+0x88>
 800a55e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	780b      	ldrb	r3, [r1, #0]
 800a566:	f805 3b01 	strb.w	r3, [r5], #1
 800a56a:	e7de      	b.n	800a52a <_scanf_i+0x10e>
 800a56c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a570:	4631      	mov	r1, r6
 800a572:	4650      	mov	r0, sl
 800a574:	4798      	blx	r3
 800a576:	2800      	cmp	r0, #0
 800a578:	d0df      	beq.n	800a53a <_scanf_i+0x11e>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	05d9      	lsls	r1, r3, #23
 800a57e:	d50d      	bpl.n	800a59c <_scanf_i+0x180>
 800a580:	42bd      	cmp	r5, r7
 800a582:	d909      	bls.n	800a598 <_scanf_i+0x17c>
 800a584:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a58c:	4632      	mov	r2, r6
 800a58e:	4650      	mov	r0, sl
 800a590:	4798      	blx	r3
 800a592:	f105 39ff 	add.w	r9, r5, #4294967295
 800a596:	464d      	mov	r5, r9
 800a598:	42bd      	cmp	r5, r7
 800a59a:	d028      	beq.n	800a5ee <_scanf_i+0x1d2>
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	f012 0210 	ands.w	r2, r2, #16
 800a5a2:	d113      	bne.n	800a5cc <_scanf_i+0x1b0>
 800a5a4:	702a      	strb	r2, [r5, #0]
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	9e01      	ldr	r6, [sp, #4]
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	47b0      	blx	r6
 800a5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b4:	6821      	ldr	r1, [r4, #0]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	f8c8 2000 	str.w	r2, [r8]
 800a5bc:	f011 0f20 	tst.w	r1, #32
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	d00f      	beq.n	800a5e4 <_scanf_i+0x1c8>
 800a5c4:	6018      	str	r0, [r3, #0]
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	60e3      	str	r3, [r4, #12]
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	1bed      	subs	r5, r5, r7
 800a5d0:	445d      	add	r5, fp
 800a5d2:	442b      	add	r3, r5
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	b007      	add	sp, #28
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	f04f 0b00 	mov.w	fp, #0
 800a5e2:	e7ca      	b.n	800a57a <_scanf_i+0x15e>
 800a5e4:	07ca      	lsls	r2, r1, #31
 800a5e6:	bf4c      	ite	mi
 800a5e8:	8018      	strhmi	r0, [r3, #0]
 800a5ea:	6018      	strpl	r0, [r3, #0]
 800a5ec:	e7eb      	b.n	800a5c6 <_scanf_i+0x1aa>
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	e7f2      	b.n	800a5d8 <_scanf_i+0x1bc>
 800a5f2:	bf00      	nop
 800a5f4:	0800b714 	.word	0x0800b714
 800a5f8:	0800b22d 	.word	0x0800b22d
 800a5fc:	08009a89 	.word	0x08009a89
 800a600:	0800bafa 	.word	0x0800bafa

0800a604 <__sflush_r>:
 800a604:	898a      	ldrh	r2, [r1, #12]
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	4605      	mov	r5, r0
 800a60c:	0710      	lsls	r0, r2, #28
 800a60e:	460c      	mov	r4, r1
 800a610:	d458      	bmi.n	800a6c4 <__sflush_r+0xc0>
 800a612:	684b      	ldr	r3, [r1, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dc05      	bgt.n	800a624 <__sflush_r+0x20>
 800a618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dc02      	bgt.n	800a624 <__sflush_r+0x20>
 800a61e:	2000      	movs	r0, #0
 800a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a626:	2e00      	cmp	r6, #0
 800a628:	d0f9      	beq.n	800a61e <__sflush_r+0x1a>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a630:	682f      	ldr	r7, [r5, #0]
 800a632:	6a21      	ldr	r1, [r4, #32]
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	d032      	beq.n	800a69e <__sflush_r+0x9a>
 800a638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	075a      	lsls	r2, r3, #29
 800a63e:	d505      	bpl.n	800a64c <__sflush_r+0x48>
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	1ac0      	subs	r0, r0, r3
 800a644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a646:	b10b      	cbz	r3, 800a64c <__sflush_r+0x48>
 800a648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a64a:	1ac0      	subs	r0, r0, r3
 800a64c:	2300      	movs	r3, #0
 800a64e:	4602      	mov	r2, r0
 800a650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a652:	6a21      	ldr	r1, [r4, #32]
 800a654:	4628      	mov	r0, r5
 800a656:	47b0      	blx	r6
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	d106      	bne.n	800a66c <__sflush_r+0x68>
 800a65e:	6829      	ldr	r1, [r5, #0]
 800a660:	291d      	cmp	r1, #29
 800a662:	d82b      	bhi.n	800a6bc <__sflush_r+0xb8>
 800a664:	4a29      	ldr	r2, [pc, #164]	; (800a70c <__sflush_r+0x108>)
 800a666:	410a      	asrs	r2, r1
 800a668:	07d6      	lsls	r6, r2, #31
 800a66a:	d427      	bmi.n	800a6bc <__sflush_r+0xb8>
 800a66c:	2200      	movs	r2, #0
 800a66e:	6062      	str	r2, [r4, #4]
 800a670:	04d9      	lsls	r1, r3, #19
 800a672:	6922      	ldr	r2, [r4, #16]
 800a674:	6022      	str	r2, [r4, #0]
 800a676:	d504      	bpl.n	800a682 <__sflush_r+0x7e>
 800a678:	1c42      	adds	r2, r0, #1
 800a67a:	d101      	bne.n	800a680 <__sflush_r+0x7c>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b903      	cbnz	r3, 800a682 <__sflush_r+0x7e>
 800a680:	6560      	str	r0, [r4, #84]	; 0x54
 800a682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a684:	602f      	str	r7, [r5, #0]
 800a686:	2900      	cmp	r1, #0
 800a688:	d0c9      	beq.n	800a61e <__sflush_r+0x1a>
 800a68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68e:	4299      	cmp	r1, r3
 800a690:	d002      	beq.n	800a698 <__sflush_r+0x94>
 800a692:	4628      	mov	r0, r5
 800a694:	f7fd fe6a 	bl	800836c <_free_r>
 800a698:	2000      	movs	r0, #0
 800a69a:	6360      	str	r0, [r4, #52]	; 0x34
 800a69c:	e7c0      	b.n	800a620 <__sflush_r+0x1c>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47b0      	blx	r6
 800a6a4:	1c41      	adds	r1, r0, #1
 800a6a6:	d1c8      	bne.n	800a63a <__sflush_r+0x36>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0c5      	beq.n	800a63a <__sflush_r+0x36>
 800a6ae:	2b1d      	cmp	r3, #29
 800a6b0:	d001      	beq.n	800a6b6 <__sflush_r+0xb2>
 800a6b2:	2b16      	cmp	r3, #22
 800a6b4:	d101      	bne.n	800a6ba <__sflush_r+0xb6>
 800a6b6:	602f      	str	r7, [r5, #0]
 800a6b8:	e7b1      	b.n	800a61e <__sflush_r+0x1a>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	e7ad      	b.n	800a620 <__sflush_r+0x1c>
 800a6c4:	690f      	ldr	r7, [r1, #16]
 800a6c6:	2f00      	cmp	r7, #0
 800a6c8:	d0a9      	beq.n	800a61e <__sflush_r+0x1a>
 800a6ca:	0793      	lsls	r3, r2, #30
 800a6cc:	680e      	ldr	r6, [r1, #0]
 800a6ce:	bf08      	it	eq
 800a6d0:	694b      	ldreq	r3, [r1, #20]
 800a6d2:	600f      	str	r7, [r1, #0]
 800a6d4:	bf18      	it	ne
 800a6d6:	2300      	movne	r3, #0
 800a6d8:	eba6 0807 	sub.w	r8, r6, r7
 800a6dc:	608b      	str	r3, [r1, #8]
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	dd9c      	ble.n	800a61e <__sflush_r+0x1a>
 800a6e4:	6a21      	ldr	r1, [r4, #32]
 800a6e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6e8:	4643      	mov	r3, r8
 800a6ea:	463a      	mov	r2, r7
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b0      	blx	r6
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	dc06      	bgt.n	800a702 <__sflush_r+0xfe>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e78e      	b.n	800a620 <__sflush_r+0x1c>
 800a702:	4407      	add	r7, r0
 800a704:	eba8 0800 	sub.w	r8, r8, r0
 800a708:	e7e9      	b.n	800a6de <__sflush_r+0xda>
 800a70a:	bf00      	nop
 800a70c:	dfbffffe 	.word	0xdfbffffe

0800a710 <_fflush_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	690b      	ldr	r3, [r1, #16]
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b913      	cbnz	r3, 800a720 <_fflush_r+0x10>
 800a71a:	2500      	movs	r5, #0
 800a71c:	4628      	mov	r0, r5
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	b118      	cbz	r0, 800a72a <_fflush_r+0x1a>
 800a722:	6a03      	ldr	r3, [r0, #32]
 800a724:	b90b      	cbnz	r3, 800a72a <_fflush_r+0x1a>
 800a726:	f7fc fd11 	bl	800714c <__sinit>
 800a72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0f3      	beq.n	800a71a <_fflush_r+0xa>
 800a732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a734:	07d0      	lsls	r0, r2, #31
 800a736:	d404      	bmi.n	800a742 <_fflush_r+0x32>
 800a738:	0599      	lsls	r1, r3, #22
 800a73a:	d402      	bmi.n	800a742 <_fflush_r+0x32>
 800a73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a73e:	f7fc ff92 	bl	8007666 <__retarget_lock_acquire_recursive>
 800a742:	4628      	mov	r0, r5
 800a744:	4621      	mov	r1, r4
 800a746:	f7ff ff5d 	bl	800a604 <__sflush_r>
 800a74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a74c:	07da      	lsls	r2, r3, #31
 800a74e:	4605      	mov	r5, r0
 800a750:	d4e4      	bmi.n	800a71c <_fflush_r+0xc>
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	059b      	lsls	r3, r3, #22
 800a756:	d4e1      	bmi.n	800a71c <_fflush_r+0xc>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f7fc ff85 	bl	8007668 <__retarget_lock_release_recursive>
 800a75e:	e7dd      	b.n	800a71c <_fflush_r+0xc>

0800a760 <__swhatbuf_r>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	460c      	mov	r4, r1
 800a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a768:	2900      	cmp	r1, #0
 800a76a:	b096      	sub	sp, #88	; 0x58
 800a76c:	4615      	mov	r5, r2
 800a76e:	461e      	mov	r6, r3
 800a770:	da0d      	bge.n	800a78e <__swhatbuf_r+0x2e>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a778:	f04f 0100 	mov.w	r1, #0
 800a77c:	bf0c      	ite	eq
 800a77e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a782:	2340      	movne	r3, #64	; 0x40
 800a784:	2000      	movs	r0, #0
 800a786:	6031      	str	r1, [r6, #0]
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	b016      	add	sp, #88	; 0x58
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	466a      	mov	r2, sp
 800a790:	f000 f8d6 	bl	800a940 <_fstat_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	dbec      	blt.n	800a772 <__swhatbuf_r+0x12>
 800a798:	9901      	ldr	r1, [sp, #4]
 800a79a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a79e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7a2:	4259      	negs	r1, r3
 800a7a4:	4159      	adcs	r1, r3
 800a7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7aa:	e7eb      	b.n	800a784 <__swhatbuf_r+0x24>

0800a7ac <__smakebuf_r>:
 800a7ac:	898b      	ldrh	r3, [r1, #12]
 800a7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b0:	079d      	lsls	r5, r3, #30
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	d507      	bpl.n	800a7c8 <__smakebuf_r+0x1c>
 800a7b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	6163      	str	r3, [r4, #20]
 800a7c4:	b002      	add	sp, #8
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	ab01      	add	r3, sp, #4
 800a7ca:	466a      	mov	r2, sp
 800a7cc:	f7ff ffc8 	bl	800a760 <__swhatbuf_r>
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7fb fd2b 	bl	8006230 <_malloc_r>
 800a7da:	b948      	cbnz	r0, 800a7f0 <__smakebuf_r+0x44>
 800a7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e0:	059a      	lsls	r2, r3, #22
 800a7e2:	d4ef      	bmi.n	800a7c4 <__smakebuf_r+0x18>
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	f043 0302 	orr.w	r3, r3, #2
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e7e3      	b.n	800a7b8 <__smakebuf_r+0xc>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	6020      	str	r0, [r4, #0]
 800a7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	6163      	str	r3, [r4, #20]
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	6120      	str	r0, [r4, #16]
 800a802:	b15b      	cbz	r3, 800a81c <__smakebuf_r+0x70>
 800a804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f8ab 	bl	800a964 <_isatty_r>
 800a80e:	b128      	cbz	r0, 800a81c <__smakebuf_r+0x70>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	431d      	orrs	r5, r3
 800a820:	81a5      	strh	r5, [r4, #12]
 800a822:	e7cf      	b.n	800a7c4 <__smakebuf_r+0x18>

0800a824 <__sccl>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	780b      	ldrb	r3, [r1, #0]
 800a828:	4604      	mov	r4, r0
 800a82a:	2b5e      	cmp	r3, #94	; 0x5e
 800a82c:	bf0b      	itete	eq
 800a82e:	784b      	ldrbeq	r3, [r1, #1]
 800a830:	1c4a      	addne	r2, r1, #1
 800a832:	1c8a      	addeq	r2, r1, #2
 800a834:	2100      	movne	r1, #0
 800a836:	bf08      	it	eq
 800a838:	2101      	moveq	r1, #1
 800a83a:	3801      	subs	r0, #1
 800a83c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a840:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a844:	42a8      	cmp	r0, r5
 800a846:	d1fb      	bne.n	800a840 <__sccl+0x1c>
 800a848:	b90b      	cbnz	r3, 800a84e <__sccl+0x2a>
 800a84a:	1e50      	subs	r0, r2, #1
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	f081 0101 	eor.w	r1, r1, #1
 800a852:	54e1      	strb	r1, [r4, r3]
 800a854:	4610      	mov	r0, r2
 800a856:	4602      	mov	r2, r0
 800a858:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a85c:	2d2d      	cmp	r5, #45	; 0x2d
 800a85e:	d005      	beq.n	800a86c <__sccl+0x48>
 800a860:	2d5d      	cmp	r5, #93	; 0x5d
 800a862:	d016      	beq.n	800a892 <__sccl+0x6e>
 800a864:	2d00      	cmp	r5, #0
 800a866:	d0f1      	beq.n	800a84c <__sccl+0x28>
 800a868:	462b      	mov	r3, r5
 800a86a:	e7f2      	b.n	800a852 <__sccl+0x2e>
 800a86c:	7846      	ldrb	r6, [r0, #1]
 800a86e:	2e5d      	cmp	r6, #93	; 0x5d
 800a870:	d0fa      	beq.n	800a868 <__sccl+0x44>
 800a872:	42b3      	cmp	r3, r6
 800a874:	dcf8      	bgt.n	800a868 <__sccl+0x44>
 800a876:	3002      	adds	r0, #2
 800a878:	461a      	mov	r2, r3
 800a87a:	3201      	adds	r2, #1
 800a87c:	4296      	cmp	r6, r2
 800a87e:	54a1      	strb	r1, [r4, r2]
 800a880:	dcfb      	bgt.n	800a87a <__sccl+0x56>
 800a882:	1af2      	subs	r2, r6, r3
 800a884:	3a01      	subs	r2, #1
 800a886:	1c5d      	adds	r5, r3, #1
 800a888:	42b3      	cmp	r3, r6
 800a88a:	bfa8      	it	ge
 800a88c:	2200      	movge	r2, #0
 800a88e:	18ab      	adds	r3, r5, r2
 800a890:	e7e1      	b.n	800a856 <__sccl+0x32>
 800a892:	4610      	mov	r0, r2
 800a894:	e7da      	b.n	800a84c <__sccl+0x28>

0800a896 <__submore>:
 800a896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89a:	460c      	mov	r4, r1
 800a89c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a89e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d11d      	bne.n	800a8e2 <__submore+0x4c>
 800a8a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8aa:	f7fb fcc1 	bl	8006230 <_malloc_r>
 800a8ae:	b918      	cbnz	r0, 800a8b8 <__submore+0x22>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a8c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8c4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a8c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8cc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a8d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8d4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a8d8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a8dc:	6020      	str	r0, [r4, #0]
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e7e8      	b.n	800a8b4 <__submore+0x1e>
 800a8e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a8e4:	0077      	lsls	r7, r6, #1
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	f000 fbff 	bl	800b0ea <_realloc_r>
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0de      	beq.n	800a8b0 <__submore+0x1a>
 800a8f2:	eb00 0806 	add.w	r8, r0, r6
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f000 f842 	bl	800a984 <memcpy>
 800a900:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a904:	f8c4 8000 	str.w	r8, [r4]
 800a908:	e7e9      	b.n	800a8de <__submore+0x48>

0800a90a <memmove>:
 800a90a:	4288      	cmp	r0, r1
 800a90c:	b510      	push	{r4, lr}
 800a90e:	eb01 0402 	add.w	r4, r1, r2
 800a912:	d902      	bls.n	800a91a <memmove+0x10>
 800a914:	4284      	cmp	r4, r0
 800a916:	4623      	mov	r3, r4
 800a918:	d807      	bhi.n	800a92a <memmove+0x20>
 800a91a:	1e43      	subs	r3, r0, #1
 800a91c:	42a1      	cmp	r1, r4
 800a91e:	d008      	beq.n	800a932 <memmove+0x28>
 800a920:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a924:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a928:	e7f8      	b.n	800a91c <memmove+0x12>
 800a92a:	4402      	add	r2, r0
 800a92c:	4601      	mov	r1, r0
 800a92e:	428a      	cmp	r2, r1
 800a930:	d100      	bne.n	800a934 <memmove+0x2a>
 800a932:	bd10      	pop	{r4, pc}
 800a934:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a938:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a93c:	e7f7      	b.n	800a92e <memmove+0x24>
	...

0800a940 <_fstat_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_fstat_r+0x20>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f7 ff90 	bl	8002872 <_fstat>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_fstat_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_fstat_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20000afc 	.word	0x20000afc

0800a964 <_isatty_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d06      	ldr	r5, [pc, #24]	; (800a980 <_isatty_r+0x1c>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 ff8f 	bl	8002892 <_isatty>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_isatty_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_isatty_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000afc 	.word	0x20000afc

0800a984 <memcpy>:
 800a984:	440a      	add	r2, r1
 800a986:	4291      	cmp	r1, r2
 800a988:	f100 33ff 	add.w	r3, r0, #4294967295
 800a98c:	d100      	bne.n	800a990 <memcpy+0xc>
 800a98e:	4770      	bx	lr
 800a990:	b510      	push	{r4, lr}
 800a992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a99a:	4291      	cmp	r1, r2
 800a99c:	d1f9      	bne.n	800a992 <memcpy+0xe>
 800a99e:	bd10      	pop	{r4, pc}

0800a9a0 <nan>:
 800a9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9a8 <nan+0x8>
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	7ff80000 	.word	0x7ff80000

0800a9b0 <__assert_func>:
 800a9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b2:	4614      	mov	r4, r2
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <__assert_func+0x2c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	68d8      	ldr	r0, [r3, #12]
 800a9be:	b14c      	cbz	r4, 800a9d4 <__assert_func+0x24>
 800a9c0:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <__assert_func+0x30>)
 800a9c2:	9100      	str	r1, [sp, #0]
 800a9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c8:	4906      	ldr	r1, [pc, #24]	; (800a9e4 <__assert_func+0x34>)
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	f000 fc3e 	bl	800b24c <fiprintf>
 800a9d0:	f000 fc4e 	bl	800b270 <abort>
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <__assert_func+0x38>)
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	e7f3      	b.n	800a9c2 <__assert_func+0x12>
 800a9da:	bf00      	nop
 800a9dc:	20000064 	.word	0x20000064
 800a9e0:	0800bb0d 	.word	0x0800bb0d
 800a9e4:	0800bb1a 	.word	0x0800bb1a
 800a9e8:	0800bb48 	.word	0x0800bb48

0800a9ec <_calloc_r>:
 800a9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800a9f2:	b94c      	cbnz	r4, 800aa08 <_calloc_r+0x1c>
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	9201      	str	r2, [sp, #4]
 800a9f8:	f7fb fc1a 	bl	8006230 <_malloc_r>
 800a9fc:	9a01      	ldr	r2, [sp, #4]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b930      	cbnz	r0, 800aa10 <_calloc_r+0x24>
 800aa02:	4628      	mov	r0, r5
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	220c      	movs	r2, #12
 800aa0a:	6002      	str	r2, [r0, #0]
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	e7f8      	b.n	800aa02 <_calloc_r+0x16>
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7fc fd65 	bl	80074e0 <memset>
 800aa16:	e7f4      	b.n	800aa02 <_calloc_r+0x16>

0800aa18 <rshift>:
 800aa18:	6903      	ldr	r3, [r0, #16]
 800aa1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa26:	f100 0414 	add.w	r4, r0, #20
 800aa2a:	dd45      	ble.n	800aab8 <rshift+0xa0>
 800aa2c:	f011 011f 	ands.w	r1, r1, #31
 800aa30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa38:	d10c      	bne.n	800aa54 <rshift+0x3c>
 800aa3a:	f100 0710 	add.w	r7, r0, #16
 800aa3e:	4629      	mov	r1, r5
 800aa40:	42b1      	cmp	r1, r6
 800aa42:	d334      	bcc.n	800aaae <rshift+0x96>
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	1eea      	subs	r2, r5, #3
 800aa4a:	4296      	cmp	r6, r2
 800aa4c:	bf38      	it	cc
 800aa4e:	2300      	movcc	r3, #0
 800aa50:	4423      	add	r3, r4
 800aa52:	e015      	b.n	800aa80 <rshift+0x68>
 800aa54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa58:	f1c1 0820 	rsb	r8, r1, #32
 800aa5c:	40cf      	lsrs	r7, r1
 800aa5e:	f105 0e04 	add.w	lr, r5, #4
 800aa62:	46a1      	mov	r9, r4
 800aa64:	4576      	cmp	r6, lr
 800aa66:	46f4      	mov	ip, lr
 800aa68:	d815      	bhi.n	800aa96 <rshift+0x7e>
 800aa6a:	1a9a      	subs	r2, r3, r2
 800aa6c:	0092      	lsls	r2, r2, #2
 800aa6e:	3a04      	subs	r2, #4
 800aa70:	3501      	adds	r5, #1
 800aa72:	42ae      	cmp	r6, r5
 800aa74:	bf38      	it	cc
 800aa76:	2200      	movcc	r2, #0
 800aa78:	18a3      	adds	r3, r4, r2
 800aa7a:	50a7      	str	r7, [r4, r2]
 800aa7c:	b107      	cbz	r7, 800aa80 <rshift+0x68>
 800aa7e:	3304      	adds	r3, #4
 800aa80:	1b1a      	subs	r2, r3, r4
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa88:	bf08      	it	eq
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	6102      	str	r2, [r0, #16]
 800aa8e:	bf08      	it	eq
 800aa90:	6143      	streq	r3, [r0, #20]
 800aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa96:	f8dc c000 	ldr.w	ip, [ip]
 800aa9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa9e:	ea4c 0707 	orr.w	r7, ip, r7
 800aaa2:	f849 7b04 	str.w	r7, [r9], #4
 800aaa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaaa:	40cf      	lsrs	r7, r1
 800aaac:	e7da      	b.n	800aa64 <rshift+0x4c>
 800aaae:	f851 cb04 	ldr.w	ip, [r1], #4
 800aab2:	f847 cf04 	str.w	ip, [r7, #4]!
 800aab6:	e7c3      	b.n	800aa40 <rshift+0x28>
 800aab8:	4623      	mov	r3, r4
 800aaba:	e7e1      	b.n	800aa80 <rshift+0x68>

0800aabc <__hexdig_fun>:
 800aabc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d802      	bhi.n	800aaca <__hexdig_fun+0xe>
 800aac4:	3820      	subs	r0, #32
 800aac6:	b2c0      	uxtb	r0, r0
 800aac8:	4770      	bx	lr
 800aaca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d801      	bhi.n	800aad6 <__hexdig_fun+0x1a>
 800aad2:	3847      	subs	r0, #71	; 0x47
 800aad4:	e7f7      	b.n	800aac6 <__hexdig_fun+0xa>
 800aad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aada:	2b05      	cmp	r3, #5
 800aadc:	d801      	bhi.n	800aae2 <__hexdig_fun+0x26>
 800aade:	3827      	subs	r0, #39	; 0x27
 800aae0:	e7f1      	b.n	800aac6 <__hexdig_fun+0xa>
 800aae2:	2000      	movs	r0, #0
 800aae4:	4770      	bx	lr
	...

0800aae8 <__gethex>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	4617      	mov	r7, r2
 800aaee:	680a      	ldr	r2, [r1, #0]
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	f102 0b02 	add.w	fp, r2, #2
 800aaf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aafa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aafe:	4681      	mov	r9, r0
 800ab00:	468a      	mov	sl, r1
 800ab02:	9302      	str	r3, [sp, #8]
 800ab04:	32fe      	adds	r2, #254	; 0xfe
 800ab06:	eb02 030b 	add.w	r3, r2, fp
 800ab0a:	46d8      	mov	r8, fp
 800ab0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	2830      	cmp	r0, #48	; 0x30
 800ab14:	d0f7      	beq.n	800ab06 <__gethex+0x1e>
 800ab16:	f7ff ffd1 	bl	800aabc <__hexdig_fun>
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d138      	bne.n	800ab92 <__gethex+0xaa>
 800ab20:	49a7      	ldr	r1, [pc, #668]	; (800adc0 <__gethex+0x2d8>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	4640      	mov	r0, r8
 800ab26:	f7fc fcf0 	bl	800750a <strncmp>
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d169      	bne.n	800ac04 <__gethex+0x11c>
 800ab30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab34:	465d      	mov	r5, fp
 800ab36:	f7ff ffc1 	bl	800aabc <__hexdig_fun>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d064      	beq.n	800ac08 <__gethex+0x120>
 800ab3e:	465a      	mov	r2, fp
 800ab40:	7810      	ldrb	r0, [r2, #0]
 800ab42:	2830      	cmp	r0, #48	; 0x30
 800ab44:	4690      	mov	r8, r2
 800ab46:	f102 0201 	add.w	r2, r2, #1
 800ab4a:	d0f9      	beq.n	800ab40 <__gethex+0x58>
 800ab4c:	f7ff ffb6 	bl	800aabc <__hexdig_fun>
 800ab50:	2301      	movs	r3, #1
 800ab52:	fab0 f480 	clz	r4, r0
 800ab56:	0964      	lsrs	r4, r4, #5
 800ab58:	465e      	mov	r6, fp
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	4615      	mov	r5, r2
 800ab60:	3201      	adds	r2, #1
 800ab62:	7828      	ldrb	r0, [r5, #0]
 800ab64:	f7ff ffaa 	bl	800aabc <__hexdig_fun>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d1f8      	bne.n	800ab5e <__gethex+0x76>
 800ab6c:	4994      	ldr	r1, [pc, #592]	; (800adc0 <__gethex+0x2d8>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4628      	mov	r0, r5
 800ab72:	f7fc fcca 	bl	800750a <strncmp>
 800ab76:	b978      	cbnz	r0, 800ab98 <__gethex+0xb0>
 800ab78:	b946      	cbnz	r6, 800ab8c <__gethex+0xa4>
 800ab7a:	1c6e      	adds	r6, r5, #1
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	4615      	mov	r5, r2
 800ab80:	3201      	adds	r2, #1
 800ab82:	7828      	ldrb	r0, [r5, #0]
 800ab84:	f7ff ff9a 	bl	800aabc <__hexdig_fun>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d1f8      	bne.n	800ab7e <__gethex+0x96>
 800ab8c:	1b73      	subs	r3, r6, r5
 800ab8e:	009e      	lsls	r6, r3, #2
 800ab90:	e004      	b.n	800ab9c <__gethex+0xb4>
 800ab92:	2400      	movs	r4, #0
 800ab94:	4626      	mov	r6, r4
 800ab96:	e7e1      	b.n	800ab5c <__gethex+0x74>
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	d1f7      	bne.n	800ab8c <__gethex+0xa4>
 800ab9c:	782b      	ldrb	r3, [r5, #0]
 800ab9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aba2:	2b50      	cmp	r3, #80	; 0x50
 800aba4:	d13d      	bne.n	800ac22 <__gethex+0x13a>
 800aba6:	786b      	ldrb	r3, [r5, #1]
 800aba8:	2b2b      	cmp	r3, #43	; 0x2b
 800abaa:	d02f      	beq.n	800ac0c <__gethex+0x124>
 800abac:	2b2d      	cmp	r3, #45	; 0x2d
 800abae:	d031      	beq.n	800ac14 <__gethex+0x12c>
 800abb0:	1c69      	adds	r1, r5, #1
 800abb2:	f04f 0b00 	mov.w	fp, #0
 800abb6:	7808      	ldrb	r0, [r1, #0]
 800abb8:	f7ff ff80 	bl	800aabc <__hexdig_fun>
 800abbc:	1e42      	subs	r2, r0, #1
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	2a18      	cmp	r2, #24
 800abc2:	d82e      	bhi.n	800ac22 <__gethex+0x13a>
 800abc4:	f1a0 0210 	sub.w	r2, r0, #16
 800abc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abcc:	f7ff ff76 	bl	800aabc <__hexdig_fun>
 800abd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800abd4:	fa5f fc8c 	uxtb.w	ip, ip
 800abd8:	f1bc 0f18 	cmp.w	ip, #24
 800abdc:	d91d      	bls.n	800ac1a <__gethex+0x132>
 800abde:	f1bb 0f00 	cmp.w	fp, #0
 800abe2:	d000      	beq.n	800abe6 <__gethex+0xfe>
 800abe4:	4252      	negs	r2, r2
 800abe6:	4416      	add	r6, r2
 800abe8:	f8ca 1000 	str.w	r1, [sl]
 800abec:	b1dc      	cbz	r4, 800ac26 <__gethex+0x13e>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf14      	ite	ne
 800abf4:	f04f 0800 	movne.w	r8, #0
 800abf8:	f04f 0806 	moveq.w	r8, #6
 800abfc:	4640      	mov	r0, r8
 800abfe:	b005      	add	sp, #20
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	4645      	mov	r5, r8
 800ac06:	4626      	mov	r6, r4
 800ac08:	2401      	movs	r4, #1
 800ac0a:	e7c7      	b.n	800ab9c <__gethex+0xb4>
 800ac0c:	f04f 0b00 	mov.w	fp, #0
 800ac10:	1ca9      	adds	r1, r5, #2
 800ac12:	e7d0      	b.n	800abb6 <__gethex+0xce>
 800ac14:	f04f 0b01 	mov.w	fp, #1
 800ac18:	e7fa      	b.n	800ac10 <__gethex+0x128>
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ac20:	e7d0      	b.n	800abc4 <__gethex+0xdc>
 800ac22:	4629      	mov	r1, r5
 800ac24:	e7e0      	b.n	800abe8 <__gethex+0x100>
 800ac26:	eba5 0308 	sub.w	r3, r5, r8
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	2b07      	cmp	r3, #7
 800ac30:	dc0a      	bgt.n	800ac48 <__gethex+0x160>
 800ac32:	4648      	mov	r0, r9
 800ac34:	f7fd fbe6 	bl	8008404 <_Balloc>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	b940      	cbnz	r0, 800ac4e <__gethex+0x166>
 800ac3c:	4b61      	ldr	r3, [pc, #388]	; (800adc4 <__gethex+0x2dc>)
 800ac3e:	4602      	mov	r2, r0
 800ac40:	21e4      	movs	r1, #228	; 0xe4
 800ac42:	4861      	ldr	r0, [pc, #388]	; (800adc8 <__gethex+0x2e0>)
 800ac44:	f7ff feb4 	bl	800a9b0 <__assert_func>
 800ac48:	3101      	adds	r1, #1
 800ac4a:	105b      	asrs	r3, r3, #1
 800ac4c:	e7ef      	b.n	800ac2e <__gethex+0x146>
 800ac4e:	f100 0a14 	add.w	sl, r0, #20
 800ac52:	2300      	movs	r3, #0
 800ac54:	495a      	ldr	r1, [pc, #360]	; (800adc0 <__gethex+0x2d8>)
 800ac56:	f8cd a004 	str.w	sl, [sp, #4]
 800ac5a:	469b      	mov	fp, r3
 800ac5c:	45a8      	cmp	r8, r5
 800ac5e:	d342      	bcc.n	800ace6 <__gethex+0x1fe>
 800ac60:	9801      	ldr	r0, [sp, #4]
 800ac62:	f840 bb04 	str.w	fp, [r0], #4
 800ac66:	eba0 000a 	sub.w	r0, r0, sl
 800ac6a:	1080      	asrs	r0, r0, #2
 800ac6c:	6120      	str	r0, [r4, #16]
 800ac6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac72:	4658      	mov	r0, fp
 800ac74:	f7fd fcb8 	bl	80085e8 <__hi0bits>
 800ac78:	683d      	ldr	r5, [r7, #0]
 800ac7a:	eba8 0000 	sub.w	r0, r8, r0
 800ac7e:	42a8      	cmp	r0, r5
 800ac80:	dd59      	ble.n	800ad36 <__gethex+0x24e>
 800ac82:	eba0 0805 	sub.w	r8, r0, r5
 800ac86:	4641      	mov	r1, r8
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f7fe f847 	bl	8008d1c <__any_on>
 800ac8e:	4683      	mov	fp, r0
 800ac90:	b1b8      	cbz	r0, 800acc2 <__gethex+0x1da>
 800ac92:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac96:	1159      	asrs	r1, r3, #5
 800ac98:	f003 021f 	and.w	r2, r3, #31
 800ac9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aca0:	f04f 0b01 	mov.w	fp, #1
 800aca4:	fa0b f202 	lsl.w	r2, fp, r2
 800aca8:	420a      	tst	r2, r1
 800acaa:	d00a      	beq.n	800acc2 <__gethex+0x1da>
 800acac:	455b      	cmp	r3, fp
 800acae:	dd06      	ble.n	800acbe <__gethex+0x1d6>
 800acb0:	f1a8 0102 	sub.w	r1, r8, #2
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7fe f831 	bl	8008d1c <__any_on>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d138      	bne.n	800ad30 <__gethex+0x248>
 800acbe:	f04f 0b02 	mov.w	fp, #2
 800acc2:	4641      	mov	r1, r8
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff fea7 	bl	800aa18 <rshift>
 800acca:	4446      	add	r6, r8
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	42b3      	cmp	r3, r6
 800acd0:	da41      	bge.n	800ad56 <__gethex+0x26e>
 800acd2:	4621      	mov	r1, r4
 800acd4:	4648      	mov	r0, r9
 800acd6:	f7fd fbd5 	bl	8008484 <_Bfree>
 800acda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acdc:	2300      	movs	r3, #0
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ace4:	e78a      	b.n	800abfc <__gethex+0x114>
 800ace6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800acea:	2a2e      	cmp	r2, #46	; 0x2e
 800acec:	d014      	beq.n	800ad18 <__gethex+0x230>
 800acee:	2b20      	cmp	r3, #32
 800acf0:	d106      	bne.n	800ad00 <__gethex+0x218>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	f843 bb04 	str.w	fp, [r3], #4
 800acf8:	f04f 0b00 	mov.w	fp, #0
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	465b      	mov	r3, fp
 800ad00:	7828      	ldrb	r0, [r5, #0]
 800ad02:	9303      	str	r3, [sp, #12]
 800ad04:	f7ff feda 	bl	800aabc <__hexdig_fun>
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	f000 000f 	and.w	r0, r0, #15
 800ad0e:	4098      	lsls	r0, r3
 800ad10:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad14:	3304      	adds	r3, #4
 800ad16:	e7a1      	b.n	800ac5c <__gethex+0x174>
 800ad18:	45a8      	cmp	r8, r5
 800ad1a:	d8e8      	bhi.n	800acee <__gethex+0x206>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	4628      	mov	r0, r5
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	f7fc fbf2 	bl	800750a <strncmp>
 800ad26:	4926      	ldr	r1, [pc, #152]	; (800adc0 <__gethex+0x2d8>)
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1df      	bne.n	800acee <__gethex+0x206>
 800ad2e:	e795      	b.n	800ac5c <__gethex+0x174>
 800ad30:	f04f 0b03 	mov.w	fp, #3
 800ad34:	e7c5      	b.n	800acc2 <__gethex+0x1da>
 800ad36:	da0b      	bge.n	800ad50 <__gethex+0x268>
 800ad38:	eba5 0800 	sub.w	r8, r5, r0
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4642      	mov	r2, r8
 800ad40:	4648      	mov	r0, r9
 800ad42:	f7fd fdb9 	bl	80088b8 <__lshift>
 800ad46:	eba6 0608 	sub.w	r6, r6, r8
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f100 0a14 	add.w	sl, r0, #20
 800ad50:	f04f 0b00 	mov.w	fp, #0
 800ad54:	e7ba      	b.n	800accc <__gethex+0x1e4>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	42b3      	cmp	r3, r6
 800ad5a:	dd73      	ble.n	800ae44 <__gethex+0x35c>
 800ad5c:	1b9e      	subs	r6, r3, r6
 800ad5e:	42b5      	cmp	r5, r6
 800ad60:	dc34      	bgt.n	800adcc <__gethex+0x2e4>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d023      	beq.n	800adb0 <__gethex+0x2c8>
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d025      	beq.n	800adb8 <__gethex+0x2d0>
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d115      	bne.n	800ad9c <__gethex+0x2b4>
 800ad70:	42b5      	cmp	r5, r6
 800ad72:	d113      	bne.n	800ad9c <__gethex+0x2b4>
 800ad74:	2d01      	cmp	r5, #1
 800ad76:	d10b      	bne.n	800ad90 <__gethex+0x2a8>
 800ad78:	9a02      	ldr	r2, [sp, #8]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	2301      	movs	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	f8ca 3000 	str.w	r3, [sl]
 800ad86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad8c:	601c      	str	r4, [r3, #0]
 800ad8e:	e735      	b.n	800abfc <__gethex+0x114>
 800ad90:	1e69      	subs	r1, r5, #1
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7fd ffc2 	bl	8008d1c <__any_on>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1ed      	bne.n	800ad78 <__gethex+0x290>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4648      	mov	r0, r9
 800ada0:	f7fd fb70 	bl	8008484 <_Bfree>
 800ada4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada6:	2300      	movs	r3, #0
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800adae:	e725      	b.n	800abfc <__gethex+0x114>
 800adb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1f2      	bne.n	800ad9c <__gethex+0x2b4>
 800adb6:	e7df      	b.n	800ad78 <__gethex+0x290>
 800adb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1dc      	bne.n	800ad78 <__gethex+0x290>
 800adbe:	e7ed      	b.n	800ad9c <__gethex+0x2b4>
 800adc0:	0800b984 	.word	0x0800b984
 800adc4:	0800b81b 	.word	0x0800b81b
 800adc8:	0800bb49 	.word	0x0800bb49
 800adcc:	f106 38ff 	add.w	r8, r6, #4294967295
 800add0:	f1bb 0f00 	cmp.w	fp, #0
 800add4:	d133      	bne.n	800ae3e <__gethex+0x356>
 800add6:	f1b8 0f00 	cmp.w	r8, #0
 800adda:	d004      	beq.n	800ade6 <__gethex+0x2fe>
 800addc:	4641      	mov	r1, r8
 800adde:	4620      	mov	r0, r4
 800ade0:	f7fd ff9c 	bl	8008d1c <__any_on>
 800ade4:	4683      	mov	fp, r0
 800ade6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800adea:	2301      	movs	r3, #1
 800adec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800adf0:	f008 081f 	and.w	r8, r8, #31
 800adf4:	fa03 f308 	lsl.w	r3, r3, r8
 800adf8:	4213      	tst	r3, r2
 800adfa:	4631      	mov	r1, r6
 800adfc:	4620      	mov	r0, r4
 800adfe:	bf18      	it	ne
 800ae00:	f04b 0b02 	orrne.w	fp, fp, #2
 800ae04:	1bad      	subs	r5, r5, r6
 800ae06:	f7ff fe07 	bl	800aa18 <rshift>
 800ae0a:	687e      	ldr	r6, [r7, #4]
 800ae0c:	f04f 0802 	mov.w	r8, #2
 800ae10:	f1bb 0f00 	cmp.w	fp, #0
 800ae14:	d04a      	beq.n	800aeac <__gethex+0x3c4>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d016      	beq.n	800ae4a <__gethex+0x362>
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d018      	beq.n	800ae52 <__gethex+0x36a>
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d109      	bne.n	800ae38 <__gethex+0x350>
 800ae24:	f01b 0f02 	tst.w	fp, #2
 800ae28:	d006      	beq.n	800ae38 <__gethex+0x350>
 800ae2a:	f8da 3000 	ldr.w	r3, [sl]
 800ae2e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae32:	f01b 0f01 	tst.w	fp, #1
 800ae36:	d10f      	bne.n	800ae58 <__gethex+0x370>
 800ae38:	f048 0810 	orr.w	r8, r8, #16
 800ae3c:	e036      	b.n	800aeac <__gethex+0x3c4>
 800ae3e:	f04f 0b01 	mov.w	fp, #1
 800ae42:	e7d0      	b.n	800ade6 <__gethex+0x2fe>
 800ae44:	f04f 0801 	mov.w	r8, #1
 800ae48:	e7e2      	b.n	800ae10 <__gethex+0x328>
 800ae4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae4c:	f1c3 0301 	rsb	r3, r3, #1
 800ae50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0ef      	beq.n	800ae38 <__gethex+0x350>
 800ae58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae5c:	f104 0214 	add.w	r2, r4, #20
 800ae60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4694      	mov	ip, r2
 800ae6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae76:	d01e      	beq.n	800aeb6 <__gethex+0x3ce>
 800ae78:	3101      	adds	r1, #1
 800ae7a:	f8cc 1000 	str.w	r1, [ip]
 800ae7e:	f1b8 0f02 	cmp.w	r8, #2
 800ae82:	f104 0214 	add.w	r2, r4, #20
 800ae86:	d13d      	bne.n	800af04 <__gethex+0x41c>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	d10b      	bne.n	800aea8 <__gethex+0x3c0>
 800ae90:	1169      	asrs	r1, r5, #5
 800ae92:	2301      	movs	r3, #1
 800ae94:	f005 051f 	and.w	r5, r5, #31
 800ae98:	fa03 f505 	lsl.w	r5, r3, r5
 800ae9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aea0:	421d      	tst	r5, r3
 800aea2:	bf18      	it	ne
 800aea4:	f04f 0801 	movne.w	r8, #1
 800aea8:	f048 0820 	orr.w	r8, r8, #32
 800aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeae:	601c      	str	r4, [r3, #0]
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	601e      	str	r6, [r3, #0]
 800aeb4:	e6a2      	b.n	800abfc <__gethex+0x114>
 800aeb6:	4290      	cmp	r0, r2
 800aeb8:	f842 3c04 	str.w	r3, [r2, #-4]
 800aebc:	d8d6      	bhi.n	800ae6c <__gethex+0x384>
 800aebe:	68a2      	ldr	r2, [r4, #8]
 800aec0:	4593      	cmp	fp, r2
 800aec2:	db17      	blt.n	800aef4 <__gethex+0x40c>
 800aec4:	6861      	ldr	r1, [r4, #4]
 800aec6:	4648      	mov	r0, r9
 800aec8:	3101      	adds	r1, #1
 800aeca:	f7fd fa9b 	bl	8008404 <_Balloc>
 800aece:	4682      	mov	sl, r0
 800aed0:	b918      	cbnz	r0, 800aeda <__gethex+0x3f2>
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <__gethex+0x458>)
 800aed4:	4602      	mov	r2, r0
 800aed6:	2184      	movs	r1, #132	; 0x84
 800aed8:	e6b3      	b.n	800ac42 <__gethex+0x15a>
 800aeda:	6922      	ldr	r2, [r4, #16]
 800aedc:	3202      	adds	r2, #2
 800aede:	f104 010c 	add.w	r1, r4, #12
 800aee2:	0092      	lsls	r2, r2, #2
 800aee4:	300c      	adds	r0, #12
 800aee6:	f7ff fd4d 	bl	800a984 <memcpy>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4648      	mov	r0, r9
 800aeee:	f7fd fac9 	bl	8008484 <_Bfree>
 800aef2:	4654      	mov	r4, sl
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	1c51      	adds	r1, r2, #1
 800aef8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aefc:	6121      	str	r1, [r4, #16]
 800aefe:	2101      	movs	r1, #1
 800af00:	6151      	str	r1, [r2, #20]
 800af02:	e7bc      	b.n	800ae7e <__gethex+0x396>
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	4559      	cmp	r1, fp
 800af08:	dd0b      	ble.n	800af22 <__gethex+0x43a>
 800af0a:	2101      	movs	r1, #1
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff fd83 	bl	800aa18 <rshift>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	3601      	adds	r6, #1
 800af16:	42b3      	cmp	r3, r6
 800af18:	f6ff aedb 	blt.w	800acd2 <__gethex+0x1ea>
 800af1c:	f04f 0801 	mov.w	r8, #1
 800af20:	e7c2      	b.n	800aea8 <__gethex+0x3c0>
 800af22:	f015 051f 	ands.w	r5, r5, #31
 800af26:	d0f9      	beq.n	800af1c <__gethex+0x434>
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	441a      	add	r2, r3
 800af2c:	f1c5 0520 	rsb	r5, r5, #32
 800af30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af34:	f7fd fb58 	bl	80085e8 <__hi0bits>
 800af38:	42a8      	cmp	r0, r5
 800af3a:	dbe6      	blt.n	800af0a <__gethex+0x422>
 800af3c:	e7ee      	b.n	800af1c <__gethex+0x434>
 800af3e:	bf00      	nop
 800af40:	0800b81b 	.word	0x0800b81b

0800af44 <L_shift>:
 800af44:	f1c2 0208 	rsb	r2, r2, #8
 800af48:	0092      	lsls	r2, r2, #2
 800af4a:	b570      	push	{r4, r5, r6, lr}
 800af4c:	f1c2 0620 	rsb	r6, r2, #32
 800af50:	6843      	ldr	r3, [r0, #4]
 800af52:	6804      	ldr	r4, [r0, #0]
 800af54:	fa03 f506 	lsl.w	r5, r3, r6
 800af58:	432c      	orrs	r4, r5
 800af5a:	40d3      	lsrs	r3, r2
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af62:	4288      	cmp	r0, r1
 800af64:	d3f4      	bcc.n	800af50 <L_shift+0xc>
 800af66:	bd70      	pop	{r4, r5, r6, pc}

0800af68 <__match>:
 800af68:	b530      	push	{r4, r5, lr}
 800af6a:	6803      	ldr	r3, [r0, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af72:	b914      	cbnz	r4, 800af7a <__match+0x12>
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	2001      	movs	r0, #1
 800af78:	bd30      	pop	{r4, r5, pc}
 800af7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af82:	2d19      	cmp	r5, #25
 800af84:	bf98      	it	ls
 800af86:	3220      	addls	r2, #32
 800af88:	42a2      	cmp	r2, r4
 800af8a:	d0f0      	beq.n	800af6e <__match+0x6>
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7f3      	b.n	800af78 <__match+0x10>

0800af90 <__hexnan>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	680b      	ldr	r3, [r1, #0]
 800af96:	6801      	ldr	r1, [r0, #0]
 800af98:	115e      	asrs	r6, r3, #5
 800af9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af9e:	f013 031f 	ands.w	r3, r3, #31
 800afa2:	b087      	sub	sp, #28
 800afa4:	bf18      	it	ne
 800afa6:	3604      	addne	r6, #4
 800afa8:	2500      	movs	r5, #0
 800afaa:	1f37      	subs	r7, r6, #4
 800afac:	4682      	mov	sl, r0
 800afae:	4690      	mov	r8, r2
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800afb6:	46b9      	mov	r9, r7
 800afb8:	463c      	mov	r4, r7
 800afba:	9502      	str	r5, [sp, #8]
 800afbc:	46ab      	mov	fp, r5
 800afbe:	784a      	ldrb	r2, [r1, #1]
 800afc0:	1c4b      	adds	r3, r1, #1
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	b342      	cbz	r2, 800b018 <__hexnan+0x88>
 800afc6:	4610      	mov	r0, r2
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	9204      	str	r2, [sp, #16]
 800afcc:	f7ff fd76 	bl	800aabc <__hexdig_fun>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d14f      	bne.n	800b074 <__hexnan+0xe4>
 800afd4:	9a04      	ldr	r2, [sp, #16]
 800afd6:	9905      	ldr	r1, [sp, #20]
 800afd8:	2a20      	cmp	r2, #32
 800afda:	d818      	bhi.n	800b00e <__hexnan+0x7e>
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	459b      	cmp	fp, r3
 800afe0:	dd13      	ble.n	800b00a <__hexnan+0x7a>
 800afe2:	454c      	cmp	r4, r9
 800afe4:	d206      	bcs.n	800aff4 <__hexnan+0x64>
 800afe6:	2d07      	cmp	r5, #7
 800afe8:	dc04      	bgt.n	800aff4 <__hexnan+0x64>
 800afea:	462a      	mov	r2, r5
 800afec:	4649      	mov	r1, r9
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff ffa8 	bl	800af44 <L_shift>
 800aff4:	4544      	cmp	r4, r8
 800aff6:	d950      	bls.n	800b09a <__hexnan+0x10a>
 800aff8:	2300      	movs	r3, #0
 800affa:	f1a4 0904 	sub.w	r9, r4, #4
 800affe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b002:	f8cd b008 	str.w	fp, [sp, #8]
 800b006:	464c      	mov	r4, r9
 800b008:	461d      	mov	r5, r3
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	e7d7      	b.n	800afbe <__hexnan+0x2e>
 800b00e:	2a29      	cmp	r2, #41	; 0x29
 800b010:	d155      	bne.n	800b0be <__hexnan+0x12e>
 800b012:	3102      	adds	r1, #2
 800b014:	f8ca 1000 	str.w	r1, [sl]
 800b018:	f1bb 0f00 	cmp.w	fp, #0
 800b01c:	d04f      	beq.n	800b0be <__hexnan+0x12e>
 800b01e:	454c      	cmp	r4, r9
 800b020:	d206      	bcs.n	800b030 <__hexnan+0xa0>
 800b022:	2d07      	cmp	r5, #7
 800b024:	dc04      	bgt.n	800b030 <__hexnan+0xa0>
 800b026:	462a      	mov	r2, r5
 800b028:	4649      	mov	r1, r9
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff ff8a 	bl	800af44 <L_shift>
 800b030:	4544      	cmp	r4, r8
 800b032:	d934      	bls.n	800b09e <__hexnan+0x10e>
 800b034:	f1a8 0204 	sub.w	r2, r8, #4
 800b038:	4623      	mov	r3, r4
 800b03a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b03e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b042:	429f      	cmp	r7, r3
 800b044:	d2f9      	bcs.n	800b03a <__hexnan+0xaa>
 800b046:	1b3b      	subs	r3, r7, r4
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	3304      	adds	r3, #4
 800b04e:	3e03      	subs	r6, #3
 800b050:	3401      	adds	r4, #1
 800b052:	42a6      	cmp	r6, r4
 800b054:	bf38      	it	cc
 800b056:	2304      	movcc	r3, #4
 800b058:	4443      	add	r3, r8
 800b05a:	2200      	movs	r2, #0
 800b05c:	f843 2b04 	str.w	r2, [r3], #4
 800b060:	429f      	cmp	r7, r3
 800b062:	d2fb      	bcs.n	800b05c <__hexnan+0xcc>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	b91b      	cbnz	r3, 800b070 <__hexnan+0xe0>
 800b068:	4547      	cmp	r7, r8
 800b06a:	d126      	bne.n	800b0ba <__hexnan+0x12a>
 800b06c:	2301      	movs	r3, #1
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	2005      	movs	r0, #5
 800b072:	e025      	b.n	800b0c0 <__hexnan+0x130>
 800b074:	3501      	adds	r5, #1
 800b076:	2d08      	cmp	r5, #8
 800b078:	f10b 0b01 	add.w	fp, fp, #1
 800b07c:	dd06      	ble.n	800b08c <__hexnan+0xfc>
 800b07e:	4544      	cmp	r4, r8
 800b080:	d9c3      	bls.n	800b00a <__hexnan+0x7a>
 800b082:	2300      	movs	r3, #0
 800b084:	f844 3c04 	str.w	r3, [r4, #-4]
 800b088:	2501      	movs	r5, #1
 800b08a:	3c04      	subs	r4, #4
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	f000 000f 	and.w	r0, r0, #15
 800b092:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b096:	6020      	str	r0, [r4, #0]
 800b098:	e7b7      	b.n	800b00a <__hexnan+0x7a>
 800b09a:	2508      	movs	r5, #8
 800b09c:	e7b5      	b.n	800b00a <__hexnan+0x7a>
 800b09e:	9b01      	ldr	r3, [sp, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0df      	beq.n	800b064 <__hexnan+0xd4>
 800b0a4:	f1c3 0320 	rsb	r3, r3, #32
 800b0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ac:	40da      	lsrs	r2, r3
 800b0ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b0b8:	e7d4      	b.n	800b064 <__hexnan+0xd4>
 800b0ba:	3f04      	subs	r7, #4
 800b0bc:	e7d2      	b.n	800b064 <__hexnan+0xd4>
 800b0be:	2004      	movs	r0, #4
 800b0c0:	b007      	add	sp, #28
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0c6 <__ascii_mbtowc>:
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	b901      	cbnz	r1, 800b0cc <__ascii_mbtowc+0x6>
 800b0ca:	a901      	add	r1, sp, #4
 800b0cc:	b142      	cbz	r2, 800b0e0 <__ascii_mbtowc+0x1a>
 800b0ce:	b14b      	cbz	r3, 800b0e4 <__ascii_mbtowc+0x1e>
 800b0d0:	7813      	ldrb	r3, [r2, #0]
 800b0d2:	600b      	str	r3, [r1, #0]
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	1e10      	subs	r0, r2, #0
 800b0d8:	bf18      	it	ne
 800b0da:	2001      	movne	r0, #1
 800b0dc:	b002      	add	sp, #8
 800b0de:	4770      	bx	lr
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	e7fb      	b.n	800b0dc <__ascii_mbtowc+0x16>
 800b0e4:	f06f 0001 	mvn.w	r0, #1
 800b0e8:	e7f8      	b.n	800b0dc <__ascii_mbtowc+0x16>

0800b0ea <_realloc_r>:
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	460e      	mov	r6, r1
 800b0f4:	b921      	cbnz	r1, 800b100 <_realloc_r+0x16>
 800b0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	f7fb b898 	b.w	8006230 <_malloc_r>
 800b100:	b92a      	cbnz	r2, 800b10e <_realloc_r+0x24>
 800b102:	f7fd f933 	bl	800836c <_free_r>
 800b106:	4625      	mov	r5, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10e:	f000 f8b6 	bl	800b27e <_malloc_usable_size_r>
 800b112:	4284      	cmp	r4, r0
 800b114:	4607      	mov	r7, r0
 800b116:	d802      	bhi.n	800b11e <_realloc_r+0x34>
 800b118:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b11c:	d812      	bhi.n	800b144 <_realloc_r+0x5a>
 800b11e:	4621      	mov	r1, r4
 800b120:	4640      	mov	r0, r8
 800b122:	f7fb f885 	bl	8006230 <_malloc_r>
 800b126:	4605      	mov	r5, r0
 800b128:	2800      	cmp	r0, #0
 800b12a:	d0ed      	beq.n	800b108 <_realloc_r+0x1e>
 800b12c:	42bc      	cmp	r4, r7
 800b12e:	4622      	mov	r2, r4
 800b130:	4631      	mov	r1, r6
 800b132:	bf28      	it	cs
 800b134:	463a      	movcs	r2, r7
 800b136:	f7ff fc25 	bl	800a984 <memcpy>
 800b13a:	4631      	mov	r1, r6
 800b13c:	4640      	mov	r0, r8
 800b13e:	f7fd f915 	bl	800836c <_free_r>
 800b142:	e7e1      	b.n	800b108 <_realloc_r+0x1e>
 800b144:	4635      	mov	r5, r6
 800b146:	e7df      	b.n	800b108 <_realloc_r+0x1e>

0800b148 <_strtoul_l.constprop.0>:
 800b148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b14c:	4f36      	ldr	r7, [pc, #216]	; (800b228 <_strtoul_l.constprop.0+0xe0>)
 800b14e:	4686      	mov	lr, r0
 800b150:	460d      	mov	r5, r1
 800b152:	4628      	mov	r0, r5
 800b154:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b158:	5d3e      	ldrb	r6, [r7, r4]
 800b15a:	f016 0608 	ands.w	r6, r6, #8
 800b15e:	d1f8      	bne.n	800b152 <_strtoul_l.constprop.0+0xa>
 800b160:	2c2d      	cmp	r4, #45	; 0x2d
 800b162:	d130      	bne.n	800b1c6 <_strtoul_l.constprop.0+0x7e>
 800b164:	782c      	ldrb	r4, [r5, #0]
 800b166:	2601      	movs	r6, #1
 800b168:	1c85      	adds	r5, r0, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d057      	beq.n	800b21e <_strtoul_l.constprop.0+0xd6>
 800b16e:	2b10      	cmp	r3, #16
 800b170:	d109      	bne.n	800b186 <_strtoul_l.constprop.0+0x3e>
 800b172:	2c30      	cmp	r4, #48	; 0x30
 800b174:	d107      	bne.n	800b186 <_strtoul_l.constprop.0+0x3e>
 800b176:	7828      	ldrb	r0, [r5, #0]
 800b178:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b17c:	2858      	cmp	r0, #88	; 0x58
 800b17e:	d149      	bne.n	800b214 <_strtoul_l.constprop.0+0xcc>
 800b180:	786c      	ldrb	r4, [r5, #1]
 800b182:	2310      	movs	r3, #16
 800b184:	3502      	adds	r5, #2
 800b186:	f04f 38ff 	mov.w	r8, #4294967295
 800b18a:	2700      	movs	r7, #0
 800b18c:	fbb8 f8f3 	udiv	r8, r8, r3
 800b190:	fb03 f908 	mul.w	r9, r3, r8
 800b194:	ea6f 0909 	mvn.w	r9, r9
 800b198:	4638      	mov	r0, r7
 800b19a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b19e:	f1bc 0f09 	cmp.w	ip, #9
 800b1a2:	d815      	bhi.n	800b1d0 <_strtoul_l.constprop.0+0x88>
 800b1a4:	4664      	mov	r4, ip
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	dd23      	ble.n	800b1f2 <_strtoul_l.constprop.0+0xaa>
 800b1aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b1ae:	d007      	beq.n	800b1c0 <_strtoul_l.constprop.0+0x78>
 800b1b0:	4580      	cmp	r8, r0
 800b1b2:	d31b      	bcc.n	800b1ec <_strtoul_l.constprop.0+0xa4>
 800b1b4:	d101      	bne.n	800b1ba <_strtoul_l.constprop.0+0x72>
 800b1b6:	45a1      	cmp	r9, r4
 800b1b8:	db18      	blt.n	800b1ec <_strtoul_l.constprop.0+0xa4>
 800b1ba:	fb00 4003 	mla	r0, r0, r3, r4
 800b1be:	2701      	movs	r7, #1
 800b1c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1c4:	e7e9      	b.n	800b19a <_strtoul_l.constprop.0+0x52>
 800b1c6:	2c2b      	cmp	r4, #43	; 0x2b
 800b1c8:	bf04      	itt	eq
 800b1ca:	782c      	ldrbeq	r4, [r5, #0]
 800b1cc:	1c85      	addeq	r5, r0, #2
 800b1ce:	e7cc      	b.n	800b16a <_strtoul_l.constprop.0+0x22>
 800b1d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b1d4:	f1bc 0f19 	cmp.w	ip, #25
 800b1d8:	d801      	bhi.n	800b1de <_strtoul_l.constprop.0+0x96>
 800b1da:	3c37      	subs	r4, #55	; 0x37
 800b1dc:	e7e3      	b.n	800b1a6 <_strtoul_l.constprop.0+0x5e>
 800b1de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1e2:	f1bc 0f19 	cmp.w	ip, #25
 800b1e6:	d804      	bhi.n	800b1f2 <_strtoul_l.constprop.0+0xaa>
 800b1e8:	3c57      	subs	r4, #87	; 0x57
 800b1ea:	e7dc      	b.n	800b1a6 <_strtoul_l.constprop.0+0x5e>
 800b1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b1f0:	e7e6      	b.n	800b1c0 <_strtoul_l.constprop.0+0x78>
 800b1f2:	1c7b      	adds	r3, r7, #1
 800b1f4:	d106      	bne.n	800b204 <_strtoul_l.constprop.0+0xbc>
 800b1f6:	2322      	movs	r3, #34	; 0x22
 800b1f8:	f8ce 3000 	str.w	r3, [lr]
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	b932      	cbnz	r2, 800b20e <_strtoul_l.constprop.0+0xc6>
 800b200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b204:	b106      	cbz	r6, 800b208 <_strtoul_l.constprop.0+0xc0>
 800b206:	4240      	negs	r0, r0
 800b208:	2a00      	cmp	r2, #0
 800b20a:	d0f9      	beq.n	800b200 <_strtoul_l.constprop.0+0xb8>
 800b20c:	b107      	cbz	r7, 800b210 <_strtoul_l.constprop.0+0xc8>
 800b20e:	1e69      	subs	r1, r5, #1
 800b210:	6011      	str	r1, [r2, #0]
 800b212:	e7f5      	b.n	800b200 <_strtoul_l.constprop.0+0xb8>
 800b214:	2430      	movs	r4, #48	; 0x30
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1b5      	bne.n	800b186 <_strtoul_l.constprop.0+0x3e>
 800b21a:	2308      	movs	r3, #8
 800b21c:	e7b3      	b.n	800b186 <_strtoul_l.constprop.0+0x3e>
 800b21e:	2c30      	cmp	r4, #48	; 0x30
 800b220:	d0a9      	beq.n	800b176 <_strtoul_l.constprop.0+0x2e>
 800b222:	230a      	movs	r3, #10
 800b224:	e7af      	b.n	800b186 <_strtoul_l.constprop.0+0x3e>
 800b226:	bf00      	nop
 800b228:	0800b9d9 	.word	0x0800b9d9

0800b22c <_strtoul_r>:
 800b22c:	f7ff bf8c 	b.w	800b148 <_strtoul_l.constprop.0>

0800b230 <__ascii_wctomb>:
 800b230:	b149      	cbz	r1, 800b246 <__ascii_wctomb+0x16>
 800b232:	2aff      	cmp	r2, #255	; 0xff
 800b234:	bf85      	ittet	hi
 800b236:	238a      	movhi	r3, #138	; 0x8a
 800b238:	6003      	strhi	r3, [r0, #0]
 800b23a:	700a      	strbls	r2, [r1, #0]
 800b23c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b240:	bf98      	it	ls
 800b242:	2001      	movls	r0, #1
 800b244:	4770      	bx	lr
 800b246:	4608      	mov	r0, r1
 800b248:	4770      	bx	lr
	...

0800b24c <fiprintf>:
 800b24c:	b40e      	push	{r1, r2, r3}
 800b24e:	b503      	push	{r0, r1, lr}
 800b250:	4601      	mov	r1, r0
 800b252:	ab03      	add	r3, sp, #12
 800b254:	4805      	ldr	r0, [pc, #20]	; (800b26c <fiprintf+0x20>)
 800b256:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25a:	6800      	ldr	r0, [r0, #0]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	f7fe ff69 	bl	800a134 <_vfiprintf_r>
 800b262:	b002      	add	sp, #8
 800b264:	f85d eb04 	ldr.w	lr, [sp], #4
 800b268:	b003      	add	sp, #12
 800b26a:	4770      	bx	lr
 800b26c:	20000064 	.word	0x20000064

0800b270 <abort>:
 800b270:	b508      	push	{r3, lr}
 800b272:	2006      	movs	r0, #6
 800b274:	f000 f834 	bl	800b2e0 <raise>
 800b278:	2001      	movs	r0, #1
 800b27a:	f7f7 fac7 	bl	800280c <_exit>

0800b27e <_malloc_usable_size_r>:
 800b27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b282:	1f18      	subs	r0, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	bfbc      	itt	lt
 800b288:	580b      	ldrlt	r3, [r1, r0]
 800b28a:	18c0      	addlt	r0, r0, r3
 800b28c:	4770      	bx	lr

0800b28e <_raise_r>:
 800b28e:	291f      	cmp	r1, #31
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	460d      	mov	r5, r1
 800b296:	d904      	bls.n	800b2a2 <_raise_r+0x14>
 800b298:	2316      	movs	r3, #22
 800b29a:	6003      	str	r3, [r0, #0]
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	bd38      	pop	{r3, r4, r5, pc}
 800b2a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2a4:	b112      	cbz	r2, 800b2ac <_raise_r+0x1e>
 800b2a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2aa:	b94b      	cbnz	r3, 800b2c0 <_raise_r+0x32>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 f831 	bl	800b314 <_getpid_r>
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4601      	mov	r1, r0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2bc:	f000 b818 	b.w	800b2f0 <_kill_r>
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d00a      	beq.n	800b2da <_raise_r+0x4c>
 800b2c4:	1c59      	adds	r1, r3, #1
 800b2c6:	d103      	bne.n	800b2d0 <_raise_r+0x42>
 800b2c8:	2316      	movs	r3, #22
 800b2ca:	6003      	str	r3, [r0, #0]
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	e7e7      	b.n	800b2a0 <_raise_r+0x12>
 800b2d0:	2400      	movs	r4, #0
 800b2d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	4798      	blx	r3
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7e0      	b.n	800b2a0 <_raise_r+0x12>
	...

0800b2e0 <raise>:
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <raise+0xc>)
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	f7ff bfd2 	b.w	800b28e <_raise_r>
 800b2ea:	bf00      	nop
 800b2ec:	20000064 	.word	0x20000064

0800b2f0 <_kill_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d07      	ldr	r5, [pc, #28]	; (800b310 <_kill_r+0x20>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	602b      	str	r3, [r5, #0]
 800b2fe:	f7f7 fa75 	bl	80027ec <_kill>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d102      	bne.n	800b30c <_kill_r+0x1c>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	b103      	cbz	r3, 800b30c <_kill_r+0x1c>
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	bf00      	nop
 800b310:	20000afc 	.word	0x20000afc

0800b314 <_getpid_r>:
 800b314:	f7f7 ba62 	b.w	80027dc <_getpid>

0800b318 <_init>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	bf00      	nop
 800b31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31e:	bc08      	pop	{r3}
 800b320:	469e      	mov	lr, r3
 800b322:	4770      	bx	lr

0800b324 <_fini>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr
