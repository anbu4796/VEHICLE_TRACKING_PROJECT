
Veichle_tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800b6c0  0800b6c0  0001b6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c190  0800c190  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c190  0800c190  0001c190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c198  0800c198  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c198  0800c198  0001c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  200001f8  0800c398  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  0800c398  00020d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010730  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da4  00000000  00000000  0003099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00033740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b31  00000000  00000000  0003506f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012deb  00000000  00000000  0005cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3a5  00000000  00000000  0006f98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050bc  00000000  00000000  0015bd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00160dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6a8 	.word	0x0800b6a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b6a8 	.word	0x0800b6a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <get_data_from_gps>:
float rmc_latitude, rmc_longitude;
int gps_fix;


void get_data_from_gps(char *UART_receive_data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0fa      	sub	sp, #488	; 0x1e8
 8001014:	af00      	add	r7, sp, #0
 8001016:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800101a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800101e:	6018      	str	r0, [r3, #0]
	char *ptrgga=NULL, *ptrrmc=NULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	char GGA_buffer[250],RMC_buffer[200];
	int index,gga_length,rmc_length;
	//printf("received data from UART %s\n",UART_receive_data);

	if( (ptrgga=strstr(UART_receive_data,"GNGGA")))
 800102c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001030:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001034:	4953      	ldr	r1, [pc, #332]	; (8001184 <get_data_from_gps+0x174>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	f007 fe26 	bl	8008c88 <strstr>
 800103c:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 8001040:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d04b      	beq.n	80010e0 <get_data_from_gps+0xd0>
	{
		printf("ptrGGA string has %s\n", ptrgga);
 8001048:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800104c:	484e      	ldr	r0, [pc, #312]	; (8001188 <get_data_from_gps+0x178>)
 800104e:	f007 fc1f 	bl	8008890 <iprintf>
		strncpy(GGA_buffer,ptrgga,80);
 8001052:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001056:	2250      	movs	r2, #80	; 0x50
 8001058:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800105c:	4618      	mov	r0, r3
 800105e:	f007 fda4 	bl	8008baa <strncpy>
		printf("ptrGGA 2 string has %s\n", ptrgga);
 8001062:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8001066:	4849      	ldr	r0, [pc, #292]	; (800118c <get_data_from_gps+0x17c>)
 8001068:	f007 fc12 	bl	8008890 <iprintf>
		printf("GGA string is %s\n", GGA_buffer);
 800106c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001070:	4619      	mov	r1, r3
 8001072:	4847      	ldr	r0, [pc, #284]	; (8001190 <get_data_from_gps+0x180>)
 8001074:	f007 fc0c 	bl	8008890 <iprintf>
		gga_length=strlen(GGA_buffer);
 8001078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f907 	bl	8000290 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		if(GGA_buffer!=NULL)
	  	{
			for(int i=0;i<gga_length;i++)
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800108e:	e021      	b.n	80010d4 <get_data_from_gps+0xc4>
			{

				if(GGA_buffer[i]=='M')
 8001090:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001094:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001098:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b4d      	cmp	r3, #77	; 0x4d
 80010a2:	d112      	bne.n	80010ca <get_data_from_gps+0xba>
				{
					extract_data_for_GGA(GGA_buffer);
 80010a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f881 	bl	80011b0 <extract_data_for_GGA>
					// Generating the JSON string
					if(gps_fix==1)
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <get_data_from_gps+0x184>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d106      	bne.n	80010c4 <get_data_from_gps+0xb4>
					{
						printf("GPS Valid Fix\n");
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <get_data_from_gps+0x188>)
 80010b8:	f007 fc50 	bl	800895c <puts>
						json_format_for_GGA(json_str);
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <get_data_from_gps+0x18c>)
 80010be:	f000 f97f 	bl	80013c0 <json_format_for_GGA>
 80010c2:	e002      	b.n	80010ca <get_data_from_gps+0xba>
					}
					else
					{
						printf("Invalid GPS fix not getting proper location\n Reset the GPS Module\n");
 80010c4:	4836      	ldr	r0, [pc, #216]	; (80011a0 <get_data_from_gps+0x190>)
 80010c6:	f007 fc49 	bl	800895c <puts>
			for(int i=0;i<gga_length;i++)
 80010ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010ce:	3301      	adds	r3, #1
 80010d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010d4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80010d8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbd7      	blt.n	8001090 <get_data_from_gps+0x80>
		else
	  	{
	  	 	printf("GGA Buffer is empty\n");
	  	}
	}
	if((ptrrmc=strstr(UART_receive_data,"GNRMC")))
 80010e0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80010e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80010e8:	492e      	ldr	r1, [pc, #184]	; (80011a4 <get_data_from_gps+0x194>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f007 fdcc 	bl	8008c88 <strstr>
 80010f0:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
 80010f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02f      	beq.n	800115c <get_data_from_gps+0x14c>
					RMC_buffer[index]=*(ptrrmc+index);
	  	 			index++;
	  	 	 }
	  	 	 RMC_buffer[index]='\0';
	  	 }*/
		strncpy(RMC_buffer,ptrrmc,85);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2255      	movs	r2, #85	; 0x55
 8001102:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001106:	4618      	mov	r0, r3
 8001108:	f007 fd4f 	bl	8008baa <strncpy>
		printf("RMC string is %s\n", RMC_buffer);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4825      	ldr	r0, [pc, #148]	; (80011a8 <get_data_from_gps+0x198>)
 8001114:	f007 fbbc 	bl	8008890 <iprintf>
	 	 rmc_length=strlen(RMC_buffer);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f8b7 	bl	8000290 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	 	 if(RMC_buffer!=NULL)
	 	 {

	 		 char *ptr=NULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	 		 if((ptr=strchr(RMC_buffer,'*')))
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	212a      	movs	r1, #42	; 0x2a
 8001134:	4618      	mov	r0, r3
 8001136:	f007 fd19 	bl	8008b6c <strchr>
 800113a:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
 800113e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <get_data_from_gps+0x140>
	 		 {

	 			extract_data_for_RMC(RMC_buffer);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f970 	bl	8001430 <extract_data_for_RMC>
	 		 }
	 		if(date!='0')
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <get_data_from_gps+0x19c>)
 8001152:	2b30      	cmp	r3, #48	; 0x30
 8001154:	d002      	beq.n	800115c <get_data_from_gps+0x14c>
	 		{
	 			 json_format_for_RMC(json_str);
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <get_data_from_gps+0x18c>)
 8001158:	f000 fae2 	bl	8001720 <json_format_for_RMC>
	  	  }
	}



	memset(GGA_buffer,0,sizeof(GGA_buffer));
 800115c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001160:	22fa      	movs	r2, #250	; 0xfa
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f007 fcf9 	bl	8008b5c <memset>
	memset(RMC_buffer,0,sizeof(RMC_buffer));
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	22c8      	movs	r2, #200	; 0xc8
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fcf2 	bl	8008b5c <memset>
	//memset(buf_to_extract,0,sizeof(buf_to_extract));
}
 8001178:	bf00      	nop
 800117a:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800b6c0 	.word	0x0800b6c0
 8001188:	0800b6c8 	.word	0x0800b6c8
 800118c:	0800b6e0 	.word	0x0800b6e0
 8001190:	0800b6f8 	.word	0x0800b6f8
 8001194:	20000948 	.word	0x20000948
 8001198:	0800b70c 	.word	0x0800b70c
 800119c:	200007f4 	.word	0x200007f4
 80011a0:	0800b71c 	.word	0x0800b71c
 80011a4:	0800b760 	.word	0x0800b760
 80011a8:	0800b768 	.word	0x0800b768
 80011ac:	2000092c 	.word	0x2000092c

080011b0 <extract_data_for_GGA>:

void extract_data_for_GGA( char *GGA_buffer)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]

		int tokencnt = 0,minutes,degrees,wholeSeconds;
 80011b8:	2300      	movs	r3, #0
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		double lat,longi,seconds,temp,fractionalSeconds;
		int utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
		//printf("in gga fun %s\n",GGA_buffer);
		char utc_time[7];
		char latitude_str[10], longitude_str[11],gpsfix[2],latidir;
		char *token = strtok(GGA_buffer, ",");
 80011bc:	4973      	ldr	r1, [pc, #460]	; (800138c <extract_data_for_GGA+0x1dc>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f007 fd06 	bl	8008bd0 <strtok>
 80011c4:	64b8      	str	r0, [r7, #72]	; 0x48
	while (token != NULL && tokencnt < 9)
 80011c6:	e0d5      	b.n	8001374 <extract_data_for_GGA+0x1c4>
	{
		switch (tokencnt)
 80011c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ca:	3b01      	subs	r3, #1
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	f200 80c9 	bhi.w	8001364 <extract_data_for_GGA+0x1b4>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <extract_data_for_GGA+0x28>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011f1 	.word	0x080011f1
 80011dc:	080012cb 	.word	0x080012cb
 80011e0:	080012fd 	.word	0x080012fd
 80011e4:	08001307 	.word	0x08001307
 80011e8:	08001337 	.word	0x08001337
 80011ec:	08001341 	.word	0x08001341
		{

			case 1: // Time
						strncpy(utc_time, token, 6);
 80011f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f4:	2206      	movs	r2, #6
 80011f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011f8:	4618      	mov	r0, r3
 80011fa:	f007 fcd6 	bl	8008baa <strncpy>
						utc_time[6] = '\0';
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						// Extract hours, minutes, and seconds
						utc_hours = atoi(utc_time) / 10000;
 8001204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fd58 	bl	8006cbe <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <extract_data_for_GGA+0x1e0>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1312      	asrs	r2, r2, #12
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	647b      	str	r3, [r7, #68]	; 0x44
						utc_minutes = (atoi(utc_time) % 10000) / 100;
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f005 fd4b 	bl	8006cbe <atoi>
 8001228:	4602      	mov	r2, r0
 800122a:	4b59      	ldr	r3, [pc, #356]	; (8001390 <extract_data_for_GGA+0x1e0>)
 800122c:	fb83 1302 	smull	r1, r3, r3, r2
 8001230:	1319      	asrs	r1, r3, #12
 8001232:	17d3      	asrs	r3, r2, #31
 8001234:	1acb      	subs	r3, r1, r3
 8001236:	f242 7110 	movw	r1, #10000	; 0x2710
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	4a54      	ldr	r2, [pc, #336]	; (8001394 <extract_data_for_GGA+0x1e4>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	1152      	asrs	r2, r2, #5
 8001248:	17db      	asrs	r3, r3, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
						utc_seconds = atoi(utc_time) % 100;
 800124e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fd33 	bl	8006cbe <atoi>
 8001258:	4603      	mov	r3, r0
 800125a:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <extract_data_for_GGA+0x1e4>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1151      	asrs	r1, r2, #5
 8001262:	17da      	asrs	r2, r3, #31
 8001264:	1a8a      	subs	r2, r1, r2
 8001266:	2164      	movs	r1, #100	; 0x64
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c

						// Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						ist_hours = (utc_hours + 5) % 24;
 8001270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001272:	1d5a      	adds	r2, r3, #5
 8001274:	4b48      	ldr	r3, [pc, #288]	; (8001398 <extract_data_for_GGA+0x1e8>)
 8001276:	fb83 1302 	smull	r1, r3, r3, r2
 800127a:	1099      	asrs	r1, r3, #2
 800127c:	17d3      	asrs	r3, r2, #31
 800127e:	1ac9      	subs	r1, r1, r3
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
						ist_minutes = (utc_minutes + 30) % 60;
 800128c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128e:	f103 021e 	add.w	r2, r3, #30
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <extract_data_for_GGA+0x1ec>)
 8001294:	fb83 1302 	smull	r1, r3, r3, r2
 8001298:	4413      	add	r3, r2
 800129a:	1159      	asrs	r1, r3, #5
 800129c:	17d3      	asrs	r3, r2, #31
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	1a5b      	subs	r3, r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
						ist_seconds = utc_seconds;
 80012ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30

						// Print the result in the format "hrs:mins:secs"
						sprintf(time, "%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 80012b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012b8:	4939      	ldr	r1, [pc, #228]	; (80013a0 <extract_data_for_GGA+0x1f0>)
 80012ba:	483a      	ldr	r0, [pc, #232]	; (80013a4 <extract_data_for_GGA+0x1f4>)
 80012bc:	f007 fb56 	bl	800896c <siprintf>

						// Print the IST time
						printf("IST time: %s", time);
 80012c0:	4938      	ldr	r1, [pc, #224]	; (80013a4 <extract_data_for_GGA+0x1f4>)
 80012c2:	4839      	ldr	r0, [pc, #228]	; (80013a8 <extract_data_for_GGA+0x1f8>)
 80012c4:	f007 fae4 	bl	8008890 <iprintf>
						break;
 80012c8:	e04c      	b.n	8001364 <extract_data_for_GGA+0x1b4>
			case 2: // Latitude
				strncpy(latitude_str, token, 9);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2209      	movs	r2, #9
 80012d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 fc69 	bl	8008baa <strncpy>
				latitude_str[9] = '\0';
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				gga_latitude = atof(latitude_str);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fce8 	bl	8006cb8 <atof>
 80012e8:	ec53 2b10 	vmov	r2, r3, d0
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc8a 	bl	8000c08 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <extract_data_for_GGA+0x1fc>)
 80012f8:	6013      	str	r3, [r2, #0]
				//printf("latitude=%f\n",latitude);
				break;
 80012fa:	e033      	b.n	8001364 <extract_data_for_GGA+0x1b4>
			case 3: // latitude dir
				latitude_dir=token[0];
 80012fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <extract_data_for_GGA+0x200>)
 8001302:	701a      	strb	r2, [r3, #0]
				//printf("latidir=%c\n",latitude_dir);
				break;
 8001304:	e02e      	b.n	8001364 <extract_data_for_GGA+0x1b4>
			case 4: // Longitude
				strncpy(longitude_str, token, 10);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	220a      	movs	r2, #10
 800130c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800130e:	4618      	mov	r0, r3
 8001310:	f007 fc4b 	bl	8008baa <strncpy>
				longitude_str[10] = '\0';
 8001314:	2300      	movs	r3, #0
 8001316:	76bb      	strb	r3, [r7, #26]
				gga_longitude = atof(longitude_str);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4618      	mov	r0, r3
 800131e:	f005 fccb 	bl	8006cb8 <atof>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc6d 	bl	8000c08 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <extract_data_for_GGA+0x204>)
 8001332:	6013      	str	r3, [r2, #0]
				//printf("longitude=%f\n",longitude);
				break;
 8001334:	e016      	b.n	8001364 <extract_data_for_GGA+0x1b4>
			case 5: // longitude dir
				longitude_dir=token[0];
 8001336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <extract_data_for_GGA+0x208>)
 800133c:	701a      	strb	r2, [r3, #0]
				//printf("longidir=%c\n",longitude_dir);
				break;
 800133e:	e011      	b.n	8001364 <extract_data_for_GGA+0x1b4>
			case 6: // gps fix
				strncpy(gpsfix,token,1);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2201      	movs	r2, #1
 8001346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001348:	4618      	mov	r0, r3
 800134a:	f007 fc2e 	bl	8008baa <strncpy>
				gpsfix[1]='\0';
 800134e:	2300      	movs	r3, #0
 8001350:	737b      	strb	r3, [r7, #13]
				gps_fix =atoi(gpsfix);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fcb1 	bl	8006cbe <atoi>
 800135c:	4603      	mov	r3, r0
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <extract_data_for_GGA+0x20c>)
 8001360:	6013      	str	r3, [r2, #0]
				//printf("gpsfix=%d\n",gps_fix);
				break;
 8001362:	bf00      	nop
		}
		token = strtok(NULL, ",");
 8001364:	4909      	ldr	r1, [pc, #36]	; (800138c <extract_data_for_GGA+0x1dc>)
 8001366:	2000      	movs	r0, #0
 8001368:	f007 fc32 	bl	8008bd0 <strtok>
 800136c:	64b8      	str	r0, [r7, #72]	; 0x48
		tokencnt++;
 800136e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001370:	3301      	adds	r3, #1
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (token != NULL && tokencnt < 9)
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <extract_data_for_GGA+0x1d2>
 800137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137c:	2b08      	cmp	r3, #8
 800137e:	f77f af23 	ble.w	80011c8 <extract_data_for_GGA+0x18>
	}
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0800b77c 	.word	0x0800b77c
 8001390:	68db8bad 	.word	0x68db8bad
 8001394:	51eb851f 	.word	0x51eb851f
 8001398:	2aaaaaab 	.word	0x2aaaaaab
 800139c:	88888889 	.word	0x88888889
 80013a0:	0800b780 	.word	0x0800b780
 80013a4:	20000920 	.word	0x20000920
 80013a8:	0800b790 	.word	0x0800b790
 80013ac:	20000938 	.word	0x20000938
 80013b0:	20000935 	.word	0x20000935
 80013b4:	2000093c 	.word	0x2000093c
 80013b8:	20000936 	.word	0x20000936
 80013bc:	20000948 	.word	0x20000948

080013c0 <json_format_for_GGA>:


void json_format_for_GGA(char *json_str)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af08      	add	r7, sp, #32
 80013c6:	6078      	str	r0, [r7, #4]

	// Creating the JSON string
	sprintf(json_str, "{\n Time : %s,\n Latitude : %f %c,\n Longitude : %f %c\n}\n", time, gga_latitude, latitude_dir, gga_longitude,longitude_dir);
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <json_format_for_GGA+0x54>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8cb 	bl	8000568 <__aeabi_f2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <json_format_for_GGA+0x58>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461e      	mov	r6, r3
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <json_format_for_GGA+0x5c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8c1 	bl	8000568 <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <json_format_for_GGA+0x60>)
 80013ec:	7809      	ldrb	r1, [r1, #0]
 80013ee:	9106      	str	r1, [sp, #24]
 80013f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013f4:	9602      	str	r6, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <json_format_for_GGA+0x64>)
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <json_format_for_GGA+0x68>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f007 fab4 	bl	800896c <siprintf>

	printf("JSON string format=%s\n",json_str);
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <json_format_for_GGA+0x6c>)
 8001408:	f007 fa42 	bl	8008890 <iprintf>
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001414:	20000938 	.word	0x20000938
 8001418:	20000935 	.word	0x20000935
 800141c:	2000093c 	.word	0x2000093c
 8001420:	20000936 	.word	0x20000936
 8001424:	20000920 	.word	0x20000920
 8001428:	0800b7a0 	.word	0x0800b7a0
 800142c:	0800b7d8 	.word	0x0800b7d8

08001430 <extract_data_for_RMC>:


void extract_data_for_RMC(char *RMC_buffer)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b09a      	sub	sp, #104	; 0x68
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
		int tokencnt = 0,minutes,degrees,dd,mm,yy;
 8001438:	2300      	movs	r3, #0
 800143a:	65fb      	str	r3, [r7, #92]	; 0x5c
		int utc_hours,utc_minutes,utc_seconds,ist_hours,ist_minutes,ist_seconds;
		double lat,longi,temp,seconds;
		char utc_time[7], latitude_str[10], longitude_str[11],Date_str[7];
		printf("rmc buffer in function = %s\n",RMC_buffer);
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	48a4      	ldr	r0, [pc, #656]	; (80016d0 <extract_data_for_RMC+0x2a0>)
 8001440:	f007 fa26 	bl	8008890 <iprintf>
		char *token = strtok(RMC_buffer, ",");
 8001444:	49a3      	ldr	r1, [pc, #652]	; (80016d4 <extract_data_for_RMC+0x2a4>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f007 fbc2 	bl	8008bd0 <strtok>
 800144c:	65b8      	str	r0, [r7, #88]	; 0x58
		printf("token in function = %s\n",token);
 800144e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001450:	48a1      	ldr	r0, [pc, #644]	; (80016d8 <extract_data_for_RMC+0x2a8>)
 8001452:	f007 fa1d 	bl	8008890 <iprintf>
	while (token != NULL && tokencnt < 12)
 8001456:	e12f      	b.n	80016b8 <extract_data_for_RMC+0x288>
	{
		printf("token count =%d\n",tokencnt);
 8001458:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800145a:	48a0      	ldr	r0, [pc, #640]	; (80016dc <extract_data_for_RMC+0x2ac>)
 800145c:	f007 fa18 	bl	8008890 <iprintf>
		switch (tokencnt)
 8001460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001462:	3b01      	subs	r3, #1
 8001464:	2b08      	cmp	r3, #8
 8001466:	f200 811f 	bhi.w	80016a8 <extract_data_for_RMC+0x278>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <extract_data_for_RMC+0x40>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001495 	.word	0x08001495
 8001474:	080016a9 	.word	0x080016a9
 8001478:	0800156f 	.word	0x0800156f
 800147c:	080015a1 	.word	0x080015a1
 8001480:	080015b7 	.word	0x080015b7
 8001484:	080015fb 	.word	0x080015fb
 8001488:	080016a9 	.word	0x080016a9
 800148c:	080016a9 	.word	0x080016a9
 8001490:	08001611 	.word	0x08001611
		{
			case 1: // Time
						strncpy(utc_time, token, 6);
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	2206      	movs	r2, #6
 800149a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800149c:	4618      	mov	r0, r3
 800149e:	f007 fb84 	bl	8008baa <strncpy>
						utc_time[6] = '\0';
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						//time = atoi(utc_time);
						// Extract hours, minutes, and seconds
						 utc_hours = atoi(utc_time) / 10000;
 80014a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fc06 	bl	8006cbe <atoi>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a8a      	ldr	r2, [pc, #552]	; (80016e0 <extract_data_for_RMC+0x2b0>)
 80014b6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ba:	1312      	asrs	r2, r2, #12
 80014bc:	17db      	asrs	r3, r3, #31
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	64bb      	str	r3, [r7, #72]	; 0x48
						 utc_minutes = (atoi(utc_time) % 10000) / 100;
 80014c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fbf9 	bl	8006cbe <atoi>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <extract_data_for_RMC+0x2b0>)
 80014d0:	fb83 1302 	smull	r1, r3, r3, r2
 80014d4:	1319      	asrs	r1, r3, #12
 80014d6:	17d3      	asrs	r3, r2, #31
 80014d8:	1acb      	subs	r3, r1, r3
 80014da:	f242 7110 	movw	r1, #10000	; 0x2710
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a7f      	ldr	r2, [pc, #508]	; (80016e4 <extract_data_for_RMC+0x2b4>)
 80014e6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ea:	1152      	asrs	r2, r2, #5
 80014ec:	17db      	asrs	r3, r3, #31
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
						 utc_seconds = atoi(utc_time) % 100;
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fbe1 	bl	8006cbe <atoi>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a79      	ldr	r2, [pc, #484]	; (80016e4 <extract_data_for_RMC+0x2b4>)
 8001500:	fb82 1203 	smull	r1, r2, r2, r3
 8001504:	1151      	asrs	r1, r2, #5
 8001506:	17da      	asrs	r2, r3, #31
 8001508:	1a8a      	subs	r2, r1, r2
 800150a:	2164      	movs	r1, #100	; 0x64
 800150c:	fb01 f202 	mul.w	r2, r1, r2
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	643b      	str	r3, [r7, #64]	; 0x40

						 // Calculate IST (Indian Standard Time) with a time zone offset of 5 hours and 30 minutes
						 ist_hours = (utc_hours + 5) % 24 ;
 8001514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001516:	1d5a      	adds	r2, r3, #5
 8001518:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <extract_data_for_RMC+0x2b8>)
 800151a:	fb83 1302 	smull	r1, r3, r3, r2
 800151e:	1099      	asrs	r1, r3, #2
 8001520:	17d3      	asrs	r3, r2, #31
 8001522:	1ac9      	subs	r1, r1, r3
 8001524:	460b      	mov	r3, r1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	440b      	add	r3, r1
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
						 ist_minutes = (utc_minutes + 30) % 60;
 8001530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001532:	f103 021e 	add.w	r2, r3, #30
 8001536:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <extract_data_for_RMC+0x2bc>)
 8001538:	fb83 1302 	smull	r1, r3, r3, r2
 800153c:	4413      	add	r3, r2
 800153e:	1159      	asrs	r1, r3, #5
 8001540:	17d3      	asrs	r3, r2, #31
 8001542:	1ac9      	subs	r1, r1, r3
 8001544:	460b      	mov	r3, r1
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a5b      	subs	r3, r3, r1
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
						 ist_seconds = utc_seconds;
 8001550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001552:	637b      	str	r3, [r7, #52]	; 0x34

						 // Print the result in the format "hrs:mins:secs"
						 sprintf(time,"%02d:%02d:%02d", ist_hours, ist_minutes, ist_seconds);
 8001554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800155c:	4964      	ldr	r1, [pc, #400]	; (80016f0 <extract_data_for_RMC+0x2c0>)
 800155e:	4865      	ldr	r0, [pc, #404]	; (80016f4 <extract_data_for_RMC+0x2c4>)
 8001560:	f007 fa04 	bl	800896c <siprintf>

						 // Print the IST time
						 printf("IST time: %s", time);
 8001564:	4963      	ldr	r1, [pc, #396]	; (80016f4 <extract_data_for_RMC+0x2c4>)
 8001566:	4864      	ldr	r0, [pc, #400]	; (80016f8 <extract_data_for_RMC+0x2c8>)
 8001568:	f007 f992 	bl	8008890 <iprintf>
						 break;
 800156c:	e09c      	b.n	80016a8 <extract_data_for_RMC+0x278>
			case 3: // Latitude
				strncpy(latitude_str, token, 9);
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2209      	movs	r2, #9
 8001574:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001576:	4618      	mov	r0, r3
 8001578:	f007 fb17 	bl	8008baa <strncpy>
				latitude_str[9] = '\0';
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				rmc_latitude = atof(latitude_str);
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f005 fb96 	bl	8006cb8 <atof>
 800158c:	ec53 2b10 	vmov	r2, r3, d0
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fb38 	bl	8000c08 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	4a58      	ldr	r2, [pc, #352]	; (80016fc <extract_data_for_RMC+0x2cc>)
 800159c:	6013      	str	r3, [r2, #0]
				break;
 800159e:	e083      	b.n	80016a8 <extract_data_for_RMC+0x278>
			case 4: // latitude dir
				latitude_dir=token[0];
 80015a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <extract_data_for_RMC+0x2d0>)
 80015a6:	701a      	strb	r2, [r3, #0]
				printf("longidir=%c\n",latitude_dir);
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <extract_data_for_RMC+0x2d0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4855      	ldr	r0, [pc, #340]	; (8001704 <extract_data_for_RMC+0x2d4>)
 80015b0:	f007 f96e 	bl	8008890 <iprintf>
				break;
 80015b4:	e078      	b.n	80016a8 <extract_data_for_RMC+0x278>
			case 5: // Longitude
				strncpy(longitude_str, token, 10);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	220a      	movs	r2, #10
 80015bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 faf3 	bl	8008baa <strncpy>
				longitude_str[10] = '\0';
 80015c4:	2300      	movs	r3, #0
 80015c6:	77bb      	strb	r3, [r7, #30]
				rmc_longitude = atof(longitude_str);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fb73 	bl	8006cb8 <atof>
 80015d2:	ec53 2b10 	vmov	r2, r3, d0
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fb15 	bl	8000c08 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <extract_data_for_RMC+0x2d8>)
 80015e2:	6013      	str	r3, [r2, #0]
				printf("longitude in RMC =%f\n",rmc_longitude);
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <extract_data_for_RMC+0x2d8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffbd 	bl	8000568 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4846      	ldr	r0, [pc, #280]	; (800170c <extract_data_for_RMC+0x2dc>)
 80015f4:	f007 f94c 	bl	8008890 <iprintf>
				break;
 80015f8:	e056      	b.n	80016a8 <extract_data_for_RMC+0x278>
			case 6: // longitude dir
				longitude_dir=token[0];
 80015fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <extract_data_for_RMC+0x2e0>)
 8001600:	701a      	strb	r2, [r3, #0]
				printf("longidir=%c\n",longitude_dir);
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <extract_data_for_RMC+0x2e0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	483e      	ldr	r0, [pc, #248]	; (8001704 <extract_data_for_RMC+0x2d4>)
 800160a:	f007 f941 	bl	8008890 <iprintf>
				break;
 800160e:	e04b      	b.n	80016a8 <extract_data_for_RMC+0x278>
			case 9: // Date
				strncpy(Date_str, token, 7);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2207      	movs	r2, #7
 8001616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001618:	4618      	mov	r0, r3
 800161a:	f007 fac6 	bl	8008baa <strncpy>
			    // printf("date= %s\n",Date_str);
				Date_str[6] = '\0';
 800161e:	2300      	movs	r3, #0
 8001620:	74bb      	strb	r3, [r7, #18]
				//date = atoi(Date_str);
				dd = atoi(Date_str) / 10000;
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fb49 	bl	8006cbe <atoi>
 800162c:	4603      	mov	r3, r0
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <extract_data_for_RMC+0x2b0>)
 8001630:	fb82 1203 	smull	r1, r2, r2, r3
 8001634:	1312      	asrs	r2, r2, #12
 8001636:	17db      	asrs	r3, r3, #31
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	657b      	str	r3, [r7, #84]	; 0x54
				mm = (atoi(Date_str) % 10000) / 100;
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fb3c 	bl	8006cbe <atoi>
 8001646:	4602      	mov	r2, r0
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <extract_data_for_RMC+0x2b0>)
 800164a:	fb83 1302 	smull	r1, r3, r3, r2
 800164e:	1319      	asrs	r1, r3, #12
 8001650:	17d3      	asrs	r3, r2, #31
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	f242 7110 	movw	r1, #10000	; 0x2710
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <extract_data_for_RMC+0x2b4>)
 8001660:	fb82 1203 	smull	r1, r2, r2, r3
 8001664:	1152      	asrs	r2, r2, #5
 8001666:	17db      	asrs	r3, r3, #31
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	653b      	str	r3, [r7, #80]	; 0x50
				yy = atoi(Date_str) % 100;
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fb24 	bl	8006cbe <atoi>
 8001676:	4603      	mov	r3, r0
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <extract_data_for_RMC+0x2b4>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1151      	asrs	r1, r2, #5
 8001680:	17da      	asrs	r2, r3, #31
 8001682:	1a8a      	subs	r2, r1, r2
 8001684:	2164      	movs	r1, #100	; 0x64
 8001686:	fb01 f202 	mul.w	r2, r1, r2
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
				sprintf(date,"%02d/%02d/%02d", dd, mm, yy);
 800168e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001696:	491f      	ldr	r1, [pc, #124]	; (8001714 <extract_data_for_RMC+0x2e4>)
 8001698:	481f      	ldr	r0, [pc, #124]	; (8001718 <extract_data_for_RMC+0x2e8>)
 800169a:	f007 f967 	bl	800896c <siprintf>
				printf("date=%s\n",date);
 800169e:	491e      	ldr	r1, [pc, #120]	; (8001718 <extract_data_for_RMC+0x2e8>)
 80016a0:	481e      	ldr	r0, [pc, #120]	; (800171c <extract_data_for_RMC+0x2ec>)
 80016a2:	f007 f8f5 	bl	8008890 <iprintf>
				break;
 80016a6:	bf00      	nop

		}
		token = strtok(NULL, ",");
 80016a8:	490a      	ldr	r1, [pc, #40]	; (80016d4 <extract_data_for_RMC+0x2a4>)
 80016aa:	2000      	movs	r0, #0
 80016ac:	f007 fa90 	bl	8008bd0 <strtok>
 80016b0:	65b8      	str	r0, [r7, #88]	; 0x58
		tokencnt++;
 80016b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b4:	3301      	adds	r3, #1
 80016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (token != NULL && tokencnt < 12)
 80016b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <extract_data_for_RMC+0x296>
 80016be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c0:	2b0b      	cmp	r3, #11
 80016c2:	f77f aec9 	ble.w	8001458 <extract_data_for_RMC+0x28>
	}
}
 80016c6:	bf00      	nop
 80016c8:	3760      	adds	r7, #96	; 0x60
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800b7f0 	.word	0x0800b7f0
 80016d4:	0800b77c 	.word	0x0800b77c
 80016d8:	0800b810 	.word	0x0800b810
 80016dc:	0800b828 	.word	0x0800b828
 80016e0:	68db8bad 	.word	0x68db8bad
 80016e4:	51eb851f 	.word	0x51eb851f
 80016e8:	2aaaaaab 	.word	0x2aaaaaab
 80016ec:	88888889 	.word	0x88888889
 80016f0:	0800b780 	.word	0x0800b780
 80016f4:	20000920 	.word	0x20000920
 80016f8:	0800b790 	.word	0x0800b790
 80016fc:	20000940 	.word	0x20000940
 8001700:	20000935 	.word	0x20000935
 8001704:	0800b83c 	.word	0x0800b83c
 8001708:	20000944 	.word	0x20000944
 800170c:	0800b84c 	.word	0x0800b84c
 8001710:	20000936 	.word	0x20000936
 8001714:	0800b864 	.word	0x0800b864
 8001718:	2000092c 	.word	0x2000092c
 800171c:	0800b874 	.word	0x0800b874

08001720 <json_format_for_RMC>:

void json_format_for_RMC(char *json_str)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af08      	add	r7, sp, #32
 8001726:	6078      	str	r0, [r7, #4]
	// Creating the JSON string
		//sprintf(json_str, "{\n\"Date\":%s,\n\"Time\": %s,\n\"Latitude\": %f %c,\n\"Longitude\": %f %c\n}\n", date, time, rmc_latitude, latitude_dir, rmc_longitude ,longitude_dir);

	sprintf(json_str, "{\n  Date :%s,\n  Time : %s,\n  Latitude : %0.3f %c,\n  Longitude : %0.3f %c\n}\n", date, time, rmc_latitude,latitude_dir, rmc_longitude,longitude_dir);
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <json_format_for_RMC+0x58>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff1b 	bl	8000568 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <json_format_for_RMC+0x5c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461e      	mov	r6, r3
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <json_format_for_RMC+0x60>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff11 	bl	8000568 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <json_format_for_RMC+0x64>)
 800174c:	7809      	ldrb	r1, [r1, #0]
 800174e:	9106      	str	r1, [sp, #24]
 8001750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001754:	9602      	str	r6, [sp, #8]
 8001756:	e9cd 4500 	strd	r4, r5, [sp]
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <json_format_for_RMC+0x68>)
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <json_format_for_RMC+0x6c>)
 800175e:	490c      	ldr	r1, [pc, #48]	; (8001790 <json_format_for_RMC+0x70>)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f007 f903 	bl	800896c <siprintf>
	printf("JSON String:\n%s\n", json_str);
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <json_format_for_RMC+0x74>)
 800176a:	f007 f891 	bl	8008890 <iprintf>
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	bf00      	nop
 8001778:	20000940 	.word	0x20000940
 800177c:	20000935 	.word	0x20000935
 8001780:	20000944 	.word	0x20000944
 8001784:	20000936 	.word	0x20000936
 8001788:	20000920 	.word	0x20000920
 800178c:	2000092c 	.word	0x2000092c
 8001790:	0800b880 	.word	0x0800b880
 8001794:	0800b8cc 	.word	0x0800b8cc

08001798 <DATA_SEND_READY>:
char *Rx_string;
extern UART_HandleTypeDef huart4;


int DATA_SEND_READY(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	int ret;
	int ret1;
	 ret= GSM_SIM_INIT();
 800179e:	f000 fa65 	bl	8001c6c <GSM_SIM_INIT>
 80017a2:	6038      	str	r0, [r7, #0]
	  	 if (ret==0)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <DATA_SEND_READY+0x1a>
	  	 {
	  		 printf("GSM INIT DONE!\n");
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <DATA_SEND_READY+0x60>)
 80017ac:	f007 f8d6 	bl	800895c <puts>
 80017b0:	e002      	b.n	80017b8 <DATA_SEND_READY+0x20>
	  	 }
	  	 else
	  	 {
	  			 printf("GSM INIT FAILED!!!\n");
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <DATA_SEND_READY+0x64>)
 80017b4:	f007 f8d2 	bl	800895c <puts>
	  	}
	  	 ret = GSM_APN_SET();
 80017b8:	f000 f912 	bl	80019e0 <GSM_APN_SET>
 80017bc:	6038      	str	r0, [r7, #0]
	  	 if (ret==0)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <DATA_SEND_READY+0x3a>
	  		 {
	  			 printf("APN SET DONE!\n");
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <DATA_SEND_READY+0x68>)
 80017c6:	f007 f8c9 	bl	800895c <puts>
	  			ret1= GSM_TCP_init();
 80017ca:	f000 f851 	bl	8001870 <GSM_TCP_init>
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	e002      	b.n	80017d8 <DATA_SEND_READY+0x40>
	  		 }
	  		 else
	  		 {
	  				 printf("APN SET FAILED\n");
 80017d2:	480c      	ldr	r0, [pc, #48]	; (8001804 <DATA_SEND_READY+0x6c>)
 80017d4:	f007 f8c2 	bl	800895c <puts>
	  		}
	  	 if (ret1==0)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <DATA_SEND_READY+0x50>
	  	 	 {
	  	 		 printf("TCP INIT DONE\n");
 80017de:	480a      	ldr	r0, [pc, #40]	; (8001808 <DATA_SEND_READY+0x70>)
 80017e0:	f007 f8bc 	bl	800895c <puts>
	  	 		 return 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e003      	b.n	80017f0 <DATA_SEND_READY+0x58>

	  	 	 }
	  	 	 else
	  	 	 {
	  	 			 printf("TCP INIT FAILED\n");
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <DATA_SEND_READY+0x74>)
 80017ea:	f007 f8b7 	bl	800895c <puts>
	  	 			 return 1;
 80017ee:	2301      	movs	r3, #1
	  	 	}
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0800b8e0 	.word	0x0800b8e0
 80017fc:	0800b8f0 	.word	0x0800b8f0
 8001800:	0800b904 	.word	0x0800b904
 8001804:	0800b914 	.word	0x0800b914
 8001808:	0800b924 	.word	0x0800b924
 800180c:	0800b934 	.word	0x0800b934

08001810 <GSM_Send_AT_Command>:
char* GSM_Send_AT_Command(char* AT_CMD)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(RxBuf,0,RXSIZE);
 8001818:	22c8      	movs	r2, #200	; 0xc8
 800181a:	2100      	movs	r1, #0
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <GSM_Send_AT_Command+0x50>)
 800181e:	f007 f99d 	bl	8008b5c <memset>
	printf("Sent command %s\n",AT_CMD);
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	480f      	ldr	r0, [pc, #60]	; (8001864 <GSM_Send_AT_Command+0x54>)
 8001826:	f007 f833 	bl	8008890 <iprintf>
	HAL_UART_Transmit_IT(&huart4,(uint8_t*)AT_CMD, strlen(AT_CMD));
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe fd30 	bl	8000290 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <GSM_Send_AT_Command+0x58>)
 800183a:	f003 fe29 	bl	8005490 <HAL_UART_Transmit_IT>
	HAL_UART_Receive(&huart4, RxBuf, RXSIZE,2000);
 800183e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001842:	22c8      	movs	r2, #200	; 0xc8
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <GSM_Send_AT_Command+0x50>)
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <GSM_Send_AT_Command+0x58>)
 8001848:	f003 fd59 	bl	80052fe <HAL_UART_Receive>
	printf("Received response %s\n",RxBuf);
 800184c:	4904      	ldr	r1, [pc, #16]	; (8001860 <GSM_Send_AT_Command+0x50>)
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <GSM_Send_AT_Command+0x5c>)
 8001850:	f007 f81e 	bl	8008890 <iprintf>
	return (char *)RxBuf;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <GSM_Send_AT_Command+0x50>)

}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000094c 	.word	0x2000094c
 8001864:	0800b944 	.word	0x0800b944
 8001868:	20000ae0 	.word	0x20000ae0
 800186c:	0800b958 	.word	0x0800b958

08001870 <GSM_TCP_init>:
int GSM_TCP_init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	uint8_t state=0,substate=0;
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	2300      	movs	r3, #0
 800187c:	71bb      	strb	r3, [r7, #6]
	uint8_t counter=0;
 800187e:	2300      	movs	r3, #0
 8001880:	717b      	strb	r3, [r7, #5]
	while(1)
	{
		switch(state)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f000 808f 	beq.w	80019a8 <GSM_TCP_init+0x138>
 800188a:	2b02      	cmp	r3, #2
 800188c:	f300 808e 	bgt.w	80019ac <GSM_TCP_init+0x13c>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <GSM_TCP_init+0x2a>
 8001894:	2b01      	cmp	r3, #1
 8001896:	d044      	beq.n	8001922 <GSM_TCP_init+0xb2>
 8001898:	e088      	b.n	80019ac <GSM_TCP_init+0x13c>
		{
			case 0:

					switch(substate)
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <GSM_TCP_init+0x36>
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d019      	beq.n	80018d8 <GSM_TCP_init+0x68>
									   			  		  return 1;
									   			  	  }
							}
							break;
					}
					break;
 80018a4:	e085      	b.n	80019b2 <GSM_TCP_init+0x142>
							Rx_string=GSM_Send_AT_Command("AT+CIPMODE?\r");
 80018a6:	4845      	ldr	r0, [pc, #276]	; (80019bc <GSM_TCP_init+0x14c>)
 80018a8:	f7ff ffb2 	bl	8001810 <GSM_Send_AT_Command>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <GSM_TCP_init+0x150>)
 80018b0:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"+CIPMODE: 0"))
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <GSM_TCP_init+0x150>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4943      	ldr	r1, [pc, #268]	; (80019c4 <GSM_TCP_init+0x154>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f007 f9e5 	bl	8008c88 <strstr>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <GSM_TCP_init+0x62>
								state=1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	71fb      	strb	r3, [r7, #7]
								substate=0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	71bb      	strb	r3, [r7, #6]
								counter=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	717b      	strb	r3, [r7, #5]
							break;
 80018d0:	e026      	b.n	8001920 <GSM_TCP_init+0xb0>
								substate=1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	71bb      	strb	r3, [r7, #6]
							break;
 80018d6:	e023      	b.n	8001920 <GSM_TCP_init+0xb0>
							Rx_string=GSM_Send_AT_Command("AT+CIPMODE=0\r");
 80018d8:	483b      	ldr	r0, [pc, #236]	; (80019c8 <GSM_TCP_init+0x158>)
 80018da:	f7ff ff99 	bl	8001810 <GSM_Send_AT_Command>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <GSM_TCP_init+0x150>)
 80018e2:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"OK"))
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <GSM_TCP_init+0x150>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4938      	ldr	r1, [pc, #224]	; (80019cc <GSM_TCP_init+0x15c>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 f9cc 	bl	8008c88 <strstr>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <GSM_TCP_init+0x94>
								state=1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
								substate=0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	71bb      	strb	r3, [r7, #6]
								counter=0;
 80018fe:	2300      	movs	r3, #0
 8001900:	717b      	strb	r3, [r7, #5]
							break;
 8001902:	e00c      	b.n	800191e <GSM_TCP_init+0xae>
								substate=0;
 8001904:	2300      	movs	r3, #0
 8001906:	71bb      	strb	r3, [r7, #6]
								counter++;
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	3301      	adds	r3, #1
 800190c:	717b      	strb	r3, [r7, #5]
									   			  	  if(counter>=10)
 800190e:	797b      	ldrb	r3, [r7, #5]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d904      	bls.n	800191e <GSM_TCP_init+0xae>
									   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001914:	482e      	ldr	r0, [pc, #184]	; (80019d0 <GSM_TCP_init+0x160>)
 8001916:	f007 f821 	bl	800895c <puts>
									   			  		  return 1;
 800191a:	2301      	movs	r3, #1
 800191c:	e04a      	b.n	80019b4 <GSM_TCP_init+0x144>
							break;
 800191e:	bf00      	nop
					break;
 8001920:	e047      	b.n	80019b2 <GSM_TCP_init+0x142>

			case 1:

					switch(substate)
 8001922:	79bb      	ldrb	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <GSM_TCP_init+0xbe>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d019      	beq.n	8001960 <GSM_TCP_init+0xf0>
										   			  		  printf("CONNECTIVITY PROBLEM\n");
										   			  		  return 1;
										   			  	  }
							}
					}
					break;
 800192c:	e040      	b.n	80019b0 <GSM_TCP_init+0x140>
							Rx_string=GSM_Send_AT_Command("AT+NETOPEN\r");
 800192e:	4829      	ldr	r0, [pc, #164]	; (80019d4 <GSM_TCP_init+0x164>)
 8001930:	f7ff ff6e 	bl	8001810 <GSM_Send_AT_Command>
 8001934:	4603      	mov	r3, r0
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <GSM_TCP_init+0x150>)
 8001938:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"NETOPEN"))
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <GSM_TCP_init+0x150>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4926      	ldr	r1, [pc, #152]	; (80019d8 <GSM_TCP_init+0x168>)
 8001940:	4618      	mov	r0, r3
 8001942:	f007 f9a1 	bl	8008c88 <strstr>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <GSM_TCP_init+0xea>
								state=2;
 800194c:	2302      	movs	r3, #2
 800194e:	71fb      	strb	r3, [r7, #7]
								substate=0;
 8001950:	2300      	movs	r3, #0
 8001952:	71bb      	strb	r3, [r7, #6]
								counter=0;
 8001954:	2300      	movs	r3, #0
 8001956:	717b      	strb	r3, [r7, #5]
							break;
 8001958:	e025      	b.n	80019a6 <GSM_TCP_init+0x136>
								substate=1;
 800195a:	2301      	movs	r3, #1
 800195c:	71bb      	strb	r3, [r7, #6]
							break;
 800195e:	e022      	b.n	80019a6 <GSM_TCP_init+0x136>
							Rx_string=GSM_Send_AT_Command("AT+NETOPEN\r");
 8001960:	481c      	ldr	r0, [pc, #112]	; (80019d4 <GSM_TCP_init+0x164>)
 8001962:	f7ff ff55 	bl	8001810 <GSM_Send_AT_Command>
 8001966:	4603      	mov	r3, r0
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <GSM_TCP_init+0x150>)
 800196a:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"opened"))
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <GSM_TCP_init+0x150>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	491a      	ldr	r1, [pc, #104]	; (80019dc <GSM_TCP_init+0x16c>)
 8001972:	4618      	mov	r0, r3
 8001974:	f007 f988 	bl	8008c88 <strstr>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <GSM_TCP_init+0x11c>
									state=2;
 800197e:	2302      	movs	r3, #2
 8001980:	71fb      	strb	r3, [r7, #7]
									substate=0;
 8001982:	2300      	movs	r3, #0
 8001984:	71bb      	strb	r3, [r7, #6]
									counter=0;
 8001986:	2300      	movs	r3, #0
 8001988:	717b      	strb	r3, [r7, #5]
					break;
 800198a:	e011      	b.n	80019b0 <GSM_TCP_init+0x140>
									substate=0;
 800198c:	2300      	movs	r3, #0
 800198e:	71bb      	strb	r3, [r7, #6]
									counter++;
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	3301      	adds	r3, #1
 8001994:	717b      	strb	r3, [r7, #5]
										   			  	  if(counter>=10)
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d909      	bls.n	80019b0 <GSM_TCP_init+0x140>
										   			  		  printf("CONNECTIVITY PROBLEM\n");
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <GSM_TCP_init+0x160>)
 800199e:	f006 ffdd 	bl	800895c <puts>
										   			  		  return 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e006      	b.n	80019b4 <GSM_TCP_init+0x144>
					break;
 80019a6:	e003      	b.n	80019b0 <GSM_TCP_init+0x140>

			case 2:
					return 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e003      	b.n	80019b4 <GSM_TCP_init+0x144>
					break;
			default:
					return 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e001      	b.n	80019b4 <GSM_TCP_init+0x144>
					break;
 80019b0:	bf00      	nop
		switch(state)
 80019b2:	e766      	b.n	8001882 <GSM_TCP_init+0x12>
		}
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0800b970 	.word	0x0800b970
 80019c0:	20000a14 	.word	0x20000a14
 80019c4:	0800b980 	.word	0x0800b980
 80019c8:	0800b98c 	.word	0x0800b98c
 80019cc:	0800b99c 	.word	0x0800b99c
 80019d0:	0800b9a0 	.word	0x0800b9a0
 80019d4:	0800b9b8 	.word	0x0800b9b8
 80019d8:	0800b9c4 	.word	0x0800b9c4
 80019dc:	0800b9cc 	.word	0x0800b9cc

080019e0 <GSM_APN_SET>:

int GSM_APN_SET(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

uint8_t state=0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71bb      	strb	r3, [r7, #6]
uint8_t counter=0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	717b      	strb	r3, [r7, #5]
 while (1)
  {
	  switch(state)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	f000 80d1 	beq.w	8001b9c <GSM_APN_SET+0x1bc>
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	dcf9      	bgt.n	80019f2 <GSM_APN_SET+0x12>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <GSM_APN_SET+0x28>
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d07d      	beq.n	8001b02 <GSM_APN_SET+0x122>
 8001a06:	e7f4      	b.n	80019f2 <GSM_APN_SET+0x12>
	 	  {
	 	case 0:
	 		  switch(substate)
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d04a      	beq.n	8001aa4 <GSM_APN_SET+0xc4>
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	dc6f      	bgt.n	8001af2 <GSM_APN_SET+0x112>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <GSM_APN_SET+0x3c>
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d024      	beq.n	8001a64 <GSM_APN_SET+0x84>
	   			  		   			  	  }
	   			  }
	   			  break;

	   		  default:
	   			  break;
 8001a1a:	e06a      	b.n	8001af2 <GSM_APN_SET+0x112>
	   			  Rx_string = GSM_Send_AT_Command("AT+COPS?\r");
 8001a1c:	4888      	ldr	r0, [pc, #544]	; (8001c40 <GSM_APN_SET+0x260>)
 8001a1e:	f7ff fef7 	bl	8001810 <GSM_Send_AT_Command>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <GSM_APN_SET+0x264>)
 8001a26:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"40449"))
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <GSM_APN_SET+0x264>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4986      	ldr	r1, [pc, #536]	; (8001c48 <GSM_APN_SET+0x268>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f007 f92a 	bl	8008c88 <strstr>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <GSM_APN_SET+0x6a>
	   				  counter=0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	717b      	strb	r3, [r7, #5]
	   				 state=1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	71fb      	strb	r3, [r7, #7]
	   				printf("RESPONSE MATCHED\n");
 8001a42:	4882      	ldr	r0, [pc, #520]	; (8001c4c <GSM_APN_SET+0x26c>)
 8001a44:	f006 ff8a 	bl	800895c <puts>
	   			  break;
 8001a48:	e055      	b.n	8001af6 <GSM_APN_SET+0x116>
	   				  substate=1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	71bb      	strb	r3, [r7, #6]
	   				counter++;
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	3301      	adds	r3, #1
 8001a52:	717b      	strb	r3, [r7, #5]
	   					   			  	  if(counter>=10)
 8001a54:	797b      	ldrb	r3, [r7, #5]
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	d94d      	bls.n	8001af6 <GSM_APN_SET+0x116>
	   					   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001a5a:	487d      	ldr	r0, [pc, #500]	; (8001c50 <GSM_APN_SET+0x270>)
 8001a5c:	f006 ff7e 	bl	800895c <puts>
	   					   			  		  return 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0e9      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  if(strstr(Rx_string,"405854"))
 8001a64:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <GSM_APN_SET+0x264>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	497a      	ldr	r1, [pc, #488]	; (8001c54 <GSM_APN_SET+0x274>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 f90c 	bl	8008c88 <strstr>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <GSM_APN_SET+0xaa>
	   				  state=2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	71fb      	strb	r3, [r7, #7]
	   				  substate=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71bb      	strb	r3, [r7, #6]
	   				  counter=0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	717b      	strb	r3, [r7, #5]
	   			  	  printf("RESPONSE MATCHED\n");
 8001a82:	4872      	ldr	r0, [pc, #456]	; (8001c4c <GSM_APN_SET+0x26c>)
 8001a84:	f006 ff6a 	bl	800895c <puts>
	   			  break;
 8001a88:	e037      	b.n	8001afa <GSM_APN_SET+0x11a>
	   			  	  substate=0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001a8e:	797b      	ldrb	r3, [r7, #5]
 8001a90:	3301      	adds	r3, #1
 8001a92:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001a94:	797b      	ldrb	r3, [r7, #5]
 8001a96:	2b09      	cmp	r3, #9
 8001a98:	d92f      	bls.n	8001afa <GSM_APN_SET+0x11a>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001a9a:	486d      	ldr	r0, [pc, #436]	; (8001c50 <GSM_APN_SET+0x270>)
 8001a9c:	f006 ff5e 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0c9      	b.n	8001c38 <GSM_APN_SET+0x258>
				  if(strstr(Rx_string,"ERROR"))
 8001aa4:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <GSM_APN_SET+0x264>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	496b      	ldr	r1, [pc, #428]	; (8001c58 <GSM_APN_SET+0x278>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f007 f8ec 	bl	8008c88 <strstr>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <GSM_APN_SET+0xf4>
	   				  state=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001abe:	797b      	ldrb	r3, [r7, #5]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001ac4:	797b      	ldrb	r3, [r7, #5]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d919      	bls.n	8001afe <GSM_APN_SET+0x11e>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001aca:	4861      	ldr	r0, [pc, #388]	; (8001c50 <GSM_APN_SET+0x270>)
 8001acc:	f006 ff46 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b1      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  	  state=0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001adc:	797b      	ldrb	r3, [r7, #5]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001ae2:	797b      	ldrb	r3, [r7, #5]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d90a      	bls.n	8001afe <GSM_APN_SET+0x11e>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001ae8:	4859      	ldr	r0, [pc, #356]	; (8001c50 <GSM_APN_SET+0x270>)
 8001aea:	f006 ff37 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0a2      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  break;
 8001af2:	bf00      	nop
 8001af4:	e09f      	b.n	8001c36 <GSM_APN_SET+0x256>
	   			  break;
 8001af6:	bf00      	nop
 8001af8:	e09d      	b.n	8001c36 <GSM_APN_SET+0x256>
	   			  break;
 8001afa:	bf00      	nop
 8001afc:	e09b      	b.n	8001c36 <GSM_APN_SET+0x256>
	   			  break;
 8001afe:	bf00      	nop
	   		  }
	 		  break;
 8001b00:	e099      	b.n	8001c36 <GSM_APN_SET+0x256>
	 	case 1:
	 		  switch(substate)
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <GSM_APN_SET+0x12e>
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d01d      	beq.n	8001b48 <GSM_APN_SET+0x168>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001b0c:	e045      	b.n	8001b9a <GSM_APN_SET+0x1ba>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r");
 8001b0e:	4853      	ldr	r0, [pc, #332]	; (8001c5c <GSM_APN_SET+0x27c>)
 8001b10:	f7ff fe7e 	bl	8001810 <GSM_Send_AT_Command>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <GSM_APN_SET+0x264>)
 8001b18:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <GSM_APN_SET+0x264>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4950      	ldr	r1, [pc, #320]	; (8001c60 <GSM_APN_SET+0x280>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f007 f8b1 	bl	8008c88 <strstr>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00a      	beq.n	8001b42 <GSM_APN_SET+0x162>
	   				 state=2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	71bb      	strb	r3, [r7, #6]
	   				printf("RESPONSE MATCHED\n");
 8001b34:	4845      	ldr	r0, [pc, #276]	; (8001c4c <GSM_APN_SET+0x26c>)
 8001b36:	f006 ff11 	bl	800895c <puts>
	   				counter=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	717b      	strb	r3, [r7, #5]
	   				return 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e07a      	b.n	8001c38 <GSM_APN_SET+0x258>
	   				  substate=1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001b46:	e028      	b.n	8001b9a <GSM_APN_SET+0x1ba>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <GSM_APN_SET+0x264>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	4945      	ldr	r1, [pc, #276]	; (8001c64 <GSM_APN_SET+0x284>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f007 f818 	bl	8008b86 <strncmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10e      	bne.n	8001b7a <GSM_APN_SET+0x19a>
	   				  state=0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	3301      	adds	r3, #1
 8001b68:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d913      	bls.n	8001b98 <GSM_APN_SET+0x1b8>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001b70:	4837      	ldr	r0, [pc, #220]	; (8001c50 <GSM_APN_SET+0x270>)
 8001b72:	f006 fef3 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e05e      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  	  state=0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	3301      	adds	r3, #1
 8001b86:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001b88:	797b      	ldrb	r3, [r7, #5]
 8001b8a:	2b09      	cmp	r3, #9
 8001b8c:	d904      	bls.n	8001b98 <GSM_APN_SET+0x1b8>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001b8e:	4830      	ldr	r0, [pc, #192]	; (8001c50 <GSM_APN_SET+0x270>)
 8001b90:	f006 fee4 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e04f      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  break;
 8001b98:	bf00      	nop
	   		  }
	 		  break;
 8001b9a:	e04c      	b.n	8001c36 <GSM_APN_SET+0x256>
	 	case 2:
	 		  switch(substate)
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <GSM_APN_SET+0x1c8>
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d01d      	beq.n	8001be2 <GSM_APN_SET+0x202>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001ba6:	e045      	b.n	8001c34 <GSM_APN_SET+0x254>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGDCONT=1,\"IP\",\"jionet\"\r");
 8001ba8:	482f      	ldr	r0, [pc, #188]	; (8001c68 <GSM_APN_SET+0x288>)
 8001baa:	f7ff fe31 	bl	8001810 <GSM_Send_AT_Command>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <GSM_APN_SET+0x264>)
 8001bb2:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <GSM_APN_SET+0x264>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4929      	ldr	r1, [pc, #164]	; (8001c60 <GSM_APN_SET+0x280>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f007 f864 	bl	8008c88 <strstr>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <GSM_APN_SET+0x1fc>
	   				 state=3;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <GSM_APN_SET+0x26c>)
 8001bd4:	f006 fec2 	bl	800895c <puts>
					return 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e02d      	b.n	8001c38 <GSM_APN_SET+0x258>
	   				  substate=1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001be0:	e028      	b.n	8001c34 <GSM_APN_SET+0x254>
			          if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <GSM_APN_SET+0x264>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2206      	movs	r2, #6
 8001be8:	491e      	ldr	r1, [pc, #120]	; (8001c64 <GSM_APN_SET+0x284>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 ffcb 	bl	8008b86 <strncmp>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <GSM_APN_SET+0x234>
	   			  	  substate=0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	3301      	adds	r3, #1
 8001c02:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d913      	bls.n	8001c32 <GSM_APN_SET+0x252>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001c0a:	4811      	ldr	r0, [pc, #68]	; (8001c50 <GSM_APN_SET+0x270>)
 8001c0c:	f006 fea6 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e011      	b.n	8001c38 <GSM_APN_SET+0x258>
	   				  substate=0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001c1c:	797b      	ldrb	r3, [r7, #5]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001c22:	797b      	ldrb	r3, [r7, #5]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d904      	bls.n	8001c32 <GSM_APN_SET+0x252>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <GSM_APN_SET+0x270>)
 8001c2a:	f006 fe97 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e002      	b.n	8001c38 <GSM_APN_SET+0x258>
	   			  break;
 8001c32:	bf00      	nop
	   		  }
	 		  break;
 8001c34:	bf00      	nop
	  switch(state)
 8001c36:	e6dc      	b.n	80019f2 <GSM_APN_SET+0x12>
	}
}
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800b9d4 	.word	0x0800b9d4
 8001c44:	20000a14 	.word	0x20000a14
 8001c48:	0800b9e0 	.word	0x0800b9e0
 8001c4c:	0800b9e8 	.word	0x0800b9e8
 8001c50:	0800b9a0 	.word	0x0800b9a0
 8001c54:	0800b9fc 	.word	0x0800b9fc
 8001c58:	0800ba04 	.word	0x0800ba04
 8001c5c:	0800ba0c 	.word	0x0800ba0c
 8001c60:	0800b99c 	.word	0x0800b99c
 8001c64:	0800ba30 	.word	0x0800ba30
 8001c68:	0800ba3c 	.word	0x0800ba3c

08001c6c <GSM_SIM_INIT>:
int GSM_SIM_INIT(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0

uint8_t state=0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
uint8_t substate=0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	71bb      	strb	r3, [r7, #6]
uint8_t counter=0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	717b      	strb	r3, [r7, #5]

 while (1)
  {
	  switch(state)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	f200 8247 	bhi.w	8002114 <GSM_SIM_INIT+0x4a8>
 8001c86:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <GSM_SIM_INIT+0x20>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001ca9 	.word	0x08001ca9
 8001c90:	08001d3f 	.word	0x08001d3f
 8001c94:	08001dd7 	.word	0x08001dd7
 8001c98:	08001e75 	.word	0x08001e75
 8001c9c:	08001f0d 	.word	0x08001f0d
 8001ca0:	08001ff9 	.word	0x08001ff9
 8001ca4:	0800209d 	.word	0x0800209d
	 	  {
	 	case 0:
	 		  switch(substate)
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <GSM_SIM_INIT+0x48>
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d01b      	beq.n	8001cea <GSM_SIM_INIT+0x7e>
	   			  		  return 1;
	   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001cb2:	e043      	b.n	8001d3c <GSM_SIM_INIT+0xd0>
	   			  Rx_string = GSM_Send_AT_Command("ATE0\r");
 8001cb4:	48ab      	ldr	r0, [pc, #684]	; (8001f64 <GSM_SIM_INIT+0x2f8>)
 8001cb6:	f7ff fdab 	bl	8001810 <GSM_Send_AT_Command>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4aaa      	ldr	r2, [pc, #680]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001cbe:	6013      	str	r3, [r2, #0]
	   			  if(!(strncmp(Rx_string,"\r\nOK\r\n",6)))
 8001cc0:	4ba9      	ldr	r3, [pc, #676]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	49a9      	ldr	r1, [pc, #676]	; (8001f6c <GSM_SIM_INIT+0x300>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 ff5c 	bl	8008b86 <strncmp>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <GSM_SIM_INIT+0x78>
	   				 state=1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	71fb      	strb	r3, [r7, #7]
	   				printf("RESPONSE MATCHED\n");
 8001cd8:	48a5      	ldr	r0, [pc, #660]	; (8001f70 <GSM_SIM_INIT+0x304>)
 8001cda:	f006 fe3f 	bl	800895c <puts>
	   				counter=0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	717b      	strb	r3, [r7, #5]
	   			  break;
 8001ce2:	e02b      	b.n	8001d3c <GSM_SIM_INIT+0xd0>
	   				  substate=1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001ce8:	e028      	b.n	8001d3c <GSM_SIM_INIT+0xd0>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001cea:	4b9f      	ldr	r3, [pc, #636]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2206      	movs	r2, #6
 8001cf0:	49a0      	ldr	r1, [pc, #640]	; (8001f74 <GSM_SIM_INIT+0x308>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 ff47 	bl	8008b86 <strncmp>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10e      	bne.n	8001d1c <GSM_SIM_INIT+0xb0>
	   				  state=0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	717b      	strb	r3, [r7, #5]
	   			  	if(counter>=10)
 8001d0c:	797b      	ldrb	r3, [r7, #5]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d913      	bls.n	8001d3a <GSM_SIM_INIT+0xce>
	   			  		printf("CONNECTIVITY PROBLEM\n");
 8001d12:	4899      	ldr	r0, [pc, #612]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001d14:	f006 fe22 	bl	800895c <puts>
	   			  		return 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e1fd      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	71bb      	strb	r3, [r7, #6]
	   			  	  counter++;
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	3301      	adds	r3, #1
 8001d28:	717b      	strb	r3, [r7, #5]
	   			  	  if(counter>=10)
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d904      	bls.n	8001d3a <GSM_SIM_INIT+0xce>
	   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001d30:	4891      	ldr	r0, [pc, #580]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001d32:	f006 fe13 	bl	800895c <puts>
	   			  		  return 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1ee      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001d3a:	bf00      	nop
	   		  }
	 		  break;
 8001d3c:	e1eb      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
	 	case 1:
	 		  switch(substate)
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <GSM_SIM_INIT+0xde>
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d01c      	beq.n	8001d82 <GSM_SIM_INIT+0x116>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001d48:	e044      	b.n	8001dd4 <GSM_SIM_INIT+0x168>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPIN?\r");
 8001d4a:	488c      	ldr	r0, [pc, #560]	; (8001f7c <GSM_SIM_INIT+0x310>)
 8001d4c:	f7ff fd60 	bl	8001810 <GSM_Send_AT_Command>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a85      	ldr	r2, [pc, #532]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001d54:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"READY"))
 8001d56:	4b84      	ldr	r3, [pc, #528]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4989      	ldr	r1, [pc, #548]	; (8001f80 <GSM_SIM_INIT+0x314>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f006 ff93 	bl	8008c88 <strstr>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <GSM_SIM_INIT+0x110>
	   				 state=2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001d74:	487e      	ldr	r0, [pc, #504]	; (8001f70 <GSM_SIM_INIT+0x304>)
 8001d76:	f006 fdf1 	bl	800895c <puts>
	   			  break;
 8001d7a:	e02b      	b.n	8001dd4 <GSM_SIM_INIT+0x168>
	   				  substate=1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001d80:	e028      	b.n	8001dd4 <GSM_SIM_INIT+0x168>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2206      	movs	r2, #6
 8001d88:	497a      	ldr	r1, [pc, #488]	; (8001f74 <GSM_SIM_INIT+0x308>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 fefb 	bl	8008b86 <strncmp>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <GSM_SIM_INIT+0x148>
	   				  state=0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	3301      	adds	r3, #1
 8001da2:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001da4:	797b      	ldrb	r3, [r7, #5]
 8001da6:	2b09      	cmp	r3, #9
 8001da8:	d913      	bls.n	8001dd2 <GSM_SIM_INIT+0x166>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001daa:	4873      	ldr	r0, [pc, #460]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001dac:	f006 fdd6 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e1b1      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d904      	bls.n	8001dd2 <GSM_SIM_INIT+0x166>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001dc8:	486b      	ldr	r0, [pc, #428]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001dca:	f006 fdc7 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1a2      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001dd2:	bf00      	nop
	   		  }
	 		  break;
 8001dd4:	e19f      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
	 	case 2:
	 		  switch(substate)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <GSM_SIM_INIT+0x176>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d022      	beq.n	8001e26 <GSM_SIM_INIT+0x1ba>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001de0:	e047      	b.n	8001e72 <GSM_SIM_INIT+0x206>
	   			  Rx_string = GSM_Send_AT_Command("AT+CSQ\r");
 8001de2:	4868      	ldr	r0, [pc, #416]	; (8001f84 <GSM_SIM_INIT+0x318>)
 8001de4:	f7ff fd14 	bl	8001810 <GSM_Send_AT_Command>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a5f      	ldr	r2, [pc, #380]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001dec:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"99")&& (Rx_string[8]>='2'))
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4965      	ldr	r1, [pc, #404]	; (8001f88 <GSM_SIM_INIT+0x31c>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 ff47 	bl	8008c88 <strstr>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00f      	beq.n	8001e20 <GSM_SIM_INIT+0x1b4>
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3308      	adds	r3, #8
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b31      	cmp	r3, #49	; 0x31
 8001e0a:	d909      	bls.n	8001e20 <GSM_SIM_INIT+0x1b4>
	   				 state=3;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001e18:	4855      	ldr	r0, [pc, #340]	; (8001f70 <GSM_SIM_INIT+0x304>)
 8001e1a:	f006 fd9f 	bl	800895c <puts>
	   			  break;
 8001e1e:	e028      	b.n	8001e72 <GSM_SIM_INIT+0x206>
	   				  substate=1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001e24:	e025      	b.n	8001e72 <GSM_SIM_INIT+0x206>
			          Rx_string = GSM_Send_AT_Command("AT+CFUN=1\r");
 8001e26:	4859      	ldr	r0, [pc, #356]	; (8001f8c <GSM_SIM_INIT+0x320>)
 8001e28:	f7ff fcf2 	bl	8001810 <GSM_Send_AT_Command>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001e30:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"0,1"))
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4956      	ldr	r1, [pc, #344]	; (8001f90 <GSM_SIM_INIT+0x324>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f006 ff25 	bl	8008c88 <strstr>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <GSM_SIM_INIT+0x1e6>
	   			  	  substate=0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	71bb      	strb	r3, [r7, #6]
	   			  	  state=2;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	71fb      	strb	r3, [r7, #7]
	   			  	  counter=0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	717b      	strb	r3, [r7, #5]
	   			  break;
 8001e50:	e00e      	b.n	8001e70 <GSM_SIM_INIT+0x204>
	   				  substate=0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71bb      	strb	r3, [r7, #6]
	   			  	  state=0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
	   			  	counter++;
 8001e5a:	797b      	ldrb	r3, [r7, #5]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d904      	bls.n	8001e70 <GSM_SIM_INIT+0x204>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001e66:	4844      	ldr	r0, [pc, #272]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001e68:	f006 fd78 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e153      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001e70:	bf00      	nop
	   		  }
	 		  break;
 8001e72:	e150      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
	 case 3:
	 		  switch(substate)
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <GSM_SIM_INIT+0x214>
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d01c      	beq.n	8001eb8 <GSM_SIM_INIT+0x24c>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001e7e:	e044      	b.n	8001f0a <GSM_SIM_INIT+0x29e>
	   			  Rx_string = GSM_Send_AT_Command("AT+CMEE=2\r");
 8001e80:	4844      	ldr	r0, [pc, #272]	; (8001f94 <GSM_SIM_INIT+0x328>)
 8001e82:	f7ff fcc5 	bl	8001810 <GSM_Send_AT_Command>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a37      	ldr	r2, [pc, #220]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001e8a:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4941      	ldr	r1, [pc, #260]	; (8001f98 <GSM_SIM_INIT+0x32c>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 fef8 	bl	8008c88 <strstr>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <GSM_SIM_INIT+0x246>
	   				 state=4;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001eaa:	4831      	ldr	r0, [pc, #196]	; (8001f70 <GSM_SIM_INIT+0x304>)
 8001eac:	f006 fd56 	bl	800895c <puts>
	   			  break;
 8001eb0:	e02b      	b.n	8001f0a <GSM_SIM_INIT+0x29e>
	   				  substate=1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001eb6:	e028      	b.n	8001f0a <GSM_SIM_INIT+0x29e>
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	492d      	ldr	r1, [pc, #180]	; (8001f74 <GSM_SIM_INIT+0x308>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f006 fe60 	bl	8008b86 <strncmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10e      	bne.n	8001eea <GSM_SIM_INIT+0x27e>
	   				  state=0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001ed4:	797b      	ldrb	r3, [r7, #5]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001eda:	797b      	ldrb	r3, [r7, #5]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d913      	bls.n	8001f08 <GSM_SIM_INIT+0x29c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001ee0:	4825      	ldr	r0, [pc, #148]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001ee2:	f006 fd3b 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e116      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001ef2:	797b      	ldrb	r3, [r7, #5]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001ef8:	797b      	ldrb	r3, [r7, #5]
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	d904      	bls.n	8001f08 <GSM_SIM_INIT+0x29c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001efe:	481e      	ldr	r0, [pc, #120]	; (8001f78 <GSM_SIM_INIT+0x30c>)
 8001f00:	f006 fd2c 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e107      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001f08:	bf00      	nop
	   		  }
	 		  break;
 8001f0a:	e104      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
	 	case 4:
	 		  switch(substate)
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <GSM_SIM_INIT+0x2ac>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d046      	beq.n	8001fa4 <GSM_SIM_INIT+0x338>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8001f16:	e06e      	b.n	8001ff6 <GSM_SIM_INIT+0x38a>
	   			  Rx_string = GSM_Send_AT_Command("AT+CREG?\r");
 8001f18:	4820      	ldr	r0, [pc, #128]	; (8001f9c <GSM_SIM_INIT+0x330>)
 8001f1a:	f7ff fc79 	bl	8001810 <GSM_Send_AT_Command>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001f22:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"0,6")))
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4919      	ldr	r1, [pc, #100]	; (8001f90 <GSM_SIM_INIT+0x324>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 feac 	bl	8008c88 <strstr>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <GSM_SIM_INIT+0x2dc>
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <GSM_SIM_INIT+0x2fc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4919      	ldr	r1, [pc, #100]	; (8001fa0 <GSM_SIM_INIT+0x334>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 fea3 	bl	8008c88 <strstr>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <GSM_SIM_INIT+0x2f0>
	   				 state=5;
 8001f48:	2305      	movs	r3, #5
 8001f4a:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <GSM_SIM_INIT+0x304>)
 8001f56:	f006 fd01 	bl	800895c <puts>
	   			  break;
 8001f5a:	e04c      	b.n	8001ff6 <GSM_SIM_INIT+0x38a>
	   				  substate=1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	71bb      	strb	r3, [r7, #6]
	   			  break;
 8001f60:	e049      	b.n	8001ff6 <GSM_SIM_INIT+0x38a>
 8001f62:	bf00      	nop
 8001f64:	0800ba58 	.word	0x0800ba58
 8001f68:	20000a14 	.word	0x20000a14
 8001f6c:	0800ba60 	.word	0x0800ba60
 8001f70:	0800b9e8 	.word	0x0800b9e8
 8001f74:	0800ba30 	.word	0x0800ba30
 8001f78:	0800b9a0 	.word	0x0800b9a0
 8001f7c:	0800ba68 	.word	0x0800ba68
 8001f80:	0800ba74 	.word	0x0800ba74
 8001f84:	0800ba7c 	.word	0x0800ba7c
 8001f88:	0800ba84 	.word	0x0800ba84
 8001f8c:	0800ba88 	.word	0x0800ba88
 8001f90:	0800ba94 	.word	0x0800ba94
 8001f94:	0800ba98 	.word	0x0800ba98
 8001f98:	0800b99c 	.word	0x0800b99c
 8001f9c:	0800baa4 	.word	0x0800baa4
 8001fa0:	0800bab0 	.word	0x0800bab0
	   			  if(!(strncmp(Rx_string,"\r\nERROR\r\n",6)))
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2206      	movs	r2, #6
 8001faa:	495e      	ldr	r1, [pc, #376]	; (8002124 <GSM_SIM_INIT+0x4b8>)
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 fdea 	bl	8008b86 <strncmp>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10e      	bne.n	8001fd6 <GSM_SIM_INIT+0x36a>
	   				  state=0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001fc0:	797b      	ldrb	r3, [r7, #5]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001fc6:	797b      	ldrb	r3, [r7, #5]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d913      	bls.n	8001ff4 <GSM_SIM_INIT+0x388>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001fcc:	4856      	ldr	r0, [pc, #344]	; (8002128 <GSM_SIM_INIT+0x4bc>)
 8001fce:	f006 fcc5 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0a0      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  	  state=0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8001fde:	797b      	ldrb	r3, [r7, #5]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d904      	bls.n	8001ff4 <GSM_SIM_INIT+0x388>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 8001fea:	484f      	ldr	r0, [pc, #316]	; (8002128 <GSM_SIM_INIT+0x4bc>)
 8001fec:	f006 fcb6 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e091      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8001ff4:	bf00      	nop
	   		  }
 			  break;
 8001ff6:	e08e      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
		case 5:
	 		  switch(substate)
 8001ff8:	79bb      	ldrb	r3, [r7, #6]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <GSM_SIM_INIT+0x398>
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d025      	beq.n	800204e <GSM_SIM_INIT+0x3e2>
	   			  		   			  		  return 1;
	   			  		   			  	  }
	   			  }
	   			  break;
	   		  default:
	   			  break;
 8002002:	e04a      	b.n	800209a <GSM_SIM_INIT+0x42e>
	   			  Rx_string = GSM_Send_AT_Command("AT+CGREG?\r");
 8002004:	4849      	ldr	r0, [pc, #292]	; (800212c <GSM_SIM_INIT+0x4c0>)
 8002006:	f7ff fc03 	bl	8001810 <GSM_Send_AT_Command>
 800200a:	4603      	mov	r3, r0
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 800200e:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"0,1"))||(strstr(Rx_string,"1,1")))
 8002010:	4b43      	ldr	r3, [pc, #268]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4946      	ldr	r1, [pc, #280]	; (8002130 <GSM_SIM_INIT+0x4c4>)
 8002016:	4618      	mov	r0, r3
 8002018:	f006 fe36 	bl	8008c88 <strstr>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <GSM_SIM_INIT+0x3c8>
 8002022:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4943      	ldr	r1, [pc, #268]	; (8002134 <GSM_SIM_INIT+0x4c8>)
 8002028:	4618      	mov	r0, r3
 800202a:	f006 fe2d 	bl	8008c88 <strstr>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <GSM_SIM_INIT+0x3dc>
	   				 state=6;
 8002034:	2306      	movs	r3, #6
 8002036:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 8002038:	2300      	movs	r3, #0
 800203a:	71bb      	strb	r3, [r7, #6]
	   				 counter=0;
 800203c:	2300      	movs	r3, #0
 800203e:	717b      	strb	r3, [r7, #5]
	   				printf("RESPONSE MATCHED\n");
 8002040:	483d      	ldr	r0, [pc, #244]	; (8002138 <GSM_SIM_INIT+0x4cc>)
 8002042:	f006 fc8b 	bl	800895c <puts>
	   			  break;
 8002046:	e028      	b.n	800209a <GSM_SIM_INIT+0x42e>
	   				  substate=1;
 8002048:	2301      	movs	r3, #1
 800204a:	71bb      	strb	r3, [r7, #6]
	   			  break;
 800204c:	e025      	b.n	800209a <GSM_SIM_INIT+0x42e>
				  Rx_string = GSM_Send_AT_Command("AT+CGREG=0\r");
 800204e:	483b      	ldr	r0, [pc, #236]	; (800213c <GSM_SIM_INIT+0x4d0>)
 8002050:	f7ff fbde 	bl	8001810 <GSM_Send_AT_Command>
 8002054:	4603      	mov	r3, r0
 8002056:	4a32      	ldr	r2, [pc, #200]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 8002058:	6013      	str	r3, [r2, #0]
	   			  if(strstr(Rx_string,"OK"))
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4938      	ldr	r1, [pc, #224]	; (8002140 <GSM_SIM_INIT+0x4d4>)
 8002060:	4618      	mov	r0, r3
 8002062:	f006 fe11 	bl	8008c88 <strstr>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <GSM_SIM_INIT+0x40e>
	   				  state=5;
 800206c:	2305      	movs	r3, #5
 800206e:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 8002070:	2300      	movs	r3, #0
 8002072:	71bb      	strb	r3, [r7, #6]
	   			  	  counter=0;
 8002074:	2300      	movs	r3, #0
 8002076:	717b      	strb	r3, [r7, #5]
	   			  break;
 8002078:	e00e      	b.n	8002098 <GSM_SIM_INIT+0x42c>
	   			  	  state=0;
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
	   			  	  substate=0;
 800207e:	2300      	movs	r3, #0
 8002080:	71bb      	strb	r3, [r7, #6]
	   			  	counter++;
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	3301      	adds	r3, #1
 8002086:	717b      	strb	r3, [r7, #5]
	   			  		   			  	  if(counter>=10)
 8002088:	797b      	ldrb	r3, [r7, #5]
 800208a:	2b09      	cmp	r3, #9
 800208c:	d904      	bls.n	8002098 <GSM_SIM_INIT+0x42c>
	   			  		   			  		  printf("CONNECTIVITY PROBLEM\n");
 800208e:	4826      	ldr	r0, [pc, #152]	; (8002128 <GSM_SIM_INIT+0x4bc>)
 8002090:	f006 fc64 	bl	800895c <puts>
	   			  		   			  		  return 1;
 8002094:	2301      	movs	r3, #1
 8002096:	e03f      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8002098:	bf00      	nop
	   		  }
 			  break;
 800209a:	e03c      	b.n	8002116 <GSM_SIM_INIT+0x4aa>
		case 6:
	 		  switch(substate)
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <GSM_SIM_INIT+0x43c>
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d01d      	beq.n	80020e2 <GSM_SIM_INIT+0x476>
	   			   	   			  		  return 1;
	   			   	   			  	  }
	   			  }

	   		  default:
	   			  break;
 80020a6:	e033      	b.n	8002110 <GSM_SIM_INIT+0x4a4>
	   			  Rx_string = GSM_Send_AT_Command("AT+CPSI?\r");
 80020a8:	4826      	ldr	r0, [pc, #152]	; (8002144 <GSM_SIM_INIT+0x4d8>)
 80020aa:	f7ff fbb1 	bl	8001810 <GSM_Send_AT_Command>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 80020b2:	6013      	str	r3, [r2, #0]
	   			  if((strstr(Rx_string,"LTE,Online")))
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <GSM_SIM_INIT+0x4b4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4923      	ldr	r1, [pc, #140]	; (8002148 <GSM_SIM_INIT+0x4dc>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f006 fde4 	bl	8008c88 <strstr>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <GSM_SIM_INIT+0x470>
	   				 state=0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
	   				 substate=0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71bb      	strb	r3, [r7, #6]
	   				printf("RESPONSE MATCHED\n");
 80020ce:	481a      	ldr	r0, [pc, #104]	; (8002138 <GSM_SIM_INIT+0x4cc>)
 80020d0:	f006 fc44 	bl	800895c <puts>
	   				counter=0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	717b      	strb	r3, [r7, #5]
					return 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	e01d      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   				  substate=1;
 80020dc:	2301      	movs	r3, #1
 80020de:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80020e0:	e017      	b.n	8002112 <GSM_SIM_INIT+0x4a6>
	   			  if(GSM_APN_SET()==0)
 80020e2:	f7ff fc7d 	bl	80019e0 <GSM_APN_SET>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <GSM_SIM_INIT+0x486>
	   			     substate=0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	71bb      	strb	r3, [r7, #6]
	   			  break;
 80020f0:	e00e      	b.n	8002110 <GSM_SIM_INIT+0x4a4>
	   				  substate=0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	71bb      	strb	r3, [r7, #6]
	   			   	  state=6;
 80020f6:	2306      	movs	r3, #6
 80020f8:	71fb      	strb	r3, [r7, #7]
	   			   counter++;
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	3301      	adds	r3, #1
 80020fe:	717b      	strb	r3, [r7, #5]
	   			   	   			  	  if(counter>=10)
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	2b09      	cmp	r3, #9
 8002104:	d904      	bls.n	8002110 <GSM_SIM_INIT+0x4a4>
	   			   	   			  		  printf("CONNECTIVITY PROBLEM\n");
 8002106:	4808      	ldr	r0, [pc, #32]	; (8002128 <GSM_SIM_INIT+0x4bc>)
 8002108:	f006 fc28 	bl	800895c <puts>
	   			   	   			  		  return 1;
 800210c:	2301      	movs	r3, #1
 800210e:	e003      	b.n	8002118 <GSM_SIM_INIT+0x4ac>
	   			  break;
 8002110:	bf00      	nop
	   		  }
 			  break;
 8002112:	e000      	b.n	8002116 <GSM_SIM_INIT+0x4aa>

	  default:
	 	 break;
 8002114:	bf00      	nop
	  switch(state)
 8002116:	e5b2      	b.n	8001c7e <GSM_SIM_INIT+0x12>
  	}
	}
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000a14 	.word	0x20000a14
 8002124:	0800ba30 	.word	0x0800ba30
 8002128:	0800b9a0 	.word	0x0800b9a0
 800212c:	0800bab4 	.word	0x0800bab4
 8002130:	0800ba94 	.word	0x0800ba94
 8002134:	0800bac0 	.word	0x0800bac0
 8002138:	0800b9e8 	.word	0x0800b9e8
 800213c:	0800bac4 	.word	0x0800bac4
 8002140:	0800b99c 	.word	0x0800b99c
 8002144:	0800bad0 	.word	0x0800bad0
 8002148:	0800badc 	.word	0x0800badc

0800214c <GSM_Send_Data>:


int GSM_Send_Data(uint8_t * data)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	int substate=0,counter=0;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
	char CTRL_Z=26;
 800215c:	231a      	movs	r3, #26
 800215e:	73fb      	strb	r3, [r7, #15]


		while(1)
		{			switch(substate)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b02      	cmp	r3, #2
 8002164:	f000 80da 	beq.w	800231c <GSM_Send_Data+0x1d0>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b02      	cmp	r3, #2
 800216c:	dcf8      	bgt.n	8002160 <GSM_Send_Data+0x14>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <GSM_Send_Data+0x30>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d060      	beq.n	800223c <GSM_Send_Data+0xf0>
 800217a:	e7f1      	b.n	8002160 <GSM_Send_Data+0x14>
					{
						case 0:
							Rx_string=GSM_Send_AT_Command("AT+CIPOPEN?\r");
 800217c:	486b      	ldr	r0, [pc, #428]	; (800232c <GSM_Send_Data+0x1e0>)
 800217e:	f7ff fb47 	bl	8001810 <GSM_Send_AT_Command>
 8002182:	4603      	mov	r3, r0
 8002184:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <GSM_Send_Data+0x1e4>)
 8002186:	6013      	str	r3, [r2, #0]
							if(strstr(Rx_string,"139.59.78.252"))
 8002188:	4b69      	ldr	r3, [pc, #420]	; (8002330 <GSM_Send_Data+0x1e4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4969      	ldr	r1, [pc, #420]	; (8002334 <GSM_Send_Data+0x1e8>)
 800218e:	4618      	mov	r0, r3
 8002190:	f006 fd7a 	bl	8008c88 <strstr>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d04d      	beq.n	8002236 <GSM_Send_Data+0xea>
							{
									printf("IP OPENED\n");
 800219a:	4867      	ldr	r0, [pc, #412]	; (8002338 <GSM_Send_Data+0x1ec>)
 800219c:	f006 fbde 	bl	800895c <puts>
									memset(RxBuf,0,200);
 80021a0:	22c8      	movs	r2, #200	; 0xc8
 80021a2:	2100      	movs	r1, #0
 80021a4:	4865      	ldr	r0, [pc, #404]	; (800233c <GSM_Send_Data+0x1f0>)
 80021a6:	f006 fcd9 	bl	8008b5c <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 80021aa:	220d      	movs	r2, #13
 80021ac:	4964      	ldr	r1, [pc, #400]	; (8002340 <GSM_Send_Data+0x1f4>)
 80021ae:	4865      	ldr	r0, [pc, #404]	; (8002344 <GSM_Send_Data+0x1f8>)
 80021b0:	f003 f96e 	bl	8005490 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 80021b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021b8:	22c8      	movs	r2, #200	; 0xc8
 80021ba:	4960      	ldr	r1, [pc, #384]	; (800233c <GSM_Send_Data+0x1f0>)
 80021bc:	4861      	ldr	r0, [pc, #388]	; (8002344 <GSM_Send_Data+0x1f8>)
 80021be:	f003 f89e 	bl	80052fe <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 80021c2:	495e      	ldr	r1, [pc, #376]	; (800233c <GSM_Send_Data+0x1f0>)
 80021c4:	4860      	ldr	r0, [pc, #384]	; (8002348 <GSM_Send_Data+0x1fc>)
 80021c6:	f006 fb63 	bl	8008890 <iprintf>
									if(strstr(RxBuf,">"))
 80021ca:	213e      	movs	r1, #62	; 0x3e
 80021cc:	485b      	ldr	r0, [pc, #364]	; (800233c <GSM_Send_Data+0x1f0>)
 80021ce:	f006 fccd 	bl	8008b6c <strchr>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d02b      	beq.n	8002230 <GSM_Send_Data+0xe4>
									{
									memset(RxBuf,0,200);
 80021d8:	22c8      	movs	r2, #200	; 0xc8
 80021da:	2100      	movs	r1, #0
 80021dc:	4857      	ldr	r0, [pc, #348]	; (800233c <GSM_Send_Data+0x1f0>)
 80021de:	f006 fcbd 	bl	8008b5c <memset>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe f854 	bl	8000290 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4854      	ldr	r0, [pc, #336]	; (8002344 <GSM_Send_Data+0x1f8>)
 80021f2:	f003 f94d 	bl	8005490 <HAL_UART_Transmit_IT>
									HAL_Delay(2000);
 80021f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021fa:	f000 fe7d 	bl	8002ef8 <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 80021fe:	f107 030f 	add.w	r3, r7, #15
 8002202:	2201      	movs	r2, #1
 8002204:	4619      	mov	r1, r3
 8002206:	484f      	ldr	r0, [pc, #316]	; (8002344 <GSM_Send_Data+0x1f8>)
 8002208:	f003 f942 	bl	8005490 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 800220c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002210:	22c8      	movs	r2, #200	; 0xc8
 8002212:	494a      	ldr	r1, [pc, #296]	; (800233c <GSM_Send_Data+0x1f0>)
 8002214:	484b      	ldr	r0, [pc, #300]	; (8002344 <GSM_Send_Data+0x1f8>)
 8002216:	f003 f872 	bl	80052fe <HAL_UART_Receive>
									printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 800221a:	4948      	ldr	r1, [pc, #288]	; (800233c <GSM_Send_Data+0x1f0>)
 800221c:	484a      	ldr	r0, [pc, #296]	; (8002348 <GSM_Send_Data+0x1fc>)
 800221e:	f006 fb37 	bl	8008890 <iprintf>
									memset(RxBuf,0,200);
 8002222:	22c8      	movs	r2, #200	; 0xc8
 8002224:	2100      	movs	r1, #0
 8002226:	4845      	ldr	r0, [pc, #276]	; (800233c <GSM_Send_Data+0x1f0>)
 8002228:	f006 fc98 	bl	8008b5c <memset>
									return 0;
 800222c:	2300      	movs	r3, #0
 800222e:	e079      	b.n	8002324 <GSM_Send_Data+0x1d8>
									}
									else
									{
										substate=0;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
							}
							else
							{
								substate=1;
							}
							break;
 8002234:	e075      	b.n	8002322 <GSM_Send_Data+0x1d6>
								substate=1;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
							break;
 800223a:	e072      	b.n	8002322 <GSM_Send_Data+0x1d6>
						    case 1:
						    	Rx_string=GSM_Send_AT_Command("AT+CIPOPEN=1,\"TCP\",\"139.59.78.252\",52101\r");
 800223c:	4843      	ldr	r0, [pc, #268]	; (800234c <GSM_Send_Data+0x200>)
 800223e:	f7ff fae7 	bl	8001810 <GSM_Send_AT_Command>
 8002242:	4603      	mov	r3, r0
 8002244:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <GSM_Send_Data+0x1e4>)
 8002246:	6013      	str	r3, [r2, #0]
						    	if(strstr(Rx_string,"+CIPOPEN: 1,0"))
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <GSM_Send_Data+0x1e4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4940      	ldr	r1, [pc, #256]	; (8002350 <GSM_Send_Data+0x204>)
 800224e:	4618      	mov	r0, r3
 8002250:	f006 fd1a 	bl	8008c88 <strstr>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d056      	beq.n	8002308 <GSM_Send_Data+0x1bc>
						    	{
						    		printf("IP OPENED\n");
 800225a:	4837      	ldr	r0, [pc, #220]	; (8002338 <GSM_Send_Data+0x1ec>)
 800225c:	f006 fb7e 	bl	800895c <puts>
						    		memset(RxBuf,0,200);
 8002260:	22c8      	movs	r2, #200	; 0xc8
 8002262:	2100      	movs	r1, #0
 8002264:	4835      	ldr	r0, [pc, #212]	; (800233c <GSM_Send_Data+0x1f0>)
 8002266:	f006 fc79 	bl	8008b5c <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t*)"AT+CIPSEND=1\r", strlen("AT+CIPSEND=1\r"));
 800226a:	220d      	movs	r2, #13
 800226c:	4934      	ldr	r1, [pc, #208]	; (8002340 <GSM_Send_Data+0x1f4>)
 800226e:	4835      	ldr	r0, [pc, #212]	; (8002344 <GSM_Send_Data+0x1f8>)
 8002270:	f003 f90e 	bl	8005490 <HAL_UART_Transmit_IT>
						    		HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 8002274:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002278:	22c8      	movs	r2, #200	; 0xc8
 800227a:	4930      	ldr	r1, [pc, #192]	; (800233c <GSM_Send_Data+0x1f0>)
 800227c:	4831      	ldr	r0, [pc, #196]	; (8002344 <GSM_Send_Data+0x1f8>)
 800227e:	f003 f83e 	bl	80052fe <HAL_UART_Receive>
						    		printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 8002282:	492e      	ldr	r1, [pc, #184]	; (800233c <GSM_Send_Data+0x1f0>)
 8002284:	4830      	ldr	r0, [pc, #192]	; (8002348 <GSM_Send_Data+0x1fc>)
 8002286:	f006 fb03 	bl	8008890 <iprintf>
						    		if(strstr(RxBuf,">"))
 800228a:	213e      	movs	r1, #62	; 0x3e
 800228c:	482b      	ldr	r0, [pc, #172]	; (800233c <GSM_Send_Data+0x1f0>)
 800228e:	f006 fc6d 	bl	8008b6c <strchr>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d034      	beq.n	8002302 <GSM_Send_Data+0x1b6>
						    		{
						    		memset(RxBuf,0,200);
 8002298:	22c8      	movs	r2, #200	; 0xc8
 800229a:	2100      	movs	r1, #0
 800229c:	4827      	ldr	r0, [pc, #156]	; (800233c <GSM_Send_Data+0x1f0>)
 800229e:	f006 fc5d 	bl	8008b5c <memset>
						    		HAL_UART_Transmit_IT(&huart4,(uint8_t *)data,strlen(data));
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fd fff4 	bl	8000290 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4824      	ldr	r0, [pc, #144]	; (8002344 <GSM_Send_Data+0x1f8>)
 80022b2:	f003 f8ed 	bl	8005490 <HAL_UART_Transmit_IT>
						    		HAL_Delay(2000);
 80022b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022ba:	f000 fe1d 	bl	8002ef8 <HAL_Delay>
									HAL_UART_Transmit_IT(&huart4,(uint8_t *)&CTRL_Z,1);
 80022be:	f107 030f 	add.w	r3, r7, #15
 80022c2:	2201      	movs	r2, #1
 80022c4:	4619      	mov	r1, r3
 80022c6:	481f      	ldr	r0, [pc, #124]	; (8002344 <GSM_Send_Data+0x1f8>)
 80022c8:	f003 f8e2 	bl	8005490 <HAL_UART_Transmit_IT>
									HAL_UART_Receive(&huart4, (uint8_t *)RxBuf, 200,3000);
 80022cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80022d0:	22c8      	movs	r2, #200	; 0xc8
 80022d2:	491a      	ldr	r1, [pc, #104]	; (800233c <GSM_Send_Data+0x1f0>)
 80022d4:	481b      	ldr	r0, [pc, #108]	; (8002344 <GSM_Send_Data+0x1f8>)
 80022d6:	f003 f812 	bl	80052fe <HAL_UART_Receive>
						    		printf("RECEIVED RESPONSE FROM SERVER %s\n",RxBuf);
 80022da:	4918      	ldr	r1, [pc, #96]	; (800233c <GSM_Send_Data+0x1f0>)
 80022dc:	481a      	ldr	r0, [pc, #104]	; (8002348 <GSM_Send_Data+0x1fc>)
 80022de:	f006 fad7 	bl	8008890 <iprintf>
						    		 memset(RxBuf,0,200);
 80022e2:	22c8      	movs	r2, #200	; 0xc8
 80022e4:	2100      	movs	r1, #0
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <GSM_Send_Data+0x1f0>)
 80022e8:	f006 fc38 	bl	8008b5c <memset>
						    		if(strstr(RxBuf,"IPERROR"))
 80022ec:	4919      	ldr	r1, [pc, #100]	; (8002354 <GSM_Send_Data+0x208>)
 80022ee:	4813      	ldr	r0, [pc, #76]	; (800233c <GSM_Send_Data+0x1f0>)
 80022f0:	f006 fcca 	bl	8008c88 <strstr>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <GSM_Send_Data+0x1b2>
						    			return 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e012      	b.n	8002324 <GSM_Send_Data+0x1d8>
						    		else
						    		    return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e010      	b.n	8002324 <GSM_Send_Data+0x1d8>
						    		}
						    		else
						    		{
						    			substate=1;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
								if(counter>5)
								{
									return 1;
								}
							}
							break;
 8002306:	e00b      	b.n	8002320 <GSM_Send_Data+0x1d4>
								substate=0;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
								counter++;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3301      	adds	r3, #1
 8002310:	613b      	str	r3, [r7, #16]
								if(counter>5)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b05      	cmp	r3, #5
 8002316:	dd03      	ble.n	8002320 <GSM_Send_Data+0x1d4>
									return 1;
 8002318:	2301      	movs	r3, #1
 800231a:	e003      	b.n	8002324 <GSM_Send_Data+0x1d8>
						case 2:
								return 1;  // GSM SEND failed
 800231c:	2301      	movs	r3, #1
 800231e:	e001      	b.n	8002324 <GSM_Send_Data+0x1d8>
							break;
 8002320:	bf00      	nop
		{			switch(substate)
 8002322:	e71d      	b.n	8002160 <GSM_Send_Data+0x14>
					}

		}


}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	0800bae8 	.word	0x0800bae8
 8002330:	20000a14 	.word	0x20000a14
 8002334:	0800baf8 	.word	0x0800baf8
 8002338:	0800bb08 	.word	0x0800bb08
 800233c:	2000094c 	.word	0x2000094c
 8002340:	0800bb14 	.word	0x0800bb14
 8002344:	20000ae0 	.word	0x20000ae0
 8002348:	0800bb24 	.word	0x0800bb24
 800234c:	0800bb48 	.word	0x0800bb48
 8002350:	0800bb74 	.word	0x0800bb74
 8002354:	0800bb84 	.word	0x0800bb84

08002358 <writeStringToFlash>:
char readData[100];
#define JSON_SIZE 256

extern char json_str[JSON_SIZE];
/************ writing data to flash memory ********/
void writeStringToFlash(uint64_t address, char* str) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8002364:	f000 ffe8 	bl	8003338 <HAL_FLASH_Unlock>

    // Calculate the length of the string
    uint32_t len = strlen(str);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fd ff91 	bl	8000290 <strlen>
 800236e:	61f8      	str	r0, [r7, #28]
    //printf("th str %s \n",str);
//printf(" IN Write function %d \n",len);
    // Ensure the length is even to write complete double words
    if (len % 8 != 0) {
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <writeStringToFlash+0x2c>
        len += (8 - len % 8);
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f023 0307 	bic.w	r3, r3, #7
 8002380:	3308      	adds	r3, #8
 8002382:	61fb      	str	r3, [r7, #28]
    }

    // Write the string to flash
    for (uint32_t i = 0; i < len; i += 8) {
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e019      	b.n	80023be <writeStringToFlash+0x66>
        uint64_t data = 0;
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&data, str + i, 8);
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	18d1      	adds	r1, r2, r3
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2208      	movs	r2, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 fd05 	bl	8008db2 <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	18d1      	adds	r1, r2, r3
 80023ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 ff54 	bl	8003260 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < len; i += 8) {
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	3308      	adds	r3, #8
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3e1      	bcc.n	800238a <writeStringToFlash+0x32>
    }

    HAL_FLASH_Lock();
 80023c6:	f000 ffd9 	bl	800337c <HAL_FLASH_Lock>
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <readDataFromFlash>:


/***************reading data from flash memory **************/
void readDataFromFlash(uint64_t address, char* buffer, uint64_t dataSize)
{
 80023d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023d6:	b08d      	sub	sp, #52	; 0x34
 80023d8:	af00      	add	r7, sp, #0
 80023da:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80023de:	60fa      	str	r2, [r7, #12]
	uint32_t i,j=0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < dataSize; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e8:	e03d      	b.n	8002466 <readDataFromFlash+0x94>
	{
	       uint64_t data = *(__IO uint64_t*)address;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	       // Copy each byte from the 64-bit data
	               for (int k = 0; k < 8; k++) {
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e023      	b.n	8002442 <readDataFromFlash+0x70>
	                   if (j < dataSize - 1) {  // Ensure not to overflow the buffer
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	2200      	movs	r2, #0
 80023fe:	469a      	mov	sl, r3
 8002400:	4693      	mov	fp, r2
 8002402:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002406:	1e54      	subs	r4, r2, #1
 8002408:	f143 35ff 	adc.w	r5, r3, #4294967295
 800240c:	45a2      	cmp	sl, r4
 800240e:	eb7b 0305 	sbcs.w	r3, fp, r5
 8002412:	d207      	bcs.n	8002424 <readDataFromFlash+0x52>
	                       buffer[j++] = (char)(data & 0xFF);
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	62ba      	str	r2, [r7, #40]	; 0x28
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002422:	701a      	strb	r2, [r3, #0]
	                   }
	                   data >>= 8;
 8002424:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	0a02      	lsrs	r2, r0, #8
 8002432:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002436:	0a0b      	lsrs	r3, r1, #8
 8002438:	e9c7 2308 	strd	r2, r3, [r7, #32]
	               for (int k = 0; k < 8; k++) {
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b07      	cmp	r3, #7
 8002446:	ddd8      	ble.n	80023fa <readDataFromFlash+0x28>
	               }
	       address += 8;
 8002448:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800244c:	f112 0108 	adds.w	r1, r2, #8
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	f143 0300 	adc.w	r3, r3, #0
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800245c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < dataSize; i++)
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	3301      	adds	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	2200      	movs	r2, #0
 800246a:	4698      	mov	r8, r3
 800246c:	4691      	mov	r9, r2
 800246e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002472:	4590      	cmp	r8, r2
 8002474:	eb79 0303 	sbcs.w	r3, r9, r3
 8002478:	d3b7      	bcc.n	80023ea <readDataFromFlash+0x18>
	}
	buffer[i] = '\0';
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	4413      	add	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

}
 8002484:	bf00      	nop
 8002486:	3734      	adds	r7, #52	; 0x34
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800248e:	4770      	bx	lr

08002490 <eraseFlashPage>:



/**************Erasing data from flash memory ****************/
void eraseFlashPage(uint64_t pageAddress) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	e9c7 0100 	strd	r0, r1, [r7]
    FLASH_EraseInitTypeDef eraseConfig;
    uint32_t pageError;

    eraseConfig.TypeErase   = FLASH_TYPEERASE_PAGES;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
    eraseConfig.Page        = pageAddress / FLASH_PAGE_SIZE; // Specify the page number, not the address
 800249e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	0ac2      	lsrs	r2, r0, #11
 80024ac:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80024b0:	0acb      	lsrs	r3, r1, #11
 80024b2:	4613      	mov	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
    eraseConfig.Banks       = FLASH_BANK_2; // Specify the bank
 80024b6:	2302      	movs	r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
    eraseConfig.NbPages     = 1; // Number of pages to erase
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 80024be:	f000 ff3b 	bl	8003338 <HAL_FLASH_Unlock>

    HAL_FLASHEx_Erase(&eraseConfig, &pageError);
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f817 	bl	8003500 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 80024d2:	f000 ff53 	bl	800337c <HAL_FLASH_Lock>
}
 80024d6:	bf00      	nop
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024ea:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80024f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024fa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80024fe:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002506:	e000      	b.n	800250a <ITM_SendChar+0x2c>
    {
      __NOP();
 8002508:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800250a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f9      	beq.n	8002508 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_write>:
#define FLASH_START_ADDRESS 0x08080000


int _write(int file,char *ptr,int len)

{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]

    int i=0;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

    for(i=0;i<len;i++)
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e009      	b.n	8002556 <_write+0x2a>

      ITM_SendChar((*ptr++));
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	60ba      	str	r2, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffc7 	bl	80024de <ITM_SendChar>
    for(i=0;i<len;i++)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf1      	blt.n	8002542 <_write+0x16>

    return len;
 800255e:	687b      	ldr	r3, [r7, #4]

}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256e:	f000 fc47 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002572:	f000 f8fb 	bl	800276c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002576:	f000 f9e9 	bl	800294c <MX_GPIO_Init>
  MX_SPI1_Init();
 800257a:	f000 f949 	bl	8002810 <MX_SPI1_Init>
  MX_UART4_Init();
 800257e:	f000 f985 	bl	800288c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002582:	f000 f9b3 	bl	80028ec <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DATA_SEND_READY()!=0)
 8002586:	f7ff f907 	bl	8001798 <DATA_SEND_READY>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d055      	beq.n	800263c <main+0xd4>
	   {
		  	  if(*readData)
 8002590:	4b62      	ldr	r3, [pc, #392]	; (800271c <main+0x1b4>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d011      	beq.n	80025bc <main+0x54>
		  	  {

		  		  ret=GSM_Send_Data(readData);
 8002598:	4860      	ldr	r0, [pc, #384]	; (800271c <main+0x1b4>)
 800259a:	f7ff fdd7 	bl	800214c <GSM_Send_Data>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a5f      	ldr	r2, [pc, #380]	; (8002720 <main+0x1b8>)
 80025a2:	6013      	str	r3, [r2, #0]
		  		if(ret==0)
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <main+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <main+0x54>
		  		{
		  		printf("Data restored and sent to server \n");
 80025ac:	485d      	ldr	r0, [pc, #372]	; (8002724 <main+0x1bc>)
 80025ae:	f006 f9d5 	bl	800895c <puts>
		  		memset(readData,0,sizeof(readData));
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	2100      	movs	r1, #0
 80025b6:	4859      	ldr	r0, [pc, #356]	; (800271c <main+0x1b4>)
 80025b8:	f006 fad0 	bl	8008b5c <memset>
		  		}
		  	  }

	  	  	 		while(1)
	  	  	 		{
	  	  	 			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 80025bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80025c0:	4959      	ldr	r1, [pc, #356]	; (8002728 <main+0x1c0>)
 80025c2:	485a      	ldr	r0, [pc, #360]	; (800272c <main+0x1c4>)
 80025c4:	f002 ffc2 	bl	800554c <HAL_UART_Receive_IT>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f6      	bne.n	80025bc <main+0x54>
	  	  	 			{
	  	  	 			printf("Received NMEA %s\n",RxBuffer);
 80025ce:	4956      	ldr	r1, [pc, #344]	; (8002728 <main+0x1c0>)
 80025d0:	4857      	ldr	r0, [pc, #348]	; (8002730 <main+0x1c8>)
 80025d2:	f006 f95d 	bl	8008890 <iprintf>
	  	  	 			strcpy(buf_to_extract,RxBuffer);
 80025d6:	4954      	ldr	r1, [pc, #336]	; (8002728 <main+0x1c0>)
 80025d8:	4856      	ldr	r0, [pc, #344]	; (8002734 <main+0x1cc>)
 80025da:	f006 fbe2 	bl	8008da2 <strcpy>
	  	  	 			memset(RxBuffer,0,750);
 80025de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80025e2:	2100      	movs	r1, #0
 80025e4:	4850      	ldr	r0, [pc, #320]	; (8002728 <main+0x1c0>)
 80025e6:	f006 fab9 	bl	8008b5c <memset>
	  	  	 			get_data_from_gps(buf_to_extract);
 80025ea:	4852      	ldr	r0, [pc, #328]	; (8002734 <main+0x1cc>)
 80025ec:	f7fe fd10 	bl	8001010 <get_data_from_gps>
	  	  	 			//memset(buf_to_extract,0,750);

	  	  	 		 if(*json_str)
 80025f0:	4b51      	ldr	r3, [pc, #324]	; (8002738 <main+0x1d0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <main+0xb4>
	  	  	 		 {
	  	  	 			 printf("GPS Recieved %s \n",json_str);
 80025f8:	494f      	ldr	r1, [pc, #316]	; (8002738 <main+0x1d0>)
 80025fa:	4850      	ldr	r0, [pc, #320]	; (800273c <main+0x1d4>)
 80025fc:	f006 f948 	bl	8008890 <iprintf>
	  	  	 			if(GSM_Send_Data((uint8_t *)json_str)==0)
 8002600:	484d      	ldr	r0, [pc, #308]	; (8002738 <main+0x1d0>)
 8002602:	f7ff fda3 	bl	800214c <GSM_Send_Data>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <main+0xac>
	  	  	 			{
	  	  	 			printf("Sending worked \n");
 800260c:	484c      	ldr	r0, [pc, #304]	; (8002740 <main+0x1d8>)
 800260e:	f006 f9a5 	bl	800895c <puts>
 8002612:	e006      	b.n	8002622 <main+0xba>

	  	  	 			}
	  	  	 			else
	  	  	 			{
	  		  	 			printf("Sending  not worked \n");
 8002614:	484b      	ldr	r0, [pc, #300]	; (8002744 <main+0x1dc>)
 8002616:	f006 f9a1 	bl	800895c <puts>
 800261a:	e002      	b.n	8002622 <main+0xba>

	  	  	 			}
	  	  	 		 }
	  	  	 		 else
	  	  	 		 {
	  	  	 			 printf("GPS Received No DATA\n");
 800261c:	484a      	ldr	r0, [pc, #296]	; (8002748 <main+0x1e0>)
 800261e:	f006 f99d 	bl	800895c <puts>
	  	  	 			 //
	  	  	 		 }
	  	  	 		 memset(json_str,0,256);
 8002622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002626:	2100      	movs	r1, #0
 8002628:	4843      	ldr	r0, [pc, #268]	; (8002738 <main+0x1d0>)
 800262a:	f006 fa97 	bl	8008b5c <memset>
	  	  	 		 memset(json_str,0,256);
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	2100      	movs	r1, #0
 8002634:	4840      	ldr	r0, [pc, #256]	; (8002738 <main+0x1d0>)
 8002636:	f006 fa91 	bl	8008b5c <memset>
	  	  	 			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 800263a:	e7bf      	b.n	80025bc <main+0x54>
	  	  	 		}
	  	  	 		}
	  	  	 }
	  	  	 else
	  	  	 {
	  	  		 printf("GSM Init Failed in Main\n Storing in Flash \n");
 800263c:	4843      	ldr	r0, [pc, #268]	; (800274c <main+0x1e4>)
 800263e:	f006 f98d 	bl	800895c <puts>

	  	  		while(1)
	  	  		{
	  	  			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8002642:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002646:	4938      	ldr	r1, [pc, #224]	; (8002728 <main+0x1c0>)
 8002648:	4838      	ldr	r0, [pc, #224]	; (800272c <main+0x1c4>)
 800264a:	f002 ff7f 	bl	800554c <HAL_UART_Receive_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f6      	bne.n	8002642 <main+0xda>
	  	  			{

	  	  				printf("Received NMEA %s\n",RxBuffer);
 8002654:	4934      	ldr	r1, [pc, #208]	; (8002728 <main+0x1c0>)
 8002656:	4836      	ldr	r0, [pc, #216]	; (8002730 <main+0x1c8>)
 8002658:	f006 f91a 	bl	8008890 <iprintf>
	  	  			  	strcpy(buf_to_extract,RxBuffer);
 800265c:	4932      	ldr	r1, [pc, #200]	; (8002728 <main+0x1c0>)
 800265e:	4835      	ldr	r0, [pc, #212]	; (8002734 <main+0x1cc>)
 8002660:	f006 fb9f 	bl	8008da2 <strcpy>
	  	  			  	memset(RxBuffer,0,750);
 8002664:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002668:	2100      	movs	r1, #0
 800266a:	482f      	ldr	r0, [pc, #188]	; (8002728 <main+0x1c0>)
 800266c:	f006 fa76 	bl	8008b5c <memset>
	  	  			  	get_data_from_gps(buf_to_extract);
 8002670:	4830      	ldr	r0, [pc, #192]	; (8002734 <main+0x1cc>)
 8002672:	f7fe fccd 	bl	8001010 <get_data_from_gps>
	  	  			  	 //memset(buf_to_extract,0,750);

	  	  			  	  if(*json_str)
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <main+0x1d0>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d042      	beq.n	8002704 <main+0x19c>
	  	  			  	  {
	  	  			  	  	 printf("GPS Recieved %s \n",json_str);
 800267e:	492e      	ldr	r1, [pc, #184]	; (8002738 <main+0x1d0>)
 8002680:	482e      	ldr	r0, [pc, #184]	; (800273c <main+0x1d4>)
 8002682:	f006 f905 	bl	8008890 <iprintf>
	  	  			  	  	 printf(" json string length %d",strlen(json_str));
 8002686:	482c      	ldr	r0, [pc, #176]	; (8002738 <main+0x1d0>)
 8002688:	f7fd fe02 	bl	8000290 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	482f      	ldr	r0, [pc, #188]	; (8002750 <main+0x1e8>)
 8002692:	f006 f8fd 	bl	8008890 <iprintf>
	  	  			  	  	 eraseFlashPage(FLASH_START_ADDRESS);
 8002696:	482f      	ldr	r0, [pc, #188]	; (8002754 <main+0x1ec>)
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	f7ff fef8 	bl	8002490 <eraseFlashPage>

	  	  			  	  	 printf("Erased the whole flash\n");
 80026a0:	482d      	ldr	r0, [pc, #180]	; (8002758 <main+0x1f0>)
 80026a2:	f006 f95b 	bl	800895c <puts>

	  	  			  	  	 writeStringToFlash(FLASH_START_ADDRESS,json_str);
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <main+0x1d0>)
 80026a8:	482a      	ldr	r0, [pc, #168]	; (8002754 <main+0x1ec>)
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	f7ff fe53 	bl	8002358 <writeStringToFlash>
	  	  			  	  	 HAL_Delay(1000);
 80026b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b6:	f000 fc1f 	bl	8002ef8 <HAL_Delay>
	  	  			  	  	 printf("Writing into flash done\n");
 80026ba:	4828      	ldr	r0, [pc, #160]	; (800275c <main+0x1f4>)
 80026bc:	f006 f94e 	bl	800895c <puts>
	  	  			  	  	 readDataFromFlash(FLASH_START_ADDRESS,readData,strlen(json_str)+1);
 80026c0:	481d      	ldr	r0, [pc, #116]	; (8002738 <main+0x1d0>)
 80026c2:	f7fd fde5 	bl	8000290 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	3301      	adds	r3, #1
 80026ca:	2200      	movs	r2, #0
 80026cc:	461c      	mov	r4, r3
 80026ce:	4615      	mov	r5, r2
 80026d0:	e9cd 4500 	strd	r4, r5, [sp]
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <main+0x1b4>)
 80026d6:	481f      	ldr	r0, [pc, #124]	; (8002754 <main+0x1ec>)
 80026d8:	f04f 0100 	mov.w	r1, #0
 80026dc:	f7ff fe79 	bl	80023d2 <readDataFromFlash>
	  	  			  	  	 printf("Reading Done ");
 80026e0:	481f      	ldr	r0, [pc, #124]	; (8002760 <main+0x1f8>)
 80026e2:	f006 f8d5 	bl	8008890 <iprintf>
	  	  			  	  	 if(strcmp(readData,json_str)==0)
 80026e6:	4914      	ldr	r1, [pc, #80]	; (8002738 <main+0x1d0>)
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <main+0x1b4>)
 80026ea:	f7fd fd71 	bl	80001d0 <strcmp>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <main+0x194>
	  	  			  	  	 {
	  	  			  	  	   printf("Storing worked \n");
 80026f4:	481b      	ldr	r0, [pc, #108]	; (8002764 <main+0x1fc>)
 80026f6:	f006 f931 	bl	800895c <puts>
	  	  			  	  	   break;
 80026fa:	e00d      	b.n	8002718 <main+0x1b0>

	  	  			  	  	 }
	  	  			  	  	 else
	  	  			  	  	 {
	  	  			  		  	printf("Storing  not worked \n");
 80026fc:	481a      	ldr	r0, [pc, #104]	; (8002768 <main+0x200>)
 80026fe:	f006 f92d 	bl	800895c <puts>
 8002702:	e002      	b.n	800270a <main+0x1a2>

	  	  			  	  	 }
	  	  			  	  }
	  	  			  	  else
	  	  			  	  {
	  	  			  	  	  printf("GPS Received No DATA\n");
 8002704:	4810      	ldr	r0, [pc, #64]	; (8002748 <main+0x1e0>)
 8002706:	f006 f929 	bl	800895c <puts>

	  	  			  	  }
	  	  			  	  	memset(json_str,0,256);
 800270a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270e:	2100      	movs	r1, #0
 8002710:	4809      	ldr	r0, [pc, #36]	; (8002738 <main+0x1d0>)
 8002712:	f006 fa23 	bl	8008b5c <memset>
	  	  			if(HAL_UART_Receive_IT(&huart1, (char *)RxBuffer, 750)==HAL_OK)
 8002716:	e794      	b.n	8002642 <main+0xda>
	  if(DATA_SEND_READY()!=0)
 8002718:	e735      	b.n	8002586 <main+0x1e>
 800271a:	bf00      	nop
 800271c:	20000a18 	.word	0x20000a18
 8002720:	20000000 	.word	0x20000000
 8002724:	0800bb8c 	.word	0x0800bb8c
 8002728:	20000214 	.word	0x20000214
 800272c:	20000b68 	.word	0x20000b68
 8002730:	0800bbb0 	.word	0x0800bbb0
 8002734:	20000504 	.word	0x20000504
 8002738:	200007f4 	.word	0x200007f4
 800273c:	0800bbc4 	.word	0x0800bbc4
 8002740:	0800bbd8 	.word	0x0800bbd8
 8002744:	0800bbe8 	.word	0x0800bbe8
 8002748:	0800bc00 	.word	0x0800bc00
 800274c:	0800bc18 	.word	0x0800bc18
 8002750:	0800bc44 	.word	0x0800bc44
 8002754:	08080000 	.word	0x08080000
 8002758:	0800bc5c 	.word	0x0800bc5c
 800275c:	0800bc74 	.word	0x0800bc74
 8002760:	0800bc8c 	.word	0x0800bc8c
 8002764:	0800bc9c 	.word	0x0800bc9c
 8002768:	0800bcac 	.word	0x0800bcac

0800276c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b096      	sub	sp, #88	; 0x58
 8002770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	2244      	movs	r2, #68	; 0x44
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f006 f9ee 	bl	8008b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800278e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002792:	f001 f9b1 	bl	8003af8 <HAL_PWREx_ControlVoltageScaling>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800279c:	f000 f8ee 	bl	800297c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a0:	2302      	movs	r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027aa:	2310      	movs	r3, #16
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	2302      	movs	r3, #2
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b2:	2302      	movs	r3, #2
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80027ba:	230a      	movs	r3, #10
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027be:	2307      	movs	r3, #7
 80027c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027c2:	2302      	movs	r3, #2
 80027c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 f9e8 	bl	8003ba4 <HAL_RCC_OscConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80027da:	f000 f8cf 	bl	800297c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027de:	230f      	movs	r3, #15
 80027e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e2:	2303      	movs	r3, #3
 80027e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027f2:	463b      	mov	r3, r7
 80027f4:	2104      	movs	r1, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fdb0 	bl	800435c <HAL_RCC_ClockConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002802:	f000 f8bb 	bl	800297c <Error_Handler>
  }
}
 8002806:	bf00      	nop
 8002808:	3758      	adds	r7, #88	; 0x58
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <MX_SPI1_Init+0x74>)
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <MX_SPI1_Init+0x78>)
 8002818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <MX_SPI1_Init+0x74>)
 800281c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MX_SPI1_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <MX_SPI1_Init+0x74>)
 800282a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800282e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <MX_SPI1_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <MX_SPI1_Init+0x74>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_SPI1_Init+0x74>)
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <MX_SPI1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_SPI1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_SPI1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_SPI1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_SPI1_Init+0x74>)
 800285e:	2207      	movs	r2, #7
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_SPI1_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_SPI1_Init+0x74>)
 800286a:	2208      	movs	r2, #8
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_SPI1_Init+0x74>)
 8002870:	f002 fc54 	bl	800511c <HAL_SPI_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800287a:	f000 f87f 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000a7c 	.word	0x20000a7c
 8002888:	40013000 	.word	0x40013000

0800288c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <MX_UART4_Init+0x58>)
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <MX_UART4_Init+0x5c>)
 8002894:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <MX_UART4_Init+0x58>)
 8002898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800289c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_UART4_Init+0x58>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <MX_UART4_Init+0x58>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_UART4_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_UART4_Init+0x58>)
 80028b2:	220c      	movs	r2, #12
 80028b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <MX_UART4_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_UART4_Init+0x58>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <MX_UART4_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_UART4_Init+0x58>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_UART4_Init+0x58>)
 80028d0:	f002 fcc7 	bl	8005262 <HAL_UART_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80028da:	f000 f84f 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000ae0 	.word	0x20000ae0
 80028e8:	40004c00 	.word	0x40004c00

080028ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_USART1_UART_Init+0x58>)
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <MX_USART1_UART_Init+0x5c>)
 80028f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <MX_USART1_UART_Init+0x58>)
 80028f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_USART1_UART_Init+0x58>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002912:	220c      	movs	r2, #12
 8002914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_USART1_UART_Init+0x58>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_USART1_UART_Init+0x58>)
 800292a:	2200      	movs	r2, #0
 800292c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_USART1_UART_Init+0x58>)
 8002930:	f002 fc97 	bl	8005262 <HAL_UART_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800293a:	f000 f81f 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000b68 	.word	0x20000b68
 8002948:	40013800 	.word	0x40013800

0800294c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_GPIO_Init+0x2c>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <MX_GPIO_Init+0x2c>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_GPIO_Init+0x2c>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002984:	e7fe      	b.n	8002984 <Error_Handler+0x8>
	...

08002988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_MspInit+0x44>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <HAL_MspInit+0x44>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6613      	str	r3, [r2, #96]	; 0x60
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_MspInit+0x44>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_MspInit+0x44>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_MspInit+0x44>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_MspInit+0x44>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_SPI_MspInit+0x7c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d128      	bne.n	8002a44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 80029f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029fc:	6613      	str	r3, [r2, #96]	; 0x60
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_SPI_MspInit+0x80>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a22:	23e0      	movs	r3, #224	; 0xe0
 8002a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a32:	2305      	movs	r3, #5
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a40:	f000 fea2 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013000 	.word	0x40013000
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0ae      	sub	sp, #184	; 0xb8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	2288      	movs	r2, #136	; 0x88
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f006 f871 	bl	8008b5c <memset>
  if(huart->Instance==UART4)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_UART_MspInit+0x158>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d144      	bne.n	8002b0e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a84:	2308      	movs	r3, #8
 8002a86:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fe87 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a9c:	f7ff ff6e 	bl	800297c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac4:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002af2:	4619      	mov	r1, r3
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af8:	f000 fe46 	bl	8003788 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f000 faf8 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b06:	2034      	movs	r0, #52	; 0x34
 8002b08:	f000 fb11 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b0c:	e049      	b.n	8002ba2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <HAL_UART_MspInit+0x160>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d144      	bne.n	8002ba2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fe3d 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002b30:	f7ff ff24 	bl	800297c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_UART_MspInit+0x15c>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f000 fdfb 	bl	8003788 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2025      	movs	r0, #37	; 0x25
 8002b98:	f000 faad 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b9c:	2025      	movs	r0, #37	; 0x25
 8002b9e:	f000 fac6 	bl	800312e <HAL_NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	37b8      	adds	r7, #184	; 0xb8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40004c00 	.word	0x40004c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40013800 	.word	0x40013800

08002bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <NMI_Handler+0x4>

08002bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <HardFault_Handler+0x4>

08002bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <MemManage_Handler+0x4>

08002bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c04:	f000 f958 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <USART1_IRQHandler+0x10>)
 8002c12:	f002 fce7 	bl	80055e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000b68 	.word	0x20000b68

08002c20 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <UART4_IRQHandler+0x10>)
 8002c26:	f002 fcdd 	bl	80055e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000ae0 	.word	0x20000ae0

08002c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return 1;
 8002c38:	2301      	movs	r3, #1
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_kill>:

int _kill(int pid, int sig)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c4e:	f006 f87b 	bl	8008d48 <__errno>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2216      	movs	r2, #22
 8002c56:	601a      	str	r2, [r3, #0]
  return -1;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_exit>:

void _exit (int status)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ffe7 	bl	8002c44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c76:	e7fe      	b.n	8002c76 <_exit+0x12>

08002c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e00a      	b.n	8002ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c8a:	f3af 8000 	nop.w
 8002c8e:	4601      	mov	r1, r0
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	b2ca      	uxtb	r2, r1
 8002c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dbf0      	blt.n	8002c8a <_read+0x12>
  }

  return len;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cda:	605a      	str	r2, [r3, #4]
  return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_isatty>:

int _isatty(int file)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <_sbrk+0x5c>)
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <_sbrk+0x60>)
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_sbrk+0x64>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <_sbrk+0x68>)
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d207      	bcs.n	8002d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d4c:	f005 fffc 	bl	8008d48 <__errno>
 8002d50:	4603      	mov	r3, r0
 8002d52:	220c      	movs	r2, #12
 8002d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e009      	b.n	8002d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <_sbrk+0x64>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <_sbrk+0x64>)
 8002d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20018000 	.word	0x20018000
 8002d7c:	00000400 	.word	0x00000400
 8002d80:	20000bf0 	.word	0x20000bf0
 8002d84:	20000d48 	.word	0x20000d48

08002d88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SystemInit+0x20>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <SystemInit+0x20>)
 8002d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002db0:	f7ff ffea 	bl	8002d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <LoopForever+0xe>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <LoopForever+0x16>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dda:	f005 ffbb 	bl	8008d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dde:	f7ff fbc3 	bl	8002568 <main>

08002de2 <LoopForever>:

LoopForever:
    b LoopForever
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002de4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002df0:	0800c1a0 	.word	0x0800c1a0
  ldr r2, =_sbss
 8002df4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002df8:	20000d44 	.word	0x20000d44

08002dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_2_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_Init+0x3c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_Init+0x3c>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e16:	2003      	movs	r0, #3
 8002e18:	f000 f962 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 f80f 	bl	8002e40 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	e001      	b.n	8002e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e2e:	f7ff fdab 	bl	8002988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e32:	79fb      	ldrb	r3, [r7, #7]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40022000 	.word	0x40022000

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_InitTick+0x6c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_InitTick+0x70>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_InitTick+0x6c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f96d 	bl	800314a <HAL_SYSTICK_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d809      	bhi.n	8002e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f000 f937 	bl	80030f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e88:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_InitTick+0x74>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e004      	b.n	8002ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e001      	b.n	8002ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x24>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_IncTick+0x24>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	2000000c 	.word	0x2000000c
 8002edc:	20000bf4 	.word	0x20000bf4

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000bf4 	.word	0x20000bf4

08002ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff ffee 	bl	8002ee0 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d005      	beq.n	8002f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_Delay+0x44>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f1e:	bf00      	nop
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f7      	bhi.n	8002f20 <HAL_Delay+0x28>
  {
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000000c 	.word	0x2000000c

08002f40 <__NVIC_SetPriorityGrouping>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003108:	f7ff ff3e 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 800310c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff ff8e 	bl	8003034 <NVIC_EncodePriority>
 8003118:	4602      	mov	r2, r0
 800311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff5d 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff31 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffa2 	bl	800309c <SysTick_Config>
 8003158:	4603      	mov	r3, r0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d008      	beq.n	800318c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e022      	b.n	80031d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f003 021c 	and.w	r2, r3, #28
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d005      	beq.n	8003202 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e029      	b.n	8003256 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 020e 	bic.w	r2, r2, #14
 8003210:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 021c 	and.w	r2, r3, #28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
    }
  }
  return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <HAL_FLASH_Program+0xd0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_FLASH_Program+0x1e>
 800327a:	2302      	movs	r3, #2
 800327c:	e053      	b.n	8003326 <HAL_FLASH_Program+0xc6>
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_FLASH_Program+0xd0>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003288:	f000 f888 	bl	800339c <FLASH_WaitForLastOperation>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d143      	bne.n	800331e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_FLASH_Program+0xd0>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_FLASH_Program+0xd4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_FLASH_Program+0xd4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_FLASH_Program+0xd4>)
 80032ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_FLASH_Program+0xd0>)
 80032b6:	2202      	movs	r2, #2
 80032b8:	771a      	strb	r2, [r3, #28]
 80032ba:	e002      	b.n	80032c2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_FLASH_Program+0xd0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80032c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032cc:	68b8      	ldr	r0, [r7, #8]
 80032ce:	f000 f8bb 	bl	8003448 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80032d2:	2301      	movs	r3, #1
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e010      	b.n	80032fa <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d002      	beq.n	80032e4 <HAL_FLASH_Program+0x84>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d10a      	bne.n	80032fa <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4619      	mov	r1, r3
 80032e8:	68b8      	ldr	r0, [r7, #8]
 80032ea:	f000 f8d3 	bl	8003494 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d102      	bne.n	80032fa <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80032f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032f8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032fe:	f000 f84d 	bl	800339c <FLASH_WaitForLastOperation>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_FLASH_Program+0xd4>)
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	4907      	ldr	r1, [pc, #28]	; (8003334 <HAL_FLASH_Program+0xd4>)
 8003316:	4013      	ands	r3, r2
 8003318:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800331a:	f000 f9eb 	bl	80036f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_FLASH_Program+0xd0>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]

  return status;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000010 	.word	0x20000010
 8003334:	40022000 	.word	0x40022000

08003338 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_FLASH_Unlock+0x38>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da0b      	bge.n	8003362 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_FLASH_Unlock+0x38>)
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_FLASH_Unlock+0x3c>)
 800334e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_FLASH_Unlock+0x38>)
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_FLASH_Unlock+0x40>)
 8003354:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_FLASH_Unlock+0x38>)
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da01      	bge.n	8003362 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003362:	79fb      	ldrb	r3, [r7, #7]
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40022000 	.word	0x40022000
 8003374:	45670123 	.word	0x45670123
 8003378:	cdef89ab 	.word	0xcdef89ab

0800337c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_FLASH_Lock+0x1c>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_FLASH_Lock+0x1c>)
 8003386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800338a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40022000 	.word	0x40022000

0800339c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff fd9c 	bl	8002ee0 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80033aa:	e00d      	b.n	80033c8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d009      	beq.n	80033c8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80033b4:	f7ff fd94 	bl	8002ee0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d801      	bhi.n	80033c8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e037      	b.n	8003438 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1eb      	bne.n	80033ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01e      	beq.n	8003424 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <FLASH_WaitForLastOperation+0xa8>)
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <FLASH_WaitForLastOperation+0xa8>)
 80033f0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <FLASH_WaitForLastOperation+0x70>
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003406:	490e      	ldr	r1, [pc, #56]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	618b      	str	r3, [r1, #24]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <FLASH_WaitForLastOperation+0x84>
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800341e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e009      	b.n	8003438 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <FLASH_WaitForLastOperation+0xa4>)
 8003432:	2201      	movs	r2, #1
 8003434:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40022000 	.word	0x40022000
 8003444:	20000010 	.word	0x20000010

08003448 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <FLASH_Program_DoubleWord+0x48>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <FLASH_Program_DoubleWord+0x48>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003466:	f3bf 8f6f 	isb	sy
}
 800346a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800346c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	000a      	movs	r2, r1
 800347a:	2300      	movs	r3, #0
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	3104      	adds	r1, #4
 8003480:	4613      	mov	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40022000 	.word	0x40022000

08003494 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800349e:	2340      	movs	r3, #64	; 0x40
 80034a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <FLASH_Program_Fast+0x68>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4a13      	ldr	r2, [pc, #76]	; (80034fc <FLASH_Program_Fast+0x68>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80034bc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80034be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80034c0:	b672      	cpsid	i
}
 80034c2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	3304      	adds	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3304      	adds	r3, #4
 80034d6:	617b      	str	r3, [r7, #20]
    row_index--;
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
 80034da:	3b01      	subs	r3, #1
 80034dc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ef      	bne.n	80034c4 <FLASH_Program_Fast+0x30>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f383 8810 	msr	PRIMASK, r3
}
 80034ee:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80034f0:	bf00      	nop
 80034f2:	3724      	adds	r7, #36	; 0x24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40022000 	.word	0x40022000

08003500 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800350a:	4b49      	ldr	r3, [pc, #292]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_FLASHEx_Erase+0x16>
 8003512:	2302      	movs	r3, #2
 8003514:	e087      	b.n	8003626 <HAL_FLASHEx_Erase+0x126>
 8003516:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800351c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003520:	f7ff ff3c 	bl	800339c <FLASH_WaitForLastOperation>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d177      	bne.n	800361e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003534:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003540:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 8003552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003556:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 800355a:	2203      	movs	r2, #3
 800355c:	771a      	strb	r2, [r3, #28]
 800355e:	e016      	b.n	800358e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 8003562:	2201      	movs	r2, #1
 8003564:	771a      	strb	r2, [r3, #28]
 8003566:	e012      	b.n	800358e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 800357a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800357e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003580:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 8003582:	2202      	movs	r2, #2
 8003584:	771a      	strb	r2, [r3, #28]
 8003586:	e002      	b.n	800358e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d113      	bne.n	80035be <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f84c 	bl	8003638 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035a4:	f7ff fefa 	bl	800339c <FLASH_WaitForLastOperation>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 80035b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6153      	str	r3, [r2, #20]
 80035bc:	e02d      	b.n	800361a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e01d      	b.n	800360a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4619      	mov	r1, r3
 80035d4:	68b8      	ldr	r0, [r7, #8]
 80035d6:	f000 f857 	bl	8003688 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035de:	f7ff fedd 	bl	800339c <FLASH_WaitForLastOperation>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_FLASHEx_Erase+0x134>)
 80035ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	601a      	str	r2, [r3, #0]
          break;
 8003602:	e00a      	b.n	800361a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4413      	add	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3d9      	bcc.n	80035ce <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800361a:	f000 f86b 	bl	80036f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <HAL_FLASHEx_Erase+0x130>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000010 	.word	0x20000010
 8003634:	40022000 	.word	0x40022000

08003638 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <FLASH_MassErase+0x4c>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <FLASH_MassErase+0x4c>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <FLASH_MassErase+0x4c>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4a07      	ldr	r2, [pc, #28]	; (8003684 <FLASH_MassErase+0x4c>)
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <FLASH_MassErase+0x4c>)
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <FLASH_MassErase+0x4c>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6153      	str	r3, [r2, #20]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40022000 	.word	0x40022000

08003688 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <FLASH_PageErase+0x68>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <FLASH_PageErase+0x68>)
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a6:	6153      	str	r3, [r2, #20]
 80036a8:	e005      	b.n	80036b6 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <FLASH_PageErase+0x68>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <FLASH_PageErase+0x68>)
 80036b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036b4:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <FLASH_PageErase+0x68>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <FLASH_PageErase+0x68>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <FLASH_PageErase+0x68>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <FLASH_PageErase+0x68>)
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <FLASH_PageErase+0x68>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <FLASH_PageErase+0x68>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	6153      	str	r3, [r2, #20]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40022000 	.word	0x40022000

080036f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <FLASH_FlushCaches+0x8c>)
 80036fc:	7f1b      	ldrb	r3, [r3, #28]
 80036fe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d002      	beq.n	800370c <FLASH_FlushCaches+0x18>
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d117      	bne.n	800373c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <FLASH_FlushCaches+0x90>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003712:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003716:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <FLASH_FlushCaches+0x90>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <FLASH_FlushCaches+0x90>)
 800371e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <FLASH_FlushCaches+0x90>)
 800372a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d002      	beq.n	8003748 <FLASH_FlushCaches+0x54>
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d111      	bne.n	800376c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <FLASH_FlushCaches+0x90>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <FLASH_FlushCaches+0x90>)
 800374e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <FLASH_FlushCaches+0x90>)
 800375a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <FLASH_FlushCaches+0x90>)
 8003766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <FLASH_FlushCaches+0x8c>)
 800376e:	2200      	movs	r2, #0
 8003770:	771a      	strb	r2, [r3, #28]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000010 	.word	0x20000010
 8003784:	40022000 	.word	0x40022000

08003788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	e17f      	b.n	8003a98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8171 	beq.w	8003a92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d005      	beq.n	80037c8 <HAL_GPIO_Init+0x40>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d130      	bne.n	800382a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037fe:	2201      	movs	r2, #1
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 0201 	and.w	r2, r3, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b03      	cmp	r3, #3
 8003834:	d118      	bne.n	8003868 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800383c:	2201      	movs	r2, #1
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0201 	and.w	r2, r3, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b03      	cmp	r3, #3
 8003872:	d017      	beq.n	80038a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d123      	bne.n	80038f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	08da      	lsrs	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3208      	adds	r2, #8
 80038b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	6939      	ldr	r1, [r7, #16]
 80038f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ac 	beq.w	8003a92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_GPIO_Init+0x330>)
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	4a5e      	ldr	r2, [pc, #376]	; (8003ab8 <HAL_GPIO_Init+0x330>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6613      	str	r3, [r2, #96]	; 0x60
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_GPIO_Init+0x330>)
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003952:	4a5a      	ldr	r2, [pc, #360]	; (8003abc <HAL_GPIO_Init+0x334>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800397c:	d025      	beq.n	80039ca <HAL_GPIO_Init+0x242>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4f      	ldr	r2, [pc, #316]	; (8003ac0 <HAL_GPIO_Init+0x338>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_GPIO_Init+0x23e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4e      	ldr	r2, [pc, #312]	; (8003ac4 <HAL_GPIO_Init+0x33c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d019      	beq.n	80039c2 <HAL_GPIO_Init+0x23a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <HAL_GPIO_Init+0x340>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_Init+0x236>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4c      	ldr	r2, [pc, #304]	; (8003acc <HAL_GPIO_Init+0x344>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_Init+0x232>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_GPIO_Init+0x348>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x22e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_GPIO_Init+0x34c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_Init+0x22a>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00c      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039b2:	2307      	movs	r3, #7
 80039b4:	e00a      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039b6:	2305      	movs	r3, #5
 80039b8:	e008      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039be:	2303      	movs	r3, #3
 80039c0:	e004      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e002      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_GPIO_Init+0x244>
 80039ca:	2300      	movs	r3, #0
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	f002 0203 	and.w	r2, r2, #3
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	4093      	lsls	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039dc:	4937      	ldr	r1, [pc, #220]	; (8003abc <HAL_GPIO_Init+0x334>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3302      	adds	r3, #2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a0e:	4a32      	ldr	r2, [pc, #200]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a14:	4b30      	ldr	r3, [pc, #192]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a38:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a8c:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <HAL_GPIO_Init+0x350>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f47f ae78 	bne.w	8003798 <HAL_GPIO_Init+0x10>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	48000400 	.word	0x48000400
 8003ac4:	48000800 	.word	0x48000800
 8003ac8:	48000c00 	.word	0x48000c00
 8003acc:	48001000 	.word	0x48001000
 8003ad0:	48001400 	.word	0x48001400
 8003ad4:	48001800 	.word	0x48001800
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b06:	d130      	bne.n	8003b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d038      	beq.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2232      	movs	r2, #50	; 0x32
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0c9b      	lsrs	r3, r3, #18
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b3c:	e002      	b.n	8003b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d102      	bne.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f2      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	d110      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00f      	b.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d007      	beq.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b80:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	20000004 	.word	0x20000004
 8003ba0:	431bde83 	.word	0x431bde83

08003ba4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e3ca      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb6:	4b97      	ldr	r3, [pc, #604]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc0:	4b94      	ldr	r3, [pc, #592]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80e4 	beq.w	8003da0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_RCC_OscConfig+0x4a>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	f040 808b 	bne.w	8003cfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 8087 	bne.w	8003cfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bee:	4b89      	ldr	r3, [pc, #548]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e3a2      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	4b82      	ldr	r3, [pc, #520]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_RCC_OscConfig+0x7c>
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1e:	e005      	b.n	8003c2c <HAL_RCC_OscConfig+0x88>
 8003c20:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d223      	bcs.n	8003c78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd55 	bl	80046e4 <RCC_SetFlashLatencyFromMSIRange>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e383      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c44:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a72      	ldr	r2, [pc, #456]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f043 0308 	orr.w	r3, r3, #8
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b70      	ldr	r3, [pc, #448]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	496d      	ldr	r1, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c62:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	4968      	ldr	r1, [pc, #416]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
 8003c76:	e025      	b.n	8003cc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4960      	ldr	r1, [pc, #384]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c96:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	495b      	ldr	r1, [pc, #364]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd15 	bl	80046e4 <RCC_SetFlashLatencyFromMSIRange>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e343      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc4:	f000 fc4a 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	4950      	ldr	r1, [pc, #320]	; (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	4a4e      	ldr	r2, [pc, #312]	; (8003e1c <HAL_RCC_OscConfig+0x278>)
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	; (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff f8a9 	bl	8002e40 <HAL_InitTick>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d052      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	e327      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d032      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d10:	f7ff f8e6 	bl	8002ee0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d18:	f7ff f8e2 	bl	8002ee0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e310      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4931      	ldr	r1, [pc, #196]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d54:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	492c      	ldr	r1, [pc, #176]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	e01a      	b.n	8003da0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d76:	f7ff f8b3 	bl	8002ee0 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d7e:	f7ff f8af 	bl	8002ee0 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e2dd      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x1da>
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d074      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d005      	beq.n	8003dbe <HAL_RCC_OscConfig+0x21a>
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d10e      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d064      	beq.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d160      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e2ba      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x24a>
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e026      	b.n	8003e3c <HAL_RCC_OscConfig+0x298>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df6:	d115      	bne.n	8003e24 <HAL_RCC_OscConfig+0x280>
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a02      	ldr	r2, [pc, #8]	; (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x298>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800bcc4 	.word	0x0800bcc4
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	20000008 	.word	0x20000008
 8003e24:	4ba0      	ldr	r3, [pc, #640]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a9f      	ldr	r2, [pc, #636]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b9d      	ldr	r3, [pc, #628]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a9c      	ldr	r2, [pc, #624]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7ff f84c 	bl	8002ee0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7ff f848 	bl	8002ee0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e276      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5e:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x2a8>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7ff f838 	bl	8002ee0 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7ff f834 	bl	8002ee0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e262      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e86:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2d0>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d060      	beq.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x310>
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d116      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_OscConfig+0x328>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e23f      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	4973      	ldr	r1, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee0:	e040      	b.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d023      	beq.n	8003f32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fe fff3 	bl	8002ee0 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efe:	f7fe ffef 	bl	8002ee0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e21d      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f10:	4b65      	ldr	r3, [pc, #404]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1c:	4b62      	ldr	r3, [pc, #392]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	495f      	ldr	r1, [pc, #380]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
 8003f30:	e018      	b.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a5c      	ldr	r2, [pc, #368]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fe ffcf 	bl	8002ee0 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fe ffcb 	bl	8002ee0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1f9      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03c      	beq.n	8003fea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	4a4a      	ldr	r2, [pc, #296]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fe ffaa 	bl	8002ee0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fe ffa6 	bl	8002ee0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1d4      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCC_OscConfig+0x3ec>
 8003fb0:	e01b      	b.n	8003fea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb8:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe ff8d 	bl	8002ee0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe ff89 	bl	8002ee0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1b7      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fdc:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ef      	bne.n	8003fca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a6 	beq.w	8004144 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	6593      	str	r3, [r2, #88]	; 0x58
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCC_OscConfig+0x508>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d118      	bne.n	8004062 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCC_OscConfig+0x508>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_RCC_OscConfig+0x508>)
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403c:	f7fe ff50 	bl	8002ee0 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe ff4c 	bl	8002ee0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e17a      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_RCC_OscConfig+0x508>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d108      	bne.n	800407c <HAL_RCC_OscConfig+0x4d8>
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407a:	e029      	b.n	80040d0 <HAL_RCC_OscConfig+0x52c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d115      	bne.n	80040b0 <HAL_RCC_OscConfig+0x50c>
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <HAL_RCC_OscConfig+0x504>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a4:	e014      	b.n	80040d0 <HAL_RCC_OscConfig+0x52c>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
 80040b0:	4b9c      	ldr	r3, [pc, #624]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	4a9b      	ldr	r2, [pc, #620]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c0:	4b98      	ldr	r3, [pc, #608]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	4a97      	ldr	r2, [pc, #604]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fe ff02 	bl	8002ee0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fe fefe 	bl	8002ee0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e12a      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b8b      	ldr	r3, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ed      	beq.n	80040e0 <HAL_RCC_OscConfig+0x53c>
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fe feeb 	bl	8002ee0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fee7 	bl	8002ee0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e113      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004124:	4b7f      	ldr	r3, [pc, #508]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ed      	bne.n	800410e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004132:	7ffb      	ldrb	r3, [r7, #31]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a79      	ldr	r2, [pc, #484]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80fe 	beq.w	800434a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	2b02      	cmp	r3, #2
 8004154:	f040 80d0 	bne.w	80042f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004158:	4b72      	ldr	r3, [pc, #456]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0203 	and.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	429a      	cmp	r2, r3
 800416a:	d130      	bne.n	80041ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	3b01      	subs	r3, #1
 8004178:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d127      	bne.n	80041ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d11f      	bne.n	80041ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004198:	2a07      	cmp	r2, #7
 800419a:	bf14      	ite	ne
 800419c:	2201      	movne	r2, #1
 800419e:	2200      	moveq	r2, #0
 80041a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d113      	bne.n	80041ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d06e      	beq.n	80042ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d069      	beq.n	80042a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0ad      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041f0:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80041f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041fc:	f7fe fe70 	bl	8002ee0 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe fe6c 	bl	8002ee0 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e09a      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004222:	4b40      	ldr	r3, [pc, #256]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x784>)
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004232:	3a01      	subs	r2, #1
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800423c:	0212      	lsls	r2, r2, #8
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004244:	0852      	lsrs	r2, r2, #1
 8004246:	3a01      	subs	r2, #1
 8004248:	0552      	lsls	r2, r2, #21
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004250:	0852      	lsrs	r2, r2, #1
 8004252:	3a01      	subs	r2, #1
 8004254:	0652      	lsls	r2, r2, #25
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800425c:	0912      	lsrs	r2, r2, #4
 800425e:	0452      	lsls	r2, r2, #17
 8004260:	430a      	orrs	r2, r1
 8004262:	4930      	ldr	r1, [pc, #192]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004264:	4313      	orrs	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004272:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004274:	4b2b      	ldr	r3, [pc, #172]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004280:	f7fe fe2e 	bl	8002ee0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe fe2a 	bl	8002ee0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e058      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a6:	e050      	b.n	800434a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e04f      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d148      	bne.n	800434a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042d0:	f7fe fe06 	bl	8002ee0 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe fe02 	bl	8002ee0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e030      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x734>
 80042f6:	e028      	b.n	800434a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d023      	beq.n	8004346 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <HAL_RCC_OscConfig+0x780>)
 8004304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fde9 	bl	8002ee0 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	e00c      	b.n	800432c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe fde5 	bl	8002ee0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d905      	bls.n	800432c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e013      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
 8004324:	40021000 	.word	0x40021000
 8004328:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_OscConfig+0x7b0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ec      	bne.n	8004312 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_RCC_OscConfig+0x7b0>)
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	4905      	ldr	r1, [pc, #20]	; (8004354 <HAL_RCC_OscConfig+0x7b0>)
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCC_OscConfig+0x7b4>)
 8004340:	4013      	ands	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
 8004344:	e001      	b.n	800434a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	feeefffc 	.word	0xfeeefffc

0800435c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0e7      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004370:	4b75      	ldr	r3, [pc, #468]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d910      	bls.n	80043a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b72      	ldr	r3, [pc, #456]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 0207 	bic.w	r2, r3, #7
 8004386:	4970      	ldr	r1, [pc, #448]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b6e      	ldr	r3, [pc, #440]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0cf      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d908      	bls.n	80043ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b63      	ldr	r3, [pc, #396]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4960      	ldr	r1, [pc, #384]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d04c      	beq.n	8004474 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b5a      	ldr	r3, [pc, #360]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d121      	bne.n	8004432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0a6      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fa:	4b54      	ldr	r3, [pc, #336]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d115      	bne.n	8004432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e09a      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e08e      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004422:	4b4a      	ldr	r3, [pc, #296]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e086      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004432:	4b46      	ldr	r3, [pc, #280]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 0203 	bic.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4943      	ldr	r1, [pc, #268]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fe fd4c 	bl	8002ee0 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	e00a      	b.n	8004462 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444c:	f7fe fd48 	bl	8002ee0 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e06e      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 020c 	and.w	r2, r3, #12
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	429a      	cmp	r2, r3
 8004472:	d1eb      	bne.n	800444c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	429a      	cmp	r2, r3
 800448e:	d208      	bcs.n	80044a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	492b      	ldr	r1, [pc, #172]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d210      	bcs.n	80044d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 0207 	bic.w	r2, r3, #7
 80044b8:	4923      	ldr	r1, [pc, #140]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e036      	b.n	8004540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	4918      	ldr	r1, [pc, #96]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4910      	ldr	r1, [pc, #64]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	4313      	orrs	r3, r2
 800450e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004510:	f000 f824 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	490b      	ldr	r1, [pc, #44]	; (8004550 <HAL_RCC_ClockConfig+0x1f4>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCC_ClockConfig+0x1f8>)
 800452e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1fc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fc83 	bl	8002e40 <HAL_InitTick>
 800453a:	4603      	mov	r3, r0
 800453c:	72fb      	strb	r3, [r7, #11]

  return status;
 800453e:	7afb      	ldrb	r3, [r7, #11]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40022000 	.word	0x40022000
 800454c:	40021000 	.word	0x40021000
 8004550:	0800bcc4 	.word	0x0800bcc4
 8004554:	20000004 	.word	0x20000004
 8004558:	20000008 	.word	0x20000008

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d121      	bne.n	80045ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d11e      	bne.n	80045ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004590:	4b34      	ldr	r3, [pc, #208]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	e005      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045ac:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045b8:	4a2b      	ldr	r2, [pc, #172]	; (8004668 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d102      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <HAL_RCC_GetSysClockFreq+0x110>)
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e004      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e0:	4b23      	ldr	r3, [pc, #140]	; (8004670 <HAL_RCC_GetSysClockFreq+0x114>)
 80045e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d134      	bne.n	8004654 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ea:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0xa6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0xac>
 8004600:	e005      	b.n	800460e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004602:	4b1a      	ldr	r3, [pc, #104]	; (800466c <HAL_RCC_GetSysClockFreq+0x110>)
 8004604:	617b      	str	r3, [r7, #20]
      break;
 8004606:	e005      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_RCC_GetSysClockFreq+0x114>)
 800460a:	617b      	str	r3, [r7, #20]
      break;
 800460c:	e002      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	617b      	str	r3, [r7, #20]
      break;
 8004612:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	3301      	adds	r3, #1
 8004620:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	fb03 f202 	mul.w	r2, r3, r2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCC_GetSysClockFreq+0x108>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	0e5b      	lsrs	r3, r3, #25
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	3301      	adds	r3, #1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004654:	69bb      	ldr	r3, [r7, #24]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	; 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	0800bcdc 	.word	0x0800bcdc
 800466c:	00f42400 	.word	0x00f42400
 8004670:	007a1200 	.word	0x007a1200

08004674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCC_GetHCLKFreq+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000004 	.word	0x20000004

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004690:	f7ff fff0 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	0800bcd4 	.word	0x0800bcd4

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046bc:	f7ff ffda 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0adb      	lsrs	r3, r3, #11
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4904      	ldr	r1, [pc, #16]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800bcd4 	.word	0x0800bcd4

080046e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046fc:	f7ff f9ee 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 8004700:	6178      	str	r0, [r7, #20]
 8004702:	e014      	b.n	800472e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	; 0x58
 8004710:	4b22      	ldr	r3, [pc, #136]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800471c:	f7ff f9de 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 8004720:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b1e      	ldr	r3, [pc, #120]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004734:	d10b      	bne.n	800474e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d919      	bls.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2ba0      	cmp	r3, #160	; 0xa0
 8004740:	d902      	bls.n	8004748 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004742:	2302      	movs	r3, #2
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e013      	b.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004748:	2301      	movs	r3, #1
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e010      	b.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d902      	bls.n	800475a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004754:	2303      	movs	r3, #3
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e00a      	b.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d102      	bne.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004760:	2302      	movs	r3, #2
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	e004      	b.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d101      	bne.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800476c:	2301      	movs	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 0207 	bic.w	r2, r3, #7
 8004778:	4909      	ldr	r1, [pc, #36]	; (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	40022000 	.word	0x40022000

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ac:	2300      	movs	r3, #0
 80047ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047b0:	2300      	movs	r3, #0
 80047b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d041      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047c8:	d02a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047ce:	d824      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d4:	d008      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047da:	d81e      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e4:	d010      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047e6:	e018      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047e8:	4b86      	ldr	r3, [pc, #536]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a85      	ldr	r2, [pc, #532]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047f4:	e015      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fabb 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004806:	e00c      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3320      	adds	r3, #32
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fba6 	bl	8004f60 <RCCEx_PLLSAI2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004818:	e003      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	74fb      	strb	r3, [r7, #19]
      break;
 800481e:	e000      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004836:	4973      	ldr	r1, [pc, #460]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800483e:	e001      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d041      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004858:	d02a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800485a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800485e:	d824      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800486a:	d81e      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004874:	d010      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004876:	e018      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004878:	4b62      	ldr	r3, [pc, #392]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a61      	ldr	r2, [pc, #388]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004882:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004884:	e015      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fa73 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004896:	e00c      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3320      	adds	r3, #32
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb5e 	bl	8004f60 <RCCEx_PLLSAI2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	74fb      	strb	r3, [r7, #19]
      break;
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c6:	494f      	ldr	r1, [pc, #316]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048ce:	e001      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a0 	beq.w	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e2:	2300      	movs	r3, #0
 80048e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
 8004908:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004914:	2301      	movs	r3, #1
 8004916:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004918:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004924:	f7fe fadc 	bl	8002ee0 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800492a:	e009      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492c:	f7fe fad8 	bl	8002ee0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	74fb      	strb	r3, [r7, #19]
        break;
 800493e:	e005      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004940:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ef      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d15c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004952:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01f      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	d019      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fe fa97 	bl	8002ee0 <HAL_GetTick>
 80049b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b4:	e00b      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fe fa93 	bl	8002ee0 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d902      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	74fb      	strb	r3, [r7, #19]
            break;
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ec      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f2:	4904      	ldr	r1, [pc, #16]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049fa:	e009      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	74bb      	strb	r3, [r7, #18]
 8004a00:	e006      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a10:	7c7b      	ldrb	r3, [r7, #17]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a16:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	4a9d      	ldr	r2, [pc, #628]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a2e:	4b98      	ldr	r3, [pc, #608]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	4994      	ldr	r1, [pc, #592]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a50:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 020c 	bic.w	r2, r3, #12
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	498c      	ldr	r1, [pc, #560]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a72:	4b87      	ldr	r3, [pc, #540]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	4983      	ldr	r1, [pc, #524]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a94:	4b7e      	ldr	r3, [pc, #504]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	497b      	ldr	r1, [pc, #492]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0310 	and.w	r3, r3, #16
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac4:	4972      	ldr	r1, [pc, #456]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad8:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	496a      	ldr	r1, [pc, #424]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afa:	4b65      	ldr	r3, [pc, #404]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	4961      	ldr	r1, [pc, #388]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b1c:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	4959      	ldr	r1, [pc, #356]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b3e:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	4950      	ldr	r1, [pc, #320]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	4948      	ldr	r1, [pc, #288]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b82:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	493f      	ldr	r1, [pc, #252]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d028      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba4:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb2:	4937      	ldr	r1, [pc, #220]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a31      	ldr	r2, [pc, #196]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
 8004bd0:	e011      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f8c8 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d028      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	491f      	ldr	r1, [pc, #124]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a1a      	ldr	r2, [pc, #104]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2c:	60d3      	str	r3, [r2, #12]
 8004c2e:	e011      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f899 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d02b      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6e:	4908      	ldr	r1, [pc, #32]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c80:	4b03      	ldr	r3, [pc, #12]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a02      	ldr	r2, [pc, #8]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8a:	60d3      	str	r3, [r2, #12]
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f867 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02f      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd2:	4928      	ldr	r1, [pc, #160]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce2:	d10d      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f844 	bl	8004d78 <RCCEx_PLLSAI1_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d014      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	74bb      	strb	r3, [r7, #18]
 8004cfe:	e011      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f925 	bl	8004f60 <RCCEx_PLLSAI2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3e:	490d      	ldr	r1, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d62:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000

08004d78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d86:	4b75      	ldr	r3, [pc, #468]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d92:	4b72      	ldr	r3, [pc, #456]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0203 	and.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d10d      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
       ||
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d047      	beq.n	8004e4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e044      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d018      	beq.n	8004dfe <RCCEx_PLLSAI1_Config+0x86>
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d825      	bhi.n	8004e1c <RCCEx_PLLSAI1_Config+0xa4>
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d002      	beq.n	8004dda <RCCEx_PLLSAI1_Config+0x62>
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d009      	beq.n	8004dec <RCCEx_PLLSAI1_Config+0x74>
 8004dd8:	e020      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dea:	e01a      	b.n	8004e22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dec:	4b5b      	ldr	r3, [pc, #364]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d116      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfc:	e013      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dfe:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e1a:	e006      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e004      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e22:	bf00      	nop
 8004e24:	e002      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e26:	bf00      	nop
 8004e28:	e000      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e32:	4b4a      	ldr	r3, [pc, #296]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	430b      	orrs	r3, r1
 8004e48:	4944      	ldr	r1, [pc, #272]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d17d      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e54:	4b41      	ldr	r3, [pc, #260]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fe f83e 	bl	8002ee0 <HAL_GetTick>
 8004e64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e66:	e009      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e68:	f7fe f83a 	bl	8002ee0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d902      	bls.n	8004e7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	73fb      	strb	r3, [r7, #15]
        break;
 8004e7a:	e005      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e7c:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ef      	bne.n	8004e68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d160      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d111      	bne.n	8004eb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e94:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	0211      	lsls	r1, r2, #8
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	0912      	lsrs	r2, r2, #4
 8004eac:	0452      	lsls	r2, r2, #17
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	492a      	ldr	r1, [pc, #168]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
 8004eb6:	e027      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d112      	bne.n	8004ee4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ebe:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ec6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6892      	ldr	r2, [r2, #8]
 8004ece:	0211      	lsls	r1, r2, #8
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6912      	ldr	r2, [r2, #16]
 8004ed4:	0852      	lsrs	r2, r2, #1
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	0552      	lsls	r2, r2, #21
 8004eda:	430a      	orrs	r2, r1
 8004edc:	491f      	ldr	r1, [pc, #124]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
 8004ee2:	e011      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6952      	ldr	r2, [r2, #20]
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	430a      	orrs	r2, r1
 8004f02:	4916      	ldr	r1, [pc, #88]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd ffe4 	bl	8002ee0 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1c:	f7fd ffe0 	bl	8002ee0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	4904      	ldr	r1, [pc, #16]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000

08004f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f7a:	4b67      	ldr	r3, [pc, #412]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0203 	and.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10d      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f92:	4b61      	ldr	r3, [pc, #388]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d047      	beq.n	8005036 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e044      	b.n	8005036 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d018      	beq.n	8004fe6 <RCCEx_PLLSAI2_Config+0x86>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d825      	bhi.n	8005004 <RCCEx_PLLSAI2_Config+0xa4>
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d002      	beq.n	8004fc2 <RCCEx_PLLSAI2_Config+0x62>
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d009      	beq.n	8004fd4 <RCCEx_PLLSAI2_Config+0x74>
 8004fc0:	e020      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc2:	4b55      	ldr	r3, [pc, #340]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11d      	bne.n	800500a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd2:	e01a      	b.n	800500a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd4:	4b50      	ldr	r3, [pc, #320]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d116      	bne.n	800500e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe4:	e013      	b.n	800500e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe6:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff2:	4b49      	ldr	r3, [pc, #292]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005002:	e006      	b.n	8005012 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e004      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005012:	bf00      	nop
    }

    if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10d      	bne.n	8005036 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800501a:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	430b      	orrs	r3, r1
 8005030:	4939      	ldr	r1, [pc, #228]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d167      	bne.n	800510c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800503c:	4b36      	ldr	r3, [pc, #216]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a35      	ldr	r2, [pc, #212]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fd ff4a 	bl	8002ee0 <HAL_GetTick>
 800504c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800504e:	e009      	b.n	8005064 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005050:	f7fd ff46 	bl	8002ee0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d902      	bls.n	8005064 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	73fb      	strb	r3, [r7, #15]
        break;
 8005062:	e005      	b.n	8005070 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ef      	bne.n	8005050 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d14a      	bne.n	800510c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d111      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800507c:	4b26      	ldr	r3, [pc, #152]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6892      	ldr	r2, [r2, #8]
 800508c:	0211      	lsls	r1, r2, #8
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68d2      	ldr	r2, [r2, #12]
 8005092:	0912      	lsrs	r2, r2, #4
 8005094:	0452      	lsls	r2, r2, #17
 8005096:	430a      	orrs	r2, r1
 8005098:	491f      	ldr	r1, [pc, #124]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	4313      	orrs	r3, r2
 800509c:	614b      	str	r3, [r1, #20]
 800509e:	e011      	b.n	80050c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6892      	ldr	r2, [r2, #8]
 80050b0:	0211      	lsls	r1, r2, #8
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6912      	ldr	r2, [r2, #16]
 80050b6:	0852      	lsrs	r2, r2, #1
 80050b8:	3a01      	subs	r2, #1
 80050ba:	0652      	lsls	r2, r2, #25
 80050bc:	430a      	orrs	r2, r1
 80050be:	4916      	ldr	r1, [pc, #88]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a13      	ldr	r2, [pc, #76]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d0:	f7fd ff06 	bl	8002ee0 <HAL_GetTick>
 80050d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050d6:	e009      	b.n	80050ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050d8:	f7fd ff02 	bl	8002ee0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	73fb      	strb	r3, [r7, #15]
          break;
 80050ea:	e005      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ef      	beq.n	80050d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4904      	ldr	r1, [pc, #16]	; (8005118 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000

0800511c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e095      	b.n	800525a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d108      	bne.n	8005148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513e:	d009      	beq.n	8005154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	61da      	str	r2, [r3, #28]
 8005146:	e005      	b.n	8005154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd fc2e 	bl	80029d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005194:	d902      	bls.n	800519c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e002      	b.n	80051a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800519c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051aa:	d007      	beq.n	80051bc <HAL_SPI_Init+0xa0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	ea42 0103 	orr.w	r1, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	f003 0204 	and.w	r2, r3, #4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005238:	ea42 0103 	orr.w	r1, r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e040      	b.n	80052f6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fd fbe5 	bl	8002a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2224      	movs	r2, #36	; 0x24
 800528e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 ff67 	bl	800617c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fcac 	bl	8005c0c <UART_SetConfig>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e01b      	b.n	80052f6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 ffe6 	bl	80062c0 <UART_CheckIdleState>
 80052f4:	4603      	mov	r3, r0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08a      	sub	sp, #40	; 0x28
 8005302:	af02      	add	r7, sp, #8
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005314:	2b20      	cmp	r3, #32
 8005316:	f040 80b6 	bne.w	8005486 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_UART_Receive+0x28>
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0ae      	b.n	8005488 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2222      	movs	r2, #34	; 0x22
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005340:	f7fd fdce 	bl	8002ee0 <HAL_GetTick>
 8005344:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d10e      	bne.n	800537e <HAL_UART_Receive+0x80>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_UART_Receive+0x76>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800536e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005372:	e02d      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	22ff      	movs	r2, #255	; 0xff
 8005378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800537c:	e028      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <HAL_UART_Receive+0xa4>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <HAL_UART_Receive+0x9a>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005396:	e01b      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	227f      	movs	r2, #127	; 0x7f
 800539c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a0:	e016      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053aa:	d10d      	bne.n	80053c8 <HAL_UART_Receive+0xca>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <HAL_UART_Receive+0xc0>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	227f      	movs	r2, #127	; 0x7f
 80053b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053bc:	e008      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	223f      	movs	r2, #63	; 0x3f
 80053c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c6:	e003      	b.n	80053d0 <HAL_UART_Receive+0xd2>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Receive+0xf6>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053fc:	e037      	b.n	800546e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2120      	movs	r1, #32
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 f801 	bl	8006410 <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e033      	b.n	8005488 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800542c:	b29a      	uxth	r2, r3
 800542e:	8a7b      	ldrh	r3, [r7, #18]
 8005430:	4013      	ands	r3, r2
 8005432:	b29a      	uxth	r2, r3
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	3302      	adds	r3, #2
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e00d      	b.n	800545c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005446:	b29b      	uxth	r3, r3
 8005448:	b2da      	uxtb	r2, r3
 800544a:	8a7b      	ldrh	r3, [r7, #18]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4013      	ands	r3, r2
 8005450:	b2da      	uxtb	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1c1      	bne.n	80053fe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b08b      	sub	sp, #44	; 0x2c
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d147      	bne.n	8005536 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_UART_Transmit_IT+0x22>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e040      	b.n	8005538 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2221      	movs	r2, #33	; 0x21
 80054de:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d107      	bne.n	80054fa <HAL_UART_Transmit_IT+0x6a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <HAL_UART_Transmit_IT+0xb4>)
 80054f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80054f8:	e002      	b.n	8005500 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a12      	ldr	r2, [pc, #72]	; (8005548 <HAL_UART_Transmit_IT+0xb8>)
 80054fe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	61bb      	str	r3, [r7, #24]
   return(result);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e000      	b.n	8005538 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	372c      	adds	r7, #44	; 0x2c
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	08006819 	.word	0x08006819
 8005548:	08006761 	.word	0x08006761

0800554c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005560:	2b20      	cmp	r3, #32
 8005562:	d137      	bne.n	80055d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_UART_Receive_IT+0x24>
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e030      	b.n	80055d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_UART_Receive_IT+0x94>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d01f      	beq.n	80055c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	613b      	str	r3, [r7, #16]
   return(result);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	69f9      	ldr	r1, [r7, #28]
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e6      	bne.n	8005592 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 ff88 	bl	80064e0 <UART_Start_Receive_IT>
 80055d0:	4603      	mov	r3, r0
 80055d2:	e000      	b.n	80055d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40008000 	.word	0x40008000

080055e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b0ba      	sub	sp, #232	; 0xe8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800560a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800560e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005612:	4013      	ands	r3, r2
 8005614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d115      	bne.n	800564c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00f      	beq.n	800564c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800562c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d009      	beq.n	800564c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 82ae 	beq.w	8005b9e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
      }
      return;
 800564a:	e2a8      	b.n	8005b9e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800564c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8117 	beq.w	8005884 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005666:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_UART_IRQHandler+0x298>)
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 810a 	beq.w	8005884 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d011      	beq.n	80056a0 <HAL_UART_IRQHandler+0xbc>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2201      	movs	r2, #1
 800568e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d011      	beq.n	80056d0 <HAL_UART_IRQHandler+0xec>
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2202      	movs	r2, #2
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	f043 0204 	orr.w	r2, r3, #4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_UART_IRQHandler+0x11c>
 80056dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2204      	movs	r2, #4
 80056ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d017      	beq.n	800573c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2208      	movs	r2, #8
 800572a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005732:	f043 0208 	orr.w	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d012      	beq.n	800576e <HAL_UART_IRQHandler+0x18a>
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8214 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04f      	beq.n	8005866 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff50 	bl	800666c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d141      	bne.n	800585e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800580a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800581e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d9      	bne.n	80057da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582a:	2b00      	cmp	r3, #0
 800582c:	d013      	beq.n	8005856 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <HAL_UART_IRQHandler+0x29c>)
 8005834:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd fccf 	bl	80031de <HAL_DMA_Abort_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d017      	beq.n	8005876 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005850:	4610      	mov	r0, r2
 8005852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	e00f      	b.n	8005876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9c2 	bl	8005be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	e00b      	b.n	8005876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9be 	bl	8005be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	e007      	b.n	8005876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9ba 	bl	8005be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005874:	e195      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005876:	bf00      	nop
    return;
 8005878:	e193      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5be>
 800587a:	bf00      	nop
 800587c:	04000120 	.word	0x04000120
 8005880:	08006735 	.word	0x08006735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005888:	2b01      	cmp	r3, #1
 800588a:	f040 814e 	bne.w	8005b2a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8147 	beq.w	8005b2a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8140 	beq.w	8005b2a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2210      	movs	r2, #16
 80058b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	f040 80b8 	bne.w	8005a32 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8167 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f080 815f 	bcs.w	8005ba6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 8086 	bne.w	8005a10 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800592e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800593a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1da      	bne.n	8005904 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800597a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e1      	bne.n	800594e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800599a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e3      	bne.n	800598a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	f023 0310 	bic.w	r3, r3, #16
 80059e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e4      	bne.n	80059d0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fba9 	bl	8003162 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8e2 	bl	8005bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a30:	e0b9      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80ab 	beq.w	8005baa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a6 	beq.w	8005baa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
 8005a82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e4      	bne.n	8005a5e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ab8:	633a      	str	r2, [r7, #48]	; 0x30
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e3      	bne.n	8005a94 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e4      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f866 	bl	8005bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b28:	e03f      	b.n	8005baa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00e      	beq.n	8005b54 <HAL_UART_IRQHandler+0x570>
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 f8a9 	bl	8006ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b52:	e02d      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01c      	beq.n	8005bae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
    }
    return;
 8005b7c:	e017      	b.n	8005bae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d012      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fe9e 	bl	80068d8 <UART_EndTransmit_IT>
    return;
 8005b9c:	e008      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005b9e:	bf00      	nop
 8005ba0:	e006      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005ba2:	bf00      	nop
 8005ba4:	e004      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005bae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bb0:	37e8      	adds	r7, #232	; 0xe8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop

08005bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c10:	b08a      	sub	sp, #40	; 0x28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4ba4      	ldr	r3, [pc, #656]	; (8005ecc <UART_SetConfig+0x2c0>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a99      	ldr	r2, [pc, #612]	; (8005ed0 <UART_SetConfig+0x2c4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c74:	4313      	orrs	r3, r2
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a90      	ldr	r2, [pc, #576]	; (8005ed4 <UART_SetConfig+0x2c8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d126      	bne.n	8005ce4 <UART_SetConfig+0xd8>
 8005c96:	4b90      	ldr	r3, [pc, #576]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d81b      	bhi.n	8005cdc <UART_SetConfig+0xd0>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0xa0>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e116      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e112      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd2:	e10e      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e10a      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e106      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a7c      	ldr	r2, [pc, #496]	; (8005edc <UART_SetConfig+0x2d0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d138      	bne.n	8005d60 <UART_SetConfig+0x154>
 8005cee:	4b7a      	ldr	r3, [pc, #488]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d82d      	bhi.n	8005d58 <UART_SetConfig+0x14c>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0xf8>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005d59 	.word	0x08005d59
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d59 	.word	0x08005d59
 8005d1c:	08005d59 	.word	0x08005d59
 8005d20:	08005d59 	.word	0x08005d59
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d59 	.word	0x08005d59
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e0d8      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d40:	2302      	movs	r3, #2
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e0d4      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e0d0      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d56:	e0cc      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5e:	e0c8      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5e      	ldr	r2, [pc, #376]	; (8005ee0 <UART_SetConfig+0x2d4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d125      	bne.n	8005db6 <UART_SetConfig+0x1aa>
 8005d6a:	4b5b      	ldr	r3, [pc, #364]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d74:	2b30      	cmp	r3, #48	; 0x30
 8005d76:	d016      	beq.n	8005da6 <UART_SetConfig+0x19a>
 8005d78:	2b30      	cmp	r3, #48	; 0x30
 8005d7a:	d818      	bhi.n	8005dae <UART_SetConfig+0x1a2>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d00a      	beq.n	8005d96 <UART_SetConfig+0x18a>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d814      	bhi.n	8005dae <UART_SetConfig+0x1a2>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <UART_SetConfig+0x182>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d008      	beq.n	8005d9e <UART_SetConfig+0x192>
 8005d8c:	e00f      	b.n	8005dae <UART_SetConfig+0x1a2>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d94:	e0ad      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d96:	2302      	movs	r3, #2
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9c:	e0a9      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005d9e:	2304      	movs	r3, #4
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da4:	e0a5      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005da6:	2308      	movs	r3, #8
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dac:	e0a1      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005dae:	2310      	movs	r3, #16
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e09d      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4a      	ldr	r2, [pc, #296]	; (8005ee4 <UART_SetConfig+0x2d8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d125      	bne.n	8005e0c <UART_SetConfig+0x200>
 8005dc0:	4b45      	ldr	r3, [pc, #276]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dca:	2bc0      	cmp	r3, #192	; 0xc0
 8005dcc:	d016      	beq.n	8005dfc <UART_SetConfig+0x1f0>
 8005dce:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd0:	d818      	bhi.n	8005e04 <UART_SetConfig+0x1f8>
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d00a      	beq.n	8005dec <UART_SetConfig+0x1e0>
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d814      	bhi.n	8005e04 <UART_SetConfig+0x1f8>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <UART_SetConfig+0x1d8>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d008      	beq.n	8005df4 <UART_SetConfig+0x1e8>
 8005de2:	e00f      	b.n	8005e04 <UART_SetConfig+0x1f8>
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dea:	e082      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df2:	e07e      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfa:	e07a      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e02:	e076      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e072      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <UART_SetConfig+0x2dc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d12a      	bne.n	8005e6c <UART_SetConfig+0x260>
 8005e16:	4b30      	ldr	r3, [pc, #192]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e24:	d01a      	beq.n	8005e5c <UART_SetConfig+0x250>
 8005e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e2a:	d81b      	bhi.n	8005e64 <UART_SetConfig+0x258>
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e30:	d00c      	beq.n	8005e4c <UART_SetConfig+0x240>
 8005e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e36:	d815      	bhi.n	8005e64 <UART_SetConfig+0x258>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x238>
 8005e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e40:	d008      	beq.n	8005e54 <UART_SetConfig+0x248>
 8005e42:	e00f      	b.n	8005e64 <UART_SetConfig+0x258>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	e052      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e52:	e04e      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e04a      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e046      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e042      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <UART_SetConfig+0x2c4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d13a      	bne.n	8005eec <UART_SetConfig+0x2e0>
 8005e76:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <UART_SetConfig+0x2cc>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e84:	d01a      	beq.n	8005ebc <UART_SetConfig+0x2b0>
 8005e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e8a:	d81b      	bhi.n	8005ec4 <UART_SetConfig+0x2b8>
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e90:	d00c      	beq.n	8005eac <UART_SetConfig+0x2a0>
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e96:	d815      	bhi.n	8005ec4 <UART_SetConfig+0x2b8>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <UART_SetConfig+0x298>
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x2a8>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x2b8>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e022      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e01e      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e01a      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e016      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e012      	b.n	8005ef2 <UART_SetConfig+0x2e6>
 8005ecc:	efff69f3 	.word	0xefff69f3
 8005ed0:	40008000 	.word	0x40008000
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	40004800 	.word	0x40004800
 8005ee4:	40004c00 	.word	0x40004c00
 8005ee8:	40005000 	.word	0x40005000
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a9f      	ldr	r2, [pc, #636]	; (8006174 <UART_SetConfig+0x568>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d17a      	bne.n	8005ff2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d824      	bhi.n	8005f4e <UART_SetConfig+0x342>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <UART_SetConfig+0x300>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f4f 	.word	0x08005f4f
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f4f 	.word	0x08005f4f
 8005f1c:	08005f3f 	.word	0x08005f3f
 8005f20:	08005f4f 	.word	0x08005f4f
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f4f 	.word	0x08005f4f
 8005f2c:	08005f47 	.word	0x08005f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe fbac 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8005f34:	61f8      	str	r0, [r7, #28]
        break;
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f38:	4b8f      	ldr	r3, [pc, #572]	; (8006178 <UART_SetConfig+0x56c>)
 8005f3a:	61fb      	str	r3, [r7, #28]
        break;
 8005f3c:	e00d      	b.n	8005f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3e:	f7fe fb0d 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8005f42:	61f8      	str	r0, [r7, #28]
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4a:	61fb      	str	r3, [r7, #28]
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80fb 	beq.w	8006158 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d305      	bcc.n	8005f7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d903      	bls.n	8005f86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f84:	e0e8      	b.n	8006158 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	461c      	mov	r4, r3
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	022b      	lsls	r3, r5, #8
 8005f98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f9c:	0222      	lsls	r2, r4, #8
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6849      	ldr	r1, [r1, #4]
 8005fa2:	0849      	lsrs	r1, r1, #1
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	4688      	mov	r8, r1
 8005fa8:	4681      	mov	r9, r0
 8005faa:	eb12 0a08 	adds.w	sl, r2, r8
 8005fae:	eb43 0b09 	adc.w	fp, r3, r9
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fe70 	bl	8000ca8 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd6:	d308      	bcc.n	8005fea <UART_SetConfig+0x3de>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fde:	d204      	bcs.n	8005fea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e0b6      	b.n	8006158 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ff0:	e0b2      	b.n	8006158 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffa:	d15e      	bne.n	80060ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006000:	2b08      	cmp	r3, #8
 8006002:	d828      	bhi.n	8006056 <UART_SetConfig+0x44a>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x400>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006031 	.word	0x08006031
 8006010:	08006039 	.word	0x08006039
 8006014:	08006041 	.word	0x08006041
 8006018:	08006057 	.word	0x08006057
 800601c:	08006047 	.word	0x08006047
 8006020:	08006057 	.word	0x08006057
 8006024:	08006057 	.word	0x08006057
 8006028:	08006057 	.word	0x08006057
 800602c:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006030:	f7fe fb2c 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8006034:	61f8      	str	r0, [r7, #28]
        break;
 8006036:	e014      	b.n	8006062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006038:	f7fe fb3e 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 800603c:	61f8      	str	r0, [r7, #28]
        break;
 800603e:	e010      	b.n	8006062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006040:	4b4d      	ldr	r3, [pc, #308]	; (8006178 <UART_SetConfig+0x56c>)
 8006042:	61fb      	str	r3, [r7, #28]
        break;
 8006044:	e00d      	b.n	8006062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7fe fa89 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800604a:	61f8      	str	r0, [r7, #28]
        break;
 800604c:	e009      	b.n	8006062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006052:	61fb      	str	r3, [r7, #28]
        break;
 8006054:	e005      	b.n	8006062 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d077      	beq.n	8006158 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005a      	lsls	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b0f      	cmp	r3, #15
 8006082:	d916      	bls.n	80060b2 <UART_SetConfig+0x4a6>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608a:	d212      	bcs.n	80060b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f023 030f 	bic.w	r3, r3, #15
 8006094:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	8afb      	ldrh	r3, [r7, #22]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	8afa      	ldrh	r2, [r7, #22]
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	e052      	b.n	8006158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060b8:	e04e      	b.n	8006158 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d827      	bhi.n	8006112 <UART_SetConfig+0x506>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x4bc>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006113 	.word	0x08006113
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006113 	.word	0x08006113
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
 80060e8:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe face 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 80060f0:	61f8      	str	r0, [r7, #28]
        break;
 80060f2:	e014      	b.n	800611e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe fae0 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80060f8:	61f8      	str	r0, [r7, #28]
        break;
 80060fa:	e010      	b.n	800611e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <UART_SetConfig+0x56c>)
 80060fe:	61fb      	str	r3, [r7, #28]
        break;
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fe fa2b 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8006106:	61f8      	str	r0, [r7, #28]
        break;
 8006108:	e009      	b.n	800611e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610e:	61fb      	str	r3, [r7, #28]
        break;
 8006110:	e005      	b.n	800611e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800611c:	bf00      	nop
    }

    if (pclk != 0U)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d019      	beq.n	8006158 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	085a      	lsrs	r2, r3, #1
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	441a      	add	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b0f      	cmp	r3, #15
 800613c:	d909      	bls.n	8006152 <UART_SetConfig+0x546>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006144:	d205      	bcs.n	8006152 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	e002      	b.n	8006158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006164:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006168:	4618      	mov	r0, r3
 800616a:	3728      	adds	r7, #40	; 0x28
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006172:	bf00      	nop
 8006174:	40008000 	.word	0x40008000
 8006178:	00f42400 	.word	0x00f42400

0800617c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01a      	beq.n	8006292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627a:	d10a      	bne.n	8006292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b098      	sub	sp, #96	; 0x60
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d0:	f7fc fe06 	bl	8002ee0 <HAL_GetTick>
 80062d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d12e      	bne.n	8006342 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ec:	2200      	movs	r2, #0
 80062ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f88c 	bl	8006410 <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d021      	beq.n	8006342 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006312:	653b      	str	r3, [r7, #80]	; 0x50
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631c:	647b      	str	r3, [r7, #68]	; 0x44
 800631e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800632a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e6      	bne.n	80062fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e062      	b.n	8006408 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d149      	bne.n	80063e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f856 	bl	8006410 <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d03c      	beq.n	80063e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	623b      	str	r3, [r7, #32]
   return(result);
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
 800638a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800638e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3308      	adds	r3, #8
 80063ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063bc:	61fa      	str	r2, [r7, #28]
 80063be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	69b9      	ldr	r1, [r7, #24]
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e011      	b.n	8006408 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3758      	adds	r7, #88	; 0x58
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006420:	e049      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d045      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7fc fd59 	bl	8002ee0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <UART_WaitOnFlagUntilTimeout+0x30>
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e048      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	d031      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b08      	cmp	r3, #8
 800645e:	d110      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f8ff 	bl	800666c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2208      	movs	r2, #8
 8006472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e029      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006490:	d111      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800649a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f8e5 	bl	800666c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e00f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0a6      	beq.n	8006422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b097      	sub	sp, #92	; 0x5c
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d10e      	bne.n	8006532 <UART_Start_Receive_IT+0x52>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <UART_Start_Receive_IT+0x48>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006526:	e02d      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006530:	e028      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <UART_Start_Receive_IT+0x76>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <UART_Start_Receive_IT+0x6c>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800654a:	e01b      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	227f      	movs	r2, #127	; 0x7f
 8006550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006554:	e016      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655e:	d10d      	bne.n	800657c <UART_Start_Receive_IT+0x9c>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <UART_Start_Receive_IT+0x92>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	227f      	movs	r2, #127	; 0x7f
 800656c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006570:	e008      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	223f      	movs	r2, #63	; 0x3f
 8006576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800657a:	e003      	b.n	8006584 <UART_Start_Receive_IT+0xa4>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2222      	movs	r2, #34	; 0x22
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80065b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d107      	bne.n	80065e2 <UART_Start_Receive_IT+0x102>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a21      	ldr	r2, [pc, #132]	; (8006664 <UART_Start_Receive_IT+0x184>)
 80065de:	669a      	str	r2, [r3, #104]	; 0x68
 80065e0:	e002      	b.n	80065e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <UART_Start_Receive_IT+0x188>)
 80065e6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d019      	beq.n	8006624 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
 8006610:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_Start_Receive_IT+0x110>
 8006622:	e018      	b.n	8006656 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f043 0320 	orr.w	r3, r3, #32
 8006638:	653b      	str	r3, [r7, #80]	; 0x50
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	69f9      	ldr	r1, [r7, #28]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e6      	bne.n	8006624 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	375c      	adds	r7, #92	; 0x5c
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	08006ae9 	.word	0x08006ae9
 8006668:	0800692d 	.word	0x0800692d

0800666c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b095      	sub	sp, #84	; 0x54
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
 8006694:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e5      	bne.n	80066a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d118      	bne.n	8006714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	647b      	str	r3, [r7, #68]	; 0x44
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e6      	bne.n	80066e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006728:	bf00      	nop
 800672a:	3754      	adds	r7, #84	; 0x54
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fa44 	bl	8005be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b08f      	sub	sp, #60	; 0x3c
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676c:	2b21      	cmp	r3, #33	; 0x21
 800676e:	d14d      	bne.n	800680c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d132      	bne.n	80067e2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	61fb      	str	r3, [r7, #28]
   return(result);
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e6      	bne.n	800677c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6979      	ldr	r1, [r7, #20]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	613b      	str	r3, [r7, #16]
   return(result);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80067e0:	e014      	b.n	800680c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	b292      	uxth	r2, r2
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800680c:	bf00      	nop
 800680e:	373c      	adds	r7, #60	; 0x3c
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b091      	sub	sp, #68	; 0x44
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006824:	2b21      	cmp	r3, #33	; 0x21
 8006826:	d151      	bne.n	80068cc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d132      	bne.n	800689a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	623b      	str	r3, [r7, #32]
   return(result);
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006848:	63bb      	str	r3, [r7, #56]	; 0x38
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
 8006854:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e6      	bne.n	8006834 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60fb      	str	r3, [r7, #12]
   return(result);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006898:	e018      	b.n	80068cc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80068a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	b292      	uxth	r2, r2
 80068ae:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80068cc:	bf00      	nop
 80068ce:	3744      	adds	r7, #68	; 0x44
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6979      	ldr	r1, [r7, #20]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	613b      	str	r3, [r7, #16]
   return(result);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e6      	bne.n	80068e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff f94a 	bl	8005bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006924:	bf00      	nop
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b09c      	sub	sp, #112	; 0x70
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800693a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006944:	2b22      	cmp	r3, #34	; 0x22
 8006946:	f040 80be 	bne.w	8006ac6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006950:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006954:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006958:	b2d9      	uxtb	r1, r3
 800695a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800695e:	b2da      	uxtb	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	400a      	ands	r2, r1
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80a3 	bne.w	8006ada <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	667b      	str	r3, [r7, #100]	; 0x64
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069e6:	647a      	str	r2, [r7, #68]	; 0x44
 80069e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <UART_RxISR_8BIT+0x1b8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01f      	beq.n	8006a58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d018      	beq.n	8006a58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	623b      	str	r3, [r7, #32]
   return(result);
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
 8006a46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d12e      	bne.n	8006abe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0310 	bic.w	r3, r3, #16
 8006a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	69b9      	ldr	r1, [r7, #24]
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	617b      	str	r3, [r7, #20]
   return(result);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e6      	bne.n	8006a66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d103      	bne.n	8006aae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff f89c 	bl	8005bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006abc:	e00d      	b.n	8006ada <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff f884 	bl	8005bcc <HAL_UART_RxCpltCallback>
}
 8006ac4:	e009      	b.n	8006ada <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	8b1b      	ldrh	r3, [r3, #24]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	831a      	strh	r2, [r3, #24]
}
 8006ada:	bf00      	nop
 8006adc:	3770      	adds	r7, #112	; 0x70
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40008000 	.word	0x40008000

08006ae8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b09c      	sub	sp, #112	; 0x70
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	2b22      	cmp	r3, #34	; 0x22
 8006b02:	f040 80be 	bne.w	8006c82 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	1c9a      	adds	r2, r3, #2
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 80a3 	bne.w	8006c96 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b64:	667b      	str	r3, [r7, #100]	; 0x64
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b70:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e6      	bne.n	8006b50 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ba2:	643a      	str	r2, [r7, #64]	; 0x40
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a34      	ldr	r2, [pc, #208]	; (8006ca0 <UART_RxISR_16BIT+0x1b8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d01f      	beq.n	8006c14 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d018      	beq.n	8006c14 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c02:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d12e      	bne.n	8006c7a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d103      	bne.n	8006c6a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe ffbe 	bl	8005bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c78:	e00d      	b.n	8006c96 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe ffa6 	bl	8005bcc <HAL_UART_RxCpltCallback>
}
 8006c80:	e009      	b.n	8006c96 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	8b1b      	ldrh	r3, [r3, #24]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	b292      	uxth	r2, r2
 8006c94:	831a      	strh	r2, [r3, #24]
}
 8006c96:	bf00      	nop
 8006c98:	3770      	adds	r7, #112	; 0x70
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40008000 	.word	0x40008000

08006ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <atof>:
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f000 be17 	b.w	80078ec <strtod>

08006cbe <atoi>:
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	f000 bea3 	b.w	8007a0c <strtol>

08006cc6 <sulp>:
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	ec45 4b10 	vmov	d0, r4, r5
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	f003 fef9 	bl	800aac8 <__ulp>
 8006cd6:	ec51 0b10 	vmov	r0, r1, d0
 8006cda:	b17e      	cbz	r6, 8006cfc <sulp+0x36>
 8006cdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ce0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dd09      	ble.n	8006cfc <sulp+0x36>
 8006ce8:	051b      	lsls	r3, r3, #20
 8006cea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cee:	2400      	movs	r4, #0
 8006cf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	f7f9 fc8e 	bl	8000618 <__aeabi_dmul>
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	ed2d 8b02 	vpush	{d8}
 8006d08:	b09b      	sub	sp, #108	; 0x6c
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d0e:	2200      	movs	r2, #0
 8006d10:	9216      	str	r2, [sp, #88]	; 0x58
 8006d12:	460d      	mov	r5, r1
 8006d14:	f04f 0800 	mov.w	r8, #0
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	460a      	mov	r2, r1
 8006d1e:	9215      	str	r2, [sp, #84]	; 0x54
 8006d20:	7811      	ldrb	r1, [r2, #0]
 8006d22:	292b      	cmp	r1, #43	; 0x2b
 8006d24:	d04c      	beq.n	8006dc0 <_strtod_l+0xc0>
 8006d26:	d83a      	bhi.n	8006d9e <_strtod_l+0x9e>
 8006d28:	290d      	cmp	r1, #13
 8006d2a:	d834      	bhi.n	8006d96 <_strtod_l+0x96>
 8006d2c:	2908      	cmp	r1, #8
 8006d2e:	d834      	bhi.n	8006d9a <_strtod_l+0x9a>
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d03d      	beq.n	8006db0 <_strtod_l+0xb0>
 8006d34:	2200      	movs	r2, #0
 8006d36:	920a      	str	r2, [sp, #40]	; 0x28
 8006d38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d3a:	7832      	ldrb	r2, [r6, #0]
 8006d3c:	2a30      	cmp	r2, #48	; 0x30
 8006d3e:	f040 80b4 	bne.w	8006eaa <_strtod_l+0x1aa>
 8006d42:	7872      	ldrb	r2, [r6, #1]
 8006d44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006d48:	2a58      	cmp	r2, #88	; 0x58
 8006d4a:	d170      	bne.n	8006e2e <_strtod_l+0x12e>
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	ab16      	add	r3, sp, #88	; 0x58
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4a8e      	ldr	r2, [pc, #568]	; (8006f90 <_strtod_l+0x290>)
 8006d58:	ab17      	add	r3, sp, #92	; 0x5c
 8006d5a:	a915      	add	r1, sp, #84	; 0x54
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f002 ff91 	bl	8009c84 <__gethex>
 8006d62:	f010 070f 	ands.w	r7, r0, #15
 8006d66:	4605      	mov	r5, r0
 8006d68:	d005      	beq.n	8006d76 <_strtod_l+0x76>
 8006d6a:	2f06      	cmp	r7, #6
 8006d6c:	d12a      	bne.n	8006dc4 <_strtod_l+0xc4>
 8006d6e:	3601      	adds	r6, #1
 8006d70:	2300      	movs	r3, #0
 8006d72:	9615      	str	r6, [sp, #84]	; 0x54
 8006d74:	930a      	str	r3, [sp, #40]	; 0x28
 8006d76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 857f 	bne.w	800787c <_strtod_l+0xb7c>
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d80:	b1db      	cbz	r3, 8006dba <_strtod_l+0xba>
 8006d82:	4642      	mov	r2, r8
 8006d84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d88:	ec43 2b10 	vmov	d0, r2, r3
 8006d8c:	b01b      	add	sp, #108	; 0x6c
 8006d8e:	ecbd 8b02 	vpop	{d8}
 8006d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d96:	2920      	cmp	r1, #32
 8006d98:	d1cc      	bne.n	8006d34 <_strtod_l+0x34>
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	e7bf      	b.n	8006d1e <_strtod_l+0x1e>
 8006d9e:	292d      	cmp	r1, #45	; 0x2d
 8006da0:	d1c8      	bne.n	8006d34 <_strtod_l+0x34>
 8006da2:	2101      	movs	r1, #1
 8006da4:	910a      	str	r1, [sp, #40]	; 0x28
 8006da6:	1c51      	adds	r1, r2, #1
 8006da8:	9115      	str	r1, [sp, #84]	; 0x54
 8006daa:	7852      	ldrb	r2, [r2, #1]
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d1c3      	bne.n	8006d38 <_strtod_l+0x38>
 8006db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db2:	9515      	str	r5, [sp, #84]	; 0x54
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 855f 	bne.w	8007878 <_strtod_l+0xb78>
 8006dba:	4642      	mov	r2, r8
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	e7e3      	b.n	8006d88 <_strtod_l+0x88>
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	e7ef      	b.n	8006da4 <_strtod_l+0xa4>
 8006dc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006dc6:	b13a      	cbz	r2, 8006dd8 <_strtod_l+0xd8>
 8006dc8:	2135      	movs	r1, #53	; 0x35
 8006dca:	a818      	add	r0, sp, #96	; 0x60
 8006dcc:	f003 ff79 	bl	800acc2 <__copybits>
 8006dd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f003 fb4c 	bl	800a470 <_Bfree>
 8006dd8:	3f01      	subs	r7, #1
 8006dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ddc:	2f04      	cmp	r7, #4
 8006dde:	d806      	bhi.n	8006dee <_strtod_l+0xee>
 8006de0:	e8df f007 	tbb	[pc, r7]
 8006de4:	201d0314 	.word	0x201d0314
 8006de8:	14          	.byte	0x14
 8006de9:	00          	.byte	0x00
 8006dea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006dee:	05e9      	lsls	r1, r5, #23
 8006df0:	bf48      	it	mi
 8006df2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dfa:	0d1b      	lsrs	r3, r3, #20
 8006dfc:	051b      	lsls	r3, r3, #20
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1b9      	bne.n	8006d76 <_strtod_l+0x76>
 8006e02:	f001 ffa1 	bl	8008d48 <__errno>
 8006e06:	2322      	movs	r3, #34	; 0x22
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	e7b4      	b.n	8006d76 <_strtod_l+0x76>
 8006e0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006e10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e1c:	e7e7      	b.n	8006dee <_strtod_l+0xee>
 8006e1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f98 <_strtod_l+0x298>
 8006e22:	e7e4      	b.n	8006dee <_strtod_l+0xee>
 8006e24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e28:	f04f 38ff 	mov.w	r8, #4294967295
 8006e2c:	e7df      	b.n	8006dee <_strtod_l+0xee>
 8006e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	9215      	str	r2, [sp, #84]	; 0x54
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b30      	cmp	r3, #48	; 0x30
 8006e38:	d0f9      	beq.n	8006e2e <_strtod_l+0x12e>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d09b      	beq.n	8006d76 <_strtod_l+0x76>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f04f 0a00 	mov.w	sl, #0
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006e4e:	46d3      	mov	fp, sl
 8006e50:	220a      	movs	r2, #10
 8006e52:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006e54:	7806      	ldrb	r6, [r0, #0]
 8006e56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e5a:	b2d9      	uxtb	r1, r3
 8006e5c:	2909      	cmp	r1, #9
 8006e5e:	d926      	bls.n	8006eae <_strtod_l+0x1ae>
 8006e60:	494c      	ldr	r1, [pc, #304]	; (8006f94 <_strtod_l+0x294>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	f001 fe8f 	bl	8008b86 <strncmp>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d030      	beq.n	8006ece <_strtod_l+0x1ce>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4632      	mov	r2, r6
 8006e70:	9005      	str	r0, [sp, #20]
 8006e72:	465e      	mov	r6, fp
 8006e74:	4603      	mov	r3, r0
 8006e76:	2a65      	cmp	r2, #101	; 0x65
 8006e78:	d001      	beq.n	8006e7e <_strtod_l+0x17e>
 8006e7a:	2a45      	cmp	r2, #69	; 0x45
 8006e7c:	d113      	bne.n	8006ea6 <_strtod_l+0x1a6>
 8006e7e:	b91e      	cbnz	r6, 8006e88 <_strtod_l+0x188>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	4302      	orrs	r2, r0
 8006e84:	d094      	beq.n	8006db0 <_strtod_l+0xb0>
 8006e86:	2600      	movs	r6, #0
 8006e88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006e8a:	1c6a      	adds	r2, r5, #1
 8006e8c:	9215      	str	r2, [sp, #84]	; 0x54
 8006e8e:	786a      	ldrb	r2, [r5, #1]
 8006e90:	2a2b      	cmp	r2, #43	; 0x2b
 8006e92:	d074      	beq.n	8006f7e <_strtod_l+0x27e>
 8006e94:	2a2d      	cmp	r2, #45	; 0x2d
 8006e96:	d078      	beq.n	8006f8a <_strtod_l+0x28a>
 8006e98:	f04f 0c00 	mov.w	ip, #0
 8006e9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ea0:	2909      	cmp	r1, #9
 8006ea2:	d97f      	bls.n	8006fa4 <_strtod_l+0x2a4>
 8006ea4:	9515      	str	r5, [sp, #84]	; 0x54
 8006ea6:	2700      	movs	r7, #0
 8006ea8:	e09e      	b.n	8006fe8 <_strtod_l+0x2e8>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e7c8      	b.n	8006e40 <_strtod_l+0x140>
 8006eae:	f1bb 0f08 	cmp.w	fp, #8
 8006eb2:	bfd8      	it	le
 8006eb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006eb6:	f100 0001 	add.w	r0, r0, #1
 8006eba:	bfda      	itte	le
 8006ebc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ec0:	9309      	strle	r3, [sp, #36]	; 0x24
 8006ec2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006ec6:	f10b 0b01 	add.w	fp, fp, #1
 8006eca:	9015      	str	r0, [sp, #84]	; 0x54
 8006ecc:	e7c1      	b.n	8006e52 <_strtod_l+0x152>
 8006ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	9215      	str	r2, [sp, #84]	; 0x54
 8006ed4:	785a      	ldrb	r2, [r3, #1]
 8006ed6:	f1bb 0f00 	cmp.w	fp, #0
 8006eda:	d037      	beq.n	8006f4c <_strtod_l+0x24c>
 8006edc:	9005      	str	r0, [sp, #20]
 8006ede:	465e      	mov	r6, fp
 8006ee0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ee4:	2b09      	cmp	r3, #9
 8006ee6:	d912      	bls.n	8006f0e <_strtod_l+0x20e>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7c4      	b.n	8006e76 <_strtod_l+0x176>
 8006eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	9215      	str	r2, [sp, #84]	; 0x54
 8006ef2:	785a      	ldrb	r2, [r3, #1]
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	2a30      	cmp	r2, #48	; 0x30
 8006ef8:	d0f8      	beq.n	8006eec <_strtod_l+0x1ec>
 8006efa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	f200 84c1 	bhi.w	8007886 <_strtod_l+0xb86>
 8006f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f06:	9005      	str	r0, [sp, #20]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	3a30      	subs	r2, #48	; 0x30
 8006f10:	f100 0301 	add.w	r3, r0, #1
 8006f14:	d014      	beq.n	8006f40 <_strtod_l+0x240>
 8006f16:	9905      	ldr	r1, [sp, #20]
 8006f18:	4419      	add	r1, r3
 8006f1a:	9105      	str	r1, [sp, #20]
 8006f1c:	4633      	mov	r3, r6
 8006f1e:	eb00 0c06 	add.w	ip, r0, r6
 8006f22:	210a      	movs	r1, #10
 8006f24:	4563      	cmp	r3, ip
 8006f26:	d113      	bne.n	8006f50 <_strtod_l+0x250>
 8006f28:	1833      	adds	r3, r6, r0
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	f106 0601 	add.w	r6, r6, #1
 8006f30:	4406      	add	r6, r0
 8006f32:	dc1a      	bgt.n	8006f6a <_strtod_l+0x26a>
 8006f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f36:	230a      	movs	r3, #10
 8006f38:	fb03 2301 	mla	r3, r3, r1, r2
 8006f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f42:	1c51      	adds	r1, r2, #1
 8006f44:	9115      	str	r1, [sp, #84]	; 0x54
 8006f46:	7852      	ldrb	r2, [r2, #1]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	e7c9      	b.n	8006ee0 <_strtod_l+0x1e0>
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	e7d2      	b.n	8006ef6 <_strtod_l+0x1f6>
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	f103 0301 	add.w	r3, r3, #1
 8006f56:	dc03      	bgt.n	8006f60 <_strtod_l+0x260>
 8006f58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f5a:	434f      	muls	r7, r1
 8006f5c:	9709      	str	r7, [sp, #36]	; 0x24
 8006f5e:	e7e1      	b.n	8006f24 <_strtod_l+0x224>
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	bfd8      	it	le
 8006f64:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006f68:	e7dc      	b.n	8006f24 <_strtod_l+0x224>
 8006f6a:	2e10      	cmp	r6, #16
 8006f6c:	bfdc      	itt	le
 8006f6e:	230a      	movle	r3, #10
 8006f70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006f74:	e7e3      	b.n	8006f3e <_strtod_l+0x23e>
 8006f76:	2300      	movs	r3, #0
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e780      	b.n	8006e80 <_strtod_l+0x180>
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	1caa      	adds	r2, r5, #2
 8006f84:	9215      	str	r2, [sp, #84]	; 0x54
 8006f86:	78aa      	ldrb	r2, [r5, #2]
 8006f88:	e788      	b.n	8006e9c <_strtod_l+0x19c>
 8006f8a:	f04f 0c01 	mov.w	ip, #1
 8006f8e:	e7f8      	b.n	8006f82 <_strtod_l+0x282>
 8006f90:	0800bd10 	.word	0x0800bd10
 8006f94:	0800bd0c 	.word	0x0800bd0c
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f9e:	1c51      	adds	r1, r2, #1
 8006fa0:	9115      	str	r1, [sp, #84]	; 0x54
 8006fa2:	7852      	ldrb	r2, [r2, #1]
 8006fa4:	2a30      	cmp	r2, #48	; 0x30
 8006fa6:	d0f9      	beq.n	8006f9c <_strtod_l+0x29c>
 8006fa8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fac:	2908      	cmp	r1, #8
 8006fae:	f63f af7a 	bhi.w	8006ea6 <_strtod_l+0x1a6>
 8006fb2:	3a30      	subs	r2, #48	; 0x30
 8006fb4:	9208      	str	r2, [sp, #32]
 8006fb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fb8:	920c      	str	r2, [sp, #48]	; 0x30
 8006fba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fbc:	1c57      	adds	r7, r2, #1
 8006fbe:	9715      	str	r7, [sp, #84]	; 0x54
 8006fc0:	7852      	ldrb	r2, [r2, #1]
 8006fc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fc6:	f1be 0f09 	cmp.w	lr, #9
 8006fca:	d938      	bls.n	800703e <_strtod_l+0x33e>
 8006fcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fce:	1a7f      	subs	r7, r7, r1
 8006fd0:	2f08      	cmp	r7, #8
 8006fd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006fd6:	dc03      	bgt.n	8006fe0 <_strtod_l+0x2e0>
 8006fd8:	9908      	ldr	r1, [sp, #32]
 8006fda:	428f      	cmp	r7, r1
 8006fdc:	bfa8      	it	ge
 8006fde:	460f      	movge	r7, r1
 8006fe0:	f1bc 0f00 	cmp.w	ip, #0
 8006fe4:	d000      	beq.n	8006fe8 <_strtod_l+0x2e8>
 8006fe6:	427f      	negs	r7, r7
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d14f      	bne.n	800708c <_strtod_l+0x38c>
 8006fec:	9904      	ldr	r1, [sp, #16]
 8006fee:	4301      	orrs	r1, r0
 8006ff0:	f47f aec1 	bne.w	8006d76 <_strtod_l+0x76>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f aedb 	bne.w	8006db0 <_strtod_l+0xb0>
 8006ffa:	2a69      	cmp	r2, #105	; 0x69
 8006ffc:	d029      	beq.n	8007052 <_strtod_l+0x352>
 8006ffe:	dc26      	bgt.n	800704e <_strtod_l+0x34e>
 8007000:	2a49      	cmp	r2, #73	; 0x49
 8007002:	d026      	beq.n	8007052 <_strtod_l+0x352>
 8007004:	2a4e      	cmp	r2, #78	; 0x4e
 8007006:	f47f aed3 	bne.w	8006db0 <_strtod_l+0xb0>
 800700a:	499b      	ldr	r1, [pc, #620]	; (8007278 <_strtod_l+0x578>)
 800700c:	a815      	add	r0, sp, #84	; 0x54
 800700e:	f003 f879 	bl	800a104 <__match>
 8007012:	2800      	cmp	r0, #0
 8007014:	f43f aecc 	beq.w	8006db0 <_strtod_l+0xb0>
 8007018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b28      	cmp	r3, #40	; 0x28
 800701e:	d12f      	bne.n	8007080 <_strtod_l+0x380>
 8007020:	4996      	ldr	r1, [pc, #600]	; (800727c <_strtod_l+0x57c>)
 8007022:	aa18      	add	r2, sp, #96	; 0x60
 8007024:	a815      	add	r0, sp, #84	; 0x54
 8007026:	f003 f881 	bl	800a12c <__hexnan>
 800702a:	2805      	cmp	r0, #5
 800702c:	d128      	bne.n	8007080 <_strtod_l+0x380>
 800702e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007034:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007038:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800703c:	e69b      	b.n	8006d76 <_strtod_l+0x76>
 800703e:	9f08      	ldr	r7, [sp, #32]
 8007040:	210a      	movs	r1, #10
 8007042:	fb01 2107 	mla	r1, r1, r7, r2
 8007046:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800704a:	9208      	str	r2, [sp, #32]
 800704c:	e7b5      	b.n	8006fba <_strtod_l+0x2ba>
 800704e:	2a6e      	cmp	r2, #110	; 0x6e
 8007050:	e7d9      	b.n	8007006 <_strtod_l+0x306>
 8007052:	498b      	ldr	r1, [pc, #556]	; (8007280 <_strtod_l+0x580>)
 8007054:	a815      	add	r0, sp, #84	; 0x54
 8007056:	f003 f855 	bl	800a104 <__match>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aea8 	beq.w	8006db0 <_strtod_l+0xb0>
 8007060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007062:	4988      	ldr	r1, [pc, #544]	; (8007284 <_strtod_l+0x584>)
 8007064:	3b01      	subs	r3, #1
 8007066:	a815      	add	r0, sp, #84	; 0x54
 8007068:	9315      	str	r3, [sp, #84]	; 0x54
 800706a:	f003 f84b 	bl	800a104 <__match>
 800706e:	b910      	cbnz	r0, 8007076 <_strtod_l+0x376>
 8007070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007072:	3301      	adds	r3, #1
 8007074:	9315      	str	r3, [sp, #84]	; 0x54
 8007076:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007294 <_strtod_l+0x594>
 800707a:	f04f 0800 	mov.w	r8, #0
 800707e:	e67a      	b.n	8006d76 <_strtod_l+0x76>
 8007080:	4881      	ldr	r0, [pc, #516]	; (8007288 <_strtod_l+0x588>)
 8007082:	f001 fea5 	bl	8008dd0 <nan>
 8007086:	ec59 8b10 	vmov	r8, r9, d0
 800708a:	e674      	b.n	8006d76 <_strtod_l+0x76>
 800708c:	9b05      	ldr	r3, [sp, #20]
 800708e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007090:	1afb      	subs	r3, r7, r3
 8007092:	f1bb 0f00 	cmp.w	fp, #0
 8007096:	bf08      	it	eq
 8007098:	46b3      	moveq	fp, r6
 800709a:	2e10      	cmp	r6, #16
 800709c:	9308      	str	r3, [sp, #32]
 800709e:	4635      	mov	r5, r6
 80070a0:	bfa8      	it	ge
 80070a2:	2510      	movge	r5, #16
 80070a4:	f7f9 fa3e 	bl	8000524 <__aeabi_ui2d>
 80070a8:	2e09      	cmp	r6, #9
 80070aa:	4680      	mov	r8, r0
 80070ac:	4689      	mov	r9, r1
 80070ae:	dd13      	ble.n	80070d8 <_strtod_l+0x3d8>
 80070b0:	4b76      	ldr	r3, [pc, #472]	; (800728c <_strtod_l+0x58c>)
 80070b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80070b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070ba:	f7f9 faad 	bl	8000618 <__aeabi_dmul>
 80070be:	4680      	mov	r8, r0
 80070c0:	4650      	mov	r0, sl
 80070c2:	4689      	mov	r9, r1
 80070c4:	f7f9 fa2e 	bl	8000524 <__aeabi_ui2d>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 f8ec 	bl	80002ac <__adddf3>
 80070d4:	4680      	mov	r8, r0
 80070d6:	4689      	mov	r9, r1
 80070d8:	2e0f      	cmp	r6, #15
 80070da:	dc38      	bgt.n	800714e <_strtod_l+0x44e>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f43f ae49 	beq.w	8006d76 <_strtod_l+0x76>
 80070e4:	dd24      	ble.n	8007130 <_strtod_l+0x430>
 80070e6:	2b16      	cmp	r3, #22
 80070e8:	dc0b      	bgt.n	8007102 <_strtod_l+0x402>
 80070ea:	4968      	ldr	r1, [pc, #416]	; (800728c <_strtod_l+0x58c>)
 80070ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	f7f9 fa8e 	bl	8000618 <__aeabi_dmul>
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	e639      	b.n	8006d76 <_strtod_l+0x76>
 8007102:	9a08      	ldr	r2, [sp, #32]
 8007104:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007108:	4293      	cmp	r3, r2
 800710a:	db20      	blt.n	800714e <_strtod_l+0x44e>
 800710c:	4c5f      	ldr	r4, [pc, #380]	; (800728c <_strtod_l+0x58c>)
 800710e:	f1c6 060f 	rsb	r6, r6, #15
 8007112:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800711e:	f7f9 fa7b 	bl	8000618 <__aeabi_dmul>
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	1b9e      	subs	r6, r3, r6
 8007126:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800712a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800712e:	e7e3      	b.n	80070f8 <_strtod_l+0x3f8>
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	3316      	adds	r3, #22
 8007134:	db0b      	blt.n	800714e <_strtod_l+0x44e>
 8007136:	9b05      	ldr	r3, [sp, #20]
 8007138:	1bdf      	subs	r7, r3, r7
 800713a:	4b54      	ldr	r3, [pc, #336]	; (800728c <_strtod_l+0x58c>)
 800713c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f7f9 fb90 	bl	800086c <__aeabi_ddiv>
 800714c:	e7d6      	b.n	80070fc <_strtod_l+0x3fc>
 800714e:	9b08      	ldr	r3, [sp, #32]
 8007150:	1b75      	subs	r5, r6, r5
 8007152:	441d      	add	r5, r3
 8007154:	2d00      	cmp	r5, #0
 8007156:	dd70      	ble.n	800723a <_strtod_l+0x53a>
 8007158:	f015 030f 	ands.w	r3, r5, #15
 800715c:	d00a      	beq.n	8007174 <_strtod_l+0x474>
 800715e:	494b      	ldr	r1, [pc, #300]	; (800728c <_strtod_l+0x58c>)
 8007160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800716c:	f7f9 fa54 	bl	8000618 <__aeabi_dmul>
 8007170:	4680      	mov	r8, r0
 8007172:	4689      	mov	r9, r1
 8007174:	f035 050f 	bics.w	r5, r5, #15
 8007178:	d04d      	beq.n	8007216 <_strtod_l+0x516>
 800717a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800717e:	dd22      	ble.n	80071c6 <_strtod_l+0x4c6>
 8007180:	2500      	movs	r5, #0
 8007182:	46ab      	mov	fp, r5
 8007184:	9509      	str	r5, [sp, #36]	; 0x24
 8007186:	9505      	str	r5, [sp, #20]
 8007188:	2322      	movs	r3, #34	; 0x22
 800718a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007294 <_strtod_l+0x594>
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	f04f 0800 	mov.w	r8, #0
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	f43f aded 	beq.w	8006d76 <_strtod_l+0x76>
 800719c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800719e:	4620      	mov	r0, r4
 80071a0:	f003 f966 	bl	800a470 <_Bfree>
 80071a4:	9905      	ldr	r1, [sp, #20]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f003 f962 	bl	800a470 <_Bfree>
 80071ac:	4659      	mov	r1, fp
 80071ae:	4620      	mov	r0, r4
 80071b0:	f003 f95e 	bl	800a470 <_Bfree>
 80071b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b6:	4620      	mov	r0, r4
 80071b8:	f003 f95a 	bl	800a470 <_Bfree>
 80071bc:	4629      	mov	r1, r5
 80071be:	4620      	mov	r0, r4
 80071c0:	f003 f956 	bl	800a470 <_Bfree>
 80071c4:	e5d7      	b.n	8006d76 <_strtod_l+0x76>
 80071c6:	4b32      	ldr	r3, [pc, #200]	; (8007290 <_strtod_l+0x590>)
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	2300      	movs	r3, #0
 80071cc:	112d      	asrs	r5, r5, #4
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	469a      	mov	sl, r3
 80071d4:	2d01      	cmp	r5, #1
 80071d6:	dc21      	bgt.n	800721c <_strtod_l+0x51c>
 80071d8:	b10b      	cbz	r3, 80071de <_strtod_l+0x4de>
 80071da:	4680      	mov	r8, r0
 80071dc:	4689      	mov	r9, r1
 80071de:	492c      	ldr	r1, [pc, #176]	; (8007290 <_strtod_l+0x590>)
 80071e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80071e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f0:	f7f9 fa12 	bl	8000618 <__aeabi_dmul>
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <_strtod_l+0x594>)
 80071f6:	460a      	mov	r2, r1
 80071f8:	400b      	ands	r3, r1
 80071fa:	4927      	ldr	r1, [pc, #156]	; (8007298 <_strtod_l+0x598>)
 80071fc:	428b      	cmp	r3, r1
 80071fe:	4680      	mov	r8, r0
 8007200:	d8be      	bhi.n	8007180 <_strtod_l+0x480>
 8007202:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007206:	428b      	cmp	r3, r1
 8007208:	bf86      	itte	hi
 800720a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800729c <_strtod_l+0x59c>
 800720e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007212:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007216:	2300      	movs	r3, #0
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	e07b      	b.n	8007314 <_strtod_l+0x614>
 800721c:	07ea      	lsls	r2, r5, #31
 800721e:	d505      	bpl.n	800722c <_strtod_l+0x52c>
 8007220:	9b04      	ldr	r3, [sp, #16]
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 f9f7 	bl	8000618 <__aeabi_dmul>
 800722a:	2301      	movs	r3, #1
 800722c:	9a04      	ldr	r2, [sp, #16]
 800722e:	3208      	adds	r2, #8
 8007230:	f10a 0a01 	add.w	sl, sl, #1
 8007234:	106d      	asrs	r5, r5, #1
 8007236:	9204      	str	r2, [sp, #16]
 8007238:	e7cc      	b.n	80071d4 <_strtod_l+0x4d4>
 800723a:	d0ec      	beq.n	8007216 <_strtod_l+0x516>
 800723c:	426d      	negs	r5, r5
 800723e:	f015 020f 	ands.w	r2, r5, #15
 8007242:	d00a      	beq.n	800725a <_strtod_l+0x55a>
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <_strtod_l+0x58c>)
 8007246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724a:	4640      	mov	r0, r8
 800724c:	4649      	mov	r1, r9
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f7f9 fb0b 	bl	800086c <__aeabi_ddiv>
 8007256:	4680      	mov	r8, r0
 8007258:	4689      	mov	r9, r1
 800725a:	112d      	asrs	r5, r5, #4
 800725c:	d0db      	beq.n	8007216 <_strtod_l+0x516>
 800725e:	2d1f      	cmp	r5, #31
 8007260:	dd1e      	ble.n	80072a0 <_strtod_l+0x5a0>
 8007262:	2500      	movs	r5, #0
 8007264:	46ab      	mov	fp, r5
 8007266:	9509      	str	r5, [sp, #36]	; 0x24
 8007268:	9505      	str	r5, [sp, #20]
 800726a:	2322      	movs	r3, #34	; 0x22
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	f04f 0900 	mov.w	r9, #0
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	e78d      	b.n	8007194 <_strtod_l+0x494>
 8007278:	0800be6e 	.word	0x0800be6e
 800727c:	0800bd24 	.word	0x0800bd24
 8007280:	0800be66 	.word	0x0800be66
 8007284:	0800bf52 	.word	0x0800bf52
 8007288:	0800bf4e 	.word	0x0800bf4e
 800728c:	0800c0a8 	.word	0x0800c0a8
 8007290:	0800c080 	.word	0x0800c080
 8007294:	7ff00000 	.word	0x7ff00000
 8007298:	7ca00000 	.word	0x7ca00000
 800729c:	7fefffff 	.word	0x7fefffff
 80072a0:	f015 0310 	ands.w	r3, r5, #16
 80072a4:	bf18      	it	ne
 80072a6:	236a      	movne	r3, #106	; 0x6a
 80072a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800764c <_strtod_l+0x94c>
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	4640      	mov	r0, r8
 80072b0:	4649      	mov	r1, r9
 80072b2:	2300      	movs	r3, #0
 80072b4:	07ea      	lsls	r2, r5, #31
 80072b6:	d504      	bpl.n	80072c2 <_strtod_l+0x5c2>
 80072b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80072bc:	f7f9 f9ac 	bl	8000618 <__aeabi_dmul>
 80072c0:	2301      	movs	r3, #1
 80072c2:	106d      	asrs	r5, r5, #1
 80072c4:	f10a 0a08 	add.w	sl, sl, #8
 80072c8:	d1f4      	bne.n	80072b4 <_strtod_l+0x5b4>
 80072ca:	b10b      	cbz	r3, 80072d0 <_strtod_l+0x5d0>
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	b1bb      	cbz	r3, 8007304 <_strtod_l+0x604>
 80072d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80072d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072dc:	2b00      	cmp	r3, #0
 80072de:	4649      	mov	r1, r9
 80072e0:	dd10      	ble.n	8007304 <_strtod_l+0x604>
 80072e2:	2b1f      	cmp	r3, #31
 80072e4:	f340 811e 	ble.w	8007524 <_strtod_l+0x824>
 80072e8:	2b34      	cmp	r3, #52	; 0x34
 80072ea:	bfde      	ittt	le
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295
 80072f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072f4:	4093      	lslle	r3, r2
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	bfcc      	ite	gt
 80072fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007300:	ea03 0901 	andle.w	r9, r3, r1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f9 fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1a6      	bne.n	8007262 <_strtod_l+0x562>
 8007314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800731a:	4633      	mov	r3, r6
 800731c:	465a      	mov	r2, fp
 800731e:	4620      	mov	r0, r4
 8007320:	f003 f90e 	bl	800a540 <__s2b>
 8007324:	9009      	str	r0, [sp, #36]	; 0x24
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f af2a 	beq.w	8007180 <_strtod_l+0x480>
 800732c:	9a08      	ldr	r2, [sp, #32]
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	2a00      	cmp	r2, #0
 8007332:	eba3 0307 	sub.w	r3, r3, r7
 8007336:	bfa8      	it	ge
 8007338:	2300      	movge	r3, #0
 800733a:	930c      	str	r3, [sp, #48]	; 0x30
 800733c:	2500      	movs	r5, #0
 800733e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007342:	9312      	str	r3, [sp, #72]	; 0x48
 8007344:	46ab      	mov	fp, r5
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	4620      	mov	r0, r4
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f003 f850 	bl	800a3f0 <_Balloc>
 8007350:	9005      	str	r0, [sp, #20]
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f af18 	beq.w	8007188 <_strtod_l+0x488>
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	3202      	adds	r2, #2
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	0092      	lsls	r2, r2, #2
 8007364:	300c      	adds	r0, #12
 8007366:	f001 fd24 	bl	8008db2 <memcpy>
 800736a:	ec49 8b10 	vmov	d0, r8, r9
 800736e:	aa18      	add	r2, sp, #96	; 0x60
 8007370:	a917      	add	r1, sp, #92	; 0x5c
 8007372:	4620      	mov	r0, r4
 8007374:	f003 fc18 	bl	800aba8 <__d2b>
 8007378:	ec49 8b18 	vmov	d8, r8, r9
 800737c:	9016      	str	r0, [sp, #88]	; 0x58
 800737e:	2800      	cmp	r0, #0
 8007380:	f43f af02 	beq.w	8007188 <_strtod_l+0x488>
 8007384:	2101      	movs	r1, #1
 8007386:	4620      	mov	r0, r4
 8007388:	f003 f972 	bl	800a670 <__i2b>
 800738c:	4683      	mov	fp, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aefa 	beq.w	8007188 <_strtod_l+0x488>
 8007394:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007396:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007398:	2e00      	cmp	r6, #0
 800739a:	bfab      	itete	ge
 800739c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800739e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80073a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80073a6:	bfac      	ite	ge
 80073a8:	eb06 0a03 	addge.w	sl, r6, r3
 80073ac:	1b9f      	sublt	r7, r3, r6
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	1af6      	subs	r6, r6, r3
 80073b2:	4416      	add	r6, r2
 80073b4:	4ba0      	ldr	r3, [pc, #640]	; (8007638 <_strtod_l+0x938>)
 80073b6:	3e01      	subs	r6, #1
 80073b8:	429e      	cmp	r6, r3
 80073ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073be:	f280 80c4 	bge.w	800754a <_strtod_l+0x84a>
 80073c2:	1b9b      	subs	r3, r3, r6
 80073c4:	2b1f      	cmp	r3, #31
 80073c6:	eba2 0203 	sub.w	r2, r2, r3
 80073ca:	f04f 0101 	mov.w	r1, #1
 80073ce:	f300 80b0 	bgt.w	8007532 <_strtod_l+0x832>
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	930e      	str	r3, [sp, #56]	; 0x38
 80073d8:	2300      	movs	r3, #0
 80073da:	930d      	str	r3, [sp, #52]	; 0x34
 80073dc:	eb0a 0602 	add.w	r6, sl, r2
 80073e0:	9b04      	ldr	r3, [sp, #16]
 80073e2:	45b2      	cmp	sl, r6
 80073e4:	4417      	add	r7, r2
 80073e6:	441f      	add	r7, r3
 80073e8:	4653      	mov	r3, sl
 80073ea:	bfa8      	it	ge
 80073ec:	4633      	movge	r3, r6
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	bfa8      	it	ge
 80073f2:	463b      	movge	r3, r7
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bfc2      	ittt	gt
 80073f8:	1af6      	subgt	r6, r6, r3
 80073fa:	1aff      	subgt	r7, r7, r3
 80073fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd17      	ble.n	8007436 <_strtod_l+0x736>
 8007406:	4659      	mov	r1, fp
 8007408:	461a      	mov	r2, r3
 800740a:	4620      	mov	r0, r4
 800740c:	f003 f9f0 	bl	800a7f0 <__pow5mult>
 8007410:	4683      	mov	fp, r0
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f aeb8 	beq.w	8007188 <_strtod_l+0x488>
 8007418:	4601      	mov	r1, r0
 800741a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800741c:	4620      	mov	r0, r4
 800741e:	f003 f93d 	bl	800a69c <__multiply>
 8007422:	900b      	str	r0, [sp, #44]	; 0x2c
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f aeaf 	beq.w	8007188 <_strtod_l+0x488>
 800742a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800742c:	4620      	mov	r0, r4
 800742e:	f003 f81f 	bl	800a470 <_Bfree>
 8007432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007434:	9316      	str	r3, [sp, #88]	; 0x58
 8007436:	2e00      	cmp	r6, #0
 8007438:	f300 808c 	bgt.w	8007554 <_strtod_l+0x854>
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd08      	ble.n	8007454 <_strtod_l+0x754>
 8007442:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007444:	9905      	ldr	r1, [sp, #20]
 8007446:	4620      	mov	r0, r4
 8007448:	f003 f9d2 	bl	800a7f0 <__pow5mult>
 800744c:	9005      	str	r0, [sp, #20]
 800744e:	2800      	cmp	r0, #0
 8007450:	f43f ae9a 	beq.w	8007188 <_strtod_l+0x488>
 8007454:	2f00      	cmp	r7, #0
 8007456:	dd08      	ble.n	800746a <_strtod_l+0x76a>
 8007458:	9905      	ldr	r1, [sp, #20]
 800745a:	463a      	mov	r2, r7
 800745c:	4620      	mov	r0, r4
 800745e:	f003 fa21 	bl	800a8a4 <__lshift>
 8007462:	9005      	str	r0, [sp, #20]
 8007464:	2800      	cmp	r0, #0
 8007466:	f43f ae8f 	beq.w	8007188 <_strtod_l+0x488>
 800746a:	f1ba 0f00 	cmp.w	sl, #0
 800746e:	dd08      	ble.n	8007482 <_strtod_l+0x782>
 8007470:	4659      	mov	r1, fp
 8007472:	4652      	mov	r2, sl
 8007474:	4620      	mov	r0, r4
 8007476:	f003 fa15 	bl	800a8a4 <__lshift>
 800747a:	4683      	mov	fp, r0
 800747c:	2800      	cmp	r0, #0
 800747e:	f43f ae83 	beq.w	8007188 <_strtod_l+0x488>
 8007482:	9a05      	ldr	r2, [sp, #20]
 8007484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007486:	4620      	mov	r0, r4
 8007488:	f003 fa94 	bl	800a9b4 <__mdiff>
 800748c:	4605      	mov	r5, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f ae7a 	beq.w	8007188 <_strtod_l+0x488>
 8007494:	68c3      	ldr	r3, [r0, #12]
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	2300      	movs	r3, #0
 800749a:	60c3      	str	r3, [r0, #12]
 800749c:	4659      	mov	r1, fp
 800749e:	f003 fa6d 	bl	800a97c <__mcmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	da60      	bge.n	8007568 <_strtod_l+0x868>
 80074a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a8:	ea53 0308 	orrs.w	r3, r3, r8
 80074ac:	f040 8084 	bne.w	80075b8 <_strtod_l+0x8b8>
 80074b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d17f      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074bc:	0d1b      	lsrs	r3, r3, #20
 80074be:	051b      	lsls	r3, r3, #20
 80074c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074c4:	d978      	bls.n	80075b8 <_strtod_l+0x8b8>
 80074c6:	696b      	ldr	r3, [r5, #20]
 80074c8:	b913      	cbnz	r3, 80074d0 <_strtod_l+0x7d0>
 80074ca:	692b      	ldr	r3, [r5, #16]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	dd73      	ble.n	80075b8 <_strtod_l+0x8b8>
 80074d0:	4629      	mov	r1, r5
 80074d2:	2201      	movs	r2, #1
 80074d4:	4620      	mov	r0, r4
 80074d6:	f003 f9e5 	bl	800a8a4 <__lshift>
 80074da:	4659      	mov	r1, fp
 80074dc:	4605      	mov	r5, r0
 80074de:	f003 fa4d 	bl	800a97c <__mcmp>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	dd68      	ble.n	80075b8 <_strtod_l+0x8b8>
 80074e6:	9904      	ldr	r1, [sp, #16]
 80074e8:	4a54      	ldr	r2, [pc, #336]	; (800763c <_strtod_l+0x93c>)
 80074ea:	464b      	mov	r3, r9
 80074ec:	2900      	cmp	r1, #0
 80074ee:	f000 8084 	beq.w	80075fa <_strtod_l+0x8fa>
 80074f2:	ea02 0109 	and.w	r1, r2, r9
 80074f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074fa:	dc7e      	bgt.n	80075fa <_strtod_l+0x8fa>
 80074fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007500:	f77f aeb3 	ble.w	800726a <_strtod_l+0x56a>
 8007504:	4b4e      	ldr	r3, [pc, #312]	; (8007640 <_strtod_l+0x940>)
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	2200      	movs	r2, #0
 800750c:	f7f9 f884 	bl	8000618 <__aeabi_dmul>
 8007510:	4b4a      	ldr	r3, [pc, #296]	; (800763c <_strtod_l+0x93c>)
 8007512:	400b      	ands	r3, r1
 8007514:	4680      	mov	r8, r0
 8007516:	4689      	mov	r9, r1
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f ae3f 	bne.w	800719c <_strtod_l+0x49c>
 800751e:	2322      	movs	r3, #34	; 0x22
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	e63b      	b.n	800719c <_strtod_l+0x49c>
 8007524:	f04f 32ff 	mov.w	r2, #4294967295
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	ea03 0808 	and.w	r8, r3, r8
 8007530:	e6e8      	b.n	8007304 <_strtod_l+0x604>
 8007532:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007536:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800753a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800753e:	36e2      	adds	r6, #226	; 0xe2
 8007540:	fa01 f306 	lsl.w	r3, r1, r6
 8007544:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007548:	e748      	b.n	80073dc <_strtod_l+0x6dc>
 800754a:	2100      	movs	r1, #0
 800754c:	2301      	movs	r3, #1
 800754e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007552:	e743      	b.n	80073dc <_strtod_l+0x6dc>
 8007554:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007556:	4632      	mov	r2, r6
 8007558:	4620      	mov	r0, r4
 800755a:	f003 f9a3 	bl	800a8a4 <__lshift>
 800755e:	9016      	str	r0, [sp, #88]	; 0x58
 8007560:	2800      	cmp	r0, #0
 8007562:	f47f af6b 	bne.w	800743c <_strtod_l+0x73c>
 8007566:	e60f      	b.n	8007188 <_strtod_l+0x488>
 8007568:	46ca      	mov	sl, r9
 800756a:	d171      	bne.n	8007650 <_strtod_l+0x950>
 800756c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007572:	b352      	cbz	r2, 80075ca <_strtod_l+0x8ca>
 8007574:	4a33      	ldr	r2, [pc, #204]	; (8007644 <_strtod_l+0x944>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d12a      	bne.n	80075d0 <_strtod_l+0x8d0>
 800757a:	9b04      	ldr	r3, [sp, #16]
 800757c:	4641      	mov	r1, r8
 800757e:	b1fb      	cbz	r3, 80075c0 <_strtod_l+0x8c0>
 8007580:	4b2e      	ldr	r3, [pc, #184]	; (800763c <_strtod_l+0x93c>)
 8007582:	ea09 0303 	and.w	r3, r9, r3
 8007586:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	d81a      	bhi.n	80075c6 <_strtod_l+0x8c6>
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	4299      	cmp	r1, r3
 800759c:	d118      	bne.n	80075d0 <_strtod_l+0x8d0>
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <_strtod_l+0x948>)
 80075a0:	459a      	cmp	sl, r3
 80075a2:	d102      	bne.n	80075aa <_strtod_l+0x8aa>
 80075a4:	3101      	adds	r1, #1
 80075a6:	f43f adef 	beq.w	8007188 <_strtod_l+0x488>
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <_strtod_l+0x93c>)
 80075ac:	ea0a 0303 	and.w	r3, sl, r3
 80075b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80075b4:	f04f 0800 	mov.w	r8, #0
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1a2      	bne.n	8007504 <_strtod_l+0x804>
 80075be:	e5ed      	b.n	800719c <_strtod_l+0x49c>
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	e7e9      	b.n	800759a <_strtod_l+0x89a>
 80075c6:	4613      	mov	r3, r2
 80075c8:	e7e7      	b.n	800759a <_strtod_l+0x89a>
 80075ca:	ea53 0308 	orrs.w	r3, r3, r8
 80075ce:	d08a      	beq.n	80074e6 <_strtod_l+0x7e6>
 80075d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d2:	b1e3      	cbz	r3, 800760e <_strtod_l+0x90e>
 80075d4:	ea13 0f0a 	tst.w	r3, sl
 80075d8:	d0ee      	beq.n	80075b8 <_strtod_l+0x8b8>
 80075da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075dc:	9a04      	ldr	r2, [sp, #16]
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	b1c3      	cbz	r3, 8007616 <_strtod_l+0x916>
 80075e4:	f7ff fb6f 	bl	8006cc6 <sulp>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	ec51 0b18 	vmov	r0, r1, d8
 80075f0:	f7f8 fe5c 	bl	80002ac <__adddf3>
 80075f4:	4680      	mov	r8, r0
 80075f6:	4689      	mov	r9, r1
 80075f8:	e7de      	b.n	80075b8 <_strtod_l+0x8b8>
 80075fa:	4013      	ands	r3, r2
 80075fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007600:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007604:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007608:	f04f 38ff 	mov.w	r8, #4294967295
 800760c:	e7d4      	b.n	80075b8 <_strtod_l+0x8b8>
 800760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007610:	ea13 0f08 	tst.w	r3, r8
 8007614:	e7e0      	b.n	80075d8 <_strtod_l+0x8d8>
 8007616:	f7ff fb56 	bl	8006cc6 <sulp>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	ec51 0b18 	vmov	r0, r1, d8
 8007622:	f7f8 fe41 	bl	80002a8 <__aeabi_dsub>
 8007626:	2200      	movs	r2, #0
 8007628:	2300      	movs	r3, #0
 800762a:	4680      	mov	r8, r0
 800762c:	4689      	mov	r9, r1
 800762e:	f7f9 fa5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007632:	2800      	cmp	r0, #0
 8007634:	d0c0      	beq.n	80075b8 <_strtod_l+0x8b8>
 8007636:	e618      	b.n	800726a <_strtod_l+0x56a>
 8007638:	fffffc02 	.word	0xfffffc02
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	39500000 	.word	0x39500000
 8007644:	000fffff 	.word	0x000fffff
 8007648:	7fefffff 	.word	0x7fefffff
 800764c:	0800bd38 	.word	0x0800bd38
 8007650:	4659      	mov	r1, fp
 8007652:	4628      	mov	r0, r5
 8007654:	f003 fb02 	bl	800ac5c <__ratio>
 8007658:	ec57 6b10 	vmov	r6, r7, d0
 800765c:	ee10 0a10 	vmov	r0, s0
 8007660:	2200      	movs	r2, #0
 8007662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 fa52 	bl	8000b10 <__aeabi_dcmple>
 800766c:	2800      	cmp	r0, #0
 800766e:	d071      	beq.n	8007754 <_strtod_l+0xa54>
 8007670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d17c      	bne.n	8007770 <_strtod_l+0xa70>
 8007676:	f1b8 0f00 	cmp.w	r8, #0
 800767a:	d15a      	bne.n	8007732 <_strtod_l+0xa32>
 800767c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007680:	2b00      	cmp	r3, #0
 8007682:	d15d      	bne.n	8007740 <_strtod_l+0xa40>
 8007684:	4b90      	ldr	r3, [pc, #576]	; (80078c8 <_strtod_l+0xbc8>)
 8007686:	2200      	movs	r2, #0
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 fa36 	bl	8000afc <__aeabi_dcmplt>
 8007690:	2800      	cmp	r0, #0
 8007692:	d15c      	bne.n	800774e <_strtod_l+0xa4e>
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	4b8c      	ldr	r3, [pc, #560]	; (80078cc <_strtod_l+0xbcc>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 ffbc 	bl	8000618 <__aeabi_dmul>
 80076a0:	4606      	mov	r6, r0
 80076a2:	460f      	mov	r7, r1
 80076a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80076a8:	9606      	str	r6, [sp, #24]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80076b4:	4b86      	ldr	r3, [pc, #536]	; (80078d0 <_strtod_l+0xbd0>)
 80076b6:	ea0a 0303 	and.w	r3, sl, r3
 80076ba:	930d      	str	r3, [sp, #52]	; 0x34
 80076bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <_strtod_l+0xbd4>)
 80076c0:	429a      	cmp	r2, r3
 80076c2:	f040 8090 	bne.w	80077e6 <_strtod_l+0xae6>
 80076c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80076ca:	ec49 8b10 	vmov	d0, r8, r9
 80076ce:	f003 f9fb 	bl	800aac8 <__ulp>
 80076d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d6:	ec51 0b10 	vmov	r0, r1, d0
 80076da:	f7f8 ff9d 	bl	8000618 <__aeabi_dmul>
 80076de:	4642      	mov	r2, r8
 80076e0:	464b      	mov	r3, r9
 80076e2:	f7f8 fde3 	bl	80002ac <__adddf3>
 80076e6:	460b      	mov	r3, r1
 80076e8:	4979      	ldr	r1, [pc, #484]	; (80078d0 <_strtod_l+0xbd0>)
 80076ea:	4a7b      	ldr	r2, [pc, #492]	; (80078d8 <_strtod_l+0xbd8>)
 80076ec:	4019      	ands	r1, r3
 80076ee:	4291      	cmp	r1, r2
 80076f0:	4680      	mov	r8, r0
 80076f2:	d944      	bls.n	800777e <_strtod_l+0xa7e>
 80076f4:	ee18 2a90 	vmov	r2, s17
 80076f8:	4b78      	ldr	r3, [pc, #480]	; (80078dc <_strtod_l+0xbdc>)
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d104      	bne.n	8007708 <_strtod_l+0xa08>
 80076fe:	ee18 3a10 	vmov	r3, s16
 8007702:	3301      	adds	r3, #1
 8007704:	f43f ad40 	beq.w	8007188 <_strtod_l+0x488>
 8007708:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80078dc <_strtod_l+0xbdc>
 800770c:	f04f 38ff 	mov.w	r8, #4294967295
 8007710:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007712:	4620      	mov	r0, r4
 8007714:	f002 feac 	bl	800a470 <_Bfree>
 8007718:	9905      	ldr	r1, [sp, #20]
 800771a:	4620      	mov	r0, r4
 800771c:	f002 fea8 	bl	800a470 <_Bfree>
 8007720:	4659      	mov	r1, fp
 8007722:	4620      	mov	r0, r4
 8007724:	f002 fea4 	bl	800a470 <_Bfree>
 8007728:	4629      	mov	r1, r5
 800772a:	4620      	mov	r0, r4
 800772c:	f002 fea0 	bl	800a470 <_Bfree>
 8007730:	e609      	b.n	8007346 <_strtod_l+0x646>
 8007732:	f1b8 0f01 	cmp.w	r8, #1
 8007736:	d103      	bne.n	8007740 <_strtod_l+0xa40>
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	f43f ad95 	beq.w	800726a <_strtod_l+0x56a>
 8007740:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007898 <_strtod_l+0xb98>
 8007744:	4f60      	ldr	r7, [pc, #384]	; (80078c8 <_strtod_l+0xbc8>)
 8007746:	ed8d 7b06 	vstr	d7, [sp, #24]
 800774a:	2600      	movs	r6, #0
 800774c:	e7ae      	b.n	80076ac <_strtod_l+0x9ac>
 800774e:	4f5f      	ldr	r7, [pc, #380]	; (80078cc <_strtod_l+0xbcc>)
 8007750:	2600      	movs	r6, #0
 8007752:	e7a7      	b.n	80076a4 <_strtod_l+0x9a4>
 8007754:	4b5d      	ldr	r3, [pc, #372]	; (80078cc <_strtod_l+0xbcc>)
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	2200      	movs	r2, #0
 800775c:	f7f8 ff5c 	bl	8000618 <__aeabi_dmul>
 8007760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d09c      	beq.n	80076a4 <_strtod_l+0x9a4>
 800776a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800776e:	e79d      	b.n	80076ac <_strtod_l+0x9ac>
 8007770:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80078a0 <_strtod_l+0xba0>
 8007774:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007778:	ec57 6b17 	vmov	r6, r7, d7
 800777c:	e796      	b.n	80076ac <_strtod_l+0x9ac>
 800777e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	46ca      	mov	sl, r9
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1c2      	bne.n	8007710 <_strtod_l+0xa10>
 800778a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800778e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007790:	0d1b      	lsrs	r3, r3, #20
 8007792:	051b      	lsls	r3, r3, #20
 8007794:	429a      	cmp	r2, r3
 8007796:	d1bb      	bne.n	8007710 <_strtod_l+0xa10>
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	f7f9 fa9c 	bl	8000cd8 <__aeabi_d2lz>
 80077a0:	f7f8 ff0c 	bl	80005bc <__aeabi_l2d>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f8 fd7c 	bl	80002a8 <__aeabi_dsub>
 80077b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077b6:	ea43 0308 	orr.w	r3, r3, r8
 80077ba:	4313      	orrs	r3, r2
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	d054      	beq.n	800786c <_strtod_l+0xb6c>
 80077c2:	a339      	add	r3, pc, #228	; (adr r3, 80078a8 <_strtod_l+0xba8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f9 f998 	bl	8000afc <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f47f ace5 	bne.w	800719c <_strtod_l+0x49c>
 80077d2:	a337      	add	r3, pc, #220	; (adr r3, 80078b0 <_strtod_l+0xbb0>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f9 f9ac 	bl	8000b38 <__aeabi_dcmpgt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d095      	beq.n	8007710 <_strtod_l+0xa10>
 80077e4:	e4da      	b.n	800719c <_strtod_l+0x49c>
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	b333      	cbz	r3, 8007838 <_strtod_l+0xb38>
 80077ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077f0:	d822      	bhi.n	8007838 <_strtod_l+0xb38>
 80077f2:	a331      	add	r3, pc, #196	; (adr r3, 80078b8 <_strtod_l+0xbb8>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f9 f988 	bl	8000b10 <__aeabi_dcmple>
 8007800:	b1a0      	cbz	r0, 800782c <_strtod_l+0xb2c>
 8007802:	4639      	mov	r1, r7
 8007804:	4630      	mov	r0, r6
 8007806:	f7f9 f9df 	bl	8000bc8 <__aeabi_d2uiz>
 800780a:	2801      	cmp	r0, #1
 800780c:	bf38      	it	cc
 800780e:	2001      	movcc	r0, #1
 8007810:	f7f8 fe88 	bl	8000524 <__aeabi_ui2d>
 8007814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	bb23      	cbnz	r3, 8007866 <_strtod_l+0xb66>
 800781c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007820:	9010      	str	r0, [sp, #64]	; 0x40
 8007822:	9311      	str	r3, [sp, #68]	; 0x44
 8007824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800782c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007830:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	930f      	str	r3, [sp, #60]	; 0x3c
 8007838:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800783c:	eeb0 0a48 	vmov.f32	s0, s16
 8007840:	eef0 0a68 	vmov.f32	s1, s17
 8007844:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007848:	f003 f93e 	bl	800aac8 <__ulp>
 800784c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007850:	ec53 2b10 	vmov	r2, r3, d0
 8007854:	f7f8 fee0 	bl	8000618 <__aeabi_dmul>
 8007858:	ec53 2b18 	vmov	r2, r3, d8
 800785c:	f7f8 fd26 	bl	80002ac <__adddf3>
 8007860:	4680      	mov	r8, r0
 8007862:	4689      	mov	r9, r1
 8007864:	e78d      	b.n	8007782 <_strtod_l+0xa82>
 8007866:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800786a:	e7db      	b.n	8007824 <_strtod_l+0xb24>
 800786c:	a314      	add	r3, pc, #80	; (adr r3, 80078c0 <_strtod_l+0xbc0>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f9 f943 	bl	8000afc <__aeabi_dcmplt>
 8007876:	e7b3      	b.n	80077e0 <_strtod_l+0xae0>
 8007878:	2300      	movs	r3, #0
 800787a:	930a      	str	r3, [sp, #40]	; 0x28
 800787c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	f7ff ba7c 	b.w	8006d7e <_strtod_l+0x7e>
 8007886:	2a65      	cmp	r2, #101	; 0x65
 8007888:	f43f ab75 	beq.w	8006f76 <_strtod_l+0x276>
 800788c:	2a45      	cmp	r2, #69	; 0x45
 800788e:	f43f ab72 	beq.w	8006f76 <_strtod_l+0x276>
 8007892:	2301      	movs	r3, #1
 8007894:	f7ff bbaa 	b.w	8006fec <_strtod_l+0x2ec>
 8007898:	00000000 	.word	0x00000000
 800789c:	bff00000 	.word	0xbff00000
 80078a0:	00000000 	.word	0x00000000
 80078a4:	3ff00000 	.word	0x3ff00000
 80078a8:	94a03595 	.word	0x94a03595
 80078ac:	3fdfffff 	.word	0x3fdfffff
 80078b0:	35afe535 	.word	0x35afe535
 80078b4:	3fe00000 	.word	0x3fe00000
 80078b8:	ffc00000 	.word	0xffc00000
 80078bc:	41dfffff 	.word	0x41dfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fcfffff 	.word	0x3fcfffff
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	3fe00000 	.word	0x3fe00000
 80078d0:	7ff00000 	.word	0x7ff00000
 80078d4:	7fe00000 	.word	0x7fe00000
 80078d8:	7c9fffff 	.word	0x7c9fffff
 80078dc:	7fefffff 	.word	0x7fefffff

080078e0 <_strtod_r>:
 80078e0:	4b01      	ldr	r3, [pc, #4]	; (80078e8 <_strtod_r+0x8>)
 80078e2:	f7ff ba0d 	b.w	8006d00 <_strtod_l>
 80078e6:	bf00      	nop
 80078e8:	2000003c 	.word	0x2000003c

080078ec <strtod>:
 80078ec:	460a      	mov	r2, r1
 80078ee:	4601      	mov	r1, r0
 80078f0:	4802      	ldr	r0, [pc, #8]	; (80078fc <strtod+0x10>)
 80078f2:	4b03      	ldr	r3, [pc, #12]	; (8007900 <strtod+0x14>)
 80078f4:	6800      	ldr	r0, [r0, #0]
 80078f6:	f7ff ba03 	b.w	8006d00 <_strtod_l>
 80078fa:	bf00      	nop
 80078fc:	200001f4 	.word	0x200001f4
 8007900:	2000003c 	.word	0x2000003c

08007904 <_strtol_l.constprop.0>:
 8007904:	2b01      	cmp	r3, #1
 8007906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790a:	d001      	beq.n	8007910 <_strtol_l.constprop.0+0xc>
 800790c:	2b24      	cmp	r3, #36	; 0x24
 800790e:	d906      	bls.n	800791e <_strtol_l.constprop.0+0x1a>
 8007910:	f001 fa1a 	bl	8008d48 <__errno>
 8007914:	2316      	movs	r3, #22
 8007916:	6003      	str	r3, [r0, #0]
 8007918:	2000      	movs	r0, #0
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a04 <_strtol_l.constprop.0+0x100>
 8007922:	460d      	mov	r5, r1
 8007924:	462e      	mov	r6, r5
 8007926:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800792e:	f017 0708 	ands.w	r7, r7, #8
 8007932:	d1f7      	bne.n	8007924 <_strtol_l.constprop.0+0x20>
 8007934:	2c2d      	cmp	r4, #45	; 0x2d
 8007936:	d132      	bne.n	800799e <_strtol_l.constprop.0+0x9a>
 8007938:	782c      	ldrb	r4, [r5, #0]
 800793a:	2701      	movs	r7, #1
 800793c:	1cb5      	adds	r5, r6, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d05b      	beq.n	80079fa <_strtol_l.constprop.0+0xf6>
 8007942:	2b10      	cmp	r3, #16
 8007944:	d109      	bne.n	800795a <_strtol_l.constprop.0+0x56>
 8007946:	2c30      	cmp	r4, #48	; 0x30
 8007948:	d107      	bne.n	800795a <_strtol_l.constprop.0+0x56>
 800794a:	782c      	ldrb	r4, [r5, #0]
 800794c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007950:	2c58      	cmp	r4, #88	; 0x58
 8007952:	d14d      	bne.n	80079f0 <_strtol_l.constprop.0+0xec>
 8007954:	786c      	ldrb	r4, [r5, #1]
 8007956:	2310      	movs	r3, #16
 8007958:	3502      	adds	r5, #2
 800795a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800795e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007962:	f04f 0e00 	mov.w	lr, #0
 8007966:	fbb8 f9f3 	udiv	r9, r8, r3
 800796a:	4676      	mov	r6, lr
 800796c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007970:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007974:	f1bc 0f09 	cmp.w	ip, #9
 8007978:	d816      	bhi.n	80079a8 <_strtol_l.constprop.0+0xa4>
 800797a:	4664      	mov	r4, ip
 800797c:	42a3      	cmp	r3, r4
 800797e:	dd24      	ble.n	80079ca <_strtol_l.constprop.0+0xc6>
 8007980:	f1be 3fff 	cmp.w	lr, #4294967295
 8007984:	d008      	beq.n	8007998 <_strtol_l.constprop.0+0x94>
 8007986:	45b1      	cmp	r9, r6
 8007988:	d31c      	bcc.n	80079c4 <_strtol_l.constprop.0+0xc0>
 800798a:	d101      	bne.n	8007990 <_strtol_l.constprop.0+0x8c>
 800798c:	45a2      	cmp	sl, r4
 800798e:	db19      	blt.n	80079c4 <_strtol_l.constprop.0+0xc0>
 8007990:	fb06 4603 	mla	r6, r6, r3, r4
 8007994:	f04f 0e01 	mov.w	lr, #1
 8007998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800799c:	e7e8      	b.n	8007970 <_strtol_l.constprop.0+0x6c>
 800799e:	2c2b      	cmp	r4, #43	; 0x2b
 80079a0:	bf04      	itt	eq
 80079a2:	782c      	ldrbeq	r4, [r5, #0]
 80079a4:	1cb5      	addeq	r5, r6, #2
 80079a6:	e7ca      	b.n	800793e <_strtol_l.constprop.0+0x3a>
 80079a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079ac:	f1bc 0f19 	cmp.w	ip, #25
 80079b0:	d801      	bhi.n	80079b6 <_strtol_l.constprop.0+0xb2>
 80079b2:	3c37      	subs	r4, #55	; 0x37
 80079b4:	e7e2      	b.n	800797c <_strtol_l.constprop.0+0x78>
 80079b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80079ba:	f1bc 0f19 	cmp.w	ip, #25
 80079be:	d804      	bhi.n	80079ca <_strtol_l.constprop.0+0xc6>
 80079c0:	3c57      	subs	r4, #87	; 0x57
 80079c2:	e7db      	b.n	800797c <_strtol_l.constprop.0+0x78>
 80079c4:	f04f 3eff 	mov.w	lr, #4294967295
 80079c8:	e7e6      	b.n	8007998 <_strtol_l.constprop.0+0x94>
 80079ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80079ce:	d105      	bne.n	80079dc <_strtol_l.constprop.0+0xd8>
 80079d0:	2322      	movs	r3, #34	; 0x22
 80079d2:	6003      	str	r3, [r0, #0]
 80079d4:	4646      	mov	r6, r8
 80079d6:	b942      	cbnz	r2, 80079ea <_strtol_l.constprop.0+0xe6>
 80079d8:	4630      	mov	r0, r6
 80079da:	e79e      	b.n	800791a <_strtol_l.constprop.0+0x16>
 80079dc:	b107      	cbz	r7, 80079e0 <_strtol_l.constprop.0+0xdc>
 80079de:	4276      	negs	r6, r6
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d0f9      	beq.n	80079d8 <_strtol_l.constprop.0+0xd4>
 80079e4:	f1be 0f00 	cmp.w	lr, #0
 80079e8:	d000      	beq.n	80079ec <_strtol_l.constprop.0+0xe8>
 80079ea:	1e69      	subs	r1, r5, #1
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	e7f3      	b.n	80079d8 <_strtol_l.constprop.0+0xd4>
 80079f0:	2430      	movs	r4, #48	; 0x30
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1b1      	bne.n	800795a <_strtol_l.constprop.0+0x56>
 80079f6:	2308      	movs	r3, #8
 80079f8:	e7af      	b.n	800795a <_strtol_l.constprop.0+0x56>
 80079fa:	2c30      	cmp	r4, #48	; 0x30
 80079fc:	d0a5      	beq.n	800794a <_strtol_l.constprop.0+0x46>
 80079fe:	230a      	movs	r3, #10
 8007a00:	e7ab      	b.n	800795a <_strtol_l.constprop.0+0x56>
 8007a02:	bf00      	nop
 8007a04:	0800bd61 	.word	0x0800bd61

08007a08 <_strtol_r>:
 8007a08:	f7ff bf7c 	b.w	8007904 <_strtol_l.constprop.0>

08007a0c <strtol>:
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	460a      	mov	r2, r1
 8007a10:	4601      	mov	r1, r0
 8007a12:	4802      	ldr	r0, [pc, #8]	; (8007a1c <strtol+0x10>)
 8007a14:	6800      	ldr	r0, [r0, #0]
 8007a16:	f7ff bf75 	b.w	8007904 <_strtol_l.constprop.0>
 8007a1a:	bf00      	nop
 8007a1c:	200001f4 	.word	0x200001f4

08007a20 <__cvt>:
 8007a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	ec55 4b10 	vmov	r4, r5, d0
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	460e      	mov	r6, r1
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	462b      	mov	r3, r5
 8007a30:	bfbb      	ittet	lt
 8007a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a36:	461d      	movlt	r5, r3
 8007a38:	2300      	movge	r3, #0
 8007a3a:	232d      	movlt	r3, #45	; 0x2d
 8007a3c:	700b      	strb	r3, [r1, #0]
 8007a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a44:	4691      	mov	r9, r2
 8007a46:	f023 0820 	bic.w	r8, r3, #32
 8007a4a:	bfbc      	itt	lt
 8007a4c:	4622      	movlt	r2, r4
 8007a4e:	4614      	movlt	r4, r2
 8007a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a54:	d005      	beq.n	8007a62 <__cvt+0x42>
 8007a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a5a:	d100      	bne.n	8007a5e <__cvt+0x3e>
 8007a5c:	3601      	adds	r6, #1
 8007a5e:	2102      	movs	r1, #2
 8007a60:	e000      	b.n	8007a64 <__cvt+0x44>
 8007a62:	2103      	movs	r1, #3
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	ab02      	add	r3, sp, #8
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	ec45 4b10 	vmov	d0, r4, r5
 8007a70:	4653      	mov	r3, sl
 8007a72:	4632      	mov	r2, r6
 8007a74:	f001 fa60 	bl	8008f38 <_dtoa_r>
 8007a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	d102      	bne.n	8007a86 <__cvt+0x66>
 8007a80:	f019 0f01 	tst.w	r9, #1
 8007a84:	d022      	beq.n	8007acc <__cvt+0xac>
 8007a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a8a:	eb07 0906 	add.w	r9, r7, r6
 8007a8e:	d110      	bne.n	8007ab2 <__cvt+0x92>
 8007a90:	783b      	ldrb	r3, [r7, #0]
 8007a92:	2b30      	cmp	r3, #48	; 0x30
 8007a94:	d10a      	bne.n	8007aac <__cvt+0x8c>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f9 f823 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa2:	b918      	cbnz	r0, 8007aac <__cvt+0x8c>
 8007aa4:	f1c6 0601 	rsb	r6, r6, #1
 8007aa8:	f8ca 6000 	str.w	r6, [sl]
 8007aac:	f8da 3000 	ldr.w	r3, [sl]
 8007ab0:	4499      	add	r9, r3
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f9 f815 	bl	8000ae8 <__aeabi_dcmpeq>
 8007abe:	b108      	cbz	r0, 8007ac4 <__cvt+0xa4>
 8007ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ac4:	2230      	movs	r2, #48	; 0x30
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	454b      	cmp	r3, r9
 8007aca:	d307      	bcc.n	8007adc <__cvt+0xbc>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad0:	1bdb      	subs	r3, r3, r7
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	b004      	add	sp, #16
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007adc:	1c59      	adds	r1, r3, #1
 8007ade:	9103      	str	r1, [sp, #12]
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e7f0      	b.n	8007ac6 <__cvt+0xa6>

08007ae4 <__exponent>:
 8007ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bfb8      	it	lt
 8007aec:	4249      	neglt	r1, r1
 8007aee:	f803 2b02 	strb.w	r2, [r3], #2
 8007af2:	bfb4      	ite	lt
 8007af4:	222d      	movlt	r2, #45	; 0x2d
 8007af6:	222b      	movge	r2, #43	; 0x2b
 8007af8:	2909      	cmp	r1, #9
 8007afa:	7042      	strb	r2, [r0, #1]
 8007afc:	dd2a      	ble.n	8007b54 <__exponent+0x70>
 8007afe:	f10d 0207 	add.w	r2, sp, #7
 8007b02:	4617      	mov	r7, r2
 8007b04:	260a      	movs	r6, #10
 8007b06:	4694      	mov	ip, r2
 8007b08:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b0c:	fb06 1415 	mls	r4, r6, r5, r1
 8007b10:	3430      	adds	r4, #48	; 0x30
 8007b12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b16:	460c      	mov	r4, r1
 8007b18:	2c63      	cmp	r4, #99	; 0x63
 8007b1a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b1e:	4629      	mov	r1, r5
 8007b20:	dcf1      	bgt.n	8007b06 <__exponent+0x22>
 8007b22:	3130      	adds	r1, #48	; 0x30
 8007b24:	f1ac 0402 	sub.w	r4, ip, #2
 8007b28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b2c:	1c41      	adds	r1, r0, #1
 8007b2e:	4622      	mov	r2, r4
 8007b30:	42ba      	cmp	r2, r7
 8007b32:	d30a      	bcc.n	8007b4a <__exponent+0x66>
 8007b34:	f10d 0209 	add.w	r2, sp, #9
 8007b38:	eba2 020c 	sub.w	r2, r2, ip
 8007b3c:	42bc      	cmp	r4, r7
 8007b3e:	bf88      	it	hi
 8007b40:	2200      	movhi	r2, #0
 8007b42:	4413      	add	r3, r2
 8007b44:	1a18      	subs	r0, r3, r0
 8007b46:	b003      	add	sp, #12
 8007b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007b52:	e7ed      	b.n	8007b30 <__exponent+0x4c>
 8007b54:	2330      	movs	r3, #48	; 0x30
 8007b56:	3130      	adds	r1, #48	; 0x30
 8007b58:	7083      	strb	r3, [r0, #2]
 8007b5a:	70c1      	strb	r1, [r0, #3]
 8007b5c:	1d03      	adds	r3, r0, #4
 8007b5e:	e7f1      	b.n	8007b44 <__exponent+0x60>

08007b60 <_printf_float>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	ed2d 8b02 	vpush	{d8}
 8007b68:	b08d      	sub	sp, #52	; 0x34
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b70:	4616      	mov	r6, r2
 8007b72:	461f      	mov	r7, r3
 8007b74:	4605      	mov	r5, r0
 8007b76:	f001 f89d 	bl	8008cb4 <_localeconv_r>
 8007b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8007b7e:	4650      	mov	r0, sl
 8007b80:	f7f8 fb86 	bl	8000290 <strlen>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930a      	str	r3, [sp, #40]	; 0x28
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b94:	3307      	adds	r3, #7
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	f103 0208 	add.w	r2, r3, #8
 8007b9e:	f8c8 2000 	str.w	r2, [r8]
 8007ba2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bb0:	ee08 0a10 	vmov	s16, r0
 8007bb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bbc:	4b9e      	ldr	r3, [pc, #632]	; (8007e38 <_printf_float+0x2d8>)
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	f7f8 ffc3 	bl	8000b4c <__aeabi_dcmpun>
 8007bc6:	bb88      	cbnz	r0, 8007c2c <_printf_float+0xcc>
 8007bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bcc:	4b9a      	ldr	r3, [pc, #616]	; (8007e38 <_printf_float+0x2d8>)
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	f7f8 ff9d 	bl	8000b10 <__aeabi_dcmple>
 8007bd6:	bb48      	cbnz	r0, 8007c2c <_printf_float+0xcc>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4649      	mov	r1, r9
 8007be0:	f7f8 ff8c 	bl	8000afc <__aeabi_dcmplt>
 8007be4:	b110      	cbz	r0, 8007bec <_printf_float+0x8c>
 8007be6:	232d      	movs	r3, #45	; 0x2d
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bec:	4a93      	ldr	r2, [pc, #588]	; (8007e3c <_printf_float+0x2dc>)
 8007bee:	4b94      	ldr	r3, [pc, #592]	; (8007e40 <_printf_float+0x2e0>)
 8007bf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007bf4:	bf94      	ite	ls
 8007bf6:	4690      	movls	r8, r2
 8007bf8:	4698      	movhi	r8, r3
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	f023 0304 	bic.w	r3, r3, #4
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	9700      	str	r7, [sp, #0]
 8007c0c:	4633      	mov	r3, r6
 8007c0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f9da 	bl	8007fcc <_printf_common>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f040 8090 	bne.w	8007d3e <_printf_float+0x1de>
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	b00d      	add	sp, #52	; 0x34
 8007c24:	ecbd 8b02 	vpop	{d8}
 8007c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7f8 ff8a 	bl	8000b4c <__aeabi_dcmpun>
 8007c38:	b140      	cbz	r0, 8007c4c <_printf_float+0xec>
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bfbc      	itt	lt
 8007c40:	232d      	movlt	r3, #45	; 0x2d
 8007c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c46:	4a7f      	ldr	r2, [pc, #508]	; (8007e44 <_printf_float+0x2e4>)
 8007c48:	4b7f      	ldr	r3, [pc, #508]	; (8007e48 <_printf_float+0x2e8>)
 8007c4a:	e7d1      	b.n	8007bf0 <_printf_float+0x90>
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c52:	9206      	str	r2, [sp, #24]
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	d13f      	bne.n	8007cd8 <_printf_float+0x178>
 8007c58:	2306      	movs	r3, #6
 8007c5a:	6063      	str	r3, [r4, #4]
 8007c5c:	9b05      	ldr	r3, [sp, #20]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c64:	2300      	movs	r3, #0
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	ab0a      	add	r3, sp, #40	; 0x28
 8007c6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c6e:	ab09      	add	r3, sp, #36	; 0x24
 8007c70:	ec49 8b10 	vmov	d0, r8, r9
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	6022      	str	r2, [r4, #0]
 8007c78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f7ff fecf 	bl	8007a20 <__cvt>
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c86:	2b47      	cmp	r3, #71	; 0x47
 8007c88:	4680      	mov	r8, r0
 8007c8a:	d108      	bne.n	8007c9e <_printf_float+0x13e>
 8007c8c:	1cc8      	adds	r0, r1, #3
 8007c8e:	db02      	blt.n	8007c96 <_printf_float+0x136>
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	4299      	cmp	r1, r3
 8007c94:	dd41      	ble.n	8007d1a <_printf_float+0x1ba>
 8007c96:	f1ab 0302 	sub.w	r3, fp, #2
 8007c9a:	fa5f fb83 	uxtb.w	fp, r3
 8007c9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ca2:	d820      	bhi.n	8007ce6 <_printf_float+0x186>
 8007ca4:	3901      	subs	r1, #1
 8007ca6:	465a      	mov	r2, fp
 8007ca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cac:	9109      	str	r1, [sp, #36]	; 0x24
 8007cae:	f7ff ff19 	bl	8007ae4 <__exponent>
 8007cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb4:	1813      	adds	r3, r2, r0
 8007cb6:	2a01      	cmp	r2, #1
 8007cb8:	4681      	mov	r9, r0
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	dc02      	bgt.n	8007cc4 <_printf_float+0x164>
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	07d2      	lsls	r2, r2, #31
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_float+0x168>
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d09c      	beq.n	8007c0a <_printf_float+0xaa>
 8007cd0:	232d      	movs	r3, #45	; 0x2d
 8007cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd6:	e798      	b.n	8007c0a <_printf_float+0xaa>
 8007cd8:	9a06      	ldr	r2, [sp, #24]
 8007cda:	2a47      	cmp	r2, #71	; 0x47
 8007cdc:	d1be      	bne.n	8007c5c <_printf_float+0xfc>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1bc      	bne.n	8007c5c <_printf_float+0xfc>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7b9      	b.n	8007c5a <_printf_float+0xfa>
 8007ce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007cea:	d118      	bne.n	8007d1e <_printf_float+0x1be>
 8007cec:	2900      	cmp	r1, #0
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	dd0b      	ble.n	8007d0a <_printf_float+0x1aa>
 8007cf2:	6121      	str	r1, [r4, #16]
 8007cf4:	b913      	cbnz	r3, 8007cfc <_printf_float+0x19c>
 8007cf6:	6822      	ldr	r2, [r4, #0]
 8007cf8:	07d0      	lsls	r0, r2, #31
 8007cfa:	d502      	bpl.n	8007d02 <_printf_float+0x1a2>
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	440b      	add	r3, r1
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d04:	f04f 0900 	mov.w	r9, #0
 8007d08:	e7de      	b.n	8007cc8 <_printf_float+0x168>
 8007d0a:	b913      	cbnz	r3, 8007d12 <_printf_float+0x1b2>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	07d2      	lsls	r2, r2, #31
 8007d10:	d501      	bpl.n	8007d16 <_printf_float+0x1b6>
 8007d12:	3302      	adds	r3, #2
 8007d14:	e7f4      	b.n	8007d00 <_printf_float+0x1a0>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e7f2      	b.n	8007d00 <_printf_float+0x1a0>
 8007d1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	4299      	cmp	r1, r3
 8007d22:	db05      	blt.n	8007d30 <_printf_float+0x1d0>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	6121      	str	r1, [r4, #16]
 8007d28:	07d8      	lsls	r0, r3, #31
 8007d2a:	d5ea      	bpl.n	8007d02 <_printf_float+0x1a2>
 8007d2c:	1c4b      	adds	r3, r1, #1
 8007d2e:	e7e7      	b.n	8007d00 <_printf_float+0x1a0>
 8007d30:	2900      	cmp	r1, #0
 8007d32:	bfd4      	ite	le
 8007d34:	f1c1 0202 	rsble	r2, r1, #2
 8007d38:	2201      	movgt	r2, #1
 8007d3a:	4413      	add	r3, r2
 8007d3c:	e7e0      	b.n	8007d00 <_printf_float+0x1a0>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	055a      	lsls	r2, r3, #21
 8007d42:	d407      	bmi.n	8007d54 <_printf_float+0x1f4>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	4642      	mov	r2, r8
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47b8      	blx	r7
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d12c      	bne.n	8007dac <_printf_float+0x24c>
 8007d52:	e764      	b.n	8007c1e <_printf_float+0xbe>
 8007d54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d58:	f240 80e0 	bls.w	8007f1c <_printf_float+0x3bc>
 8007d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	f7f8 fec0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d034      	beq.n	8007dd6 <_printf_float+0x276>
 8007d6c:	4a37      	ldr	r2, [pc, #220]	; (8007e4c <_printf_float+0x2ec>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	47b8      	blx	r7
 8007d76:	3001      	adds	r0, #1
 8007d78:	f43f af51 	beq.w	8007c1e <_printf_float+0xbe>
 8007d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d80:	429a      	cmp	r2, r3
 8007d82:	db02      	blt.n	8007d8a <_printf_float+0x22a>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	07d8      	lsls	r0, r3, #31
 8007d88:	d510      	bpl.n	8007dac <_printf_float+0x24c>
 8007d8a:	ee18 3a10 	vmov	r3, s16
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af41 	beq.w	8007c1e <_printf_float+0xbe>
 8007d9c:	f04f 0800 	mov.w	r8, #0
 8007da0:	f104 091a 	add.w	r9, r4, #26
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	3b01      	subs	r3, #1
 8007da8:	4543      	cmp	r3, r8
 8007daa:	dc09      	bgt.n	8007dc0 <_printf_float+0x260>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	079b      	lsls	r3, r3, #30
 8007db0:	f100 8107 	bmi.w	8007fc2 <_printf_float+0x462>
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db8:	4298      	cmp	r0, r3
 8007dba:	bfb8      	it	lt
 8007dbc:	4618      	movlt	r0, r3
 8007dbe:	e730      	b.n	8007c22 <_printf_float+0xc2>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	464a      	mov	r2, r9
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f af27 	beq.w	8007c1e <_printf_float+0xbe>
 8007dd0:	f108 0801 	add.w	r8, r8, #1
 8007dd4:	e7e6      	b.n	8007da4 <_printf_float+0x244>
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc39      	bgt.n	8007e50 <_printf_float+0x2f0>
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <_printf_float+0x2ec>)
 8007dde:	2301      	movs	r3, #1
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af19 	beq.w	8007c1e <_printf_float+0xbe>
 8007dec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007df0:	4313      	orrs	r3, r2
 8007df2:	d102      	bne.n	8007dfa <_printf_float+0x29a>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	07d9      	lsls	r1, r3, #31
 8007df8:	d5d8      	bpl.n	8007dac <_printf_float+0x24c>
 8007dfa:	ee18 3a10 	vmov	r3, s16
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af09 	beq.w	8007c1e <_printf_float+0xbe>
 8007e0c:	f04f 0900 	mov.w	r9, #0
 8007e10:	f104 0a1a 	add.w	sl, r4, #26
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	425b      	negs	r3, r3
 8007e18:	454b      	cmp	r3, r9
 8007e1a:	dc01      	bgt.n	8007e20 <_printf_float+0x2c0>
 8007e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1e:	e792      	b.n	8007d46 <_printf_float+0x1e6>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4652      	mov	r2, sl
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f43f aef7 	beq.w	8007c1e <_printf_float+0xbe>
 8007e30:	f109 0901 	add.w	r9, r9, #1
 8007e34:	e7ee      	b.n	8007e14 <_printf_float+0x2b4>
 8007e36:	bf00      	nop
 8007e38:	7fefffff 	.word	0x7fefffff
 8007e3c:	0800be61 	.word	0x0800be61
 8007e40:	0800be65 	.word	0x0800be65
 8007e44:	0800be69 	.word	0x0800be69
 8007e48:	0800be6d 	.word	0x0800be6d
 8007e4c:	0800be71 	.word	0x0800be71
 8007e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e54:	429a      	cmp	r2, r3
 8007e56:	bfa8      	it	ge
 8007e58:	461a      	movge	r2, r3
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	4691      	mov	r9, r2
 8007e5e:	dc37      	bgt.n	8007ed0 <_printf_float+0x370>
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e68:	f104 021a 	add.w	r2, r4, #26
 8007e6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	eba3 0309 	sub.w	r3, r3, r9
 8007e74:	455b      	cmp	r3, fp
 8007e76:	dc33      	bgt.n	8007ee0 <_printf_float+0x380>
 8007e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	db3b      	blt.n	8007ef8 <_printf_float+0x398>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07da      	lsls	r2, r3, #31
 8007e84:	d438      	bmi.n	8007ef8 <_printf_float+0x398>
 8007e86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e8a:	eba2 0903 	sub.w	r9, r2, r3
 8007e8e:	9b05      	ldr	r3, [sp, #20]
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	4591      	cmp	r9, r2
 8007e94:	bfa8      	it	ge
 8007e96:	4691      	movge	r9, r2
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	dc35      	bgt.n	8007f0a <_printf_float+0x3aa>
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ea6:	f104 0a1a 	add.w	sl, r4, #26
 8007eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	eba3 0309 	sub.w	r3, r3, r9
 8007eb4:	4543      	cmp	r3, r8
 8007eb6:	f77f af79 	ble.w	8007dac <_printf_float+0x24c>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f aeaa 	beq.w	8007c1e <_printf_float+0xbe>
 8007eca:	f108 0801 	add.w	r8, r8, #1
 8007ece:	e7ec      	b.n	8007eaa <_printf_float+0x34a>
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	d1c0      	bne.n	8007e60 <_printf_float+0x300>
 8007ede:	e69e      	b.n	8007c1e <_printf_float+0xbe>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	9205      	str	r2, [sp, #20]
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	f43f ae97 	beq.w	8007c1e <_printf_float+0xbe>
 8007ef0:	9a05      	ldr	r2, [sp, #20]
 8007ef2:	f10b 0b01 	add.w	fp, fp, #1
 8007ef6:	e7b9      	b.n	8007e6c <_printf_float+0x30c>
 8007ef8:	ee18 3a10 	vmov	r3, s16
 8007efc:	4652      	mov	r2, sl
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	d1be      	bne.n	8007e86 <_printf_float+0x326>
 8007f08:	e689      	b.n	8007c1e <_printf_float+0xbe>
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	4442      	add	r2, r8
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	d1c1      	bne.n	8007e9e <_printf_float+0x33e>
 8007f1a:	e680      	b.n	8007c1e <_printf_float+0xbe>
 8007f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1e:	2a01      	cmp	r2, #1
 8007f20:	dc01      	bgt.n	8007f26 <_printf_float+0x3c6>
 8007f22:	07db      	lsls	r3, r3, #31
 8007f24:	d53a      	bpl.n	8007f9c <_printf_float+0x43c>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4642      	mov	r2, r8
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f ae74 	beq.w	8007c1e <_printf_float+0xbe>
 8007f36:	ee18 3a10 	vmov	r3, s16
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f ae6b 	beq.w	8007c1e <_printf_float+0xbe>
 8007f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007f54:	f7f8 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f58:	b9d8      	cbnz	r0, 8007f92 <_printf_float+0x432>
 8007f5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f5e:	f108 0201 	add.w	r2, r8, #1
 8007f62:	4631      	mov	r1, r6
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b8      	blx	r7
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d10e      	bne.n	8007f8a <_printf_float+0x42a>
 8007f6c:	e657      	b.n	8007c1e <_printf_float+0xbe>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4652      	mov	r2, sl
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b8      	blx	r7
 8007f78:	3001      	adds	r0, #1
 8007f7a:	f43f ae50 	beq.w	8007c1e <_printf_float+0xbe>
 8007f7e:	f108 0801 	add.w	r8, r8, #1
 8007f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	4543      	cmp	r3, r8
 8007f88:	dcf1      	bgt.n	8007f6e <_printf_float+0x40e>
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f90:	e6da      	b.n	8007d48 <_printf_float+0x1e8>
 8007f92:	f04f 0800 	mov.w	r8, #0
 8007f96:	f104 0a1a 	add.w	sl, r4, #26
 8007f9a:	e7f2      	b.n	8007f82 <_printf_float+0x422>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4642      	mov	r2, r8
 8007fa0:	e7df      	b.n	8007f62 <_printf_float+0x402>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	464a      	mov	r2, r9
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b8      	blx	r7
 8007fac:	3001      	adds	r0, #1
 8007fae:	f43f ae36 	beq.w	8007c1e <_printf_float+0xbe>
 8007fb2:	f108 0801 	add.w	r8, r8, #1
 8007fb6:	68e3      	ldr	r3, [r4, #12]
 8007fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fba:	1a5b      	subs	r3, r3, r1
 8007fbc:	4543      	cmp	r3, r8
 8007fbe:	dcf0      	bgt.n	8007fa2 <_printf_float+0x442>
 8007fc0:	e6f8      	b.n	8007db4 <_printf_float+0x254>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	f104 0919 	add.w	r9, r4, #25
 8007fca:	e7f4      	b.n	8007fb6 <_printf_float+0x456>

08007fcc <_printf_common>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	4699      	mov	r9, r3
 8007fd4:	688a      	ldr	r2, [r1, #8]
 8007fd6:	690b      	ldr	r3, [r1, #16]
 8007fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	bfb8      	it	lt
 8007fe0:	4613      	movlt	r3, r2
 8007fe2:	6033      	str	r3, [r6, #0]
 8007fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fe8:	4607      	mov	r7, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b10a      	cbz	r2, 8007ff2 <_printf_common+0x26>
 8007fee:	3301      	adds	r3, #1
 8007ff0:	6033      	str	r3, [r6, #0]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	0699      	lsls	r1, r3, #26
 8007ff6:	bf42      	ittt	mi
 8007ff8:	6833      	ldrmi	r3, [r6, #0]
 8007ffa:	3302      	addmi	r3, #2
 8007ffc:	6033      	strmi	r3, [r6, #0]
 8007ffe:	6825      	ldr	r5, [r4, #0]
 8008000:	f015 0506 	ands.w	r5, r5, #6
 8008004:	d106      	bne.n	8008014 <_printf_common+0x48>
 8008006:	f104 0a19 	add.w	sl, r4, #25
 800800a:	68e3      	ldr	r3, [r4, #12]
 800800c:	6832      	ldr	r2, [r6, #0]
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	42ab      	cmp	r3, r5
 8008012:	dc26      	bgt.n	8008062 <_printf_common+0x96>
 8008014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008018:	1e13      	subs	r3, r2, #0
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	bf18      	it	ne
 800801e:	2301      	movne	r3, #1
 8008020:	0692      	lsls	r2, r2, #26
 8008022:	d42b      	bmi.n	800807c <_printf_common+0xb0>
 8008024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008028:	4649      	mov	r1, r9
 800802a:	4638      	mov	r0, r7
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d01e      	beq.n	8008070 <_printf_common+0xa4>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	6922      	ldr	r2, [r4, #16]
 8008036:	f003 0306 	and.w	r3, r3, #6
 800803a:	2b04      	cmp	r3, #4
 800803c:	bf02      	ittt	eq
 800803e:	68e5      	ldreq	r5, [r4, #12]
 8008040:	6833      	ldreq	r3, [r6, #0]
 8008042:	1aed      	subeq	r5, r5, r3
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	bf0c      	ite	eq
 8008048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800804c:	2500      	movne	r5, #0
 800804e:	4293      	cmp	r3, r2
 8008050:	bfc4      	itt	gt
 8008052:	1a9b      	subgt	r3, r3, r2
 8008054:	18ed      	addgt	r5, r5, r3
 8008056:	2600      	movs	r6, #0
 8008058:	341a      	adds	r4, #26
 800805a:	42b5      	cmp	r5, r6
 800805c:	d11a      	bne.n	8008094 <_printf_common+0xc8>
 800805e:	2000      	movs	r0, #0
 8008060:	e008      	b.n	8008074 <_printf_common+0xa8>
 8008062:	2301      	movs	r3, #1
 8008064:	4652      	mov	r2, sl
 8008066:	4649      	mov	r1, r9
 8008068:	4638      	mov	r0, r7
 800806a:	47c0      	blx	r8
 800806c:	3001      	adds	r0, #1
 800806e:	d103      	bne.n	8008078 <_printf_common+0xac>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008078:	3501      	adds	r5, #1
 800807a:	e7c6      	b.n	800800a <_printf_common+0x3e>
 800807c:	18e1      	adds	r1, r4, r3
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	2030      	movs	r0, #48	; 0x30
 8008082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008086:	4422      	add	r2, r4
 8008088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800808c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008090:	3302      	adds	r3, #2
 8008092:	e7c7      	b.n	8008024 <_printf_common+0x58>
 8008094:	2301      	movs	r3, #1
 8008096:	4622      	mov	r2, r4
 8008098:	4649      	mov	r1, r9
 800809a:	4638      	mov	r0, r7
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d0e6      	beq.n	8008070 <_printf_common+0xa4>
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7d9      	b.n	800805a <_printf_common+0x8e>
	...

080080a8 <_printf_i>:
 80080a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	7e0f      	ldrb	r7, [r1, #24]
 80080ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080b0:	2f78      	cmp	r7, #120	; 0x78
 80080b2:	4691      	mov	r9, r2
 80080b4:	4680      	mov	r8, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	469a      	mov	sl, r3
 80080ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080be:	d807      	bhi.n	80080d0 <_printf_i+0x28>
 80080c0:	2f62      	cmp	r7, #98	; 0x62
 80080c2:	d80a      	bhi.n	80080da <_printf_i+0x32>
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	f000 80d4 	beq.w	8008272 <_printf_i+0x1ca>
 80080ca:	2f58      	cmp	r7, #88	; 0x58
 80080cc:	f000 80c0 	beq.w	8008250 <_printf_i+0x1a8>
 80080d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080d8:	e03a      	b.n	8008150 <_printf_i+0xa8>
 80080da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080de:	2b15      	cmp	r3, #21
 80080e0:	d8f6      	bhi.n	80080d0 <_printf_i+0x28>
 80080e2:	a101      	add	r1, pc, #4	; (adr r1, 80080e8 <_printf_i+0x40>)
 80080e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008155 	.word	0x08008155
 80080f0:	080080d1 	.word	0x080080d1
 80080f4:	080080d1 	.word	0x080080d1
 80080f8:	080080d1 	.word	0x080080d1
 80080fc:	080080d1 	.word	0x080080d1
 8008100:	08008155 	.word	0x08008155
 8008104:	080080d1 	.word	0x080080d1
 8008108:	080080d1 	.word	0x080080d1
 800810c:	080080d1 	.word	0x080080d1
 8008110:	080080d1 	.word	0x080080d1
 8008114:	08008259 	.word	0x08008259
 8008118:	08008181 	.word	0x08008181
 800811c:	08008213 	.word	0x08008213
 8008120:	080080d1 	.word	0x080080d1
 8008124:	080080d1 	.word	0x080080d1
 8008128:	0800827b 	.word	0x0800827b
 800812c:	080080d1 	.word	0x080080d1
 8008130:	08008181 	.word	0x08008181
 8008134:	080080d1 	.word	0x080080d1
 8008138:	080080d1 	.word	0x080080d1
 800813c:	0800821b 	.word	0x0800821b
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	1d1a      	adds	r2, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	602a      	str	r2, [r5, #0]
 8008148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800814c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008150:	2301      	movs	r3, #1
 8008152:	e09f      	b.n	8008294 <_printf_i+0x1ec>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	0607      	lsls	r7, r0, #24
 800815a:	f103 0104 	add.w	r1, r3, #4
 800815e:	6029      	str	r1, [r5, #0]
 8008160:	d501      	bpl.n	8008166 <_printf_i+0xbe>
 8008162:	681e      	ldr	r6, [r3, #0]
 8008164:	e003      	b.n	800816e <_printf_i+0xc6>
 8008166:	0646      	lsls	r6, r0, #25
 8008168:	d5fb      	bpl.n	8008162 <_printf_i+0xba>
 800816a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800816e:	2e00      	cmp	r6, #0
 8008170:	da03      	bge.n	800817a <_printf_i+0xd2>
 8008172:	232d      	movs	r3, #45	; 0x2d
 8008174:	4276      	negs	r6, r6
 8008176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817a:	485a      	ldr	r0, [pc, #360]	; (80082e4 <_printf_i+0x23c>)
 800817c:	230a      	movs	r3, #10
 800817e:	e012      	b.n	80081a6 <_printf_i+0xfe>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	6820      	ldr	r0, [r4, #0]
 8008184:	1d19      	adds	r1, r3, #4
 8008186:	6029      	str	r1, [r5, #0]
 8008188:	0605      	lsls	r5, r0, #24
 800818a:	d501      	bpl.n	8008190 <_printf_i+0xe8>
 800818c:	681e      	ldr	r6, [r3, #0]
 800818e:	e002      	b.n	8008196 <_printf_i+0xee>
 8008190:	0641      	lsls	r1, r0, #25
 8008192:	d5fb      	bpl.n	800818c <_printf_i+0xe4>
 8008194:	881e      	ldrh	r6, [r3, #0]
 8008196:	4853      	ldr	r0, [pc, #332]	; (80082e4 <_printf_i+0x23c>)
 8008198:	2f6f      	cmp	r7, #111	; 0x6f
 800819a:	bf0c      	ite	eq
 800819c:	2308      	moveq	r3, #8
 800819e:	230a      	movne	r3, #10
 80081a0:	2100      	movs	r1, #0
 80081a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081a6:	6865      	ldr	r5, [r4, #4]
 80081a8:	60a5      	str	r5, [r4, #8]
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	bfa2      	ittt	ge
 80081ae:	6821      	ldrge	r1, [r4, #0]
 80081b0:	f021 0104 	bicge.w	r1, r1, #4
 80081b4:	6021      	strge	r1, [r4, #0]
 80081b6:	b90e      	cbnz	r6, 80081bc <_printf_i+0x114>
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	d04b      	beq.n	8008254 <_printf_i+0x1ac>
 80081bc:	4615      	mov	r5, r2
 80081be:	fbb6 f1f3 	udiv	r1, r6, r3
 80081c2:	fb03 6711 	mls	r7, r3, r1, r6
 80081c6:	5dc7      	ldrb	r7, [r0, r7]
 80081c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081cc:	4637      	mov	r7, r6
 80081ce:	42bb      	cmp	r3, r7
 80081d0:	460e      	mov	r6, r1
 80081d2:	d9f4      	bls.n	80081be <_printf_i+0x116>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d10b      	bne.n	80081f0 <_printf_i+0x148>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	07de      	lsls	r6, r3, #31
 80081dc:	d508      	bpl.n	80081f0 <_printf_i+0x148>
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4299      	cmp	r1, r3
 80081e4:	bfde      	ittt	le
 80081e6:	2330      	movle	r3, #48	; 0x30
 80081e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081f0:	1b52      	subs	r2, r2, r5
 80081f2:	6122      	str	r2, [r4, #16]
 80081f4:	f8cd a000 	str.w	sl, [sp]
 80081f8:	464b      	mov	r3, r9
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4640      	mov	r0, r8
 8008200:	f7ff fee4 	bl	8007fcc <_printf_common>
 8008204:	3001      	adds	r0, #1
 8008206:	d14a      	bne.n	800829e <_printf_i+0x1f6>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	b004      	add	sp, #16
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	f043 0320 	orr.w	r3, r3, #32
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	4833      	ldr	r0, [pc, #204]	; (80082e8 <_printf_i+0x240>)
 800821c:	2778      	movs	r7, #120	; 0x78
 800821e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6829      	ldr	r1, [r5, #0]
 8008226:	061f      	lsls	r7, r3, #24
 8008228:	f851 6b04 	ldr.w	r6, [r1], #4
 800822c:	d402      	bmi.n	8008234 <_printf_i+0x18c>
 800822e:	065f      	lsls	r7, r3, #25
 8008230:	bf48      	it	mi
 8008232:	b2b6      	uxthmi	r6, r6
 8008234:	07df      	lsls	r7, r3, #31
 8008236:	bf48      	it	mi
 8008238:	f043 0320 	orrmi.w	r3, r3, #32
 800823c:	6029      	str	r1, [r5, #0]
 800823e:	bf48      	it	mi
 8008240:	6023      	strmi	r3, [r4, #0]
 8008242:	b91e      	cbnz	r6, 800824c <_printf_i+0x1a4>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	f023 0320 	bic.w	r3, r3, #32
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	2310      	movs	r3, #16
 800824e:	e7a7      	b.n	80081a0 <_printf_i+0xf8>
 8008250:	4824      	ldr	r0, [pc, #144]	; (80082e4 <_printf_i+0x23c>)
 8008252:	e7e4      	b.n	800821e <_printf_i+0x176>
 8008254:	4615      	mov	r5, r2
 8008256:	e7bd      	b.n	80081d4 <_printf_i+0x12c>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	6826      	ldr	r6, [r4, #0]
 800825c:	6961      	ldr	r1, [r4, #20]
 800825e:	1d18      	adds	r0, r3, #4
 8008260:	6028      	str	r0, [r5, #0]
 8008262:	0635      	lsls	r5, r6, #24
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	d501      	bpl.n	800826c <_printf_i+0x1c4>
 8008268:	6019      	str	r1, [r3, #0]
 800826a:	e002      	b.n	8008272 <_printf_i+0x1ca>
 800826c:	0670      	lsls	r0, r6, #25
 800826e:	d5fb      	bpl.n	8008268 <_printf_i+0x1c0>
 8008270:	8019      	strh	r1, [r3, #0]
 8008272:	2300      	movs	r3, #0
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	4615      	mov	r5, r2
 8008278:	e7bc      	b.n	80081f4 <_printf_i+0x14c>
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	602a      	str	r2, [r5, #0]
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	6862      	ldr	r2, [r4, #4]
 8008284:	2100      	movs	r1, #0
 8008286:	4628      	mov	r0, r5
 8008288:	f7f7 ffb2 	bl	80001f0 <memchr>
 800828c:	b108      	cbz	r0, 8008292 <_printf_i+0x1ea>
 800828e:	1b40      	subs	r0, r0, r5
 8008290:	6060      	str	r0, [r4, #4]
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	2300      	movs	r3, #0
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	e7aa      	b.n	80081f4 <_printf_i+0x14c>
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	462a      	mov	r2, r5
 80082a2:	4649      	mov	r1, r9
 80082a4:	4640      	mov	r0, r8
 80082a6:	47d0      	blx	sl
 80082a8:	3001      	adds	r0, #1
 80082aa:	d0ad      	beq.n	8008208 <_printf_i+0x160>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	079b      	lsls	r3, r3, #30
 80082b0:	d413      	bmi.n	80082da <_printf_i+0x232>
 80082b2:	68e0      	ldr	r0, [r4, #12]
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	4298      	cmp	r0, r3
 80082b8:	bfb8      	it	lt
 80082ba:	4618      	movlt	r0, r3
 80082bc:	e7a6      	b.n	800820c <_printf_i+0x164>
 80082be:	2301      	movs	r3, #1
 80082c0:	4632      	mov	r2, r6
 80082c2:	4649      	mov	r1, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	47d0      	blx	sl
 80082c8:	3001      	adds	r0, #1
 80082ca:	d09d      	beq.n	8008208 <_printf_i+0x160>
 80082cc:	3501      	adds	r5, #1
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	9903      	ldr	r1, [sp, #12]
 80082d2:	1a5b      	subs	r3, r3, r1
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	dcf2      	bgt.n	80082be <_printf_i+0x216>
 80082d8:	e7eb      	b.n	80082b2 <_printf_i+0x20a>
 80082da:	2500      	movs	r5, #0
 80082dc:	f104 0619 	add.w	r6, r4, #25
 80082e0:	e7f5      	b.n	80082ce <_printf_i+0x226>
 80082e2:	bf00      	nop
 80082e4:	0800be73 	.word	0x0800be73
 80082e8:	0800be84 	.word	0x0800be84

080082ec <_scanf_float>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	b087      	sub	sp, #28
 80082f2:	4617      	mov	r7, r2
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	688b      	ldr	r3, [r1, #8]
 80082f8:	1e5a      	subs	r2, r3, #1
 80082fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80082fe:	bf83      	ittte	hi
 8008300:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008304:	195b      	addhi	r3, r3, r5
 8008306:	9302      	strhi	r3, [sp, #8]
 8008308:	2300      	movls	r3, #0
 800830a:	bf86      	itte	hi
 800830c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008310:	608b      	strhi	r3, [r1, #8]
 8008312:	9302      	strls	r3, [sp, #8]
 8008314:	680b      	ldr	r3, [r1, #0]
 8008316:	468b      	mov	fp, r1
 8008318:	2500      	movs	r5, #0
 800831a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800831e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008326:	4680      	mov	r8, r0
 8008328:	460c      	mov	r4, r1
 800832a:	465e      	mov	r6, fp
 800832c:	46aa      	mov	sl, r5
 800832e:	46a9      	mov	r9, r5
 8008330:	9501      	str	r5, [sp, #4]
 8008332:	68a2      	ldr	r2, [r4, #8]
 8008334:	b152      	cbz	r2, 800834c <_scanf_float+0x60>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b4e      	cmp	r3, #78	; 0x4e
 800833c:	d864      	bhi.n	8008408 <_scanf_float+0x11c>
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d83c      	bhi.n	80083bc <_scanf_float+0xd0>
 8008342:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008346:	b2c8      	uxtb	r0, r1
 8008348:	280e      	cmp	r0, #14
 800834a:	d93a      	bls.n	80083c2 <_scanf_float+0xd6>
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	d003      	beq.n	800835a <_scanf_float+0x6e>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800835e:	f1ba 0f01 	cmp.w	sl, #1
 8008362:	f200 8113 	bhi.w	800858c <_scanf_float+0x2a0>
 8008366:	455e      	cmp	r6, fp
 8008368:	f200 8105 	bhi.w	8008576 <_scanf_float+0x28a>
 800836c:	2501      	movs	r5, #1
 800836e:	4628      	mov	r0, r5
 8008370:	b007      	add	sp, #28
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800837a:	2a0d      	cmp	r2, #13
 800837c:	d8e6      	bhi.n	800834c <_scanf_float+0x60>
 800837e:	a101      	add	r1, pc, #4	; (adr r1, 8008384 <_scanf_float+0x98>)
 8008380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008384:	080084c3 	.word	0x080084c3
 8008388:	0800834d 	.word	0x0800834d
 800838c:	0800834d 	.word	0x0800834d
 8008390:	0800834d 	.word	0x0800834d
 8008394:	08008523 	.word	0x08008523
 8008398:	080084fb 	.word	0x080084fb
 800839c:	0800834d 	.word	0x0800834d
 80083a0:	0800834d 	.word	0x0800834d
 80083a4:	080084d1 	.word	0x080084d1
 80083a8:	0800834d 	.word	0x0800834d
 80083ac:	0800834d 	.word	0x0800834d
 80083b0:	0800834d 	.word	0x0800834d
 80083b4:	0800834d 	.word	0x0800834d
 80083b8:	08008489 	.word	0x08008489
 80083bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083c0:	e7db      	b.n	800837a <_scanf_float+0x8e>
 80083c2:	290e      	cmp	r1, #14
 80083c4:	d8c2      	bhi.n	800834c <_scanf_float+0x60>
 80083c6:	a001      	add	r0, pc, #4	; (adr r0, 80083cc <_scanf_float+0xe0>)
 80083c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083cc:	0800847b 	.word	0x0800847b
 80083d0:	0800834d 	.word	0x0800834d
 80083d4:	0800847b 	.word	0x0800847b
 80083d8:	0800850f 	.word	0x0800850f
 80083dc:	0800834d 	.word	0x0800834d
 80083e0:	08008429 	.word	0x08008429
 80083e4:	08008465 	.word	0x08008465
 80083e8:	08008465 	.word	0x08008465
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008465 	.word	0x08008465
 80083f4:	08008465 	.word	0x08008465
 80083f8:	08008465 	.word	0x08008465
 80083fc:	08008465 	.word	0x08008465
 8008400:	08008465 	.word	0x08008465
 8008404:	08008465 	.word	0x08008465
 8008408:	2b6e      	cmp	r3, #110	; 0x6e
 800840a:	d809      	bhi.n	8008420 <_scanf_float+0x134>
 800840c:	2b60      	cmp	r3, #96	; 0x60
 800840e:	d8b2      	bhi.n	8008376 <_scanf_float+0x8a>
 8008410:	2b54      	cmp	r3, #84	; 0x54
 8008412:	d077      	beq.n	8008504 <_scanf_float+0x218>
 8008414:	2b59      	cmp	r3, #89	; 0x59
 8008416:	d199      	bne.n	800834c <_scanf_float+0x60>
 8008418:	2d07      	cmp	r5, #7
 800841a:	d197      	bne.n	800834c <_scanf_float+0x60>
 800841c:	2508      	movs	r5, #8
 800841e:	e029      	b.n	8008474 <_scanf_float+0x188>
 8008420:	2b74      	cmp	r3, #116	; 0x74
 8008422:	d06f      	beq.n	8008504 <_scanf_float+0x218>
 8008424:	2b79      	cmp	r3, #121	; 0x79
 8008426:	e7f6      	b.n	8008416 <_scanf_float+0x12a>
 8008428:	6821      	ldr	r1, [r4, #0]
 800842a:	05c8      	lsls	r0, r1, #23
 800842c:	d51a      	bpl.n	8008464 <_scanf_float+0x178>
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008434:	6021      	str	r1, [r4, #0]
 8008436:	f109 0901 	add.w	r9, r9, #1
 800843a:	b11b      	cbz	r3, 8008444 <_scanf_float+0x158>
 800843c:	3b01      	subs	r3, #1
 800843e:	3201      	adds	r2, #1
 8008440:	9302      	str	r3, [sp, #8]
 8008442:	60a2      	str	r2, [r4, #8]
 8008444:	68a3      	ldr	r3, [r4, #8]
 8008446:	3b01      	subs	r3, #1
 8008448:	60a3      	str	r3, [r4, #8]
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	3301      	adds	r3, #1
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3b01      	subs	r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	607b      	str	r3, [r7, #4]
 8008458:	f340 8084 	ble.w	8008564 <_scanf_float+0x278>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	3301      	adds	r3, #1
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	e766      	b.n	8008332 <_scanf_float+0x46>
 8008464:	eb1a 0f05 	cmn.w	sl, r5
 8008468:	f47f af70 	bne.w	800834c <_scanf_float+0x60>
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	f806 3b01 	strb.w	r3, [r6], #1
 8008478:	e7e4      	b.n	8008444 <_scanf_float+0x158>
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	0610      	lsls	r0, r2, #24
 800847e:	f57f af65 	bpl.w	800834c <_scanf_float+0x60>
 8008482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008486:	e7f4      	b.n	8008472 <_scanf_float+0x186>
 8008488:	f1ba 0f00 	cmp.w	sl, #0
 800848c:	d10e      	bne.n	80084ac <_scanf_float+0x1c0>
 800848e:	f1b9 0f00 	cmp.w	r9, #0
 8008492:	d10e      	bne.n	80084b2 <_scanf_float+0x1c6>
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800849a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800849e:	d108      	bne.n	80084b2 <_scanf_float+0x1c6>
 80084a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084a4:	6022      	str	r2, [r4, #0]
 80084a6:	f04f 0a01 	mov.w	sl, #1
 80084aa:	e7e3      	b.n	8008474 <_scanf_float+0x188>
 80084ac:	f1ba 0f02 	cmp.w	sl, #2
 80084b0:	d055      	beq.n	800855e <_scanf_float+0x272>
 80084b2:	2d01      	cmp	r5, #1
 80084b4:	d002      	beq.n	80084bc <_scanf_float+0x1d0>
 80084b6:	2d04      	cmp	r5, #4
 80084b8:	f47f af48 	bne.w	800834c <_scanf_float+0x60>
 80084bc:	3501      	adds	r5, #1
 80084be:	b2ed      	uxtb	r5, r5
 80084c0:	e7d8      	b.n	8008474 <_scanf_float+0x188>
 80084c2:	f1ba 0f01 	cmp.w	sl, #1
 80084c6:	f47f af41 	bne.w	800834c <_scanf_float+0x60>
 80084ca:	f04f 0a02 	mov.w	sl, #2
 80084ce:	e7d1      	b.n	8008474 <_scanf_float+0x188>
 80084d0:	b97d      	cbnz	r5, 80084f2 <_scanf_float+0x206>
 80084d2:	f1b9 0f00 	cmp.w	r9, #0
 80084d6:	f47f af3c 	bne.w	8008352 <_scanf_float+0x66>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084e4:	f47f af39 	bne.w	800835a <_scanf_float+0x6e>
 80084e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084ec:	6022      	str	r2, [r4, #0]
 80084ee:	2501      	movs	r5, #1
 80084f0:	e7c0      	b.n	8008474 <_scanf_float+0x188>
 80084f2:	2d03      	cmp	r5, #3
 80084f4:	d0e2      	beq.n	80084bc <_scanf_float+0x1d0>
 80084f6:	2d05      	cmp	r5, #5
 80084f8:	e7de      	b.n	80084b8 <_scanf_float+0x1cc>
 80084fa:	2d02      	cmp	r5, #2
 80084fc:	f47f af26 	bne.w	800834c <_scanf_float+0x60>
 8008500:	2503      	movs	r5, #3
 8008502:	e7b7      	b.n	8008474 <_scanf_float+0x188>
 8008504:	2d06      	cmp	r5, #6
 8008506:	f47f af21 	bne.w	800834c <_scanf_float+0x60>
 800850a:	2507      	movs	r5, #7
 800850c:	e7b2      	b.n	8008474 <_scanf_float+0x188>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	0591      	lsls	r1, r2, #22
 8008512:	f57f af1b 	bpl.w	800834c <_scanf_float+0x60>
 8008516:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008520:	e7a8      	b.n	8008474 <_scanf_float+0x188>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008528:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800852c:	d006      	beq.n	800853c <_scanf_float+0x250>
 800852e:	0550      	lsls	r0, r2, #21
 8008530:	f57f af0c 	bpl.w	800834c <_scanf_float+0x60>
 8008534:	f1b9 0f00 	cmp.w	r9, #0
 8008538:	f43f af0f 	beq.w	800835a <_scanf_float+0x6e>
 800853c:	0591      	lsls	r1, r2, #22
 800853e:	bf58      	it	pl
 8008540:	9901      	ldrpl	r1, [sp, #4]
 8008542:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008546:	bf58      	it	pl
 8008548:	eba9 0101 	subpl.w	r1, r9, r1
 800854c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008550:	bf58      	it	pl
 8008552:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008556:	6022      	str	r2, [r4, #0]
 8008558:	f04f 0900 	mov.w	r9, #0
 800855c:	e78a      	b.n	8008474 <_scanf_float+0x188>
 800855e:	f04f 0a03 	mov.w	sl, #3
 8008562:	e787      	b.n	8008474 <_scanf_float+0x188>
 8008564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008568:	4639      	mov	r1, r7
 800856a:	4640      	mov	r0, r8
 800856c:	4798      	blx	r3
 800856e:	2800      	cmp	r0, #0
 8008570:	f43f aedf 	beq.w	8008332 <_scanf_float+0x46>
 8008574:	e6ea      	b.n	800834c <_scanf_float+0x60>
 8008576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800857a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800857e:	463a      	mov	r2, r7
 8008580:	4640      	mov	r0, r8
 8008582:	4798      	blx	r3
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	3b01      	subs	r3, #1
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	e6ec      	b.n	8008366 <_scanf_float+0x7a>
 800858c:	1e6b      	subs	r3, r5, #1
 800858e:	2b06      	cmp	r3, #6
 8008590:	d825      	bhi.n	80085de <_scanf_float+0x2f2>
 8008592:	2d02      	cmp	r5, #2
 8008594:	d836      	bhi.n	8008604 <_scanf_float+0x318>
 8008596:	455e      	cmp	r6, fp
 8008598:	f67f aee8 	bls.w	800836c <_scanf_float+0x80>
 800859c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085a4:	463a      	mov	r2, r7
 80085a6:	4640      	mov	r0, r8
 80085a8:	4798      	blx	r3
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	e7f1      	b.n	8008596 <_scanf_float+0x2aa>
 80085b2:	9802      	ldr	r0, [sp, #8]
 80085b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085bc:	9002      	str	r0, [sp, #8]
 80085be:	463a      	mov	r2, r7
 80085c0:	4640      	mov	r0, r8
 80085c2:	4798      	blx	r3
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085ce:	fa5f fa8a 	uxtb.w	sl, sl
 80085d2:	f1ba 0f02 	cmp.w	sl, #2
 80085d6:	d1ec      	bne.n	80085b2 <_scanf_float+0x2c6>
 80085d8:	3d03      	subs	r5, #3
 80085da:	b2ed      	uxtb	r5, r5
 80085dc:	1b76      	subs	r6, r6, r5
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	05da      	lsls	r2, r3, #23
 80085e2:	d52f      	bpl.n	8008644 <_scanf_float+0x358>
 80085e4:	055b      	lsls	r3, r3, #21
 80085e6:	d510      	bpl.n	800860a <_scanf_float+0x31e>
 80085e8:	455e      	cmp	r6, fp
 80085ea:	f67f aebf 	bls.w	800836c <_scanf_float+0x80>
 80085ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085f6:	463a      	mov	r2, r7
 80085f8:	4640      	mov	r0, r8
 80085fa:	4798      	blx	r3
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	3b01      	subs	r3, #1
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	e7f1      	b.n	80085e8 <_scanf_float+0x2fc>
 8008604:	46aa      	mov	sl, r5
 8008606:	9602      	str	r6, [sp, #8]
 8008608:	e7df      	b.n	80085ca <_scanf_float+0x2de>
 800860a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	2965      	cmp	r1, #101	; 0x65
 8008612:	f103 33ff 	add.w	r3, r3, #4294967295
 8008616:	f106 35ff 	add.w	r5, r6, #4294967295
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	d00c      	beq.n	8008638 <_scanf_float+0x34c>
 800861e:	2945      	cmp	r1, #69	; 0x45
 8008620:	d00a      	beq.n	8008638 <_scanf_float+0x34c>
 8008622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008626:	463a      	mov	r2, r7
 8008628:	4640      	mov	r0, r8
 800862a:	4798      	blx	r3
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008632:	3b01      	subs	r3, #1
 8008634:	1eb5      	subs	r5, r6, #2
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800863c:	463a      	mov	r2, r7
 800863e:	4640      	mov	r0, r8
 8008640:	4798      	blx	r3
 8008642:	462e      	mov	r6, r5
 8008644:	6825      	ldr	r5, [r4, #0]
 8008646:	f015 0510 	ands.w	r5, r5, #16
 800864a:	d158      	bne.n	80086fe <_scanf_float+0x412>
 800864c:	7035      	strb	r5, [r6, #0]
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d11c      	bne.n	8008694 <_scanf_float+0x3a8>
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	454b      	cmp	r3, r9
 800865e:	eba3 0209 	sub.w	r2, r3, r9
 8008662:	d124      	bne.n	80086ae <_scanf_float+0x3c2>
 8008664:	2200      	movs	r2, #0
 8008666:	4659      	mov	r1, fp
 8008668:	4640      	mov	r0, r8
 800866a:	f7ff f939 	bl	80078e0 <_strtod_r>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	6821      	ldr	r1, [r4, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f011 0f02 	tst.w	r1, #2
 8008678:	ec57 6b10 	vmov	r6, r7, d0
 800867c:	f103 0204 	add.w	r2, r3, #4
 8008680:	d020      	beq.n	80086c4 <_scanf_float+0x3d8>
 8008682:	9903      	ldr	r1, [sp, #12]
 8008684:	600a      	str	r2, [r1, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	e9c3 6700 	strd	r6, r7, [r3]
 800868c:	68e3      	ldr	r3, [r4, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60e3      	str	r3, [r4, #12]
 8008692:	e66c      	b.n	800836e <_scanf_float+0x82>
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0e4      	beq.n	8008664 <_scanf_float+0x378>
 800869a:	9905      	ldr	r1, [sp, #20]
 800869c:	230a      	movs	r3, #10
 800869e:	462a      	mov	r2, r5
 80086a0:	3101      	adds	r1, #1
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7ff f9b0 	bl	8007a08 <_strtol_r>
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	9e05      	ldr	r6, [sp, #20]
 80086ac:	1ac2      	subs	r2, r0, r3
 80086ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086b2:	429e      	cmp	r6, r3
 80086b4:	bf28      	it	cs
 80086b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086ba:	4912      	ldr	r1, [pc, #72]	; (8008704 <_scanf_float+0x418>)
 80086bc:	4630      	mov	r0, r6
 80086be:	f000 f955 	bl	800896c <siprintf>
 80086c2:	e7cf      	b.n	8008664 <_scanf_float+0x378>
 80086c4:	f011 0f04 	tst.w	r1, #4
 80086c8:	9903      	ldr	r1, [sp, #12]
 80086ca:	600a      	str	r2, [r1, #0]
 80086cc:	d1db      	bne.n	8008686 <_scanf_float+0x39a>
 80086ce:	f8d3 8000 	ldr.w	r8, [r3]
 80086d2:	ee10 2a10 	vmov	r2, s0
 80086d6:	ee10 0a10 	vmov	r0, s0
 80086da:	463b      	mov	r3, r7
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f8 fa35 	bl	8000b4c <__aeabi_dcmpun>
 80086e2:	b128      	cbz	r0, 80086f0 <_scanf_float+0x404>
 80086e4:	4808      	ldr	r0, [pc, #32]	; (8008708 <_scanf_float+0x41c>)
 80086e6:	f000 fb7b 	bl	8008de0 <nanf>
 80086ea:	ed88 0a00 	vstr	s0, [r8]
 80086ee:	e7cd      	b.n	800868c <_scanf_float+0x3a0>
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 fa88 	bl	8000c08 <__aeabi_d2f>
 80086f8:	f8c8 0000 	str.w	r0, [r8]
 80086fc:	e7c6      	b.n	800868c <_scanf_float+0x3a0>
 80086fe:	2500      	movs	r5, #0
 8008700:	e635      	b.n	800836e <_scanf_float+0x82>
 8008702:	bf00      	nop
 8008704:	0800be95 	.word	0x0800be95
 8008708:	0800bf4e 	.word	0x0800bf4e

0800870c <std>:
 800870c:	2300      	movs	r3, #0
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	e9c0 3300 	strd	r3, r3, [r0]
 8008716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800871a:	6083      	str	r3, [r0, #8]
 800871c:	8181      	strh	r1, [r0, #12]
 800871e:	6643      	str	r3, [r0, #100]	; 0x64
 8008720:	81c2      	strh	r2, [r0, #14]
 8008722:	6183      	str	r3, [r0, #24]
 8008724:	4619      	mov	r1, r3
 8008726:	2208      	movs	r2, #8
 8008728:	305c      	adds	r0, #92	; 0x5c
 800872a:	f000 fa17 	bl	8008b5c <memset>
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <std+0x58>)
 8008730:	6263      	str	r3, [r4, #36]	; 0x24
 8008732:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <std+0x5c>)
 8008734:	62a3      	str	r3, [r4, #40]	; 0x28
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <std+0x60>)
 8008738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <std+0x64>)
 800873c:	6323      	str	r3, [r4, #48]	; 0x30
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <std+0x68>)
 8008740:	6224      	str	r4, [r4, #32]
 8008742:	429c      	cmp	r4, r3
 8008744:	d006      	beq.n	8008754 <std+0x48>
 8008746:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800874a:	4294      	cmp	r4, r2
 800874c:	d002      	beq.n	8008754 <std+0x48>
 800874e:	33d0      	adds	r3, #208	; 0xd0
 8008750:	429c      	cmp	r4, r3
 8008752:	d105      	bne.n	8008760 <std+0x54>
 8008754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800875c:	f000 bb1e 	b.w	8008d9c <__retarget_lock_init_recursive>
 8008760:	bd10      	pop	{r4, pc}
 8008762:	bf00      	nop
 8008764:	080089ad 	.word	0x080089ad
 8008768:	080089cf 	.word	0x080089cf
 800876c:	08008a07 	.word	0x08008a07
 8008770:	08008a2b 	.word	0x08008a2b
 8008774:	20000bf8 	.word	0x20000bf8

08008778 <stdio_exit_handler>:
 8008778:	4a02      	ldr	r2, [pc, #8]	; (8008784 <stdio_exit_handler+0xc>)
 800877a:	4903      	ldr	r1, [pc, #12]	; (8008788 <stdio_exit_handler+0x10>)
 800877c:	4803      	ldr	r0, [pc, #12]	; (800878c <stdio_exit_handler+0x14>)
 800877e:	f000 b869 	b.w	8008854 <_fwalk_sglue>
 8008782:	bf00      	nop
 8008784:	20000030 	.word	0x20000030
 8008788:	0800b3a9 	.word	0x0800b3a9
 800878c:	200001a8 	.word	0x200001a8

08008790 <cleanup_stdio>:
 8008790:	6841      	ldr	r1, [r0, #4]
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <cleanup_stdio+0x34>)
 8008794:	4299      	cmp	r1, r3
 8008796:	b510      	push	{r4, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	d001      	beq.n	80087a0 <cleanup_stdio+0x10>
 800879c:	f002 fe04 	bl	800b3a8 <_fflush_r>
 80087a0:	68a1      	ldr	r1, [r4, #8]
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <cleanup_stdio+0x38>)
 80087a4:	4299      	cmp	r1, r3
 80087a6:	d002      	beq.n	80087ae <cleanup_stdio+0x1e>
 80087a8:	4620      	mov	r0, r4
 80087aa:	f002 fdfd 	bl	800b3a8 <_fflush_r>
 80087ae:	68e1      	ldr	r1, [r4, #12]
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <cleanup_stdio+0x3c>)
 80087b2:	4299      	cmp	r1, r3
 80087b4:	d004      	beq.n	80087c0 <cleanup_stdio+0x30>
 80087b6:	4620      	mov	r0, r4
 80087b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087bc:	f002 bdf4 	b.w	800b3a8 <_fflush_r>
 80087c0:	bd10      	pop	{r4, pc}
 80087c2:	bf00      	nop
 80087c4:	20000bf8 	.word	0x20000bf8
 80087c8:	20000c60 	.word	0x20000c60
 80087cc:	20000cc8 	.word	0x20000cc8

080087d0 <global_stdio_init.part.0>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <global_stdio_init.part.0+0x30>)
 80087d4:	4c0b      	ldr	r4, [pc, #44]	; (8008804 <global_stdio_init.part.0+0x34>)
 80087d6:	4a0c      	ldr	r2, [pc, #48]	; (8008808 <global_stdio_init.part.0+0x38>)
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	4620      	mov	r0, r4
 80087dc:	2200      	movs	r2, #0
 80087de:	2104      	movs	r1, #4
 80087e0:	f7ff ff94 	bl	800870c <std>
 80087e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087e8:	2201      	movs	r2, #1
 80087ea:	2109      	movs	r1, #9
 80087ec:	f7ff ff8e 	bl	800870c <std>
 80087f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087f4:	2202      	movs	r2, #2
 80087f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087fa:	2112      	movs	r1, #18
 80087fc:	f7ff bf86 	b.w	800870c <std>
 8008800:	20000d30 	.word	0x20000d30
 8008804:	20000bf8 	.word	0x20000bf8
 8008808:	08008779 	.word	0x08008779

0800880c <__sfp_lock_acquire>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__sfp_lock_acquire+0x8>)
 800880e:	f000 bac6 	b.w	8008d9e <__retarget_lock_acquire_recursive>
 8008812:	bf00      	nop
 8008814:	20000d39 	.word	0x20000d39

08008818 <__sfp_lock_release>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__sfp_lock_release+0x8>)
 800881a:	f000 bac1 	b.w	8008da0 <__retarget_lock_release_recursive>
 800881e:	bf00      	nop
 8008820:	20000d39 	.word	0x20000d39

08008824 <__sinit>:
 8008824:	b510      	push	{r4, lr}
 8008826:	4604      	mov	r4, r0
 8008828:	f7ff fff0 	bl	800880c <__sfp_lock_acquire>
 800882c:	6a23      	ldr	r3, [r4, #32]
 800882e:	b11b      	cbz	r3, 8008838 <__sinit+0x14>
 8008830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008834:	f7ff bff0 	b.w	8008818 <__sfp_lock_release>
 8008838:	4b04      	ldr	r3, [pc, #16]	; (800884c <__sinit+0x28>)
 800883a:	6223      	str	r3, [r4, #32]
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <__sinit+0x2c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f5      	bne.n	8008830 <__sinit+0xc>
 8008844:	f7ff ffc4 	bl	80087d0 <global_stdio_init.part.0>
 8008848:	e7f2      	b.n	8008830 <__sinit+0xc>
 800884a:	bf00      	nop
 800884c:	08008791 	.word	0x08008791
 8008850:	20000d30 	.word	0x20000d30

08008854 <_fwalk_sglue>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	4607      	mov	r7, r0
 800885a:	4688      	mov	r8, r1
 800885c:	4614      	mov	r4, r2
 800885e:	2600      	movs	r6, #0
 8008860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008864:	f1b9 0901 	subs.w	r9, r9, #1
 8008868:	d505      	bpl.n	8008876 <_fwalk_sglue+0x22>
 800886a:	6824      	ldr	r4, [r4, #0]
 800886c:	2c00      	cmp	r4, #0
 800886e:	d1f7      	bne.n	8008860 <_fwalk_sglue+0xc>
 8008870:	4630      	mov	r0, r6
 8008872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d907      	bls.n	800888c <_fwalk_sglue+0x38>
 800887c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008880:	3301      	adds	r3, #1
 8008882:	d003      	beq.n	800888c <_fwalk_sglue+0x38>
 8008884:	4629      	mov	r1, r5
 8008886:	4638      	mov	r0, r7
 8008888:	47c0      	blx	r8
 800888a:	4306      	orrs	r6, r0
 800888c:	3568      	adds	r5, #104	; 0x68
 800888e:	e7e9      	b.n	8008864 <_fwalk_sglue+0x10>

08008890 <iprintf>:
 8008890:	b40f      	push	{r0, r1, r2, r3}
 8008892:	b507      	push	{r0, r1, r2, lr}
 8008894:	4906      	ldr	r1, [pc, #24]	; (80088b0 <iprintf+0x20>)
 8008896:	ab04      	add	r3, sp, #16
 8008898:	6808      	ldr	r0, [r1, #0]
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	6881      	ldr	r1, [r0, #8]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f002 fbe1 	bl	800b068 <_vfiprintf_r>
 80088a6:	b003      	add	sp, #12
 80088a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ac:	b004      	add	sp, #16
 80088ae:	4770      	bx	lr
 80088b0:	200001f4 	.word	0x200001f4

080088b4 <_puts_r>:
 80088b4:	6a03      	ldr	r3, [r0, #32]
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	6884      	ldr	r4, [r0, #8]
 80088ba:	4605      	mov	r5, r0
 80088bc:	460e      	mov	r6, r1
 80088be:	b90b      	cbnz	r3, 80088c4 <_puts_r+0x10>
 80088c0:	f7ff ffb0 	bl	8008824 <__sinit>
 80088c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088c6:	07db      	lsls	r3, r3, #31
 80088c8:	d405      	bmi.n	80088d6 <_puts_r+0x22>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	0598      	lsls	r0, r3, #22
 80088ce:	d402      	bmi.n	80088d6 <_puts_r+0x22>
 80088d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088d2:	f000 fa64 	bl	8008d9e <__retarget_lock_acquire_recursive>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	0719      	lsls	r1, r3, #28
 80088da:	d513      	bpl.n	8008904 <_puts_r+0x50>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	b18b      	cbz	r3, 8008904 <_puts_r+0x50>
 80088e0:	3e01      	subs	r6, #1
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088e8:	3b01      	subs	r3, #1
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	b9e9      	cbnz	r1, 800892a <_puts_r+0x76>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da2e      	bge.n	8008950 <_puts_r+0x9c>
 80088f2:	4622      	mov	r2, r4
 80088f4:	210a      	movs	r1, #10
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f89b 	bl	8008a32 <__swbuf_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	d007      	beq.n	8008910 <_puts_r+0x5c>
 8008900:	250a      	movs	r5, #10
 8008902:	e007      	b.n	8008914 <_puts_r+0x60>
 8008904:	4621      	mov	r1, r4
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f8d0 	bl	8008aac <__swsetup_r>
 800890c:	2800      	cmp	r0, #0
 800890e:	d0e7      	beq.n	80088e0 <_puts_r+0x2c>
 8008910:	f04f 35ff 	mov.w	r5, #4294967295
 8008914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008916:	07da      	lsls	r2, r3, #31
 8008918:	d405      	bmi.n	8008926 <_puts_r+0x72>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	059b      	lsls	r3, r3, #22
 800891e:	d402      	bmi.n	8008926 <_puts_r+0x72>
 8008920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008922:	f000 fa3d 	bl	8008da0 <__retarget_lock_release_recursive>
 8008926:	4628      	mov	r0, r5
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	2b00      	cmp	r3, #0
 800892c:	da04      	bge.n	8008938 <_puts_r+0x84>
 800892e:	69a2      	ldr	r2, [r4, #24]
 8008930:	429a      	cmp	r2, r3
 8008932:	dc06      	bgt.n	8008942 <_puts_r+0x8e>
 8008934:	290a      	cmp	r1, #10
 8008936:	d004      	beq.n	8008942 <_puts_r+0x8e>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	7019      	strb	r1, [r3, #0]
 8008940:	e7cf      	b.n	80088e2 <_puts_r+0x2e>
 8008942:	4622      	mov	r2, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f874 	bl	8008a32 <__swbuf_r>
 800894a:	3001      	adds	r0, #1
 800894c:	d1c9      	bne.n	80088e2 <_puts_r+0x2e>
 800894e:	e7df      	b.n	8008910 <_puts_r+0x5c>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	250a      	movs	r5, #10
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	6022      	str	r2, [r4, #0]
 8008958:	701d      	strb	r5, [r3, #0]
 800895a:	e7db      	b.n	8008914 <_puts_r+0x60>

0800895c <puts>:
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <puts+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f7ff bfa7 	b.w	80088b4 <_puts_r>
 8008966:	bf00      	nop
 8008968:	200001f4 	.word	0x200001f4

0800896c <siprintf>:
 800896c:	b40e      	push	{r1, r2, r3}
 800896e:	b500      	push	{lr}
 8008970:	b09c      	sub	sp, #112	; 0x70
 8008972:	ab1d      	add	r3, sp, #116	; 0x74
 8008974:	9002      	str	r0, [sp, #8]
 8008976:	9006      	str	r0, [sp, #24]
 8008978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800897c:	4809      	ldr	r0, [pc, #36]	; (80089a4 <siprintf+0x38>)
 800897e:	9107      	str	r1, [sp, #28]
 8008980:	9104      	str	r1, [sp, #16]
 8008982:	4909      	ldr	r1, [pc, #36]	; (80089a8 <siprintf+0x3c>)
 8008984:	f853 2b04 	ldr.w	r2, [r3], #4
 8008988:	9105      	str	r1, [sp, #20]
 800898a:	6800      	ldr	r0, [r0, #0]
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	a902      	add	r1, sp, #8
 8008990:	f002 fa42 	bl	800ae18 <_svfiprintf_r>
 8008994:	9b02      	ldr	r3, [sp, #8]
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	b01c      	add	sp, #112	; 0x70
 800899c:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a0:	b003      	add	sp, #12
 80089a2:	4770      	bx	lr
 80089a4:	200001f4 	.word	0x200001f4
 80089a8:	ffff0208 	.word	0xffff0208

080089ac <__sread>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	f000 f9a4 	bl	8008d00 <_read_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	bfab      	itete	ge
 80089bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089be:	89a3      	ldrhlt	r3, [r4, #12]
 80089c0:	181b      	addge	r3, r3, r0
 80089c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c6:	bfac      	ite	ge
 80089c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ca:	81a3      	strhlt	r3, [r4, #12]
 80089cc:	bd10      	pop	{r4, pc}

080089ce <__swrite>:
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	461f      	mov	r7, r3
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	05db      	lsls	r3, r3, #23
 80089d8:	4605      	mov	r5, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	4616      	mov	r6, r2
 80089de:	d505      	bpl.n	80089ec <__swrite+0x1e>
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	2302      	movs	r3, #2
 80089e6:	2200      	movs	r2, #0
 80089e8:	f000 f978 	bl	8008cdc <_lseek_r>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	4632      	mov	r2, r6
 80089fa:	463b      	mov	r3, r7
 80089fc:	4628      	mov	r0, r5
 80089fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a02:	f000 b98f 	b.w	8008d24 <_write_r>

08008a06 <__sseek>:
 8008a06:	b510      	push	{r4, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0e:	f000 f965 	bl	8008cdc <_lseek_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	bf15      	itete	ne
 8008a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a22:	81a3      	strheq	r3, [r4, #12]
 8008a24:	bf18      	it	ne
 8008a26:	81a3      	strhne	r3, [r4, #12]
 8008a28:	bd10      	pop	{r4, pc}

08008a2a <__sclose>:
 8008a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2e:	f000 b945 	b.w	8008cbc <_close_r>

08008a32 <__swbuf_r>:
 8008a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a34:	460e      	mov	r6, r1
 8008a36:	4614      	mov	r4, r2
 8008a38:	4605      	mov	r5, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <__swbuf_r+0x12>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <__swbuf_r+0x12>
 8008a40:	f7ff fef0 	bl	8008824 <__sinit>
 8008a44:	69a3      	ldr	r3, [r4, #24]
 8008a46:	60a3      	str	r3, [r4, #8]
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	071a      	lsls	r2, r3, #28
 8008a4c:	d525      	bpl.n	8008a9a <__swbuf_r+0x68>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	b31b      	cbz	r3, 8008a9a <__swbuf_r+0x68>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	1a98      	subs	r0, r3, r2
 8008a58:	6963      	ldr	r3, [r4, #20]
 8008a5a:	b2f6      	uxtb	r6, r6
 8008a5c:	4283      	cmp	r3, r0
 8008a5e:	4637      	mov	r7, r6
 8008a60:	dc04      	bgt.n	8008a6c <__swbuf_r+0x3a>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	f002 fc9f 	bl	800b3a8 <_fflush_r>
 8008a6a:	b9e0      	cbnz	r0, 8008aa6 <__swbuf_r+0x74>
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	701e      	strb	r6, [r3, #0]
 8008a7a:	6962      	ldr	r2, [r4, #20]
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d004      	beq.n	8008a8c <__swbuf_r+0x5a>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	07db      	lsls	r3, r3, #31
 8008a86:	d506      	bpl.n	8008a96 <__swbuf_r+0x64>
 8008a88:	2e0a      	cmp	r6, #10
 8008a8a:	d104      	bne.n	8008a96 <__swbuf_r+0x64>
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f002 fc8a 	bl	800b3a8 <_fflush_r>
 8008a94:	b938      	cbnz	r0, 8008aa6 <__swbuf_r+0x74>
 8008a96:	4638      	mov	r0, r7
 8008a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 f805 	bl	8008aac <__swsetup_r>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0d5      	beq.n	8008a52 <__swbuf_r+0x20>
 8008aa6:	f04f 37ff 	mov.w	r7, #4294967295
 8008aaa:	e7f4      	b.n	8008a96 <__swbuf_r+0x64>

08008aac <__swsetup_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <__swsetup_r+0xac>)
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	b118      	cbz	r0, 8008ac0 <__swsetup_r+0x14>
 8008ab8:	6a03      	ldr	r3, [r0, #32]
 8008aba:	b90b      	cbnz	r3, 8008ac0 <__swsetup_r+0x14>
 8008abc:	f7ff feb2 	bl	8008824 <__sinit>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac6:	0718      	lsls	r0, r3, #28
 8008ac8:	d422      	bmi.n	8008b10 <__swsetup_r+0x64>
 8008aca:	06d9      	lsls	r1, r3, #27
 8008acc:	d407      	bmi.n	8008ade <__swsetup_r+0x32>
 8008ace:	2309      	movs	r3, #9
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	e034      	b.n	8008b48 <__swsetup_r+0x9c>
 8008ade:	0758      	lsls	r0, r3, #29
 8008ae0:	d512      	bpl.n	8008b08 <__swsetup_r+0x5c>
 8008ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae4:	b141      	cbz	r1, 8008af8 <__swsetup_r+0x4c>
 8008ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d002      	beq.n	8008af4 <__swsetup_r+0x48>
 8008aee:	4628      	mov	r0, r5
 8008af0:	f001 f814 	bl	8009b1c <_free_r>
 8008af4:	2300      	movs	r3, #0
 8008af6:	6363      	str	r3, [r4, #52]	; 0x34
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	2300      	movs	r3, #0
 8008b02:	6063      	str	r3, [r4, #4]
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f043 0308 	orr.w	r3, r3, #8
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b94b      	cbnz	r3, 8008b28 <__swsetup_r+0x7c>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b1e:	d003      	beq.n	8008b28 <__swsetup_r+0x7c>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f002 fca0 	bl	800b468 <__smakebuf_r>
 8008b28:	89a0      	ldrh	r0, [r4, #12]
 8008b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b2e:	f010 0301 	ands.w	r3, r0, #1
 8008b32:	d00a      	beq.n	8008b4a <__swsetup_r+0x9e>
 8008b34:	2300      	movs	r3, #0
 8008b36:	60a3      	str	r3, [r4, #8]
 8008b38:	6963      	ldr	r3, [r4, #20]
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	61a3      	str	r3, [r4, #24]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	b943      	cbnz	r3, 8008b54 <__swsetup_r+0xa8>
 8008b42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b46:	d1c4      	bne.n	8008ad2 <__swsetup_r+0x26>
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	0781      	lsls	r1, r0, #30
 8008b4c:	bf58      	it	pl
 8008b4e:	6963      	ldrpl	r3, [r4, #20]
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	e7f4      	b.n	8008b3e <__swsetup_r+0x92>
 8008b54:	2000      	movs	r0, #0
 8008b56:	e7f7      	b.n	8008b48 <__swsetup_r+0x9c>
 8008b58:	200001f4 	.word	0x200001f4

08008b5c <memset>:
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d100      	bne.n	8008b66 <memset+0xa>
 8008b64:	4770      	bx	lr
 8008b66:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6a:	e7f9      	b.n	8008b60 <memset+0x4>

08008b6c <strchr>:
 8008b6c:	b2c9      	uxtb	r1, r1
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b74:	b11a      	cbz	r2, 8008b7e <strchr+0x12>
 8008b76:	428a      	cmp	r2, r1
 8008b78:	d1f9      	bne.n	8008b6e <strchr+0x2>
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	4770      	bx	lr
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	bf18      	it	ne
 8008b82:	2300      	movne	r3, #0
 8008b84:	e7f9      	b.n	8008b7a <strchr+0xe>

08008b86 <strncmp>:
 8008b86:	b510      	push	{r4, lr}
 8008b88:	b16a      	cbz	r2, 8008ba6 <strncmp+0x20>
 8008b8a:	3901      	subs	r1, #1
 8008b8c:	1884      	adds	r4, r0, r2
 8008b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d103      	bne.n	8008ba2 <strncmp+0x1c>
 8008b9a:	42a0      	cmp	r0, r4
 8008b9c:	d001      	beq.n	8008ba2 <strncmp+0x1c>
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d1f5      	bne.n	8008b8e <strncmp+0x8>
 8008ba2:	1ad0      	subs	r0, r2, r3
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	e7fc      	b.n	8008ba4 <strncmp+0x1e>

08008baa <strncpy>:
 8008baa:	b510      	push	{r4, lr}
 8008bac:	3901      	subs	r1, #1
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b132      	cbz	r2, 8008bc0 <strncpy+0x16>
 8008bb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bb6:	f803 4b01 	strb.w	r4, [r3], #1
 8008bba:	3a01      	subs	r2, #1
 8008bbc:	2c00      	cmp	r4, #0
 8008bbe:	d1f7      	bne.n	8008bb0 <strncpy+0x6>
 8008bc0:	441a      	add	r2, r3
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d100      	bne.n	8008bca <strncpy+0x20>
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	f803 1b01 	strb.w	r1, [r3], #1
 8008bce:	e7f9      	b.n	8008bc4 <strncpy+0x1a>

08008bd0 <strtok>:
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <strtok+0x5c>)
 8008bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008bd8:	4605      	mov	r5, r0
 8008bda:	b9fc      	cbnz	r4, 8008c1c <strtok+0x4c>
 8008bdc:	2050      	movs	r0, #80	; 0x50
 8008bde:	9101      	str	r1, [sp, #4]
 8008be0:	f001 fb40 	bl	800a264 <malloc>
 8008be4:	9901      	ldr	r1, [sp, #4]
 8008be6:	6470      	str	r0, [r6, #68]	; 0x44
 8008be8:	4602      	mov	r2, r0
 8008bea:	b920      	cbnz	r0, 8008bf6 <strtok+0x26>
 8008bec:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <strtok+0x60>)
 8008bee:	4811      	ldr	r0, [pc, #68]	; (8008c34 <strtok+0x64>)
 8008bf0:	215b      	movs	r1, #91	; 0x5b
 8008bf2:	f000 f8fb 	bl	8008dec <__assert_func>
 8008bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8008bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008c16:	6184      	str	r4, [r0, #24]
 8008c18:	7704      	strb	r4, [r0, #28]
 8008c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8008c1c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4628      	mov	r0, r5
 8008c22:	b002      	add	sp, #8
 8008c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c28:	f000 b806 	b.w	8008c38 <__strtok_r>
 8008c2c:	200001f4 	.word	0x200001f4
 8008c30:	0800be9a 	.word	0x0800be9a
 8008c34:	0800beb1 	.word	0x0800beb1

08008c38 <__strtok_r>:
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	b908      	cbnz	r0, 8008c40 <__strtok_r+0x8>
 8008c3c:	6810      	ldr	r0, [r2, #0]
 8008c3e:	b188      	cbz	r0, 8008c64 <__strtok_r+0x2c>
 8008c40:	4604      	mov	r4, r0
 8008c42:	4620      	mov	r0, r4
 8008c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008c48:	460f      	mov	r7, r1
 8008c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008c4e:	b91e      	cbnz	r6, 8008c58 <__strtok_r+0x20>
 8008c50:	b965      	cbnz	r5, 8008c6c <__strtok_r+0x34>
 8008c52:	6015      	str	r5, [r2, #0]
 8008c54:	4628      	mov	r0, r5
 8008c56:	e005      	b.n	8008c64 <__strtok_r+0x2c>
 8008c58:	42b5      	cmp	r5, r6
 8008c5a:	d1f6      	bne.n	8008c4a <__strtok_r+0x12>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f0      	bne.n	8008c42 <__strtok_r+0xa>
 8008c60:	6014      	str	r4, [r2, #0]
 8008c62:	7003      	strb	r3, [r0, #0]
 8008c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c66:	461c      	mov	r4, r3
 8008c68:	e00c      	b.n	8008c84 <__strtok_r+0x4c>
 8008c6a:	b915      	cbnz	r5, 8008c72 <__strtok_r+0x3a>
 8008c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c70:	460e      	mov	r6, r1
 8008c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	d1f7      	bne.n	8008c6a <__strtok_r+0x32>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f3      	beq.n	8008c66 <__strtok_r+0x2e>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008c84:	6014      	str	r4, [r2, #0]
 8008c86:	e7ed      	b.n	8008c64 <__strtok_r+0x2c>

08008c88 <strstr>:
 8008c88:	780a      	ldrb	r2, [r1, #0]
 8008c8a:	b570      	push	{r4, r5, r6, lr}
 8008c8c:	b96a      	cbnz	r2, 8008caa <strstr+0x22>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d109      	bne.n	8008ca8 <strstr+0x20>
 8008c94:	460c      	mov	r4, r1
 8008c96:	4605      	mov	r5, r0
 8008c98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0f6      	beq.n	8008c8e <strstr+0x6>
 8008ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008ca4:	429e      	cmp	r6, r3
 8008ca6:	d0f7      	beq.n	8008c98 <strstr+0x10>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	7803      	ldrb	r3, [r0, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1ef      	bne.n	8008c90 <strstr+0x8>
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	e7ec      	b.n	8008c8e <strstr+0x6>

08008cb4 <_localeconv_r>:
 8008cb4:	4800      	ldr	r0, [pc, #0]	; (8008cb8 <_localeconv_r+0x4>)
 8008cb6:	4770      	bx	lr
 8008cb8:	2000012c 	.word	0x2000012c

08008cbc <_close_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d06      	ldr	r5, [pc, #24]	; (8008cd8 <_close_r+0x1c>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7f9 fff3 	bl	8002cb2 <_close>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_close_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_close_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	20000d34 	.word	0x20000d34

08008cdc <_lseek_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_lseek_r+0x20>)
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7fa f808 	bl	8002d00 <_lseek>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_lseek_r+0x1e>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_lseek_r+0x1e>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20000d34 	.word	0x20000d34

08008d00 <_read_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d07      	ldr	r5, [pc, #28]	; (8008d20 <_read_r+0x20>)
 8008d04:	4604      	mov	r4, r0
 8008d06:	4608      	mov	r0, r1
 8008d08:	4611      	mov	r1, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	602a      	str	r2, [r5, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f7f9 ffb2 	bl	8002c78 <_read>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_read_r+0x1e>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_read_r+0x1e>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20000d34 	.word	0x20000d34

08008d24 <_write_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_write_r+0x20>)
 8008d28:	4604      	mov	r4, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7f9 fbfa 	bl	800252c <_write>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_write_r+0x1e>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_write_r+0x1e>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000d34 	.word	0x20000d34

08008d48 <__errno>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <__errno+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	200001f4 	.word	0x200001f4

08008d54 <__libc_init_array>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4d0d      	ldr	r5, [pc, #52]	; (8008d8c <__libc_init_array+0x38>)
 8008d58:	4c0d      	ldr	r4, [pc, #52]	; (8008d90 <__libc_init_array+0x3c>)
 8008d5a:	1b64      	subs	r4, r4, r5
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	2600      	movs	r6, #0
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	d109      	bne.n	8008d78 <__libc_init_array+0x24>
 8008d64:	4d0b      	ldr	r5, [pc, #44]	; (8008d94 <__libc_init_array+0x40>)
 8008d66:	4c0c      	ldr	r4, [pc, #48]	; (8008d98 <__libc_init_array+0x44>)
 8008d68:	f002 fc9e 	bl	800b6a8 <_init>
 8008d6c:	1b64      	subs	r4, r4, r5
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	2600      	movs	r6, #0
 8008d72:	42a6      	cmp	r6, r4
 8008d74:	d105      	bne.n	8008d82 <__libc_init_array+0x2e>
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7c:	4798      	blx	r3
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7ee      	b.n	8008d60 <__libc_init_array+0xc>
 8008d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d86:	4798      	blx	r3
 8008d88:	3601      	adds	r6, #1
 8008d8a:	e7f2      	b.n	8008d72 <__libc_init_array+0x1e>
 8008d8c:	0800c198 	.word	0x0800c198
 8008d90:	0800c198 	.word	0x0800c198
 8008d94:	0800c198 	.word	0x0800c198
 8008d98:	0800c19c 	.word	0x0800c19c

08008d9c <__retarget_lock_init_recursive>:
 8008d9c:	4770      	bx	lr

08008d9e <__retarget_lock_acquire_recursive>:
 8008d9e:	4770      	bx	lr

08008da0 <__retarget_lock_release_recursive>:
 8008da0:	4770      	bx	lr

08008da2 <strcpy>:
 8008da2:	4603      	mov	r3, r0
 8008da4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008da8:	f803 2b01 	strb.w	r2, [r3], #1
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d1f9      	bne.n	8008da4 <strcpy+0x2>
 8008db0:	4770      	bx	lr

08008db2 <memcpy>:
 8008db2:	440a      	add	r2, r1
 8008db4:	4291      	cmp	r1, r2
 8008db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dba:	d100      	bne.n	8008dbe <memcpy+0xc>
 8008dbc:	4770      	bx	lr
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dc8:	4291      	cmp	r1, r2
 8008dca:	d1f9      	bne.n	8008dc0 <memcpy+0xe>
 8008dcc:	bd10      	pop	{r4, pc}
	...

08008dd0 <nan>:
 8008dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008dd8 <nan+0x8>
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	7ff80000 	.word	0x7ff80000

08008de0 <nanf>:
 8008de0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008de8 <nanf+0x8>
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	7fc00000 	.word	0x7fc00000

08008dec <__assert_func>:
 8008dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dee:	4614      	mov	r4, r2
 8008df0:	461a      	mov	r2, r3
 8008df2:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <__assert_func+0x2c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4605      	mov	r5, r0
 8008df8:	68d8      	ldr	r0, [r3, #12]
 8008dfa:	b14c      	cbz	r4, 8008e10 <__assert_func+0x24>
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <__assert_func+0x30>)
 8008dfe:	9100      	str	r1, [sp, #0]
 8008e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e04:	4906      	ldr	r1, [pc, #24]	; (8008e20 <__assert_func+0x34>)
 8008e06:	462b      	mov	r3, r5
 8008e08:	f002 faf6 	bl	800b3f8 <fiprintf>
 8008e0c:	f002 fbb4 	bl	800b578 <abort>
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <__assert_func+0x38>)
 8008e12:	461c      	mov	r4, r3
 8008e14:	e7f3      	b.n	8008dfe <__assert_func+0x12>
 8008e16:	bf00      	nop
 8008e18:	200001f4 	.word	0x200001f4
 8008e1c:	0800bf13 	.word	0x0800bf13
 8008e20:	0800bf20 	.word	0x0800bf20
 8008e24:	0800bf4e 	.word	0x0800bf4e

08008e28 <quorem>:
 8008e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	6903      	ldr	r3, [r0, #16]
 8008e2e:	690c      	ldr	r4, [r1, #16]
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	4607      	mov	r7, r0
 8008e34:	db7e      	blt.n	8008f34 <quorem+0x10c>
 8008e36:	3c01      	subs	r4, #1
 8008e38:	f101 0814 	add.w	r8, r1, #20
 8008e3c:	f100 0514 	add.w	r5, r0, #20
 8008e40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	429a      	cmp	r2, r3
 8008e52:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e5a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e5e:	d331      	bcc.n	8008ec4 <quorem+0x9c>
 8008e60:	f04f 0e00 	mov.w	lr, #0
 8008e64:	4640      	mov	r0, r8
 8008e66:	46ac      	mov	ip, r5
 8008e68:	46f2      	mov	sl, lr
 8008e6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e6e:	b293      	uxth	r3, r2
 8008e70:	fb06 e303 	mla	r3, r6, r3, lr
 8008e74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e78:	0c1a      	lsrs	r2, r3, #16
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e80:	f8dc a000 	ldr.w	sl, [ip]
 8008e84:	fa13 f38a 	uxtah	r3, r3, sl
 8008e88:	fb06 220e 	mla	r2, r6, lr, r2
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	9b00      	ldr	r3, [sp, #0]
 8008e90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e94:	b292      	uxth	r2, r2
 8008e96:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e9e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ea2:	4581      	cmp	r9, r0
 8008ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ea8:	f84c 3b04 	str.w	r3, [ip], #4
 8008eac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008eb0:	d2db      	bcs.n	8008e6a <quorem+0x42>
 8008eb2:	f855 300b 	ldr.w	r3, [r5, fp]
 8008eb6:	b92b      	cbnz	r3, 8008ec4 <quorem+0x9c>
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	d32c      	bcc.n	8008f1c <quorem+0xf4>
 8008ec2:	613c      	str	r4, [r7, #16]
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f001 fd59 	bl	800a97c <__mcmp>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	db22      	blt.n	8008f14 <quorem+0xec>
 8008ece:	3601      	adds	r6, #1
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ed8:	f8d1 c000 	ldr.w	ip, [r1]
 8008edc:	b293      	uxth	r3, r2
 8008ede:	1ac3      	subs	r3, r0, r3
 8008ee0:	0c12      	lsrs	r2, r2, #16
 8008ee2:	fa13 f38c 	uxtah	r3, r3, ip
 8008ee6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008eea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef4:	45c1      	cmp	r9, r8
 8008ef6:	f841 3b04 	str.w	r3, [r1], #4
 8008efa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008efe:	d2e9      	bcs.n	8008ed4 <quorem+0xac>
 8008f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f08:	b922      	cbnz	r2, 8008f14 <quorem+0xec>
 8008f0a:	3b04      	subs	r3, #4
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	d30a      	bcc.n	8008f28 <quorem+0x100>
 8008f12:	613c      	str	r4, [r7, #16]
 8008f14:	4630      	mov	r0, r6
 8008f16:	b003      	add	sp, #12
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	3b04      	subs	r3, #4
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	d1ce      	bne.n	8008ec2 <quorem+0x9a>
 8008f24:	3c01      	subs	r4, #1
 8008f26:	e7c9      	b.n	8008ebc <quorem+0x94>
 8008f28:	6812      	ldr	r2, [r2, #0]
 8008f2a:	3b04      	subs	r3, #4
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d1f0      	bne.n	8008f12 <quorem+0xea>
 8008f30:	3c01      	subs	r4, #1
 8008f32:	e7eb      	b.n	8008f0c <quorem+0xe4>
 8008f34:	2000      	movs	r0, #0
 8008f36:	e7ee      	b.n	8008f16 <quorem+0xee>

08008f38 <_dtoa_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	ed2d 8b04 	vpush	{d8-d9}
 8008f40:	69c5      	ldr	r5, [r0, #28]
 8008f42:	b093      	sub	sp, #76	; 0x4c
 8008f44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f48:	ec57 6b10 	vmov	r6, r7, d0
 8008f4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f50:	9107      	str	r1, [sp, #28]
 8008f52:	4604      	mov	r4, r0
 8008f54:	920a      	str	r2, [sp, #40]	; 0x28
 8008f56:	930d      	str	r3, [sp, #52]	; 0x34
 8008f58:	b975      	cbnz	r5, 8008f78 <_dtoa_r+0x40>
 8008f5a:	2010      	movs	r0, #16
 8008f5c:	f001 f982 	bl	800a264 <malloc>
 8008f60:	4602      	mov	r2, r0
 8008f62:	61e0      	str	r0, [r4, #28]
 8008f64:	b920      	cbnz	r0, 8008f70 <_dtoa_r+0x38>
 8008f66:	4bae      	ldr	r3, [pc, #696]	; (8009220 <_dtoa_r+0x2e8>)
 8008f68:	21ef      	movs	r1, #239	; 0xef
 8008f6a:	48ae      	ldr	r0, [pc, #696]	; (8009224 <_dtoa_r+0x2ec>)
 8008f6c:	f7ff ff3e 	bl	8008dec <__assert_func>
 8008f70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f74:	6005      	str	r5, [r0, #0]
 8008f76:	60c5      	str	r5, [r0, #12]
 8008f78:	69e3      	ldr	r3, [r4, #28]
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	b151      	cbz	r1, 8008f94 <_dtoa_r+0x5c>
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	604a      	str	r2, [r1, #4]
 8008f82:	2301      	movs	r3, #1
 8008f84:	4093      	lsls	r3, r2
 8008f86:	608b      	str	r3, [r1, #8]
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f001 fa71 	bl	800a470 <_Bfree>
 8008f8e:	69e3      	ldr	r3, [r4, #28]
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	1e3b      	subs	r3, r7, #0
 8008f96:	bfbb      	ittet	lt
 8008f98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f9c:	9303      	strlt	r3, [sp, #12]
 8008f9e:	2300      	movge	r3, #0
 8008fa0:	2201      	movlt	r2, #1
 8008fa2:	bfac      	ite	ge
 8008fa4:	f8c8 3000 	strge.w	r3, [r8]
 8008fa8:	f8c8 2000 	strlt.w	r2, [r8]
 8008fac:	4b9e      	ldr	r3, [pc, #632]	; (8009228 <_dtoa_r+0x2f0>)
 8008fae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fb2:	ea33 0308 	bics.w	r3, r3, r8
 8008fb6:	d11b      	bne.n	8008ff0 <_dtoa_r+0xb8>
 8008fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fba:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008fc4:	4333      	orrs	r3, r6
 8008fc6:	f000 8593 	beq.w	8009af0 <_dtoa_r+0xbb8>
 8008fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fcc:	b963      	cbnz	r3, 8008fe8 <_dtoa_r+0xb0>
 8008fce:	4b97      	ldr	r3, [pc, #604]	; (800922c <_dtoa_r+0x2f4>)
 8008fd0:	e027      	b.n	8009022 <_dtoa_r+0xea>
 8008fd2:	4b97      	ldr	r3, [pc, #604]	; (8009230 <_dtoa_r+0x2f8>)
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	9800      	ldr	r0, [sp, #0]
 8008fde:	b013      	add	sp, #76	; 0x4c
 8008fe0:	ecbd 8b04 	vpop	{d8-d9}
 8008fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	4b90      	ldr	r3, [pc, #576]	; (800922c <_dtoa_r+0x2f4>)
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	3303      	adds	r3, #3
 8008fee:	e7f3      	b.n	8008fd8 <_dtoa_r+0xa0>
 8008ff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	ec51 0b17 	vmov	r0, r1, d7
 8008ffa:	eeb0 8a47 	vmov.f32	s16, s14
 8008ffe:	eef0 8a67 	vmov.f32	s17, s15
 8009002:	2300      	movs	r3, #0
 8009004:	f7f7 fd70 	bl	8000ae8 <__aeabi_dcmpeq>
 8009008:	4681      	mov	r9, r0
 800900a:	b160      	cbz	r0, 8009026 <_dtoa_r+0xee>
 800900c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800900e:	2301      	movs	r3, #1
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8568 	beq.w	8009aea <_dtoa_r+0xbb2>
 800901a:	4b86      	ldr	r3, [pc, #536]	; (8009234 <_dtoa_r+0x2fc>)
 800901c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	e7da      	b.n	8008fdc <_dtoa_r+0xa4>
 8009026:	aa10      	add	r2, sp, #64	; 0x40
 8009028:	a911      	add	r1, sp, #68	; 0x44
 800902a:	4620      	mov	r0, r4
 800902c:	eeb0 0a48 	vmov.f32	s0, s16
 8009030:	eef0 0a68 	vmov.f32	s1, s17
 8009034:	f001 fdb8 	bl	800aba8 <__d2b>
 8009038:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800903c:	4682      	mov	sl, r0
 800903e:	2d00      	cmp	r5, #0
 8009040:	d07f      	beq.n	8009142 <_dtoa_r+0x20a>
 8009042:	ee18 3a90 	vmov	r3, s17
 8009046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800904a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800904e:	ec51 0b18 	vmov	r0, r1, d8
 8009052:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800905a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800905e:	4619      	mov	r1, r3
 8009060:	2200      	movs	r2, #0
 8009062:	4b75      	ldr	r3, [pc, #468]	; (8009238 <_dtoa_r+0x300>)
 8009064:	f7f7 f920 	bl	80002a8 <__aeabi_dsub>
 8009068:	a367      	add	r3, pc, #412	; (adr r3, 8009208 <_dtoa_r+0x2d0>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fad3 	bl	8000618 <__aeabi_dmul>
 8009072:	a367      	add	r3, pc, #412	; (adr r3, 8009210 <_dtoa_r+0x2d8>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 f918 	bl	80002ac <__adddf3>
 800907c:	4606      	mov	r6, r0
 800907e:	4628      	mov	r0, r5
 8009080:	460f      	mov	r7, r1
 8009082:	f7f7 fa5f 	bl	8000544 <__aeabi_i2d>
 8009086:	a364      	add	r3, pc, #400	; (adr r3, 8009218 <_dtoa_r+0x2e0>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7f7 fac4 	bl	8000618 <__aeabi_dmul>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4630      	mov	r0, r6
 8009096:	4639      	mov	r1, r7
 8009098:	f7f7 f908 	bl	80002ac <__adddf3>
 800909c:	4606      	mov	r6, r0
 800909e:	460f      	mov	r7, r1
 80090a0:	f7f7 fd6a 	bl	8000b78 <__aeabi_d2iz>
 80090a4:	2200      	movs	r2, #0
 80090a6:	4683      	mov	fp, r0
 80090a8:	2300      	movs	r3, #0
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fd25 	bl	8000afc <__aeabi_dcmplt>
 80090b2:	b148      	cbz	r0, 80090c8 <_dtoa_r+0x190>
 80090b4:	4658      	mov	r0, fp
 80090b6:	f7f7 fa45 	bl	8000544 <__aeabi_i2d>
 80090ba:	4632      	mov	r2, r6
 80090bc:	463b      	mov	r3, r7
 80090be:	f7f7 fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 80090c2:	b908      	cbnz	r0, 80090c8 <_dtoa_r+0x190>
 80090c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090c8:	f1bb 0f16 	cmp.w	fp, #22
 80090cc:	d857      	bhi.n	800917e <_dtoa_r+0x246>
 80090ce:	4b5b      	ldr	r3, [pc, #364]	; (800923c <_dtoa_r+0x304>)
 80090d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	ec51 0b18 	vmov	r0, r1, d8
 80090dc:	f7f7 fd0e 	bl	8000afc <__aeabi_dcmplt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d04e      	beq.n	8009182 <_dtoa_r+0x24a>
 80090e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090e8:	2300      	movs	r3, #0
 80090ea:	930c      	str	r3, [sp, #48]	; 0x30
 80090ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ee:	1b5b      	subs	r3, r3, r5
 80090f0:	1e5a      	subs	r2, r3, #1
 80090f2:	bf45      	ittet	mi
 80090f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80090f8:	9305      	strmi	r3, [sp, #20]
 80090fa:	2300      	movpl	r3, #0
 80090fc:	2300      	movmi	r3, #0
 80090fe:	9206      	str	r2, [sp, #24]
 8009100:	bf54      	ite	pl
 8009102:	9305      	strpl	r3, [sp, #20]
 8009104:	9306      	strmi	r3, [sp, #24]
 8009106:	f1bb 0f00 	cmp.w	fp, #0
 800910a:	db3c      	blt.n	8009186 <_dtoa_r+0x24e>
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009112:	445b      	add	r3, fp
 8009114:	9306      	str	r3, [sp, #24]
 8009116:	2300      	movs	r3, #0
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	9b07      	ldr	r3, [sp, #28]
 800911c:	2b09      	cmp	r3, #9
 800911e:	d868      	bhi.n	80091f2 <_dtoa_r+0x2ba>
 8009120:	2b05      	cmp	r3, #5
 8009122:	bfc4      	itt	gt
 8009124:	3b04      	subgt	r3, #4
 8009126:	9307      	strgt	r3, [sp, #28]
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	f1a3 0302 	sub.w	r3, r3, #2
 800912e:	bfcc      	ite	gt
 8009130:	2500      	movgt	r5, #0
 8009132:	2501      	movle	r5, #1
 8009134:	2b03      	cmp	r3, #3
 8009136:	f200 8085 	bhi.w	8009244 <_dtoa_r+0x30c>
 800913a:	e8df f003 	tbb	[pc, r3]
 800913e:	3b2e      	.short	0x3b2e
 8009140:	5839      	.short	0x5839
 8009142:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009146:	441d      	add	r5, r3
 8009148:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800914c:	2b20      	cmp	r3, #32
 800914e:	bfc1      	itttt	gt
 8009150:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009154:	fa08 f803 	lslgt.w	r8, r8, r3
 8009158:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800915c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009160:	bfd6      	itet	le
 8009162:	f1c3 0320 	rsble	r3, r3, #32
 8009166:	ea48 0003 	orrgt.w	r0, r8, r3
 800916a:	fa06 f003 	lslle.w	r0, r6, r3
 800916e:	f7f7 f9d9 	bl	8000524 <__aeabi_ui2d>
 8009172:	2201      	movs	r2, #1
 8009174:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009178:	3d01      	subs	r5, #1
 800917a:	920e      	str	r2, [sp, #56]	; 0x38
 800917c:	e76f      	b.n	800905e <_dtoa_r+0x126>
 800917e:	2301      	movs	r3, #1
 8009180:	e7b3      	b.n	80090ea <_dtoa_r+0x1b2>
 8009182:	900c      	str	r0, [sp, #48]	; 0x30
 8009184:	e7b2      	b.n	80090ec <_dtoa_r+0x1b4>
 8009186:	9b05      	ldr	r3, [sp, #20]
 8009188:	eba3 030b 	sub.w	r3, r3, fp
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	f1cb 0300 	rsb	r3, fp, #0
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	2300      	movs	r3, #0
 8009196:	930b      	str	r3, [sp, #44]	; 0x2c
 8009198:	e7bf      	b.n	800911a <_dtoa_r+0x1e2>
 800919a:	2300      	movs	r3, #0
 800919c:	9309      	str	r3, [sp, #36]	; 0x24
 800919e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	dc52      	bgt.n	800924a <_dtoa_r+0x312>
 80091a4:	2301      	movs	r3, #1
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	461a      	mov	r2, r3
 80091ac:	920a      	str	r2, [sp, #40]	; 0x28
 80091ae:	e00b      	b.n	80091c8 <_dtoa_r+0x290>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e7f3      	b.n	800919c <_dtoa_r+0x264>
 80091b4:	2300      	movs	r3, #0
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	445b      	add	r3, fp
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	3301      	adds	r3, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	bfb8      	it	lt
 80091c6:	2301      	movlt	r3, #1
 80091c8:	69e0      	ldr	r0, [r4, #28]
 80091ca:	2100      	movs	r1, #0
 80091cc:	2204      	movs	r2, #4
 80091ce:	f102 0614 	add.w	r6, r2, #20
 80091d2:	429e      	cmp	r6, r3
 80091d4:	d93d      	bls.n	8009252 <_dtoa_r+0x31a>
 80091d6:	6041      	str	r1, [r0, #4]
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 f909 	bl	800a3f0 <_Balloc>
 80091de:	9000      	str	r0, [sp, #0]
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d139      	bne.n	8009258 <_dtoa_r+0x320>
 80091e4:	4b16      	ldr	r3, [pc, #88]	; (8009240 <_dtoa_r+0x308>)
 80091e6:	4602      	mov	r2, r0
 80091e8:	f240 11af 	movw	r1, #431	; 0x1af
 80091ec:	e6bd      	b.n	8008f6a <_dtoa_r+0x32>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7e1      	b.n	80091b6 <_dtoa_r+0x27e>
 80091f2:	2501      	movs	r5, #1
 80091f4:	2300      	movs	r3, #0
 80091f6:	9307      	str	r3, [sp, #28]
 80091f8:	9509      	str	r5, [sp, #36]	; 0x24
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	2200      	movs	r2, #0
 8009204:	2312      	movs	r3, #18
 8009206:	e7d1      	b.n	80091ac <_dtoa_r+0x274>
 8009208:	636f4361 	.word	0x636f4361
 800920c:	3fd287a7 	.word	0x3fd287a7
 8009210:	8b60c8b3 	.word	0x8b60c8b3
 8009214:	3fc68a28 	.word	0x3fc68a28
 8009218:	509f79fb 	.word	0x509f79fb
 800921c:	3fd34413 	.word	0x3fd34413
 8009220:	0800be9a 	.word	0x0800be9a
 8009224:	0800bf5c 	.word	0x0800bf5c
 8009228:	7ff00000 	.word	0x7ff00000
 800922c:	0800bf58 	.word	0x0800bf58
 8009230:	0800bf4f 	.word	0x0800bf4f
 8009234:	0800be72 	.word	0x0800be72
 8009238:	3ff80000 	.word	0x3ff80000
 800923c:	0800c0a8 	.word	0x0800c0a8
 8009240:	0800bfb4 	.word	0x0800bfb4
 8009244:	2301      	movs	r3, #1
 8009246:	9309      	str	r3, [sp, #36]	; 0x24
 8009248:	e7d7      	b.n	80091fa <_dtoa_r+0x2c2>
 800924a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	e7ba      	b.n	80091c8 <_dtoa_r+0x290>
 8009252:	3101      	adds	r1, #1
 8009254:	0052      	lsls	r2, r2, #1
 8009256:	e7ba      	b.n	80091ce <_dtoa_r+0x296>
 8009258:	69e3      	ldr	r3, [r4, #28]
 800925a:	9a00      	ldr	r2, [sp, #0]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	2b0e      	cmp	r3, #14
 8009262:	f200 80a8 	bhi.w	80093b6 <_dtoa_r+0x47e>
 8009266:	2d00      	cmp	r5, #0
 8009268:	f000 80a5 	beq.w	80093b6 <_dtoa_r+0x47e>
 800926c:	f1bb 0f00 	cmp.w	fp, #0
 8009270:	dd38      	ble.n	80092e4 <_dtoa_r+0x3ac>
 8009272:	4bc0      	ldr	r3, [pc, #768]	; (8009574 <_dtoa_r+0x63c>)
 8009274:	f00b 020f 	and.w	r2, fp, #15
 8009278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800927c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009280:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009284:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009288:	d019      	beq.n	80092be <_dtoa_r+0x386>
 800928a:	4bbb      	ldr	r3, [pc, #748]	; (8009578 <_dtoa_r+0x640>)
 800928c:	ec51 0b18 	vmov	r0, r1, d8
 8009290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009294:	f7f7 faea 	bl	800086c <__aeabi_ddiv>
 8009298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929c:	f008 080f 	and.w	r8, r8, #15
 80092a0:	2503      	movs	r5, #3
 80092a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009578 <_dtoa_r+0x640>
 80092a6:	f1b8 0f00 	cmp.w	r8, #0
 80092aa:	d10a      	bne.n	80092c2 <_dtoa_r+0x38a>
 80092ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	f7f7 fada 	bl	800086c <__aeabi_ddiv>
 80092b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092bc:	e02b      	b.n	8009316 <_dtoa_r+0x3de>
 80092be:	2502      	movs	r5, #2
 80092c0:	e7ef      	b.n	80092a2 <_dtoa_r+0x36a>
 80092c2:	f018 0f01 	tst.w	r8, #1
 80092c6:	d008      	beq.n	80092da <_dtoa_r+0x3a2>
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092d0:	f7f7 f9a2 	bl	8000618 <__aeabi_dmul>
 80092d4:	3501      	adds	r5, #1
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092de:	f109 0908 	add.w	r9, r9, #8
 80092e2:	e7e0      	b.n	80092a6 <_dtoa_r+0x36e>
 80092e4:	f000 809f 	beq.w	8009426 <_dtoa_r+0x4ee>
 80092e8:	f1cb 0600 	rsb	r6, fp, #0
 80092ec:	4ba1      	ldr	r3, [pc, #644]	; (8009574 <_dtoa_r+0x63c>)
 80092ee:	4fa2      	ldr	r7, [pc, #648]	; (8009578 <_dtoa_r+0x640>)
 80092f0:	f006 020f 	and.w	r2, r6, #15
 80092f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	ec51 0b18 	vmov	r0, r1, d8
 8009300:	f7f7 f98a 	bl	8000618 <__aeabi_dmul>
 8009304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009308:	1136      	asrs	r6, r6, #4
 800930a:	2300      	movs	r3, #0
 800930c:	2502      	movs	r5, #2
 800930e:	2e00      	cmp	r6, #0
 8009310:	d17e      	bne.n	8009410 <_dtoa_r+0x4d8>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1d0      	bne.n	80092b8 <_dtoa_r+0x380>
 8009316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009318:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8084 	beq.w	800942a <_dtoa_r+0x4f2>
 8009322:	4b96      	ldr	r3, [pc, #600]	; (800957c <_dtoa_r+0x644>)
 8009324:	2200      	movs	r2, #0
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f7 fbe7 	bl	8000afc <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d07b      	beq.n	800942a <_dtoa_r+0x4f2>
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d078      	beq.n	800942a <_dtoa_r+0x4f2>
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	dd39      	ble.n	80093b2 <_dtoa_r+0x47a>
 800933e:	4b90      	ldr	r3, [pc, #576]	; (8009580 <_dtoa_r+0x648>)
 8009340:	2200      	movs	r2, #0
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 f967 	bl	8000618 <__aeabi_dmul>
 800934a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800934e:	9e01      	ldr	r6, [sp, #4]
 8009350:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009354:	3501      	adds	r5, #1
 8009356:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800935a:	4628      	mov	r0, r5
 800935c:	f7f7 f8f2 	bl	8000544 <__aeabi_i2d>
 8009360:	4642      	mov	r2, r8
 8009362:	464b      	mov	r3, r9
 8009364:	f7f7 f958 	bl	8000618 <__aeabi_dmul>
 8009368:	4b86      	ldr	r3, [pc, #536]	; (8009584 <_dtoa_r+0x64c>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f6 ff9e 	bl	80002ac <__adddf3>
 8009370:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	2e00      	cmp	r6, #0
 800937c:	d158      	bne.n	8009430 <_dtoa_r+0x4f8>
 800937e:	4b82      	ldr	r3, [pc, #520]	; (8009588 <_dtoa_r+0x650>)
 8009380:	2200      	movs	r2, #0
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	f7f6 ff8f 	bl	80002a8 <__aeabi_dsub>
 800938a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800938e:	4680      	mov	r8, r0
 8009390:	4689      	mov	r9, r1
 8009392:	f7f7 fbd1 	bl	8000b38 <__aeabi_dcmpgt>
 8009396:	2800      	cmp	r0, #0
 8009398:	f040 8296 	bne.w	80098c8 <_dtoa_r+0x990>
 800939c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093a0:	4640      	mov	r0, r8
 80093a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fba8 	bl	8000afc <__aeabi_dcmplt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 8289 	bne.w	80098c4 <_dtoa_r+0x98c>
 80093b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f2c0 814e 	blt.w	800965a <_dtoa_r+0x722>
 80093be:	f1bb 0f0e 	cmp.w	fp, #14
 80093c2:	f300 814a 	bgt.w	800965a <_dtoa_r+0x722>
 80093c6:	4b6b      	ldr	r3, [pc, #428]	; (8009574 <_dtoa_r+0x63c>)
 80093c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f280 80dc 	bge.w	8009590 <_dtoa_r+0x658>
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f300 80d8 	bgt.w	8009590 <_dtoa_r+0x658>
 80093e0:	f040 826f 	bne.w	80098c2 <_dtoa_r+0x98a>
 80093e4:	4b68      	ldr	r3, [pc, #416]	; (8009588 <_dtoa_r+0x650>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 f914 	bl	8000618 <__aeabi_dmul>
 80093f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f4:	f7f7 fb96 	bl	8000b24 <__aeabi_dcmpge>
 80093f8:	9e04      	ldr	r6, [sp, #16]
 80093fa:	4637      	mov	r7, r6
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f040 8245 	bne.w	800988c <_dtoa_r+0x954>
 8009402:	9d00      	ldr	r5, [sp, #0]
 8009404:	2331      	movs	r3, #49	; 0x31
 8009406:	f805 3b01 	strb.w	r3, [r5], #1
 800940a:	f10b 0b01 	add.w	fp, fp, #1
 800940e:	e241      	b.n	8009894 <_dtoa_r+0x95c>
 8009410:	07f2      	lsls	r2, r6, #31
 8009412:	d505      	bpl.n	8009420 <_dtoa_r+0x4e8>
 8009414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009418:	f7f7 f8fe 	bl	8000618 <__aeabi_dmul>
 800941c:	3501      	adds	r5, #1
 800941e:	2301      	movs	r3, #1
 8009420:	1076      	asrs	r6, r6, #1
 8009422:	3708      	adds	r7, #8
 8009424:	e773      	b.n	800930e <_dtoa_r+0x3d6>
 8009426:	2502      	movs	r5, #2
 8009428:	e775      	b.n	8009316 <_dtoa_r+0x3de>
 800942a:	9e04      	ldr	r6, [sp, #16]
 800942c:	465f      	mov	r7, fp
 800942e:	e792      	b.n	8009356 <_dtoa_r+0x41e>
 8009430:	9900      	ldr	r1, [sp, #0]
 8009432:	4b50      	ldr	r3, [pc, #320]	; (8009574 <_dtoa_r+0x63c>)
 8009434:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009438:	4431      	add	r1, r6
 800943a:	9102      	str	r1, [sp, #8]
 800943c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800943e:	eeb0 9a47 	vmov.f32	s18, s14
 8009442:	eef0 9a67 	vmov.f32	s19, s15
 8009446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800944a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800944e:	2900      	cmp	r1, #0
 8009450:	d044      	beq.n	80094dc <_dtoa_r+0x5a4>
 8009452:	494e      	ldr	r1, [pc, #312]	; (800958c <_dtoa_r+0x654>)
 8009454:	2000      	movs	r0, #0
 8009456:	f7f7 fa09 	bl	800086c <__aeabi_ddiv>
 800945a:	ec53 2b19 	vmov	r2, r3, d9
 800945e:	f7f6 ff23 	bl	80002a8 <__aeabi_dsub>
 8009462:	9d00      	ldr	r5, [sp, #0]
 8009464:	ec41 0b19 	vmov	d9, r0, r1
 8009468:	4649      	mov	r1, r9
 800946a:	4640      	mov	r0, r8
 800946c:	f7f7 fb84 	bl	8000b78 <__aeabi_d2iz>
 8009470:	4606      	mov	r6, r0
 8009472:	f7f7 f867 	bl	8000544 <__aeabi_i2d>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f6 ff13 	bl	80002a8 <__aeabi_dsub>
 8009482:	3630      	adds	r6, #48	; 0x30
 8009484:	f805 6b01 	strb.w	r6, [r5], #1
 8009488:	ec53 2b19 	vmov	r2, r3, d9
 800948c:	4680      	mov	r8, r0
 800948e:	4689      	mov	r9, r1
 8009490:	f7f7 fb34 	bl	8000afc <__aeabi_dcmplt>
 8009494:	2800      	cmp	r0, #0
 8009496:	d164      	bne.n	8009562 <_dtoa_r+0x62a>
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	4937      	ldr	r1, [pc, #220]	; (800957c <_dtoa_r+0x644>)
 800949e:	2000      	movs	r0, #0
 80094a0:	f7f6 ff02 	bl	80002a8 <__aeabi_dsub>
 80094a4:	ec53 2b19 	vmov	r2, r3, d9
 80094a8:	f7f7 fb28 	bl	8000afc <__aeabi_dcmplt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f040 80b6 	bne.w	800961e <_dtoa_r+0x6e6>
 80094b2:	9b02      	ldr	r3, [sp, #8]
 80094b4:	429d      	cmp	r5, r3
 80094b6:	f43f af7c 	beq.w	80093b2 <_dtoa_r+0x47a>
 80094ba:	4b31      	ldr	r3, [pc, #196]	; (8009580 <_dtoa_r+0x648>)
 80094bc:	ec51 0b19 	vmov	r0, r1, d9
 80094c0:	2200      	movs	r2, #0
 80094c2:	f7f7 f8a9 	bl	8000618 <__aeabi_dmul>
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <_dtoa_r+0x648>)
 80094c8:	ec41 0b19 	vmov	d9, r0, r1
 80094cc:	2200      	movs	r2, #0
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	f7f7 f8a1 	bl	8000618 <__aeabi_dmul>
 80094d6:	4680      	mov	r8, r0
 80094d8:	4689      	mov	r9, r1
 80094da:	e7c5      	b.n	8009468 <_dtoa_r+0x530>
 80094dc:	ec51 0b17 	vmov	r0, r1, d7
 80094e0:	f7f7 f89a 	bl	8000618 <__aeabi_dmul>
 80094e4:	9b02      	ldr	r3, [sp, #8]
 80094e6:	9d00      	ldr	r5, [sp, #0]
 80094e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ea:	ec41 0b19 	vmov	d9, r0, r1
 80094ee:	4649      	mov	r1, r9
 80094f0:	4640      	mov	r0, r8
 80094f2:	f7f7 fb41 	bl	8000b78 <__aeabi_d2iz>
 80094f6:	4606      	mov	r6, r0
 80094f8:	f7f7 f824 	bl	8000544 <__aeabi_i2d>
 80094fc:	3630      	adds	r6, #48	; 0x30
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 fecf 	bl	80002a8 <__aeabi_dsub>
 800950a:	f805 6b01 	strb.w	r6, [r5], #1
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	429d      	cmp	r5, r3
 8009512:	4680      	mov	r8, r0
 8009514:	4689      	mov	r9, r1
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	d124      	bne.n	8009566 <_dtoa_r+0x62e>
 800951c:	4b1b      	ldr	r3, [pc, #108]	; (800958c <_dtoa_r+0x654>)
 800951e:	ec51 0b19 	vmov	r0, r1, d9
 8009522:	f7f6 fec3 	bl	80002ac <__adddf3>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 8009532:	2800      	cmp	r0, #0
 8009534:	d173      	bne.n	800961e <_dtoa_r+0x6e6>
 8009536:	ec53 2b19 	vmov	r2, r3, d9
 800953a:	4914      	ldr	r1, [pc, #80]	; (800958c <_dtoa_r+0x654>)
 800953c:	2000      	movs	r0, #0
 800953e:	f7f6 feb3 	bl	80002a8 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 fad7 	bl	8000afc <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f af2f 	beq.w	80093b2 <_dtoa_r+0x47a>
 8009554:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009556:	1e6b      	subs	r3, r5, #1
 8009558:	930f      	str	r3, [sp, #60]	; 0x3c
 800955a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800955e:	2b30      	cmp	r3, #48	; 0x30
 8009560:	d0f8      	beq.n	8009554 <_dtoa_r+0x61c>
 8009562:	46bb      	mov	fp, r7
 8009564:	e04a      	b.n	80095fc <_dtoa_r+0x6c4>
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <_dtoa_r+0x648>)
 8009568:	f7f7 f856 	bl	8000618 <__aeabi_dmul>
 800956c:	4680      	mov	r8, r0
 800956e:	4689      	mov	r9, r1
 8009570:	e7bd      	b.n	80094ee <_dtoa_r+0x5b6>
 8009572:	bf00      	nop
 8009574:	0800c0a8 	.word	0x0800c0a8
 8009578:	0800c080 	.word	0x0800c080
 800957c:	3ff00000 	.word	0x3ff00000
 8009580:	40240000 	.word	0x40240000
 8009584:	401c0000 	.word	0x401c0000
 8009588:	40140000 	.word	0x40140000
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009594:	9d00      	ldr	r5, [sp, #0]
 8009596:	4642      	mov	r2, r8
 8009598:	464b      	mov	r3, r9
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f7 f965 	bl	800086c <__aeabi_ddiv>
 80095a2:	f7f7 fae9 	bl	8000b78 <__aeabi_d2iz>
 80095a6:	9001      	str	r0, [sp, #4]
 80095a8:	f7f6 ffcc 	bl	8000544 <__aeabi_i2d>
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	f7f7 f832 	bl	8000618 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 fe74 	bl	80002a8 <__aeabi_dsub>
 80095c0:	9e01      	ldr	r6, [sp, #4]
 80095c2:	9f04      	ldr	r7, [sp, #16]
 80095c4:	3630      	adds	r6, #48	; 0x30
 80095c6:	f805 6b01 	strb.w	r6, [r5], #1
 80095ca:	9e00      	ldr	r6, [sp, #0]
 80095cc:	1bae      	subs	r6, r5, r6
 80095ce:	42b7      	cmp	r7, r6
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	d134      	bne.n	8009640 <_dtoa_r+0x708>
 80095d6:	f7f6 fe69 	bl	80002ac <__adddf3>
 80095da:	4642      	mov	r2, r8
 80095dc:	464b      	mov	r3, r9
 80095de:	4606      	mov	r6, r0
 80095e0:	460f      	mov	r7, r1
 80095e2:	f7f7 faa9 	bl	8000b38 <__aeabi_dcmpgt>
 80095e6:	b9c8      	cbnz	r0, 800961c <_dtoa_r+0x6e4>
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	4630      	mov	r0, r6
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f7 fa7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80095f4:	b110      	cbz	r0, 80095fc <_dtoa_r+0x6c4>
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	07db      	lsls	r3, r3, #31
 80095fa:	d40f      	bmi.n	800961c <_dtoa_r+0x6e4>
 80095fc:	4651      	mov	r1, sl
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 ff36 	bl	800a470 <_Bfree>
 8009604:	2300      	movs	r3, #0
 8009606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009608:	702b      	strb	r3, [r5, #0]
 800960a:	f10b 0301 	add.w	r3, fp, #1
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009612:	2b00      	cmp	r3, #0
 8009614:	f43f ace2 	beq.w	8008fdc <_dtoa_r+0xa4>
 8009618:	601d      	str	r5, [r3, #0]
 800961a:	e4df      	b.n	8008fdc <_dtoa_r+0xa4>
 800961c:	465f      	mov	r7, fp
 800961e:	462b      	mov	r3, r5
 8009620:	461d      	mov	r5, r3
 8009622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009626:	2a39      	cmp	r2, #57	; 0x39
 8009628:	d106      	bne.n	8009638 <_dtoa_r+0x700>
 800962a:	9a00      	ldr	r2, [sp, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d1f7      	bne.n	8009620 <_dtoa_r+0x6e8>
 8009630:	9900      	ldr	r1, [sp, #0]
 8009632:	2230      	movs	r2, #48	; 0x30
 8009634:	3701      	adds	r7, #1
 8009636:	700a      	strb	r2, [r1, #0]
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	3201      	adds	r2, #1
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e790      	b.n	8009562 <_dtoa_r+0x62a>
 8009640:	4ba3      	ldr	r3, [pc, #652]	; (80098d0 <_dtoa_r+0x998>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f6 ffe8 	bl	8000618 <__aeabi_dmul>
 8009648:	2200      	movs	r2, #0
 800964a:	2300      	movs	r3, #0
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f7 fa4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009654:	2800      	cmp	r0, #0
 8009656:	d09e      	beq.n	8009596 <_dtoa_r+0x65e>
 8009658:	e7d0      	b.n	80095fc <_dtoa_r+0x6c4>
 800965a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965c:	2a00      	cmp	r2, #0
 800965e:	f000 80ca 	beq.w	80097f6 <_dtoa_r+0x8be>
 8009662:	9a07      	ldr	r2, [sp, #28]
 8009664:	2a01      	cmp	r2, #1
 8009666:	f300 80ad 	bgt.w	80097c4 <_dtoa_r+0x88c>
 800966a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800966c:	2a00      	cmp	r2, #0
 800966e:	f000 80a5 	beq.w	80097bc <_dtoa_r+0x884>
 8009672:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009676:	9e08      	ldr	r6, [sp, #32]
 8009678:	9d05      	ldr	r5, [sp, #20]
 800967a:	9a05      	ldr	r2, [sp, #20]
 800967c:	441a      	add	r2, r3
 800967e:	9205      	str	r2, [sp, #20]
 8009680:	9a06      	ldr	r2, [sp, #24]
 8009682:	2101      	movs	r1, #1
 8009684:	441a      	add	r2, r3
 8009686:	4620      	mov	r0, r4
 8009688:	9206      	str	r2, [sp, #24]
 800968a:	f000 fff1 	bl	800a670 <__i2b>
 800968e:	4607      	mov	r7, r0
 8009690:	b165      	cbz	r5, 80096ac <_dtoa_r+0x774>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	dd09      	ble.n	80096ac <_dtoa_r+0x774>
 8009698:	42ab      	cmp	r3, r5
 800969a:	9a05      	ldr	r2, [sp, #20]
 800969c:	bfa8      	it	ge
 800969e:	462b      	movge	r3, r5
 80096a0:	1ad2      	subs	r2, r2, r3
 80096a2:	9205      	str	r2, [sp, #20]
 80096a4:	9a06      	ldr	r2, [sp, #24]
 80096a6:	1aed      	subs	r5, r5, r3
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	9306      	str	r3, [sp, #24]
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	b1f3      	cbz	r3, 80096ee <_dtoa_r+0x7b6>
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80a3 	beq.w	80097fe <_dtoa_r+0x8c6>
 80096b8:	2e00      	cmp	r6, #0
 80096ba:	dd10      	ble.n	80096de <_dtoa_r+0x7a6>
 80096bc:	4639      	mov	r1, r7
 80096be:	4632      	mov	r2, r6
 80096c0:	4620      	mov	r0, r4
 80096c2:	f001 f895 	bl	800a7f0 <__pow5mult>
 80096c6:	4652      	mov	r2, sl
 80096c8:	4601      	mov	r1, r0
 80096ca:	4607      	mov	r7, r0
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 ffe5 	bl	800a69c <__multiply>
 80096d2:	4651      	mov	r1, sl
 80096d4:	4680      	mov	r8, r0
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 feca 	bl	800a470 <_Bfree>
 80096dc:	46c2      	mov	sl, r8
 80096de:	9b08      	ldr	r3, [sp, #32]
 80096e0:	1b9a      	subs	r2, r3, r6
 80096e2:	d004      	beq.n	80096ee <_dtoa_r+0x7b6>
 80096e4:	4651      	mov	r1, sl
 80096e6:	4620      	mov	r0, r4
 80096e8:	f001 f882 	bl	800a7f0 <__pow5mult>
 80096ec:	4682      	mov	sl, r0
 80096ee:	2101      	movs	r1, #1
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 ffbd 	bl	800a670 <__i2b>
 80096f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	4606      	mov	r6, r0
 80096fc:	f340 8081 	ble.w	8009802 <_dtoa_r+0x8ca>
 8009700:	461a      	mov	r2, r3
 8009702:	4601      	mov	r1, r0
 8009704:	4620      	mov	r0, r4
 8009706:	f001 f873 	bl	800a7f0 <__pow5mult>
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	2b01      	cmp	r3, #1
 800970e:	4606      	mov	r6, r0
 8009710:	dd7a      	ble.n	8009808 <_dtoa_r+0x8d0>
 8009712:	f04f 0800 	mov.w	r8, #0
 8009716:	6933      	ldr	r3, [r6, #16]
 8009718:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800971c:	6918      	ldr	r0, [r3, #16]
 800971e:	f000 ff59 	bl	800a5d4 <__hi0bits>
 8009722:	f1c0 0020 	rsb	r0, r0, #32
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	4418      	add	r0, r3
 800972a:	f010 001f 	ands.w	r0, r0, #31
 800972e:	f000 8094 	beq.w	800985a <_dtoa_r+0x922>
 8009732:	f1c0 0320 	rsb	r3, r0, #32
 8009736:	2b04      	cmp	r3, #4
 8009738:	f340 8085 	ble.w	8009846 <_dtoa_r+0x90e>
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	f1c0 001c 	rsb	r0, r0, #28
 8009742:	4403      	add	r3, r0
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	9b06      	ldr	r3, [sp, #24]
 8009748:	4403      	add	r3, r0
 800974a:	4405      	add	r5, r0
 800974c:	9306      	str	r3, [sp, #24]
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	dd05      	ble.n	8009760 <_dtoa_r+0x828>
 8009754:	4651      	mov	r1, sl
 8009756:	461a      	mov	r2, r3
 8009758:	4620      	mov	r0, r4
 800975a:	f001 f8a3 	bl	800a8a4 <__lshift>
 800975e:	4682      	mov	sl, r0
 8009760:	9b06      	ldr	r3, [sp, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd05      	ble.n	8009772 <_dtoa_r+0x83a>
 8009766:	4631      	mov	r1, r6
 8009768:	461a      	mov	r2, r3
 800976a:	4620      	mov	r0, r4
 800976c:	f001 f89a 	bl	800a8a4 <__lshift>
 8009770:	4606      	mov	r6, r0
 8009772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009774:	2b00      	cmp	r3, #0
 8009776:	d072      	beq.n	800985e <_dtoa_r+0x926>
 8009778:	4631      	mov	r1, r6
 800977a:	4650      	mov	r0, sl
 800977c:	f001 f8fe 	bl	800a97c <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	da6c      	bge.n	800985e <_dtoa_r+0x926>
 8009784:	2300      	movs	r3, #0
 8009786:	4651      	mov	r1, sl
 8009788:	220a      	movs	r2, #10
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fe92 	bl	800a4b4 <__multadd>
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009796:	4682      	mov	sl, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 81b0 	beq.w	8009afe <_dtoa_r+0xbc6>
 800979e:	2300      	movs	r3, #0
 80097a0:	4639      	mov	r1, r7
 80097a2:	220a      	movs	r2, #10
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 fe85 	bl	800a4b4 <__multadd>
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	4607      	mov	r7, r0
 80097b0:	f300 8096 	bgt.w	80098e0 <_dtoa_r+0x9a8>
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	dc59      	bgt.n	800986e <_dtoa_r+0x936>
 80097ba:	e091      	b.n	80098e0 <_dtoa_r+0x9a8>
 80097bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097c2:	e758      	b.n	8009676 <_dtoa_r+0x73e>
 80097c4:	9b04      	ldr	r3, [sp, #16]
 80097c6:	1e5e      	subs	r6, r3, #1
 80097c8:	9b08      	ldr	r3, [sp, #32]
 80097ca:	42b3      	cmp	r3, r6
 80097cc:	bfbf      	itttt	lt
 80097ce:	9b08      	ldrlt	r3, [sp, #32]
 80097d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097d2:	9608      	strlt	r6, [sp, #32]
 80097d4:	1af3      	sublt	r3, r6, r3
 80097d6:	bfb4      	ite	lt
 80097d8:	18d2      	addlt	r2, r2, r3
 80097da:	1b9e      	subge	r6, r3, r6
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	bfbc      	itt	lt
 80097e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097e2:	2600      	movlt	r6, #0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfb7      	itett	lt
 80097e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097f0:	1a9d      	sublt	r5, r3, r2
 80097f2:	2300      	movlt	r3, #0
 80097f4:	e741      	b.n	800967a <_dtoa_r+0x742>
 80097f6:	9e08      	ldr	r6, [sp, #32]
 80097f8:	9d05      	ldr	r5, [sp, #20]
 80097fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097fc:	e748      	b.n	8009690 <_dtoa_r+0x758>
 80097fe:	9a08      	ldr	r2, [sp, #32]
 8009800:	e770      	b.n	80096e4 <_dtoa_r+0x7ac>
 8009802:	9b07      	ldr	r3, [sp, #28]
 8009804:	2b01      	cmp	r3, #1
 8009806:	dc19      	bgt.n	800983c <_dtoa_r+0x904>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	b9bb      	cbnz	r3, 800983c <_dtoa_r+0x904>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009812:	b99b      	cbnz	r3, 800983c <_dtoa_r+0x904>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800981a:	0d1b      	lsrs	r3, r3, #20
 800981c:	051b      	lsls	r3, r3, #20
 800981e:	b183      	cbz	r3, 8009842 <_dtoa_r+0x90a>
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	3301      	adds	r3, #1
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	9b06      	ldr	r3, [sp, #24]
 8009828:	3301      	adds	r3, #1
 800982a:	9306      	str	r3, [sp, #24]
 800982c:	f04f 0801 	mov.w	r8, #1
 8009830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009832:	2b00      	cmp	r3, #0
 8009834:	f47f af6f 	bne.w	8009716 <_dtoa_r+0x7de>
 8009838:	2001      	movs	r0, #1
 800983a:	e774      	b.n	8009726 <_dtoa_r+0x7ee>
 800983c:	f04f 0800 	mov.w	r8, #0
 8009840:	e7f6      	b.n	8009830 <_dtoa_r+0x8f8>
 8009842:	4698      	mov	r8, r3
 8009844:	e7f4      	b.n	8009830 <_dtoa_r+0x8f8>
 8009846:	d082      	beq.n	800974e <_dtoa_r+0x816>
 8009848:	9a05      	ldr	r2, [sp, #20]
 800984a:	331c      	adds	r3, #28
 800984c:	441a      	add	r2, r3
 800984e:	9205      	str	r2, [sp, #20]
 8009850:	9a06      	ldr	r2, [sp, #24]
 8009852:	441a      	add	r2, r3
 8009854:	441d      	add	r5, r3
 8009856:	9206      	str	r2, [sp, #24]
 8009858:	e779      	b.n	800974e <_dtoa_r+0x816>
 800985a:	4603      	mov	r3, r0
 800985c:	e7f4      	b.n	8009848 <_dtoa_r+0x910>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	dc37      	bgt.n	80098d4 <_dtoa_r+0x99c>
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	2b02      	cmp	r3, #2
 8009868:	dd34      	ble.n	80098d4 <_dtoa_r+0x99c>
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	b963      	cbnz	r3, 800988c <_dtoa_r+0x954>
 8009872:	4631      	mov	r1, r6
 8009874:	2205      	movs	r2, #5
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fe1c 	bl	800a4b4 <__multadd>
 800987c:	4601      	mov	r1, r0
 800987e:	4606      	mov	r6, r0
 8009880:	4650      	mov	r0, sl
 8009882:	f001 f87b 	bl	800a97c <__mcmp>
 8009886:	2800      	cmp	r0, #0
 8009888:	f73f adbb 	bgt.w	8009402 <_dtoa_r+0x4ca>
 800988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988e:	9d00      	ldr	r5, [sp, #0]
 8009890:	ea6f 0b03 	mvn.w	fp, r3
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	4631      	mov	r1, r6
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fde8 	bl	800a470 <_Bfree>
 80098a0:	2f00      	cmp	r7, #0
 80098a2:	f43f aeab 	beq.w	80095fc <_dtoa_r+0x6c4>
 80098a6:	f1b8 0f00 	cmp.w	r8, #0
 80098aa:	d005      	beq.n	80098b8 <_dtoa_r+0x980>
 80098ac:	45b8      	cmp	r8, r7
 80098ae:	d003      	beq.n	80098b8 <_dtoa_r+0x980>
 80098b0:	4641      	mov	r1, r8
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fddc 	bl	800a470 <_Bfree>
 80098b8:	4639      	mov	r1, r7
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 fdd8 	bl	800a470 <_Bfree>
 80098c0:	e69c      	b.n	80095fc <_dtoa_r+0x6c4>
 80098c2:	2600      	movs	r6, #0
 80098c4:	4637      	mov	r7, r6
 80098c6:	e7e1      	b.n	800988c <_dtoa_r+0x954>
 80098c8:	46bb      	mov	fp, r7
 80098ca:	4637      	mov	r7, r6
 80098cc:	e599      	b.n	8009402 <_dtoa_r+0x4ca>
 80098ce:	bf00      	nop
 80098d0:	40240000 	.word	0x40240000
 80098d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80c8 	beq.w	8009a6c <_dtoa_r+0xb34>
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	dd05      	ble.n	80098f0 <_dtoa_r+0x9b8>
 80098e4:	4639      	mov	r1, r7
 80098e6:	462a      	mov	r2, r5
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 ffdb 	bl	800a8a4 <__lshift>
 80098ee:	4607      	mov	r7, r0
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	d05b      	beq.n	80099ae <_dtoa_r+0xa76>
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fd79 	bl	800a3f0 <_Balloc>
 80098fe:	4605      	mov	r5, r0
 8009900:	b928      	cbnz	r0, 800990e <_dtoa_r+0x9d6>
 8009902:	4b83      	ldr	r3, [pc, #524]	; (8009b10 <_dtoa_r+0xbd8>)
 8009904:	4602      	mov	r2, r0
 8009906:	f240 21ef 	movw	r1, #751	; 0x2ef
 800990a:	f7ff bb2e 	b.w	8008f6a <_dtoa_r+0x32>
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	3202      	adds	r2, #2
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	f107 010c 	add.w	r1, r7, #12
 8009918:	300c      	adds	r0, #12
 800991a:	f7ff fa4a 	bl	8008db2 <memcpy>
 800991e:	2201      	movs	r2, #1
 8009920:	4629      	mov	r1, r5
 8009922:	4620      	mov	r0, r4
 8009924:	f000 ffbe 	bl	800a8a4 <__lshift>
 8009928:	9b00      	ldr	r3, [sp, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009932:	4413      	add	r3, r2
 8009934:	9308      	str	r3, [sp, #32]
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	46b8      	mov	r8, r7
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	4607      	mov	r7, r0
 8009942:	9b04      	ldr	r3, [sp, #16]
 8009944:	4631      	mov	r1, r6
 8009946:	3b01      	subs	r3, #1
 8009948:	4650      	mov	r0, sl
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	f7ff fa6c 	bl	8008e28 <quorem>
 8009950:	4641      	mov	r1, r8
 8009952:	9002      	str	r0, [sp, #8]
 8009954:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009958:	4650      	mov	r0, sl
 800995a:	f001 f80f 	bl	800a97c <__mcmp>
 800995e:	463a      	mov	r2, r7
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	4631      	mov	r1, r6
 8009964:	4620      	mov	r0, r4
 8009966:	f001 f825 	bl	800a9b4 <__mdiff>
 800996a:	68c2      	ldr	r2, [r0, #12]
 800996c:	4605      	mov	r5, r0
 800996e:	bb02      	cbnz	r2, 80099b2 <_dtoa_r+0xa7a>
 8009970:	4601      	mov	r1, r0
 8009972:	4650      	mov	r0, sl
 8009974:	f001 f802 	bl	800a97c <__mcmp>
 8009978:	4602      	mov	r2, r0
 800997a:	4629      	mov	r1, r5
 800997c:	4620      	mov	r0, r4
 800997e:	9209      	str	r2, [sp, #36]	; 0x24
 8009980:	f000 fd76 	bl	800a470 <_Bfree>
 8009984:	9b07      	ldr	r3, [sp, #28]
 8009986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009988:	9d04      	ldr	r5, [sp, #16]
 800998a:	ea43 0102 	orr.w	r1, r3, r2
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	4319      	orrs	r1, r3
 8009992:	d110      	bne.n	80099b6 <_dtoa_r+0xa7e>
 8009994:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009998:	d029      	beq.n	80099ee <_dtoa_r+0xab6>
 800999a:	9b05      	ldr	r3, [sp, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd02      	ble.n	80099a6 <_dtoa_r+0xa6e>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	f883 9000 	strb.w	r9, [r3]
 80099ac:	e774      	b.n	8009898 <_dtoa_r+0x960>
 80099ae:	4638      	mov	r0, r7
 80099b0:	e7ba      	b.n	8009928 <_dtoa_r+0x9f0>
 80099b2:	2201      	movs	r2, #1
 80099b4:	e7e1      	b.n	800997a <_dtoa_r+0xa42>
 80099b6:	9b05      	ldr	r3, [sp, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db04      	blt.n	80099c6 <_dtoa_r+0xa8e>
 80099bc:	9907      	ldr	r1, [sp, #28]
 80099be:	430b      	orrs	r3, r1
 80099c0:	9906      	ldr	r1, [sp, #24]
 80099c2:	430b      	orrs	r3, r1
 80099c4:	d120      	bne.n	8009a08 <_dtoa_r+0xad0>
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	dded      	ble.n	80099a6 <_dtoa_r+0xa6e>
 80099ca:	4651      	mov	r1, sl
 80099cc:	2201      	movs	r2, #1
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 ff68 	bl	800a8a4 <__lshift>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4682      	mov	sl, r0
 80099d8:	f000 ffd0 	bl	800a97c <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	dc03      	bgt.n	80099e8 <_dtoa_r+0xab0>
 80099e0:	d1e1      	bne.n	80099a6 <_dtoa_r+0xa6e>
 80099e2:	f019 0f01 	tst.w	r9, #1
 80099e6:	d0de      	beq.n	80099a6 <_dtoa_r+0xa6e>
 80099e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099ec:	d1d8      	bne.n	80099a0 <_dtoa_r+0xa68>
 80099ee:	9a01      	ldr	r2, [sp, #4]
 80099f0:	2339      	movs	r3, #57	; 0x39
 80099f2:	7013      	strb	r3, [r2, #0]
 80099f4:	462b      	mov	r3, r5
 80099f6:	461d      	mov	r5, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099fe:	2a39      	cmp	r2, #57	; 0x39
 8009a00:	d06c      	beq.n	8009adc <_dtoa_r+0xba4>
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e747      	b.n	8009898 <_dtoa_r+0x960>
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	dd07      	ble.n	8009a1c <_dtoa_r+0xae4>
 8009a0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a10:	d0ed      	beq.n	80099ee <_dtoa_r+0xab6>
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	f109 0301 	add.w	r3, r9, #1
 8009a18:	7013      	strb	r3, [r2, #0]
 8009a1a:	e73d      	b.n	8009898 <_dtoa_r+0x960>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	9a08      	ldr	r2, [sp, #32]
 8009a20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d043      	beq.n	8009ab0 <_dtoa_r+0xb78>
 8009a28:	4651      	mov	r1, sl
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 fd40 	bl	800a4b4 <__multadd>
 8009a34:	45b8      	cmp	r8, r7
 8009a36:	4682      	mov	sl, r0
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	f04f 020a 	mov.w	r2, #10
 8009a40:	4641      	mov	r1, r8
 8009a42:	4620      	mov	r0, r4
 8009a44:	d107      	bne.n	8009a56 <_dtoa_r+0xb1e>
 8009a46:	f000 fd35 	bl	800a4b4 <__multadd>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	3301      	adds	r3, #1
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	e775      	b.n	8009942 <_dtoa_r+0xa0a>
 8009a56:	f000 fd2d 	bl	800a4b4 <__multadd>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4680      	mov	r8, r0
 8009a5e:	2300      	movs	r3, #0
 8009a60:	220a      	movs	r2, #10
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fd26 	bl	800a4b4 <__multadd>
 8009a68:	4607      	mov	r7, r0
 8009a6a:	e7f0      	b.n	8009a4e <_dtoa_r+0xb16>
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	9d00      	ldr	r5, [sp, #0]
 8009a72:	4631      	mov	r1, r6
 8009a74:	4650      	mov	r0, sl
 8009a76:	f7ff f9d7 	bl	8008e28 <quorem>
 8009a7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	f805 9b01 	strb.w	r9, [r5], #1
 8009a84:	1aea      	subs	r2, r5, r3
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	dd07      	ble.n	8009a9c <_dtoa_r+0xb64>
 8009a8c:	4651      	mov	r1, sl
 8009a8e:	2300      	movs	r3, #0
 8009a90:	220a      	movs	r2, #10
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fd0e 	bl	800a4b4 <__multadd>
 8009a98:	4682      	mov	sl, r0
 8009a9a:	e7ea      	b.n	8009a72 <_dtoa_r+0xb3a>
 8009a9c:	9b01      	ldr	r3, [sp, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfc8      	it	gt
 8009aa2:	461d      	movgt	r5, r3
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	bfd8      	it	le
 8009aa8:	2501      	movle	r5, #1
 8009aaa:	441d      	add	r5, r3
 8009aac:	f04f 0800 	mov.w	r8, #0
 8009ab0:	4651      	mov	r1, sl
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fef5 	bl	800a8a4 <__lshift>
 8009aba:	4631      	mov	r1, r6
 8009abc:	4682      	mov	sl, r0
 8009abe:	f000 ff5d 	bl	800a97c <__mcmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	dc96      	bgt.n	80099f4 <_dtoa_r+0xabc>
 8009ac6:	d102      	bne.n	8009ace <_dtoa_r+0xb96>
 8009ac8:	f019 0f01 	tst.w	r9, #1
 8009acc:	d192      	bne.n	80099f4 <_dtoa_r+0xabc>
 8009ace:	462b      	mov	r3, r5
 8009ad0:	461d      	mov	r5, r3
 8009ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad6:	2a30      	cmp	r2, #48	; 0x30
 8009ad8:	d0fa      	beq.n	8009ad0 <_dtoa_r+0xb98>
 8009ada:	e6dd      	b.n	8009898 <_dtoa_r+0x960>
 8009adc:	9a00      	ldr	r2, [sp, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d189      	bne.n	80099f6 <_dtoa_r+0xabe>
 8009ae2:	f10b 0b01 	add.w	fp, fp, #1
 8009ae6:	2331      	movs	r3, #49	; 0x31
 8009ae8:	e796      	b.n	8009a18 <_dtoa_r+0xae0>
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <_dtoa_r+0xbdc>)
 8009aec:	f7ff ba99 	b.w	8009022 <_dtoa_r+0xea>
 8009af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f47f aa6d 	bne.w	8008fd2 <_dtoa_r+0x9a>
 8009af8:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <_dtoa_r+0xbe0>)
 8009afa:	f7ff ba92 	b.w	8009022 <_dtoa_r+0xea>
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dcb5      	bgt.n	8009a70 <_dtoa_r+0xb38>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	f73f aeb1 	bgt.w	800986e <_dtoa_r+0x936>
 8009b0c:	e7b0      	b.n	8009a70 <_dtoa_r+0xb38>
 8009b0e:	bf00      	nop
 8009b10:	0800bfb4 	.word	0x0800bfb4
 8009b14:	0800be71 	.word	0x0800be71
 8009b18:	0800bf4f 	.word	0x0800bf4f

08009b1c <_free_r>:
 8009b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	d044      	beq.n	8009bac <_free_r+0x90>
 8009b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b2e:	bfb8      	it	lt
 8009b30:	18e4      	addlt	r4, r4, r3
 8009b32:	f000 fc51 	bl	800a3d8 <__malloc_lock>
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <_free_r+0x94>)
 8009b38:	9801      	ldr	r0, [sp, #4]
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	b933      	cbnz	r3, 8009b4c <_free_r+0x30>
 8009b3e:	6063      	str	r3, [r4, #4]
 8009b40:	6014      	str	r4, [r2, #0]
 8009b42:	b003      	add	sp, #12
 8009b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b48:	f000 bc4c 	b.w	800a3e4 <__malloc_unlock>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d908      	bls.n	8009b62 <_free_r+0x46>
 8009b50:	6825      	ldr	r5, [r4, #0]
 8009b52:	1961      	adds	r1, r4, r5
 8009b54:	428b      	cmp	r3, r1
 8009b56:	bf01      	itttt	eq
 8009b58:	6819      	ldreq	r1, [r3, #0]
 8009b5a:	685b      	ldreq	r3, [r3, #4]
 8009b5c:	1949      	addeq	r1, r1, r5
 8009b5e:	6021      	streq	r1, [r4, #0]
 8009b60:	e7ed      	b.n	8009b3e <_free_r+0x22>
 8009b62:	461a      	mov	r2, r3
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	b10b      	cbz	r3, 8009b6c <_free_r+0x50>
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d9fa      	bls.n	8009b62 <_free_r+0x46>
 8009b6c:	6811      	ldr	r1, [r2, #0]
 8009b6e:	1855      	adds	r5, r2, r1
 8009b70:	42a5      	cmp	r5, r4
 8009b72:	d10b      	bne.n	8009b8c <_free_r+0x70>
 8009b74:	6824      	ldr	r4, [r4, #0]
 8009b76:	4421      	add	r1, r4
 8009b78:	1854      	adds	r4, r2, r1
 8009b7a:	42a3      	cmp	r3, r4
 8009b7c:	6011      	str	r1, [r2, #0]
 8009b7e:	d1e0      	bne.n	8009b42 <_free_r+0x26>
 8009b80:	681c      	ldr	r4, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	6053      	str	r3, [r2, #4]
 8009b86:	440c      	add	r4, r1
 8009b88:	6014      	str	r4, [r2, #0]
 8009b8a:	e7da      	b.n	8009b42 <_free_r+0x26>
 8009b8c:	d902      	bls.n	8009b94 <_free_r+0x78>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	e7d6      	b.n	8009b42 <_free_r+0x26>
 8009b94:	6825      	ldr	r5, [r4, #0]
 8009b96:	1961      	adds	r1, r4, r5
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	bf04      	itt	eq
 8009b9c:	6819      	ldreq	r1, [r3, #0]
 8009b9e:	685b      	ldreq	r3, [r3, #4]
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	bf04      	itt	eq
 8009ba4:	1949      	addeq	r1, r1, r5
 8009ba6:	6021      	streq	r1, [r4, #0]
 8009ba8:	6054      	str	r4, [r2, #4]
 8009baa:	e7ca      	b.n	8009b42 <_free_r+0x26>
 8009bac:	b003      	add	sp, #12
 8009bae:	bd30      	pop	{r4, r5, pc}
 8009bb0:	20000d3c 	.word	0x20000d3c

08009bb4 <rshift>:
 8009bb4:	6903      	ldr	r3, [r0, #16]
 8009bb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bc2:	f100 0414 	add.w	r4, r0, #20
 8009bc6:	dd45      	ble.n	8009c54 <rshift+0xa0>
 8009bc8:	f011 011f 	ands.w	r1, r1, #31
 8009bcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bd4:	d10c      	bne.n	8009bf0 <rshift+0x3c>
 8009bd6:	f100 0710 	add.w	r7, r0, #16
 8009bda:	4629      	mov	r1, r5
 8009bdc:	42b1      	cmp	r1, r6
 8009bde:	d334      	bcc.n	8009c4a <rshift+0x96>
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	1eea      	subs	r2, r5, #3
 8009be6:	4296      	cmp	r6, r2
 8009be8:	bf38      	it	cc
 8009bea:	2300      	movcc	r3, #0
 8009bec:	4423      	add	r3, r4
 8009bee:	e015      	b.n	8009c1c <rshift+0x68>
 8009bf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bf4:	f1c1 0820 	rsb	r8, r1, #32
 8009bf8:	40cf      	lsrs	r7, r1
 8009bfa:	f105 0e04 	add.w	lr, r5, #4
 8009bfe:	46a1      	mov	r9, r4
 8009c00:	4576      	cmp	r6, lr
 8009c02:	46f4      	mov	ip, lr
 8009c04:	d815      	bhi.n	8009c32 <rshift+0x7e>
 8009c06:	1a9a      	subs	r2, r3, r2
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	3a04      	subs	r2, #4
 8009c0c:	3501      	adds	r5, #1
 8009c0e:	42ae      	cmp	r6, r5
 8009c10:	bf38      	it	cc
 8009c12:	2200      	movcc	r2, #0
 8009c14:	18a3      	adds	r3, r4, r2
 8009c16:	50a7      	str	r7, [r4, r2]
 8009c18:	b107      	cbz	r7, 8009c1c <rshift+0x68>
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	1b1a      	subs	r2, r3, r4
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c24:	bf08      	it	eq
 8009c26:	2300      	moveq	r3, #0
 8009c28:	6102      	str	r2, [r0, #16]
 8009c2a:	bf08      	it	eq
 8009c2c:	6143      	streq	r3, [r0, #20]
 8009c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c32:	f8dc c000 	ldr.w	ip, [ip]
 8009c36:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c3a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c3e:	f849 7b04 	str.w	r7, [r9], #4
 8009c42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c46:	40cf      	lsrs	r7, r1
 8009c48:	e7da      	b.n	8009c00 <rshift+0x4c>
 8009c4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c52:	e7c3      	b.n	8009bdc <rshift+0x28>
 8009c54:	4623      	mov	r3, r4
 8009c56:	e7e1      	b.n	8009c1c <rshift+0x68>

08009c58 <__hexdig_fun>:
 8009c58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c5c:	2b09      	cmp	r3, #9
 8009c5e:	d802      	bhi.n	8009c66 <__hexdig_fun+0xe>
 8009c60:	3820      	subs	r0, #32
 8009c62:	b2c0      	uxtb	r0, r0
 8009c64:	4770      	bx	lr
 8009c66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d801      	bhi.n	8009c72 <__hexdig_fun+0x1a>
 8009c6e:	3847      	subs	r0, #71	; 0x47
 8009c70:	e7f7      	b.n	8009c62 <__hexdig_fun+0xa>
 8009c72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c76:	2b05      	cmp	r3, #5
 8009c78:	d801      	bhi.n	8009c7e <__hexdig_fun+0x26>
 8009c7a:	3827      	subs	r0, #39	; 0x27
 8009c7c:	e7f1      	b.n	8009c62 <__hexdig_fun+0xa>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	4770      	bx	lr
	...

08009c84 <__gethex>:
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4617      	mov	r7, r2
 8009c8a:	680a      	ldr	r2, [r1, #0]
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	f102 0b02 	add.w	fp, r2, #2
 8009c92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c9a:	4681      	mov	r9, r0
 8009c9c:	468a      	mov	sl, r1
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	32fe      	adds	r2, #254	; 0xfe
 8009ca2:	eb02 030b 	add.w	r3, r2, fp
 8009ca6:	46d8      	mov	r8, fp
 8009ca8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	2830      	cmp	r0, #48	; 0x30
 8009cb0:	d0f7      	beq.n	8009ca2 <__gethex+0x1e>
 8009cb2:	f7ff ffd1 	bl	8009c58 <__hexdig_fun>
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d138      	bne.n	8009d2e <__gethex+0xaa>
 8009cbc:	49a7      	ldr	r1, [pc, #668]	; (8009f5c <__gethex+0x2d8>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	f7fe ff60 	bl	8008b86 <strncmp>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d169      	bne.n	8009da0 <__gethex+0x11c>
 8009ccc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009cd0:	465d      	mov	r5, fp
 8009cd2:	f7ff ffc1 	bl	8009c58 <__hexdig_fun>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d064      	beq.n	8009da4 <__gethex+0x120>
 8009cda:	465a      	mov	r2, fp
 8009cdc:	7810      	ldrb	r0, [r2, #0]
 8009cde:	2830      	cmp	r0, #48	; 0x30
 8009ce0:	4690      	mov	r8, r2
 8009ce2:	f102 0201 	add.w	r2, r2, #1
 8009ce6:	d0f9      	beq.n	8009cdc <__gethex+0x58>
 8009ce8:	f7ff ffb6 	bl	8009c58 <__hexdig_fun>
 8009cec:	2301      	movs	r3, #1
 8009cee:	fab0 f480 	clz	r4, r0
 8009cf2:	0964      	lsrs	r4, r4, #5
 8009cf4:	465e      	mov	r6, fp
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	3201      	adds	r2, #1
 8009cfe:	7828      	ldrb	r0, [r5, #0]
 8009d00:	f7ff ffaa 	bl	8009c58 <__hexdig_fun>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1f8      	bne.n	8009cfa <__gethex+0x76>
 8009d08:	4994      	ldr	r1, [pc, #592]	; (8009f5c <__gethex+0x2d8>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7fe ff3a 	bl	8008b86 <strncmp>
 8009d12:	b978      	cbnz	r0, 8009d34 <__gethex+0xb0>
 8009d14:	b946      	cbnz	r6, 8009d28 <__gethex+0xa4>
 8009d16:	1c6e      	adds	r6, r5, #1
 8009d18:	4632      	mov	r2, r6
 8009d1a:	4615      	mov	r5, r2
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	7828      	ldrb	r0, [r5, #0]
 8009d20:	f7ff ff9a 	bl	8009c58 <__hexdig_fun>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1f8      	bne.n	8009d1a <__gethex+0x96>
 8009d28:	1b73      	subs	r3, r6, r5
 8009d2a:	009e      	lsls	r6, r3, #2
 8009d2c:	e004      	b.n	8009d38 <__gethex+0xb4>
 8009d2e:	2400      	movs	r4, #0
 8009d30:	4626      	mov	r6, r4
 8009d32:	e7e1      	b.n	8009cf8 <__gethex+0x74>
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	d1f7      	bne.n	8009d28 <__gethex+0xa4>
 8009d38:	782b      	ldrb	r3, [r5, #0]
 8009d3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d3e:	2b50      	cmp	r3, #80	; 0x50
 8009d40:	d13d      	bne.n	8009dbe <__gethex+0x13a>
 8009d42:	786b      	ldrb	r3, [r5, #1]
 8009d44:	2b2b      	cmp	r3, #43	; 0x2b
 8009d46:	d02f      	beq.n	8009da8 <__gethex+0x124>
 8009d48:	2b2d      	cmp	r3, #45	; 0x2d
 8009d4a:	d031      	beq.n	8009db0 <__gethex+0x12c>
 8009d4c:	1c69      	adds	r1, r5, #1
 8009d4e:	f04f 0b00 	mov.w	fp, #0
 8009d52:	7808      	ldrb	r0, [r1, #0]
 8009d54:	f7ff ff80 	bl	8009c58 <__hexdig_fun>
 8009d58:	1e42      	subs	r2, r0, #1
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	2a18      	cmp	r2, #24
 8009d5e:	d82e      	bhi.n	8009dbe <__gethex+0x13a>
 8009d60:	f1a0 0210 	sub.w	r2, r0, #16
 8009d64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d68:	f7ff ff76 	bl	8009c58 <__hexdig_fun>
 8009d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d70:	fa5f fc8c 	uxtb.w	ip, ip
 8009d74:	f1bc 0f18 	cmp.w	ip, #24
 8009d78:	d91d      	bls.n	8009db6 <__gethex+0x132>
 8009d7a:	f1bb 0f00 	cmp.w	fp, #0
 8009d7e:	d000      	beq.n	8009d82 <__gethex+0xfe>
 8009d80:	4252      	negs	r2, r2
 8009d82:	4416      	add	r6, r2
 8009d84:	f8ca 1000 	str.w	r1, [sl]
 8009d88:	b1dc      	cbz	r4, 8009dc2 <__gethex+0x13e>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bf14      	ite	ne
 8009d90:	f04f 0800 	movne.w	r8, #0
 8009d94:	f04f 0806 	moveq.w	r8, #6
 8009d98:	4640      	mov	r0, r8
 8009d9a:	b005      	add	sp, #20
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	4645      	mov	r5, r8
 8009da2:	4626      	mov	r6, r4
 8009da4:	2401      	movs	r4, #1
 8009da6:	e7c7      	b.n	8009d38 <__gethex+0xb4>
 8009da8:	f04f 0b00 	mov.w	fp, #0
 8009dac:	1ca9      	adds	r1, r5, #2
 8009dae:	e7d0      	b.n	8009d52 <__gethex+0xce>
 8009db0:	f04f 0b01 	mov.w	fp, #1
 8009db4:	e7fa      	b.n	8009dac <__gethex+0x128>
 8009db6:	230a      	movs	r3, #10
 8009db8:	fb03 0002 	mla	r0, r3, r2, r0
 8009dbc:	e7d0      	b.n	8009d60 <__gethex+0xdc>
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	e7e0      	b.n	8009d84 <__gethex+0x100>
 8009dc2:	eba5 0308 	sub.w	r3, r5, r8
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4621      	mov	r1, r4
 8009dca:	2b07      	cmp	r3, #7
 8009dcc:	dc0a      	bgt.n	8009de4 <__gethex+0x160>
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f000 fb0e 	bl	800a3f0 <_Balloc>
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	b940      	cbnz	r0, 8009dea <__gethex+0x166>
 8009dd8:	4b61      	ldr	r3, [pc, #388]	; (8009f60 <__gethex+0x2dc>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	21e4      	movs	r1, #228	; 0xe4
 8009dde:	4861      	ldr	r0, [pc, #388]	; (8009f64 <__gethex+0x2e0>)
 8009de0:	f7ff f804 	bl	8008dec <__assert_func>
 8009de4:	3101      	adds	r1, #1
 8009de6:	105b      	asrs	r3, r3, #1
 8009de8:	e7ef      	b.n	8009dca <__gethex+0x146>
 8009dea:	f100 0a14 	add.w	sl, r0, #20
 8009dee:	2300      	movs	r3, #0
 8009df0:	495a      	ldr	r1, [pc, #360]	; (8009f5c <__gethex+0x2d8>)
 8009df2:	f8cd a004 	str.w	sl, [sp, #4]
 8009df6:	469b      	mov	fp, r3
 8009df8:	45a8      	cmp	r8, r5
 8009dfa:	d342      	bcc.n	8009e82 <__gethex+0x1fe>
 8009dfc:	9801      	ldr	r0, [sp, #4]
 8009dfe:	f840 bb04 	str.w	fp, [r0], #4
 8009e02:	eba0 000a 	sub.w	r0, r0, sl
 8009e06:	1080      	asrs	r0, r0, #2
 8009e08:	6120      	str	r0, [r4, #16]
 8009e0a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009e0e:	4658      	mov	r0, fp
 8009e10:	f000 fbe0 	bl	800a5d4 <__hi0bits>
 8009e14:	683d      	ldr	r5, [r7, #0]
 8009e16:	eba8 0000 	sub.w	r0, r8, r0
 8009e1a:	42a8      	cmp	r0, r5
 8009e1c:	dd59      	ble.n	8009ed2 <__gethex+0x24e>
 8009e1e:	eba0 0805 	sub.w	r8, r0, r5
 8009e22:	4641      	mov	r1, r8
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 ff6f 	bl	800ad08 <__any_on>
 8009e2a:	4683      	mov	fp, r0
 8009e2c:	b1b8      	cbz	r0, 8009e5e <__gethex+0x1da>
 8009e2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e32:	1159      	asrs	r1, r3, #5
 8009e34:	f003 021f 	and.w	r2, r3, #31
 8009e38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e3c:	f04f 0b01 	mov.w	fp, #1
 8009e40:	fa0b f202 	lsl.w	r2, fp, r2
 8009e44:	420a      	tst	r2, r1
 8009e46:	d00a      	beq.n	8009e5e <__gethex+0x1da>
 8009e48:	455b      	cmp	r3, fp
 8009e4a:	dd06      	ble.n	8009e5a <__gethex+0x1d6>
 8009e4c:	f1a8 0102 	sub.w	r1, r8, #2
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 ff59 	bl	800ad08 <__any_on>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d138      	bne.n	8009ecc <__gethex+0x248>
 8009e5a:	f04f 0b02 	mov.w	fp, #2
 8009e5e:	4641      	mov	r1, r8
 8009e60:	4620      	mov	r0, r4
 8009e62:	f7ff fea7 	bl	8009bb4 <rshift>
 8009e66:	4446      	add	r6, r8
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	42b3      	cmp	r3, r6
 8009e6c:	da41      	bge.n	8009ef2 <__gethex+0x26e>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4648      	mov	r0, r9
 8009e72:	f000 fafd 	bl	800a470 <_Bfree>
 8009e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009e80:	e78a      	b.n	8009d98 <__gethex+0x114>
 8009e82:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009e86:	2a2e      	cmp	r2, #46	; 0x2e
 8009e88:	d014      	beq.n	8009eb4 <__gethex+0x230>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d106      	bne.n	8009e9c <__gethex+0x218>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	f843 bb04 	str.w	fp, [r3], #4
 8009e94:	f04f 0b00 	mov.w	fp, #0
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	465b      	mov	r3, fp
 8009e9c:	7828      	ldrb	r0, [r5, #0]
 8009e9e:	9303      	str	r3, [sp, #12]
 8009ea0:	f7ff feda 	bl	8009c58 <__hexdig_fun>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	f000 000f 	and.w	r0, r0, #15
 8009eaa:	4098      	lsls	r0, r3
 8009eac:	ea4b 0b00 	orr.w	fp, fp, r0
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	e7a1      	b.n	8009df8 <__gethex+0x174>
 8009eb4:	45a8      	cmp	r8, r5
 8009eb6:	d8e8      	bhi.n	8009e8a <__gethex+0x206>
 8009eb8:	2201      	movs	r2, #1
 8009eba:	4628      	mov	r0, r5
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	f7fe fe62 	bl	8008b86 <strncmp>
 8009ec2:	4926      	ldr	r1, [pc, #152]	; (8009f5c <__gethex+0x2d8>)
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1df      	bne.n	8009e8a <__gethex+0x206>
 8009eca:	e795      	b.n	8009df8 <__gethex+0x174>
 8009ecc:	f04f 0b03 	mov.w	fp, #3
 8009ed0:	e7c5      	b.n	8009e5e <__gethex+0x1da>
 8009ed2:	da0b      	bge.n	8009eec <__gethex+0x268>
 8009ed4:	eba5 0800 	sub.w	r8, r5, r0
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4642      	mov	r2, r8
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 fce1 	bl	800a8a4 <__lshift>
 8009ee2:	eba6 0608 	sub.w	r6, r6, r8
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	f100 0a14 	add.w	sl, r0, #20
 8009eec:	f04f 0b00 	mov.w	fp, #0
 8009ef0:	e7ba      	b.n	8009e68 <__gethex+0x1e4>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	42b3      	cmp	r3, r6
 8009ef6:	dd73      	ble.n	8009fe0 <__gethex+0x35c>
 8009ef8:	1b9e      	subs	r6, r3, r6
 8009efa:	42b5      	cmp	r5, r6
 8009efc:	dc34      	bgt.n	8009f68 <__gethex+0x2e4>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d023      	beq.n	8009f4c <__gethex+0x2c8>
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d025      	beq.n	8009f54 <__gethex+0x2d0>
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d115      	bne.n	8009f38 <__gethex+0x2b4>
 8009f0c:	42b5      	cmp	r5, r6
 8009f0e:	d113      	bne.n	8009f38 <__gethex+0x2b4>
 8009f10:	2d01      	cmp	r5, #1
 8009f12:	d10b      	bne.n	8009f2c <__gethex+0x2a8>
 8009f14:	9a02      	ldr	r2, [sp, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	6123      	str	r3, [r4, #16]
 8009f1e:	f8ca 3000 	str.w	r3, [sl]
 8009f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f24:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009f28:	601c      	str	r4, [r3, #0]
 8009f2a:	e735      	b.n	8009d98 <__gethex+0x114>
 8009f2c:	1e69      	subs	r1, r5, #1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 feea 	bl	800ad08 <__any_on>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d1ed      	bne.n	8009f14 <__gethex+0x290>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4648      	mov	r0, r9
 8009f3c:	f000 fa98 	bl	800a470 <_Bfree>
 8009f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f42:	2300      	movs	r3, #0
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009f4a:	e725      	b.n	8009d98 <__gethex+0x114>
 8009f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1f2      	bne.n	8009f38 <__gethex+0x2b4>
 8009f52:	e7df      	b.n	8009f14 <__gethex+0x290>
 8009f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1dc      	bne.n	8009f14 <__gethex+0x290>
 8009f5a:	e7ed      	b.n	8009f38 <__gethex+0x2b4>
 8009f5c:	0800bd0c 	.word	0x0800bd0c
 8009f60:	0800bfb4 	.word	0x0800bfb4
 8009f64:	0800bfc5 	.word	0x0800bfc5
 8009f68:	f106 38ff 	add.w	r8, r6, #4294967295
 8009f6c:	f1bb 0f00 	cmp.w	fp, #0
 8009f70:	d133      	bne.n	8009fda <__gethex+0x356>
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	d004      	beq.n	8009f82 <__gethex+0x2fe>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fec4 	bl	800ad08 <__any_on>
 8009f80:	4683      	mov	fp, r0
 8009f82:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009f86:	2301      	movs	r3, #1
 8009f88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f8c:	f008 081f 	and.w	r8, r8, #31
 8009f90:	fa03 f308 	lsl.w	r3, r3, r8
 8009f94:	4213      	tst	r3, r2
 8009f96:	4631      	mov	r1, r6
 8009f98:	4620      	mov	r0, r4
 8009f9a:	bf18      	it	ne
 8009f9c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009fa0:	1bad      	subs	r5, r5, r6
 8009fa2:	f7ff fe07 	bl	8009bb4 <rshift>
 8009fa6:	687e      	ldr	r6, [r7, #4]
 8009fa8:	f04f 0802 	mov.w	r8, #2
 8009fac:	f1bb 0f00 	cmp.w	fp, #0
 8009fb0:	d04a      	beq.n	800a048 <__gethex+0x3c4>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d016      	beq.n	8009fe6 <__gethex+0x362>
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d018      	beq.n	8009fee <__gethex+0x36a>
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d109      	bne.n	8009fd4 <__gethex+0x350>
 8009fc0:	f01b 0f02 	tst.w	fp, #2
 8009fc4:	d006      	beq.n	8009fd4 <__gethex+0x350>
 8009fc6:	f8da 3000 	ldr.w	r3, [sl]
 8009fca:	ea4b 0b03 	orr.w	fp, fp, r3
 8009fce:	f01b 0f01 	tst.w	fp, #1
 8009fd2:	d10f      	bne.n	8009ff4 <__gethex+0x370>
 8009fd4:	f048 0810 	orr.w	r8, r8, #16
 8009fd8:	e036      	b.n	800a048 <__gethex+0x3c4>
 8009fda:	f04f 0b01 	mov.w	fp, #1
 8009fde:	e7d0      	b.n	8009f82 <__gethex+0x2fe>
 8009fe0:	f04f 0801 	mov.w	r8, #1
 8009fe4:	e7e2      	b.n	8009fac <__gethex+0x328>
 8009fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fe8:	f1c3 0301 	rsb	r3, r3, #1
 8009fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0ef      	beq.n	8009fd4 <__gethex+0x350>
 8009ff4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ff8:	f104 0214 	add.w	r2, r4, #20
 8009ffc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a006:	2300      	movs	r3, #0
 800a008:	4694      	mov	ip, r2
 800a00a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a00e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a012:	d01e      	beq.n	800a052 <__gethex+0x3ce>
 800a014:	3101      	adds	r1, #1
 800a016:	f8cc 1000 	str.w	r1, [ip]
 800a01a:	f1b8 0f02 	cmp.w	r8, #2
 800a01e:	f104 0214 	add.w	r2, r4, #20
 800a022:	d13d      	bne.n	800a0a0 <__gethex+0x41c>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	3b01      	subs	r3, #1
 800a028:	42ab      	cmp	r3, r5
 800a02a:	d10b      	bne.n	800a044 <__gethex+0x3c0>
 800a02c:	1169      	asrs	r1, r5, #5
 800a02e:	2301      	movs	r3, #1
 800a030:	f005 051f 	and.w	r5, r5, #31
 800a034:	fa03 f505 	lsl.w	r5, r3, r5
 800a038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a03c:	421d      	tst	r5, r3
 800a03e:	bf18      	it	ne
 800a040:	f04f 0801 	movne.w	r8, #1
 800a044:	f048 0820 	orr.w	r8, r8, #32
 800a048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04a:	601c      	str	r4, [r3, #0]
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	601e      	str	r6, [r3, #0]
 800a050:	e6a2      	b.n	8009d98 <__gethex+0x114>
 800a052:	4290      	cmp	r0, r2
 800a054:	f842 3c04 	str.w	r3, [r2, #-4]
 800a058:	d8d6      	bhi.n	800a008 <__gethex+0x384>
 800a05a:	68a2      	ldr	r2, [r4, #8]
 800a05c:	4593      	cmp	fp, r2
 800a05e:	db17      	blt.n	800a090 <__gethex+0x40c>
 800a060:	6861      	ldr	r1, [r4, #4]
 800a062:	4648      	mov	r0, r9
 800a064:	3101      	adds	r1, #1
 800a066:	f000 f9c3 	bl	800a3f0 <_Balloc>
 800a06a:	4682      	mov	sl, r0
 800a06c:	b918      	cbnz	r0, 800a076 <__gethex+0x3f2>
 800a06e:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <__gethex+0x458>)
 800a070:	4602      	mov	r2, r0
 800a072:	2184      	movs	r1, #132	; 0x84
 800a074:	e6b3      	b.n	8009dde <__gethex+0x15a>
 800a076:	6922      	ldr	r2, [r4, #16]
 800a078:	3202      	adds	r2, #2
 800a07a:	f104 010c 	add.w	r1, r4, #12
 800a07e:	0092      	lsls	r2, r2, #2
 800a080:	300c      	adds	r0, #12
 800a082:	f7fe fe96 	bl	8008db2 <memcpy>
 800a086:	4621      	mov	r1, r4
 800a088:	4648      	mov	r0, r9
 800a08a:	f000 f9f1 	bl	800a470 <_Bfree>
 800a08e:	4654      	mov	r4, sl
 800a090:	6922      	ldr	r2, [r4, #16]
 800a092:	1c51      	adds	r1, r2, #1
 800a094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a098:	6121      	str	r1, [r4, #16]
 800a09a:	2101      	movs	r1, #1
 800a09c:	6151      	str	r1, [r2, #20]
 800a09e:	e7bc      	b.n	800a01a <__gethex+0x396>
 800a0a0:	6921      	ldr	r1, [r4, #16]
 800a0a2:	4559      	cmp	r1, fp
 800a0a4:	dd0b      	ble.n	800a0be <__gethex+0x43a>
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff fd83 	bl	8009bb4 <rshift>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	42b3      	cmp	r3, r6
 800a0b4:	f6ff aedb 	blt.w	8009e6e <__gethex+0x1ea>
 800a0b8:	f04f 0801 	mov.w	r8, #1
 800a0bc:	e7c2      	b.n	800a044 <__gethex+0x3c0>
 800a0be:	f015 051f 	ands.w	r5, r5, #31
 800a0c2:	d0f9      	beq.n	800a0b8 <__gethex+0x434>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	f1c5 0520 	rsb	r5, r5, #32
 800a0cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a0d0:	f000 fa80 	bl	800a5d4 <__hi0bits>
 800a0d4:	42a8      	cmp	r0, r5
 800a0d6:	dbe6      	blt.n	800a0a6 <__gethex+0x422>
 800a0d8:	e7ee      	b.n	800a0b8 <__gethex+0x434>
 800a0da:	bf00      	nop
 800a0dc:	0800bfb4 	.word	0x0800bfb4

0800a0e0 <L_shift>:
 800a0e0:	f1c2 0208 	rsb	r2, r2, #8
 800a0e4:	0092      	lsls	r2, r2, #2
 800a0e6:	b570      	push	{r4, r5, r6, lr}
 800a0e8:	f1c2 0620 	rsb	r6, r2, #32
 800a0ec:	6843      	ldr	r3, [r0, #4]
 800a0ee:	6804      	ldr	r4, [r0, #0]
 800a0f0:	fa03 f506 	lsl.w	r5, r3, r6
 800a0f4:	432c      	orrs	r4, r5
 800a0f6:	40d3      	lsrs	r3, r2
 800a0f8:	6004      	str	r4, [r0, #0]
 800a0fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0fe:	4288      	cmp	r0, r1
 800a100:	d3f4      	bcc.n	800a0ec <L_shift+0xc>
 800a102:	bd70      	pop	{r4, r5, r6, pc}

0800a104 <__match>:
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	6803      	ldr	r3, [r0, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a10e:	b914      	cbnz	r4, 800a116 <__match+0x12>
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	2001      	movs	r0, #1
 800a114:	bd30      	pop	{r4, r5, pc}
 800a116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a11a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a11e:	2d19      	cmp	r5, #25
 800a120:	bf98      	it	ls
 800a122:	3220      	addls	r2, #32
 800a124:	42a2      	cmp	r2, r4
 800a126:	d0f0      	beq.n	800a10a <__match+0x6>
 800a128:	2000      	movs	r0, #0
 800a12a:	e7f3      	b.n	800a114 <__match+0x10>

0800a12c <__hexnan>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	680b      	ldr	r3, [r1, #0]
 800a132:	6801      	ldr	r1, [r0, #0]
 800a134:	115e      	asrs	r6, r3, #5
 800a136:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a13a:	f013 031f 	ands.w	r3, r3, #31
 800a13e:	b087      	sub	sp, #28
 800a140:	bf18      	it	ne
 800a142:	3604      	addne	r6, #4
 800a144:	2500      	movs	r5, #0
 800a146:	1f37      	subs	r7, r6, #4
 800a148:	4682      	mov	sl, r0
 800a14a:	4690      	mov	r8, r2
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a152:	46b9      	mov	r9, r7
 800a154:	463c      	mov	r4, r7
 800a156:	9502      	str	r5, [sp, #8]
 800a158:	46ab      	mov	fp, r5
 800a15a:	784a      	ldrb	r2, [r1, #1]
 800a15c:	1c4b      	adds	r3, r1, #1
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	b342      	cbz	r2, 800a1b4 <__hexnan+0x88>
 800a162:	4610      	mov	r0, r2
 800a164:	9105      	str	r1, [sp, #20]
 800a166:	9204      	str	r2, [sp, #16]
 800a168:	f7ff fd76 	bl	8009c58 <__hexdig_fun>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d14f      	bne.n	800a210 <__hexnan+0xe4>
 800a170:	9a04      	ldr	r2, [sp, #16]
 800a172:	9905      	ldr	r1, [sp, #20]
 800a174:	2a20      	cmp	r2, #32
 800a176:	d818      	bhi.n	800a1aa <__hexnan+0x7e>
 800a178:	9b02      	ldr	r3, [sp, #8]
 800a17a:	459b      	cmp	fp, r3
 800a17c:	dd13      	ble.n	800a1a6 <__hexnan+0x7a>
 800a17e:	454c      	cmp	r4, r9
 800a180:	d206      	bcs.n	800a190 <__hexnan+0x64>
 800a182:	2d07      	cmp	r5, #7
 800a184:	dc04      	bgt.n	800a190 <__hexnan+0x64>
 800a186:	462a      	mov	r2, r5
 800a188:	4649      	mov	r1, r9
 800a18a:	4620      	mov	r0, r4
 800a18c:	f7ff ffa8 	bl	800a0e0 <L_shift>
 800a190:	4544      	cmp	r4, r8
 800a192:	d950      	bls.n	800a236 <__hexnan+0x10a>
 800a194:	2300      	movs	r3, #0
 800a196:	f1a4 0904 	sub.w	r9, r4, #4
 800a19a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a19e:	f8cd b008 	str.w	fp, [sp, #8]
 800a1a2:	464c      	mov	r4, r9
 800a1a4:	461d      	mov	r5, r3
 800a1a6:	9903      	ldr	r1, [sp, #12]
 800a1a8:	e7d7      	b.n	800a15a <__hexnan+0x2e>
 800a1aa:	2a29      	cmp	r2, #41	; 0x29
 800a1ac:	d155      	bne.n	800a25a <__hexnan+0x12e>
 800a1ae:	3102      	adds	r1, #2
 800a1b0:	f8ca 1000 	str.w	r1, [sl]
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	d04f      	beq.n	800a25a <__hexnan+0x12e>
 800a1ba:	454c      	cmp	r4, r9
 800a1bc:	d206      	bcs.n	800a1cc <__hexnan+0xa0>
 800a1be:	2d07      	cmp	r5, #7
 800a1c0:	dc04      	bgt.n	800a1cc <__hexnan+0xa0>
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff ff8a 	bl	800a0e0 <L_shift>
 800a1cc:	4544      	cmp	r4, r8
 800a1ce:	d934      	bls.n	800a23a <__hexnan+0x10e>
 800a1d0:	f1a8 0204 	sub.w	r2, r8, #4
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1da:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1de:	429f      	cmp	r7, r3
 800a1e0:	d2f9      	bcs.n	800a1d6 <__hexnan+0xaa>
 800a1e2:	1b3b      	subs	r3, r7, r4
 800a1e4:	f023 0303 	bic.w	r3, r3, #3
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	3e03      	subs	r6, #3
 800a1ec:	3401      	adds	r4, #1
 800a1ee:	42a6      	cmp	r6, r4
 800a1f0:	bf38      	it	cc
 800a1f2:	2304      	movcc	r3, #4
 800a1f4:	4443      	add	r3, r8
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f843 2b04 	str.w	r2, [r3], #4
 800a1fc:	429f      	cmp	r7, r3
 800a1fe:	d2fb      	bcs.n	800a1f8 <__hexnan+0xcc>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	b91b      	cbnz	r3, 800a20c <__hexnan+0xe0>
 800a204:	4547      	cmp	r7, r8
 800a206:	d126      	bne.n	800a256 <__hexnan+0x12a>
 800a208:	2301      	movs	r3, #1
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	2005      	movs	r0, #5
 800a20e:	e025      	b.n	800a25c <__hexnan+0x130>
 800a210:	3501      	adds	r5, #1
 800a212:	2d08      	cmp	r5, #8
 800a214:	f10b 0b01 	add.w	fp, fp, #1
 800a218:	dd06      	ble.n	800a228 <__hexnan+0xfc>
 800a21a:	4544      	cmp	r4, r8
 800a21c:	d9c3      	bls.n	800a1a6 <__hexnan+0x7a>
 800a21e:	2300      	movs	r3, #0
 800a220:	f844 3c04 	str.w	r3, [r4, #-4]
 800a224:	2501      	movs	r5, #1
 800a226:	3c04      	subs	r4, #4
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	f000 000f 	and.w	r0, r0, #15
 800a22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	e7b7      	b.n	800a1a6 <__hexnan+0x7a>
 800a236:	2508      	movs	r5, #8
 800a238:	e7b5      	b.n	800a1a6 <__hexnan+0x7a>
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0df      	beq.n	800a200 <__hexnan+0xd4>
 800a240:	f1c3 0320 	rsb	r3, r3, #32
 800a244:	f04f 32ff 	mov.w	r2, #4294967295
 800a248:	40da      	lsrs	r2, r3
 800a24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a24e:	4013      	ands	r3, r2
 800a250:	f846 3c04 	str.w	r3, [r6, #-4]
 800a254:	e7d4      	b.n	800a200 <__hexnan+0xd4>
 800a256:	3f04      	subs	r7, #4
 800a258:	e7d2      	b.n	800a200 <__hexnan+0xd4>
 800a25a:	2004      	movs	r0, #4
 800a25c:	b007      	add	sp, #28
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a264 <malloc>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <malloc+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f000 b823 	b.w	800a2b4 <_malloc_r>
 800a26e:	bf00      	nop
 800a270:	200001f4 	.word	0x200001f4

0800a274 <sbrk_aligned>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	4e0e      	ldr	r6, [pc, #56]	; (800a2b0 <sbrk_aligned+0x3c>)
 800a278:	460c      	mov	r4, r1
 800a27a:	6831      	ldr	r1, [r6, #0]
 800a27c:	4605      	mov	r5, r0
 800a27e:	b911      	cbnz	r1, 800a286 <sbrk_aligned+0x12>
 800a280:	f001 f96a 	bl	800b558 <_sbrk_r>
 800a284:	6030      	str	r0, [r6, #0]
 800a286:	4621      	mov	r1, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f001 f965 	bl	800b558 <_sbrk_r>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d00a      	beq.n	800a2a8 <sbrk_aligned+0x34>
 800a292:	1cc4      	adds	r4, r0, #3
 800a294:	f024 0403 	bic.w	r4, r4, #3
 800a298:	42a0      	cmp	r0, r4
 800a29a:	d007      	beq.n	800a2ac <sbrk_aligned+0x38>
 800a29c:	1a21      	subs	r1, r4, r0
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f001 f95a 	bl	800b558 <_sbrk_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d101      	bne.n	800a2ac <sbrk_aligned+0x38>
 800a2a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	20000d40 	.word	0x20000d40

0800a2b4 <_malloc_r>:
 800a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b8:	1ccd      	adds	r5, r1, #3
 800a2ba:	f025 0503 	bic.w	r5, r5, #3
 800a2be:	3508      	adds	r5, #8
 800a2c0:	2d0c      	cmp	r5, #12
 800a2c2:	bf38      	it	cc
 800a2c4:	250c      	movcc	r5, #12
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	db01      	blt.n	800a2d0 <_malloc_r+0x1c>
 800a2cc:	42a9      	cmp	r1, r5
 800a2ce:	d905      	bls.n	800a2dc <_malloc_r+0x28>
 800a2d0:	230c      	movs	r3, #12
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	2600      	movs	r6, #0
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3b0 <_malloc_r+0xfc>
 800a2e0:	f000 f87a 	bl	800a3d8 <__malloc_lock>
 800a2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e8:	461c      	mov	r4, r3
 800a2ea:	bb5c      	cbnz	r4, 800a344 <_malloc_r+0x90>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f7ff ffc0 	bl	800a274 <sbrk_aligned>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	d155      	bne.n	800a3a6 <_malloc_r+0xf2>
 800a2fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a2fe:	4626      	mov	r6, r4
 800a300:	2e00      	cmp	r6, #0
 800a302:	d145      	bne.n	800a390 <_malloc_r+0xdc>
 800a304:	2c00      	cmp	r4, #0
 800a306:	d048      	beq.n	800a39a <_malloc_r+0xe6>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	4631      	mov	r1, r6
 800a30c:	4638      	mov	r0, r7
 800a30e:	eb04 0903 	add.w	r9, r4, r3
 800a312:	f001 f921 	bl	800b558 <_sbrk_r>
 800a316:	4581      	cmp	r9, r0
 800a318:	d13f      	bne.n	800a39a <_malloc_r+0xe6>
 800a31a:	6821      	ldr	r1, [r4, #0]
 800a31c:	1a6d      	subs	r5, r5, r1
 800a31e:	4629      	mov	r1, r5
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff ffa7 	bl	800a274 <sbrk_aligned>
 800a326:	3001      	adds	r0, #1
 800a328:	d037      	beq.n	800a39a <_malloc_r+0xe6>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	442b      	add	r3, r5
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	f8d8 3000 	ldr.w	r3, [r8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d038      	beq.n	800a3aa <_malloc_r+0xf6>
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	42a2      	cmp	r2, r4
 800a33c:	d12b      	bne.n	800a396 <_malloc_r+0xe2>
 800a33e:	2200      	movs	r2, #0
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	e00f      	b.n	800a364 <_malloc_r+0xb0>
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	1b52      	subs	r2, r2, r5
 800a348:	d41f      	bmi.n	800a38a <_malloc_r+0xd6>
 800a34a:	2a0b      	cmp	r2, #11
 800a34c:	d917      	bls.n	800a37e <_malloc_r+0xca>
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	42a3      	cmp	r3, r4
 800a352:	6025      	str	r5, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	6059      	strne	r1, [r3, #4]
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	bf08      	it	eq
 800a35c:	f8c8 1000 	streq.w	r1, [r8]
 800a360:	5162      	str	r2, [r4, r5]
 800a362:	604b      	str	r3, [r1, #4]
 800a364:	4638      	mov	r0, r7
 800a366:	f104 060b 	add.w	r6, r4, #11
 800a36a:	f000 f83b 	bl	800a3e4 <__malloc_unlock>
 800a36e:	f026 0607 	bic.w	r6, r6, #7
 800a372:	1d23      	adds	r3, r4, #4
 800a374:	1af2      	subs	r2, r6, r3
 800a376:	d0ae      	beq.n	800a2d6 <_malloc_r+0x22>
 800a378:	1b9b      	subs	r3, r3, r6
 800a37a:	50a3      	str	r3, [r4, r2]
 800a37c:	e7ab      	b.n	800a2d6 <_malloc_r+0x22>
 800a37e:	42a3      	cmp	r3, r4
 800a380:	6862      	ldr	r2, [r4, #4]
 800a382:	d1dd      	bne.n	800a340 <_malloc_r+0x8c>
 800a384:	f8c8 2000 	str.w	r2, [r8]
 800a388:	e7ec      	b.n	800a364 <_malloc_r+0xb0>
 800a38a:	4623      	mov	r3, r4
 800a38c:	6864      	ldr	r4, [r4, #4]
 800a38e:	e7ac      	b.n	800a2ea <_malloc_r+0x36>
 800a390:	4634      	mov	r4, r6
 800a392:	6876      	ldr	r6, [r6, #4]
 800a394:	e7b4      	b.n	800a300 <_malloc_r+0x4c>
 800a396:	4613      	mov	r3, r2
 800a398:	e7cc      	b.n	800a334 <_malloc_r+0x80>
 800a39a:	230c      	movs	r3, #12
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f000 f820 	bl	800a3e4 <__malloc_unlock>
 800a3a4:	e797      	b.n	800a2d6 <_malloc_r+0x22>
 800a3a6:	6025      	str	r5, [r4, #0]
 800a3a8:	e7dc      	b.n	800a364 <_malloc_r+0xb0>
 800a3aa:	605b      	str	r3, [r3, #4]
 800a3ac:	deff      	udf	#255	; 0xff
 800a3ae:	bf00      	nop
 800a3b0:	20000d3c 	.word	0x20000d3c

0800a3b4 <__ascii_mbtowc>:
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	b901      	cbnz	r1, 800a3ba <__ascii_mbtowc+0x6>
 800a3b8:	a901      	add	r1, sp, #4
 800a3ba:	b142      	cbz	r2, 800a3ce <__ascii_mbtowc+0x1a>
 800a3bc:	b14b      	cbz	r3, 800a3d2 <__ascii_mbtowc+0x1e>
 800a3be:	7813      	ldrb	r3, [r2, #0]
 800a3c0:	600b      	str	r3, [r1, #0]
 800a3c2:	7812      	ldrb	r2, [r2, #0]
 800a3c4:	1e10      	subs	r0, r2, #0
 800a3c6:	bf18      	it	ne
 800a3c8:	2001      	movne	r0, #1
 800a3ca:	b002      	add	sp, #8
 800a3cc:	4770      	bx	lr
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	e7fb      	b.n	800a3ca <__ascii_mbtowc+0x16>
 800a3d2:	f06f 0001 	mvn.w	r0, #1
 800a3d6:	e7f8      	b.n	800a3ca <__ascii_mbtowc+0x16>

0800a3d8 <__malloc_lock>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__malloc_lock+0x8>)
 800a3da:	f7fe bce0 	b.w	8008d9e <__retarget_lock_acquire_recursive>
 800a3de:	bf00      	nop
 800a3e0:	20000d38 	.word	0x20000d38

0800a3e4 <__malloc_unlock>:
 800a3e4:	4801      	ldr	r0, [pc, #4]	; (800a3ec <__malloc_unlock+0x8>)
 800a3e6:	f7fe bcdb 	b.w	8008da0 <__retarget_lock_release_recursive>
 800a3ea:	bf00      	nop
 800a3ec:	20000d38 	.word	0x20000d38

0800a3f0 <_Balloc>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	69c6      	ldr	r6, [r0, #28]
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	b976      	cbnz	r6, 800a418 <_Balloc+0x28>
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	f7ff ff32 	bl	800a264 <malloc>
 800a400:	4602      	mov	r2, r0
 800a402:	61e0      	str	r0, [r4, #28]
 800a404:	b920      	cbnz	r0, 800a410 <_Balloc+0x20>
 800a406:	4b18      	ldr	r3, [pc, #96]	; (800a468 <_Balloc+0x78>)
 800a408:	4818      	ldr	r0, [pc, #96]	; (800a46c <_Balloc+0x7c>)
 800a40a:	216b      	movs	r1, #107	; 0x6b
 800a40c:	f7fe fcee 	bl	8008dec <__assert_func>
 800a410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a414:	6006      	str	r6, [r0, #0]
 800a416:	60c6      	str	r6, [r0, #12]
 800a418:	69e6      	ldr	r6, [r4, #28]
 800a41a:	68f3      	ldr	r3, [r6, #12]
 800a41c:	b183      	cbz	r3, 800a440 <_Balloc+0x50>
 800a41e:	69e3      	ldr	r3, [r4, #28]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a426:	b9b8      	cbnz	r0, 800a458 <_Balloc+0x68>
 800a428:	2101      	movs	r1, #1
 800a42a:	fa01 f605 	lsl.w	r6, r1, r5
 800a42e:	1d72      	adds	r2, r6, #5
 800a430:	0092      	lsls	r2, r2, #2
 800a432:	4620      	mov	r0, r4
 800a434:	f001 f8a7 	bl	800b586 <_calloc_r>
 800a438:	b160      	cbz	r0, 800a454 <_Balloc+0x64>
 800a43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a43e:	e00e      	b.n	800a45e <_Balloc+0x6e>
 800a440:	2221      	movs	r2, #33	; 0x21
 800a442:	2104      	movs	r1, #4
 800a444:	4620      	mov	r0, r4
 800a446:	f001 f89e 	bl	800b586 <_calloc_r>
 800a44a:	69e3      	ldr	r3, [r4, #28]
 800a44c:	60f0      	str	r0, [r6, #12]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e4      	bne.n	800a41e <_Balloc+0x2e>
 800a454:	2000      	movs	r0, #0
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	6802      	ldr	r2, [r0, #0]
 800a45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a45e:	2300      	movs	r3, #0
 800a460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a464:	e7f7      	b.n	800a456 <_Balloc+0x66>
 800a466:	bf00      	nop
 800a468:	0800be9a 	.word	0x0800be9a
 800a46c:	0800c025 	.word	0x0800c025

0800a470 <_Bfree>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	69c6      	ldr	r6, [r0, #28]
 800a474:	4605      	mov	r5, r0
 800a476:	460c      	mov	r4, r1
 800a478:	b976      	cbnz	r6, 800a498 <_Bfree+0x28>
 800a47a:	2010      	movs	r0, #16
 800a47c:	f7ff fef2 	bl	800a264 <malloc>
 800a480:	4602      	mov	r2, r0
 800a482:	61e8      	str	r0, [r5, #28]
 800a484:	b920      	cbnz	r0, 800a490 <_Bfree+0x20>
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <_Bfree+0x3c>)
 800a488:	4809      	ldr	r0, [pc, #36]	; (800a4b0 <_Bfree+0x40>)
 800a48a:	218f      	movs	r1, #143	; 0x8f
 800a48c:	f7fe fcae 	bl	8008dec <__assert_func>
 800a490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a494:	6006      	str	r6, [r0, #0]
 800a496:	60c6      	str	r6, [r0, #12]
 800a498:	b13c      	cbz	r4, 800a4aa <_Bfree+0x3a>
 800a49a:	69eb      	ldr	r3, [r5, #28]
 800a49c:	6862      	ldr	r2, [r4, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4a4:	6021      	str	r1, [r4, #0]
 800a4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	0800be9a 	.word	0x0800be9a
 800a4b0:	0800c025 	.word	0x0800c025

0800a4b4 <__multadd>:
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	690d      	ldr	r5, [r1, #16]
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	461e      	mov	r6, r3
 800a4c0:	f101 0c14 	add.w	ip, r1, #20
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ca:	b299      	uxth	r1, r3
 800a4cc:	fb02 6101 	mla	r1, r2, r1, r6
 800a4d0:	0c1e      	lsrs	r6, r3, #16
 800a4d2:	0c0b      	lsrs	r3, r1, #16
 800a4d4:	fb02 3306 	mla	r3, r2, r6, r3
 800a4d8:	b289      	uxth	r1, r1
 800a4da:	3001      	adds	r0, #1
 800a4dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4e0:	4285      	cmp	r5, r0
 800a4e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ea:	dcec      	bgt.n	800a4c6 <__multadd+0x12>
 800a4ec:	b30e      	cbz	r6, 800a532 <__multadd+0x7e>
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	dc19      	bgt.n	800a528 <__multadd+0x74>
 800a4f4:	6861      	ldr	r1, [r4, #4]
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	f7ff ff79 	bl	800a3f0 <_Balloc>
 800a4fe:	4680      	mov	r8, r0
 800a500:	b928      	cbnz	r0, 800a50e <__multadd+0x5a>
 800a502:	4602      	mov	r2, r0
 800a504:	4b0c      	ldr	r3, [pc, #48]	; (800a538 <__multadd+0x84>)
 800a506:	480d      	ldr	r0, [pc, #52]	; (800a53c <__multadd+0x88>)
 800a508:	21ba      	movs	r1, #186	; 0xba
 800a50a:	f7fe fc6f 	bl	8008dec <__assert_func>
 800a50e:	6922      	ldr	r2, [r4, #16]
 800a510:	3202      	adds	r2, #2
 800a512:	f104 010c 	add.w	r1, r4, #12
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	300c      	adds	r0, #12
 800a51a:	f7fe fc4a 	bl	8008db2 <memcpy>
 800a51e:	4621      	mov	r1, r4
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ffa5 	bl	800a470 <_Bfree>
 800a526:	4644      	mov	r4, r8
 800a528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a52c:	3501      	adds	r5, #1
 800a52e:	615e      	str	r6, [r3, #20]
 800a530:	6125      	str	r5, [r4, #16]
 800a532:	4620      	mov	r0, r4
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a538:	0800bfb4 	.word	0x0800bfb4
 800a53c:	0800c025 	.word	0x0800c025

0800a540 <__s2b>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	4615      	mov	r5, r2
 800a548:	461f      	mov	r7, r3
 800a54a:	2209      	movs	r2, #9
 800a54c:	3308      	adds	r3, #8
 800a54e:	4606      	mov	r6, r0
 800a550:	fb93 f3f2 	sdiv	r3, r3, r2
 800a554:	2100      	movs	r1, #0
 800a556:	2201      	movs	r2, #1
 800a558:	429a      	cmp	r2, r3
 800a55a:	db09      	blt.n	800a570 <__s2b+0x30>
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff ff47 	bl	800a3f0 <_Balloc>
 800a562:	b940      	cbnz	r0, 800a576 <__s2b+0x36>
 800a564:	4602      	mov	r2, r0
 800a566:	4b19      	ldr	r3, [pc, #100]	; (800a5cc <__s2b+0x8c>)
 800a568:	4819      	ldr	r0, [pc, #100]	; (800a5d0 <__s2b+0x90>)
 800a56a:	21d3      	movs	r1, #211	; 0xd3
 800a56c:	f7fe fc3e 	bl	8008dec <__assert_func>
 800a570:	0052      	lsls	r2, r2, #1
 800a572:	3101      	adds	r1, #1
 800a574:	e7f0      	b.n	800a558 <__s2b+0x18>
 800a576:	9b08      	ldr	r3, [sp, #32]
 800a578:	6143      	str	r3, [r0, #20]
 800a57a:	2d09      	cmp	r5, #9
 800a57c:	f04f 0301 	mov.w	r3, #1
 800a580:	6103      	str	r3, [r0, #16]
 800a582:	dd16      	ble.n	800a5b2 <__s2b+0x72>
 800a584:	f104 0909 	add.w	r9, r4, #9
 800a588:	46c8      	mov	r8, r9
 800a58a:	442c      	add	r4, r5
 800a58c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a590:	4601      	mov	r1, r0
 800a592:	3b30      	subs	r3, #48	; 0x30
 800a594:	220a      	movs	r2, #10
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ff8c 	bl	800a4b4 <__multadd>
 800a59c:	45a0      	cmp	r8, r4
 800a59e:	d1f5      	bne.n	800a58c <__s2b+0x4c>
 800a5a0:	f1a5 0408 	sub.w	r4, r5, #8
 800a5a4:	444c      	add	r4, r9
 800a5a6:	1b2d      	subs	r5, r5, r4
 800a5a8:	1963      	adds	r3, r4, r5
 800a5aa:	42bb      	cmp	r3, r7
 800a5ac:	db04      	blt.n	800a5b8 <__s2b+0x78>
 800a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	340a      	adds	r4, #10
 800a5b4:	2509      	movs	r5, #9
 800a5b6:	e7f6      	b.n	800a5a6 <__s2b+0x66>
 800a5b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5bc:	4601      	mov	r1, r0
 800a5be:	3b30      	subs	r3, #48	; 0x30
 800a5c0:	220a      	movs	r2, #10
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ff76 	bl	800a4b4 <__multadd>
 800a5c8:	e7ee      	b.n	800a5a8 <__s2b+0x68>
 800a5ca:	bf00      	nop
 800a5cc:	0800bfb4 	.word	0x0800bfb4
 800a5d0:	0800c025 	.word	0x0800c025

0800a5d4 <__hi0bits>:
 800a5d4:	0c03      	lsrs	r3, r0, #16
 800a5d6:	041b      	lsls	r3, r3, #16
 800a5d8:	b9d3      	cbnz	r3, 800a610 <__hi0bits+0x3c>
 800a5da:	0400      	lsls	r0, r0, #16
 800a5dc:	2310      	movs	r3, #16
 800a5de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5e2:	bf04      	itt	eq
 800a5e4:	0200      	lsleq	r0, r0, #8
 800a5e6:	3308      	addeq	r3, #8
 800a5e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5ec:	bf04      	itt	eq
 800a5ee:	0100      	lsleq	r0, r0, #4
 800a5f0:	3304      	addeq	r3, #4
 800a5f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5f6:	bf04      	itt	eq
 800a5f8:	0080      	lsleq	r0, r0, #2
 800a5fa:	3302      	addeq	r3, #2
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	db05      	blt.n	800a60c <__hi0bits+0x38>
 800a600:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a604:	f103 0301 	add.w	r3, r3, #1
 800a608:	bf08      	it	eq
 800a60a:	2320      	moveq	r3, #32
 800a60c:	4618      	mov	r0, r3
 800a60e:	4770      	bx	lr
 800a610:	2300      	movs	r3, #0
 800a612:	e7e4      	b.n	800a5de <__hi0bits+0xa>

0800a614 <__lo0bits>:
 800a614:	6803      	ldr	r3, [r0, #0]
 800a616:	f013 0207 	ands.w	r2, r3, #7
 800a61a:	d00c      	beq.n	800a636 <__lo0bits+0x22>
 800a61c:	07d9      	lsls	r1, r3, #31
 800a61e:	d422      	bmi.n	800a666 <__lo0bits+0x52>
 800a620:	079a      	lsls	r2, r3, #30
 800a622:	bf49      	itett	mi
 800a624:	085b      	lsrmi	r3, r3, #1
 800a626:	089b      	lsrpl	r3, r3, #2
 800a628:	6003      	strmi	r3, [r0, #0]
 800a62a:	2201      	movmi	r2, #1
 800a62c:	bf5c      	itt	pl
 800a62e:	6003      	strpl	r3, [r0, #0]
 800a630:	2202      	movpl	r2, #2
 800a632:	4610      	mov	r0, r2
 800a634:	4770      	bx	lr
 800a636:	b299      	uxth	r1, r3
 800a638:	b909      	cbnz	r1, 800a63e <__lo0bits+0x2a>
 800a63a:	0c1b      	lsrs	r3, r3, #16
 800a63c:	2210      	movs	r2, #16
 800a63e:	b2d9      	uxtb	r1, r3
 800a640:	b909      	cbnz	r1, 800a646 <__lo0bits+0x32>
 800a642:	3208      	adds	r2, #8
 800a644:	0a1b      	lsrs	r3, r3, #8
 800a646:	0719      	lsls	r1, r3, #28
 800a648:	bf04      	itt	eq
 800a64a:	091b      	lsreq	r3, r3, #4
 800a64c:	3204      	addeq	r2, #4
 800a64e:	0799      	lsls	r1, r3, #30
 800a650:	bf04      	itt	eq
 800a652:	089b      	lsreq	r3, r3, #2
 800a654:	3202      	addeq	r2, #2
 800a656:	07d9      	lsls	r1, r3, #31
 800a658:	d403      	bmi.n	800a662 <__lo0bits+0x4e>
 800a65a:	085b      	lsrs	r3, r3, #1
 800a65c:	f102 0201 	add.w	r2, r2, #1
 800a660:	d003      	beq.n	800a66a <__lo0bits+0x56>
 800a662:	6003      	str	r3, [r0, #0]
 800a664:	e7e5      	b.n	800a632 <__lo0bits+0x1e>
 800a666:	2200      	movs	r2, #0
 800a668:	e7e3      	b.n	800a632 <__lo0bits+0x1e>
 800a66a:	2220      	movs	r2, #32
 800a66c:	e7e1      	b.n	800a632 <__lo0bits+0x1e>
	...

0800a670 <__i2b>:
 800a670:	b510      	push	{r4, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	2101      	movs	r1, #1
 800a676:	f7ff febb 	bl	800a3f0 <_Balloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	b928      	cbnz	r0, 800a68a <__i2b+0x1a>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <__i2b+0x24>)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <__i2b+0x28>)
 800a682:	f240 1145 	movw	r1, #325	; 0x145
 800a686:	f7fe fbb1 	bl	8008dec <__assert_func>
 800a68a:	2301      	movs	r3, #1
 800a68c:	6144      	str	r4, [r0, #20]
 800a68e:	6103      	str	r3, [r0, #16]
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800bfb4 	.word	0x0800bfb4
 800a698:	0800c025 	.word	0x0800c025

0800a69c <__multiply>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	4691      	mov	r9, r2
 800a6a2:	690a      	ldr	r2, [r1, #16]
 800a6a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	bfb8      	it	lt
 800a6ac:	460b      	movlt	r3, r1
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	bfbc      	itt	lt
 800a6b2:	464c      	movlt	r4, r9
 800a6b4:	4699      	movlt	r9, r3
 800a6b6:	6927      	ldr	r7, [r4, #16]
 800a6b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6bc:	68a3      	ldr	r3, [r4, #8]
 800a6be:	6861      	ldr	r1, [r4, #4]
 800a6c0:	eb07 060a 	add.w	r6, r7, sl
 800a6c4:	42b3      	cmp	r3, r6
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	bfb8      	it	lt
 800a6ca:	3101      	addlt	r1, #1
 800a6cc:	f7ff fe90 	bl	800a3f0 <_Balloc>
 800a6d0:	b930      	cbnz	r0, 800a6e0 <__multiply+0x44>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <__multiply+0x14c>)
 800a6d6:	4845      	ldr	r0, [pc, #276]	; (800a7ec <__multiply+0x150>)
 800a6d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a6dc:	f7fe fb86 	bl	8008dec <__assert_func>
 800a6e0:	f100 0514 	add.w	r5, r0, #20
 800a6e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4543      	cmp	r3, r8
 800a6ee:	d321      	bcc.n	800a734 <__multiply+0x98>
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6f8:	f109 0314 	add.w	r3, r9, #20
 800a6fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a700:	9202      	str	r2, [sp, #8]
 800a702:	1b3a      	subs	r2, r7, r4
 800a704:	3a15      	subs	r2, #21
 800a706:	f022 0203 	bic.w	r2, r2, #3
 800a70a:	3204      	adds	r2, #4
 800a70c:	f104 0115 	add.w	r1, r4, #21
 800a710:	428f      	cmp	r7, r1
 800a712:	bf38      	it	cc
 800a714:	2204      	movcc	r2, #4
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9a02      	ldr	r2, [sp, #8]
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d80c      	bhi.n	800a73a <__multiply+0x9e>
 800a720:	2e00      	cmp	r6, #0
 800a722:	dd03      	ble.n	800a72c <__multiply+0x90>
 800a724:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05b      	beq.n	800a7e4 <__multiply+0x148>
 800a72c:	6106      	str	r6, [r0, #16]
 800a72e:	b005      	add	sp, #20
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	f843 2b04 	str.w	r2, [r3], #4
 800a738:	e7d8      	b.n	800a6ec <__multiply+0x50>
 800a73a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d024      	beq.n	800a78e <__multiply+0xf2>
 800a744:	f104 0e14 	add.w	lr, r4, #20
 800a748:	46a9      	mov	r9, r5
 800a74a:	f04f 0c00 	mov.w	ip, #0
 800a74e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a752:	f8d9 1000 	ldr.w	r1, [r9]
 800a756:	fa1f fb82 	uxth.w	fp, r2
 800a75a:	b289      	uxth	r1, r1
 800a75c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a760:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a764:	f8d9 2000 	ldr.w	r2, [r9]
 800a768:	4461      	add	r1, ip
 800a76a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a76e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a772:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a776:	b289      	uxth	r1, r1
 800a778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a77c:	4577      	cmp	r7, lr
 800a77e:	f849 1b04 	str.w	r1, [r9], #4
 800a782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a786:	d8e2      	bhi.n	800a74e <__multiply+0xb2>
 800a788:	9a01      	ldr	r2, [sp, #4]
 800a78a:	f845 c002 	str.w	ip, [r5, r2]
 800a78e:	9a03      	ldr	r2, [sp, #12]
 800a790:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a794:	3304      	adds	r3, #4
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	d021      	beq.n	800a7e0 <__multiply+0x144>
 800a79c:	6829      	ldr	r1, [r5, #0]
 800a79e:	f104 0c14 	add.w	ip, r4, #20
 800a7a2:	46ae      	mov	lr, r5
 800a7a4:	f04f 0a00 	mov.w	sl, #0
 800a7a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a7ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a7b4:	4452      	add	r2, sl
 800a7b6:	b289      	uxth	r1, r1
 800a7b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a7c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7c8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7cc:	fb09 110a 	mla	r1, r9, sl, r1
 800a7d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a7d4:	4567      	cmp	r7, ip
 800a7d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7da:	d8e5      	bhi.n	800a7a8 <__multiply+0x10c>
 800a7dc:	9a01      	ldr	r2, [sp, #4]
 800a7de:	50a9      	str	r1, [r5, r2]
 800a7e0:	3504      	adds	r5, #4
 800a7e2:	e799      	b.n	800a718 <__multiply+0x7c>
 800a7e4:	3e01      	subs	r6, #1
 800a7e6:	e79b      	b.n	800a720 <__multiply+0x84>
 800a7e8:	0800bfb4 	.word	0x0800bfb4
 800a7ec:	0800c025 	.word	0x0800c025

0800a7f0 <__pow5mult>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	f012 0203 	ands.w	r2, r2, #3
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	d007      	beq.n	800a810 <__pow5mult+0x20>
 800a800:	4c25      	ldr	r4, [pc, #148]	; (800a898 <__pow5mult+0xa8>)
 800a802:	3a01      	subs	r2, #1
 800a804:	2300      	movs	r3, #0
 800a806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a80a:	f7ff fe53 	bl	800a4b4 <__multadd>
 800a80e:	4607      	mov	r7, r0
 800a810:	10ad      	asrs	r5, r5, #2
 800a812:	d03d      	beq.n	800a890 <__pow5mult+0xa0>
 800a814:	69f4      	ldr	r4, [r6, #28]
 800a816:	b97c      	cbnz	r4, 800a838 <__pow5mult+0x48>
 800a818:	2010      	movs	r0, #16
 800a81a:	f7ff fd23 	bl	800a264 <malloc>
 800a81e:	4602      	mov	r2, r0
 800a820:	61f0      	str	r0, [r6, #28]
 800a822:	b928      	cbnz	r0, 800a830 <__pow5mult+0x40>
 800a824:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <__pow5mult+0xac>)
 800a826:	481e      	ldr	r0, [pc, #120]	; (800a8a0 <__pow5mult+0xb0>)
 800a828:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a82c:	f7fe fade 	bl	8008dec <__assert_func>
 800a830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a834:	6004      	str	r4, [r0, #0]
 800a836:	60c4      	str	r4, [r0, #12]
 800a838:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a83c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a840:	b94c      	cbnz	r4, 800a856 <__pow5mult+0x66>
 800a842:	f240 2171 	movw	r1, #625	; 0x271
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff12 	bl	800a670 <__i2b>
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a852:	4604      	mov	r4, r0
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 0900 	mov.w	r9, #0
 800a85a:	07eb      	lsls	r3, r5, #31
 800a85c:	d50a      	bpl.n	800a874 <__pow5mult+0x84>
 800a85e:	4639      	mov	r1, r7
 800a860:	4622      	mov	r2, r4
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ff1a 	bl	800a69c <__multiply>
 800a868:	4639      	mov	r1, r7
 800a86a:	4680      	mov	r8, r0
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7ff fdff 	bl	800a470 <_Bfree>
 800a872:	4647      	mov	r7, r8
 800a874:	106d      	asrs	r5, r5, #1
 800a876:	d00b      	beq.n	800a890 <__pow5mult+0xa0>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	b938      	cbnz	r0, 800a88c <__pow5mult+0x9c>
 800a87c:	4622      	mov	r2, r4
 800a87e:	4621      	mov	r1, r4
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff ff0b 	bl	800a69c <__multiply>
 800a886:	6020      	str	r0, [r4, #0]
 800a888:	f8c0 9000 	str.w	r9, [r0]
 800a88c:	4604      	mov	r4, r0
 800a88e:	e7e4      	b.n	800a85a <__pow5mult+0x6a>
 800a890:	4638      	mov	r0, r7
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	bf00      	nop
 800a898:	0800c170 	.word	0x0800c170
 800a89c:	0800be9a 	.word	0x0800be9a
 800a8a0:	0800c025 	.word	0x0800c025

0800a8a4 <__lshift>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	6849      	ldr	r1, [r1, #4]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8b2:	68a3      	ldr	r3, [r4, #8]
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	4691      	mov	r9, r2
 800a8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8bc:	f108 0601 	add.w	r6, r8, #1
 800a8c0:	42b3      	cmp	r3, r6
 800a8c2:	db0b      	blt.n	800a8dc <__lshift+0x38>
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff fd93 	bl	800a3f0 <_Balloc>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	b948      	cbnz	r0, 800a8e2 <__lshift+0x3e>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	4b28      	ldr	r3, [pc, #160]	; (800a974 <__lshift+0xd0>)
 800a8d2:	4829      	ldr	r0, [pc, #164]	; (800a978 <__lshift+0xd4>)
 800a8d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a8d8:	f7fe fa88 	bl	8008dec <__assert_func>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__lshift+0x1c>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f100 0114 	add.w	r1, r0, #20
 800a8e8:	f100 0210 	add.w	r2, r0, #16
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	4553      	cmp	r3, sl
 800a8f0:	db33      	blt.n	800a95a <__lshift+0xb6>
 800a8f2:	6920      	ldr	r0, [r4, #16]
 800a8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8f8:	f104 0314 	add.w	r3, r4, #20
 800a8fc:	f019 091f 	ands.w	r9, r9, #31
 800a900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a908:	d02b      	beq.n	800a962 <__lshift+0xbe>
 800a90a:	f1c9 0e20 	rsb	lr, r9, #32
 800a90e:	468a      	mov	sl, r1
 800a910:	2200      	movs	r2, #0
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	fa00 f009 	lsl.w	r0, r0, r9
 800a918:	4310      	orrs	r0, r2
 800a91a:	f84a 0b04 	str.w	r0, [sl], #4
 800a91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a922:	459c      	cmp	ip, r3
 800a924:	fa22 f20e 	lsr.w	r2, r2, lr
 800a928:	d8f3      	bhi.n	800a912 <__lshift+0x6e>
 800a92a:	ebac 0304 	sub.w	r3, ip, r4
 800a92e:	3b15      	subs	r3, #21
 800a930:	f023 0303 	bic.w	r3, r3, #3
 800a934:	3304      	adds	r3, #4
 800a936:	f104 0015 	add.w	r0, r4, #21
 800a93a:	4584      	cmp	ip, r0
 800a93c:	bf38      	it	cc
 800a93e:	2304      	movcc	r3, #4
 800a940:	50ca      	str	r2, [r1, r3]
 800a942:	b10a      	cbz	r2, 800a948 <__lshift+0xa4>
 800a944:	f108 0602 	add.w	r6, r8, #2
 800a948:	3e01      	subs	r6, #1
 800a94a:	4638      	mov	r0, r7
 800a94c:	612e      	str	r6, [r5, #16]
 800a94e:	4621      	mov	r1, r4
 800a950:	f7ff fd8e 	bl	800a470 <_Bfree>
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a95e:	3301      	adds	r3, #1
 800a960:	e7c5      	b.n	800a8ee <__lshift+0x4a>
 800a962:	3904      	subs	r1, #4
 800a964:	f853 2b04 	ldr.w	r2, [r3], #4
 800a968:	f841 2f04 	str.w	r2, [r1, #4]!
 800a96c:	459c      	cmp	ip, r3
 800a96e:	d8f9      	bhi.n	800a964 <__lshift+0xc0>
 800a970:	e7ea      	b.n	800a948 <__lshift+0xa4>
 800a972:	bf00      	nop
 800a974:	0800bfb4 	.word	0x0800bfb4
 800a978:	0800c025 	.word	0x0800c025

0800a97c <__mcmp>:
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	6902      	ldr	r2, [r0, #16]
 800a980:	690c      	ldr	r4, [r1, #16]
 800a982:	1b12      	subs	r2, r2, r4
 800a984:	d10e      	bne.n	800a9a4 <__mcmp+0x28>
 800a986:	f100 0314 	add.w	r3, r0, #20
 800a98a:	3114      	adds	r1, #20
 800a98c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a990:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a994:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a998:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a99c:	42a5      	cmp	r5, r4
 800a99e:	d003      	beq.n	800a9a8 <__mcmp+0x2c>
 800a9a0:	d305      	bcc.n	800a9ae <__mcmp+0x32>
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	bd30      	pop	{r4, r5, pc}
 800a9a8:	4283      	cmp	r3, r0
 800a9aa:	d3f3      	bcc.n	800a994 <__mcmp+0x18>
 800a9ac:	e7fa      	b.n	800a9a4 <__mcmp+0x28>
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b2:	e7f7      	b.n	800a9a4 <__mcmp+0x28>

0800a9b4 <__mdiff>:
 800a9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4690      	mov	r8, r2
 800a9c2:	f7ff ffdb 	bl	800a97c <__mcmp>
 800a9c6:	1e05      	subs	r5, r0, #0
 800a9c8:	d110      	bne.n	800a9ec <__mdiff+0x38>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7ff fd0f 	bl	800a3f0 <_Balloc>
 800a9d2:	b930      	cbnz	r0, 800a9e2 <__mdiff+0x2e>
 800a9d4:	4b3a      	ldr	r3, [pc, #232]	; (800aac0 <__mdiff+0x10c>)
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	f240 2137 	movw	r1, #567	; 0x237
 800a9dc:	4839      	ldr	r0, [pc, #228]	; (800aac4 <__mdiff+0x110>)
 800a9de:	f7fe fa05 	bl	8008dec <__assert_func>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	bfa4      	itt	ge
 800a9ee:	4643      	movge	r3, r8
 800a9f0:	46a0      	movge	r8, r4
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f8:	bfa6      	itte	ge
 800a9fa:	461c      	movge	r4, r3
 800a9fc:	2500      	movge	r5, #0
 800a9fe:	2501      	movlt	r5, #1
 800aa00:	f7ff fcf6 	bl	800a3f0 <_Balloc>
 800aa04:	b920      	cbnz	r0, 800aa10 <__mdiff+0x5c>
 800aa06:	4b2e      	ldr	r3, [pc, #184]	; (800aac0 <__mdiff+0x10c>)
 800aa08:	4602      	mov	r2, r0
 800aa0a:	f240 2145 	movw	r1, #581	; 0x245
 800aa0e:	e7e5      	b.n	800a9dc <__mdiff+0x28>
 800aa10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa14:	6926      	ldr	r6, [r4, #16]
 800aa16:	60c5      	str	r5, [r0, #12]
 800aa18:	f104 0914 	add.w	r9, r4, #20
 800aa1c:	f108 0514 	add.w	r5, r8, #20
 800aa20:	f100 0e14 	add.w	lr, r0, #20
 800aa24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa2c:	f108 0210 	add.w	r2, r8, #16
 800aa30:	46f2      	mov	sl, lr
 800aa32:	2100      	movs	r1, #0
 800aa34:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa3c:	fa11 f88b 	uxtah	r8, r1, fp
 800aa40:	b299      	uxth	r1, r3
 800aa42:	0c1b      	lsrs	r3, r3, #16
 800aa44:	eba8 0801 	sub.w	r8, r8, r1
 800aa48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa50:	fa1f f888 	uxth.w	r8, r8
 800aa54:	1419      	asrs	r1, r3, #16
 800aa56:	454e      	cmp	r6, r9
 800aa58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa5c:	f84a 3b04 	str.w	r3, [sl], #4
 800aa60:	d8e8      	bhi.n	800aa34 <__mdiff+0x80>
 800aa62:	1b33      	subs	r3, r6, r4
 800aa64:	3b15      	subs	r3, #21
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	3415      	adds	r4, #21
 800aa6e:	42a6      	cmp	r6, r4
 800aa70:	bf38      	it	cc
 800aa72:	2304      	movcc	r3, #4
 800aa74:	441d      	add	r5, r3
 800aa76:	4473      	add	r3, lr
 800aa78:	469e      	mov	lr, r3
 800aa7a:	462e      	mov	r6, r5
 800aa7c:	4566      	cmp	r6, ip
 800aa7e:	d30e      	bcc.n	800aa9e <__mdiff+0xea>
 800aa80:	f10c 0203 	add.w	r2, ip, #3
 800aa84:	1b52      	subs	r2, r2, r5
 800aa86:	f022 0203 	bic.w	r2, r2, #3
 800aa8a:	3d03      	subs	r5, #3
 800aa8c:	45ac      	cmp	ip, r5
 800aa8e:	bf38      	it	cc
 800aa90:	2200      	movcc	r2, #0
 800aa92:	4413      	add	r3, r2
 800aa94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa98:	b17a      	cbz	r2, 800aaba <__mdiff+0x106>
 800aa9a:	6107      	str	r7, [r0, #16]
 800aa9c:	e7a4      	b.n	800a9e8 <__mdiff+0x34>
 800aa9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaa2:	fa11 f288 	uxtah	r2, r1, r8
 800aaa6:	1414      	asrs	r4, r2, #16
 800aaa8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaac:	b292      	uxth	r2, r2
 800aaae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aab2:	f84e 2b04 	str.w	r2, [lr], #4
 800aab6:	1421      	asrs	r1, r4, #16
 800aab8:	e7e0      	b.n	800aa7c <__mdiff+0xc8>
 800aaba:	3f01      	subs	r7, #1
 800aabc:	e7ea      	b.n	800aa94 <__mdiff+0xe0>
 800aabe:	bf00      	nop
 800aac0:	0800bfb4 	.word	0x0800bfb4
 800aac4:	0800c025 	.word	0x0800c025

0800aac8 <__ulp>:
 800aac8:	b082      	sub	sp, #8
 800aaca:	ed8d 0b00 	vstr	d0, [sp]
 800aace:	9a01      	ldr	r2, [sp, #4]
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <__ulp+0x48>)
 800aad2:	4013      	ands	r3, r2
 800aad4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc08      	bgt.n	800aaee <__ulp+0x26>
 800aadc:	425b      	negs	r3, r3
 800aade:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aae2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aae6:	da04      	bge.n	800aaf2 <__ulp+0x2a>
 800aae8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aaec:	4113      	asrs	r3, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	e008      	b.n	800ab04 <__ulp+0x3c>
 800aaf2:	f1a2 0314 	sub.w	r3, r2, #20
 800aaf6:	2b1e      	cmp	r3, #30
 800aaf8:	bfda      	itte	le
 800aafa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aafe:	40da      	lsrle	r2, r3
 800ab00:	2201      	movgt	r2, #1
 800ab02:	2300      	movs	r3, #0
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	ec41 0b10 	vmov	d0, r0, r1
 800ab0c:	b002      	add	sp, #8
 800ab0e:	4770      	bx	lr
 800ab10:	7ff00000 	.word	0x7ff00000

0800ab14 <__b2d>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	6906      	ldr	r6, [r0, #16]
 800ab1a:	f100 0814 	add.w	r8, r0, #20
 800ab1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab22:	1f37      	subs	r7, r6, #4
 800ab24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab28:	4610      	mov	r0, r2
 800ab2a:	f7ff fd53 	bl	800a5d4 <__hi0bits>
 800ab2e:	f1c0 0320 	rsb	r3, r0, #32
 800ab32:	280a      	cmp	r0, #10
 800ab34:	600b      	str	r3, [r1, #0]
 800ab36:	491b      	ldr	r1, [pc, #108]	; (800aba4 <__b2d+0x90>)
 800ab38:	dc15      	bgt.n	800ab66 <__b2d+0x52>
 800ab3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab42:	45b8      	cmp	r8, r7
 800ab44:	ea43 0501 	orr.w	r5, r3, r1
 800ab48:	bf34      	ite	cc
 800ab4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab4e:	2300      	movcs	r3, #0
 800ab50:	3015      	adds	r0, #21
 800ab52:	fa02 f000 	lsl.w	r0, r2, r0
 800ab56:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab5a:	4303      	orrs	r3, r0
 800ab5c:	461c      	mov	r4, r3
 800ab5e:	ec45 4b10 	vmov	d0, r4, r5
 800ab62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab66:	45b8      	cmp	r8, r7
 800ab68:	bf3a      	itte	cc
 800ab6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab72:	2300      	movcs	r3, #0
 800ab74:	380b      	subs	r0, #11
 800ab76:	d012      	beq.n	800ab9e <__b2d+0x8a>
 800ab78:	f1c0 0120 	rsb	r1, r0, #32
 800ab7c:	fa23 f401 	lsr.w	r4, r3, r1
 800ab80:	4082      	lsls	r2, r0
 800ab82:	4322      	orrs	r2, r4
 800ab84:	4547      	cmp	r7, r8
 800ab86:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ab8a:	bf8c      	ite	hi
 800ab8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab90:	2200      	movls	r2, #0
 800ab92:	4083      	lsls	r3, r0
 800ab94:	40ca      	lsrs	r2, r1
 800ab96:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	e7de      	b.n	800ab5c <__b2d+0x48>
 800ab9e:	ea42 0501 	orr.w	r5, r2, r1
 800aba2:	e7db      	b.n	800ab5c <__b2d+0x48>
 800aba4:	3ff00000 	.word	0x3ff00000

0800aba8 <__d2b>:
 800aba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abac:	460f      	mov	r7, r1
 800abae:	2101      	movs	r1, #1
 800abb0:	ec59 8b10 	vmov	r8, r9, d0
 800abb4:	4616      	mov	r6, r2
 800abb6:	f7ff fc1b 	bl	800a3f0 <_Balloc>
 800abba:	4604      	mov	r4, r0
 800abbc:	b930      	cbnz	r0, 800abcc <__d2b+0x24>
 800abbe:	4602      	mov	r2, r0
 800abc0:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <__d2b+0xac>)
 800abc2:	4825      	ldr	r0, [pc, #148]	; (800ac58 <__d2b+0xb0>)
 800abc4:	f240 310f 	movw	r1, #783	; 0x30f
 800abc8:	f7fe f910 	bl	8008dec <__assert_func>
 800abcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abd4:	bb2d      	cbnz	r5, 800ac22 <__d2b+0x7a>
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	f1b8 0300 	subs.w	r3, r8, #0
 800abdc:	d026      	beq.n	800ac2c <__d2b+0x84>
 800abde:	4668      	mov	r0, sp
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	f7ff fd17 	bl	800a614 <__lo0bits>
 800abe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abea:	b1e8      	cbz	r0, 800ac28 <__d2b+0x80>
 800abec:	f1c0 0320 	rsb	r3, r0, #32
 800abf0:	fa02 f303 	lsl.w	r3, r2, r3
 800abf4:	430b      	orrs	r3, r1
 800abf6:	40c2      	lsrs	r2, r0
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	9201      	str	r2, [sp, #4]
 800abfc:	9b01      	ldr	r3, [sp, #4]
 800abfe:	61a3      	str	r3, [r4, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bf14      	ite	ne
 800ac04:	2202      	movne	r2, #2
 800ac06:	2201      	moveq	r2, #1
 800ac08:	6122      	str	r2, [r4, #16]
 800ac0a:	b1bd      	cbz	r5, 800ac3c <__d2b+0x94>
 800ac0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac10:	4405      	add	r5, r0
 800ac12:	603d      	str	r5, [r7, #0]
 800ac14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac18:	6030      	str	r0, [r6, #0]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	b003      	add	sp, #12
 800ac1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac26:	e7d6      	b.n	800abd6 <__d2b+0x2e>
 800ac28:	6161      	str	r1, [r4, #20]
 800ac2a:	e7e7      	b.n	800abfc <__d2b+0x54>
 800ac2c:	a801      	add	r0, sp, #4
 800ac2e:	f7ff fcf1 	bl	800a614 <__lo0bits>
 800ac32:	9b01      	ldr	r3, [sp, #4]
 800ac34:	6163      	str	r3, [r4, #20]
 800ac36:	3020      	adds	r0, #32
 800ac38:	2201      	movs	r2, #1
 800ac3a:	e7e5      	b.n	800ac08 <__d2b+0x60>
 800ac3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac44:	6038      	str	r0, [r7, #0]
 800ac46:	6918      	ldr	r0, [r3, #16]
 800ac48:	f7ff fcc4 	bl	800a5d4 <__hi0bits>
 800ac4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac50:	e7e2      	b.n	800ac18 <__d2b+0x70>
 800ac52:	bf00      	nop
 800ac54:	0800bfb4 	.word	0x0800bfb4
 800ac58:	0800c025 	.word	0x0800c025

0800ac5c <__ratio>:
 800ac5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac60:	4688      	mov	r8, r1
 800ac62:	4669      	mov	r1, sp
 800ac64:	4681      	mov	r9, r0
 800ac66:	f7ff ff55 	bl	800ab14 <__b2d>
 800ac6a:	a901      	add	r1, sp, #4
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	ec55 4b10 	vmov	r4, r5, d0
 800ac72:	f7ff ff4f 	bl	800ab14 <__b2d>
 800ac76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac7e:	eba3 0c02 	sub.w	ip, r3, r2
 800ac82:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac8c:	ec51 0b10 	vmov	r0, r1, d0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bfd6      	itet	le
 800ac94:	460a      	movle	r2, r1
 800ac96:	462a      	movgt	r2, r5
 800ac98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac9c:	468b      	mov	fp, r1
 800ac9e:	462f      	mov	r7, r5
 800aca0:	bfd4      	ite	le
 800aca2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aca6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800acaa:	4620      	mov	r0, r4
 800acac:	ee10 2a10 	vmov	r2, s0
 800acb0:	465b      	mov	r3, fp
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 fdda 	bl	800086c <__aeabi_ddiv>
 800acb8:	ec41 0b10 	vmov	d0, r0, r1
 800acbc:	b003      	add	sp, #12
 800acbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acc2 <__copybits>:
 800acc2:	3901      	subs	r1, #1
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	1149      	asrs	r1, r1, #5
 800acc8:	6914      	ldr	r4, [r2, #16]
 800acca:	3101      	adds	r1, #1
 800accc:	f102 0314 	add.w	r3, r2, #20
 800acd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acd8:	1f05      	subs	r5, r0, #4
 800acda:	42a3      	cmp	r3, r4
 800acdc:	d30c      	bcc.n	800acf8 <__copybits+0x36>
 800acde:	1aa3      	subs	r3, r4, r2
 800ace0:	3b11      	subs	r3, #17
 800ace2:	f023 0303 	bic.w	r3, r3, #3
 800ace6:	3211      	adds	r2, #17
 800ace8:	42a2      	cmp	r2, r4
 800acea:	bf88      	it	hi
 800acec:	2300      	movhi	r3, #0
 800acee:	4418      	add	r0, r3
 800acf0:	2300      	movs	r3, #0
 800acf2:	4288      	cmp	r0, r1
 800acf4:	d305      	bcc.n	800ad02 <__copybits+0x40>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f853 6b04 	ldr.w	r6, [r3], #4
 800acfc:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad00:	e7eb      	b.n	800acda <__copybits+0x18>
 800ad02:	f840 3b04 	str.w	r3, [r0], #4
 800ad06:	e7f4      	b.n	800acf2 <__copybits+0x30>

0800ad08 <__any_on>:
 800ad08:	f100 0214 	add.w	r2, r0, #20
 800ad0c:	6900      	ldr	r0, [r0, #16]
 800ad0e:	114b      	asrs	r3, r1, #5
 800ad10:	4298      	cmp	r0, r3
 800ad12:	b510      	push	{r4, lr}
 800ad14:	db11      	blt.n	800ad3a <__any_on+0x32>
 800ad16:	dd0a      	ble.n	800ad2e <__any_on+0x26>
 800ad18:	f011 011f 	ands.w	r1, r1, #31
 800ad1c:	d007      	beq.n	800ad2e <__any_on+0x26>
 800ad1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad22:	fa24 f001 	lsr.w	r0, r4, r1
 800ad26:	fa00 f101 	lsl.w	r1, r0, r1
 800ad2a:	428c      	cmp	r4, r1
 800ad2c:	d10b      	bne.n	800ad46 <__any_on+0x3e>
 800ad2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d803      	bhi.n	800ad3e <__any_on+0x36>
 800ad36:	2000      	movs	r0, #0
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	e7f7      	b.n	800ad2e <__any_on+0x26>
 800ad3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad42:	2900      	cmp	r1, #0
 800ad44:	d0f5      	beq.n	800ad32 <__any_on+0x2a>
 800ad46:	2001      	movs	r0, #1
 800ad48:	e7f6      	b.n	800ad38 <__any_on+0x30>

0800ad4a <__ascii_wctomb>:
 800ad4a:	b149      	cbz	r1, 800ad60 <__ascii_wctomb+0x16>
 800ad4c:	2aff      	cmp	r2, #255	; 0xff
 800ad4e:	bf85      	ittet	hi
 800ad50:	238a      	movhi	r3, #138	; 0x8a
 800ad52:	6003      	strhi	r3, [r0, #0]
 800ad54:	700a      	strbls	r2, [r1, #0]
 800ad56:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad5a:	bf98      	it	ls
 800ad5c:	2001      	movls	r0, #1
 800ad5e:	4770      	bx	lr
 800ad60:	4608      	mov	r0, r1
 800ad62:	4770      	bx	lr

0800ad64 <__ssputs_r>:
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	688e      	ldr	r6, [r1, #8]
 800ad6a:	461f      	mov	r7, r3
 800ad6c:	42be      	cmp	r6, r7
 800ad6e:	680b      	ldr	r3, [r1, #0]
 800ad70:	4682      	mov	sl, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	4690      	mov	r8, r2
 800ad76:	d82c      	bhi.n	800add2 <__ssputs_r+0x6e>
 800ad78:	898a      	ldrh	r2, [r1, #12]
 800ad7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad7e:	d026      	beq.n	800adce <__ssputs_r+0x6a>
 800ad80:	6965      	ldr	r5, [r4, #20]
 800ad82:	6909      	ldr	r1, [r1, #16]
 800ad84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad88:	eba3 0901 	sub.w	r9, r3, r1
 800ad8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad90:	1c7b      	adds	r3, r7, #1
 800ad92:	444b      	add	r3, r9
 800ad94:	106d      	asrs	r5, r5, #1
 800ad96:	429d      	cmp	r5, r3
 800ad98:	bf38      	it	cc
 800ad9a:	461d      	movcc	r5, r3
 800ad9c:	0553      	lsls	r3, r2, #21
 800ad9e:	d527      	bpl.n	800adf0 <__ssputs_r+0x8c>
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7ff fa87 	bl	800a2b4 <_malloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	b360      	cbz	r0, 800ae04 <__ssputs_r+0xa0>
 800adaa:	6921      	ldr	r1, [r4, #16]
 800adac:	464a      	mov	r2, r9
 800adae:	f7fe f800 	bl	8008db2 <memcpy>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	6126      	str	r6, [r4, #16]
 800adc0:	6165      	str	r5, [r4, #20]
 800adc2:	444e      	add	r6, r9
 800adc4:	eba5 0509 	sub.w	r5, r5, r9
 800adc8:	6026      	str	r6, [r4, #0]
 800adca:	60a5      	str	r5, [r4, #8]
 800adcc:	463e      	mov	r6, r7
 800adce:	42be      	cmp	r6, r7
 800add0:	d900      	bls.n	800add4 <__ssputs_r+0x70>
 800add2:	463e      	mov	r6, r7
 800add4:	6820      	ldr	r0, [r4, #0]
 800add6:	4632      	mov	r2, r6
 800add8:	4641      	mov	r1, r8
 800adda:	f000 fb81 	bl	800b4e0 <memmove>
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	1b9b      	subs	r3, r3, r6
 800ade2:	60a3      	str	r3, [r4, #8]
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	4433      	add	r3, r6
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	2000      	movs	r0, #0
 800adec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf0:	462a      	mov	r2, r5
 800adf2:	f000 fbde 	bl	800b5b2 <_realloc_r>
 800adf6:	4606      	mov	r6, r0
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1e0      	bne.n	800adbe <__ssputs_r+0x5a>
 800adfc:	6921      	ldr	r1, [r4, #16]
 800adfe:	4650      	mov	r0, sl
 800ae00:	f7fe fe8c 	bl	8009b1c <_free_r>
 800ae04:	230c      	movs	r3, #12
 800ae06:	f8ca 3000 	str.w	r3, [sl]
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	f04f 30ff 	mov.w	r0, #4294967295
 800ae16:	e7e9      	b.n	800adec <__ssputs_r+0x88>

0800ae18 <_svfiprintf_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	4698      	mov	r8, r3
 800ae1e:	898b      	ldrh	r3, [r1, #12]
 800ae20:	061b      	lsls	r3, r3, #24
 800ae22:	b09d      	sub	sp, #116	; 0x74
 800ae24:	4607      	mov	r7, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	4614      	mov	r4, r2
 800ae2a:	d50e      	bpl.n	800ae4a <_svfiprintf_r+0x32>
 800ae2c:	690b      	ldr	r3, [r1, #16]
 800ae2e:	b963      	cbnz	r3, 800ae4a <_svfiprintf_r+0x32>
 800ae30:	2140      	movs	r1, #64	; 0x40
 800ae32:	f7ff fa3f 	bl	800a2b4 <_malloc_r>
 800ae36:	6028      	str	r0, [r5, #0]
 800ae38:	6128      	str	r0, [r5, #16]
 800ae3a:	b920      	cbnz	r0, 800ae46 <_svfiprintf_r+0x2e>
 800ae3c:	230c      	movs	r3, #12
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	e0d0      	b.n	800afe8 <_svfiprintf_r+0x1d0>
 800ae46:	2340      	movs	r3, #64	; 0x40
 800ae48:	616b      	str	r3, [r5, #20]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4e:	2320      	movs	r3, #32
 800ae50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae58:	2330      	movs	r3, #48	; 0x30
 800ae5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b000 <_svfiprintf_r+0x1e8>
 800ae5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae62:	f04f 0901 	mov.w	r9, #1
 800ae66:	4623      	mov	r3, r4
 800ae68:	469a      	mov	sl, r3
 800ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6e:	b10a      	cbz	r2, 800ae74 <_svfiprintf_r+0x5c>
 800ae70:	2a25      	cmp	r2, #37	; 0x25
 800ae72:	d1f9      	bne.n	800ae68 <_svfiprintf_r+0x50>
 800ae74:	ebba 0b04 	subs.w	fp, sl, r4
 800ae78:	d00b      	beq.n	800ae92 <_svfiprintf_r+0x7a>
 800ae7a:	465b      	mov	r3, fp
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff ff6f 	bl	800ad64 <__ssputs_r>
 800ae86:	3001      	adds	r0, #1
 800ae88:	f000 80a9 	beq.w	800afde <_svfiprintf_r+0x1c6>
 800ae8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae8e:	445a      	add	r2, fp
 800ae90:	9209      	str	r2, [sp, #36]	; 0x24
 800ae92:	f89a 3000 	ldrb.w	r3, [sl]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 80a1 	beq.w	800afde <_svfiprintf_r+0x1c6>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea6:	f10a 0a01 	add.w	sl, sl, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	9307      	str	r3, [sp, #28]
 800aeae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeb2:	931a      	str	r3, [sp, #104]	; 0x68
 800aeb4:	4654      	mov	r4, sl
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebc:	4850      	ldr	r0, [pc, #320]	; (800b000 <_svfiprintf_r+0x1e8>)
 800aebe:	f7f5 f997 	bl	80001f0 <memchr>
 800aec2:	9a04      	ldr	r2, [sp, #16]
 800aec4:	b9d8      	cbnz	r0, 800aefe <_svfiprintf_r+0xe6>
 800aec6:	06d0      	lsls	r0, r2, #27
 800aec8:	bf44      	itt	mi
 800aeca:	2320      	movmi	r3, #32
 800aecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed0:	0711      	lsls	r1, r2, #28
 800aed2:	bf44      	itt	mi
 800aed4:	232b      	movmi	r3, #43	; 0x2b
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeda:	f89a 3000 	ldrb.w	r3, [sl]
 800aede:	2b2a      	cmp	r3, #42	; 0x2a
 800aee0:	d015      	beq.n	800af0e <_svfiprintf_r+0xf6>
 800aee2:	9a07      	ldr	r2, [sp, #28]
 800aee4:	4654      	mov	r4, sl
 800aee6:	2000      	movs	r0, #0
 800aee8:	f04f 0c0a 	mov.w	ip, #10
 800aeec:	4621      	mov	r1, r4
 800aeee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef2:	3b30      	subs	r3, #48	; 0x30
 800aef4:	2b09      	cmp	r3, #9
 800aef6:	d94d      	bls.n	800af94 <_svfiprintf_r+0x17c>
 800aef8:	b1b0      	cbz	r0, 800af28 <_svfiprintf_r+0x110>
 800aefa:	9207      	str	r2, [sp, #28]
 800aefc:	e014      	b.n	800af28 <_svfiprintf_r+0x110>
 800aefe:	eba0 0308 	sub.w	r3, r0, r8
 800af02:	fa09 f303 	lsl.w	r3, r9, r3
 800af06:	4313      	orrs	r3, r2
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	46a2      	mov	sl, r4
 800af0c:	e7d2      	b.n	800aeb4 <_svfiprintf_r+0x9c>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	1d19      	adds	r1, r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	9103      	str	r1, [sp, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	bfbb      	ittet	lt
 800af1a:	425b      	neglt	r3, r3
 800af1c:	f042 0202 	orrlt.w	r2, r2, #2
 800af20:	9307      	strge	r3, [sp, #28]
 800af22:	9307      	strlt	r3, [sp, #28]
 800af24:	bfb8      	it	lt
 800af26:	9204      	strlt	r2, [sp, #16]
 800af28:	7823      	ldrb	r3, [r4, #0]
 800af2a:	2b2e      	cmp	r3, #46	; 0x2e
 800af2c:	d10c      	bne.n	800af48 <_svfiprintf_r+0x130>
 800af2e:	7863      	ldrb	r3, [r4, #1]
 800af30:	2b2a      	cmp	r3, #42	; 0x2a
 800af32:	d134      	bne.n	800af9e <_svfiprintf_r+0x186>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	1d1a      	adds	r2, r3, #4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	9203      	str	r2, [sp, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bfb8      	it	lt
 800af40:	f04f 33ff 	movlt.w	r3, #4294967295
 800af44:	3402      	adds	r4, #2
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b010 <_svfiprintf_r+0x1f8>
 800af4c:	7821      	ldrb	r1, [r4, #0]
 800af4e:	2203      	movs	r2, #3
 800af50:	4650      	mov	r0, sl
 800af52:	f7f5 f94d 	bl	80001f0 <memchr>
 800af56:	b138      	cbz	r0, 800af68 <_svfiprintf_r+0x150>
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	eba0 000a 	sub.w	r0, r0, sl
 800af5e:	2240      	movs	r2, #64	; 0x40
 800af60:	4082      	lsls	r2, r0
 800af62:	4313      	orrs	r3, r2
 800af64:	3401      	adds	r4, #1
 800af66:	9304      	str	r3, [sp, #16]
 800af68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6c:	4825      	ldr	r0, [pc, #148]	; (800b004 <_svfiprintf_r+0x1ec>)
 800af6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af72:	2206      	movs	r2, #6
 800af74:	f7f5 f93c 	bl	80001f0 <memchr>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d038      	beq.n	800afee <_svfiprintf_r+0x1d6>
 800af7c:	4b22      	ldr	r3, [pc, #136]	; (800b008 <_svfiprintf_r+0x1f0>)
 800af7e:	bb1b      	cbnz	r3, 800afc8 <_svfiprintf_r+0x1b0>
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	3307      	adds	r3, #7
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	3308      	adds	r3, #8
 800af8a:	9303      	str	r3, [sp, #12]
 800af8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8e:	4433      	add	r3, r6
 800af90:	9309      	str	r3, [sp, #36]	; 0x24
 800af92:	e768      	b.n	800ae66 <_svfiprintf_r+0x4e>
 800af94:	fb0c 3202 	mla	r2, ip, r2, r3
 800af98:	460c      	mov	r4, r1
 800af9a:	2001      	movs	r0, #1
 800af9c:	e7a6      	b.n	800aeec <_svfiprintf_r+0xd4>
 800af9e:	2300      	movs	r3, #0
 800afa0:	3401      	adds	r4, #1
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	4619      	mov	r1, r3
 800afa6:	f04f 0c0a 	mov.w	ip, #10
 800afaa:	4620      	mov	r0, r4
 800afac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb0:	3a30      	subs	r2, #48	; 0x30
 800afb2:	2a09      	cmp	r2, #9
 800afb4:	d903      	bls.n	800afbe <_svfiprintf_r+0x1a6>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d0c6      	beq.n	800af48 <_svfiprintf_r+0x130>
 800afba:	9105      	str	r1, [sp, #20]
 800afbc:	e7c4      	b.n	800af48 <_svfiprintf_r+0x130>
 800afbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800afc2:	4604      	mov	r4, r0
 800afc4:	2301      	movs	r3, #1
 800afc6:	e7f0      	b.n	800afaa <_svfiprintf_r+0x192>
 800afc8:	ab03      	add	r3, sp, #12
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	462a      	mov	r2, r5
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <_svfiprintf_r+0x1f4>)
 800afd0:	a904      	add	r1, sp, #16
 800afd2:	4638      	mov	r0, r7
 800afd4:	f7fc fdc4 	bl	8007b60 <_printf_float>
 800afd8:	1c42      	adds	r2, r0, #1
 800afda:	4606      	mov	r6, r0
 800afdc:	d1d6      	bne.n	800af8c <_svfiprintf_r+0x174>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	065b      	lsls	r3, r3, #25
 800afe2:	f53f af2d 	bmi.w	800ae40 <_svfiprintf_r+0x28>
 800afe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe8:	b01d      	add	sp, #116	; 0x74
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	462a      	mov	r2, r5
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <_svfiprintf_r+0x1f4>)
 800aff6:	a904      	add	r1, sp, #16
 800aff8:	4638      	mov	r0, r7
 800affa:	f7fd f855 	bl	80080a8 <_printf_i>
 800affe:	e7eb      	b.n	800afd8 <_svfiprintf_r+0x1c0>
 800b000:	0800c17c 	.word	0x0800c17c
 800b004:	0800c186 	.word	0x0800c186
 800b008:	08007b61 	.word	0x08007b61
 800b00c:	0800ad65 	.word	0x0800ad65
 800b010:	0800c182 	.word	0x0800c182

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f7fd bd00 	b.w	8008a32 <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	; 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6a03      	ldr	r3, [r0, #32]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f7fd fbd2 	bl	8008824 <__sinit>
 800b080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b082:	07d9      	lsls	r1, r3, #31
 800b084:	d405      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b08e:	f7fd fe86 	bl	8008d9e <__retarget_lock_acquire_recursive>
 800b092:	89ab      	ldrh	r3, [r5, #12]
 800b094:	071b      	lsls	r3, r3, #28
 800b096:	d501      	bpl.n	800b09c <_vfiprintf_r+0x34>
 800b098:	692b      	ldr	r3, [r5, #16]
 800b09a:	b99b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x5c>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7fd fd04 	bl	8008aac <__swsetup_r>
 800b0a4:	b170      	cbz	r0, 800b0c4 <_vfiprintf_r+0x5c>
 800b0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0a8:	07dc      	lsls	r4, r3, #31
 800b0aa:	d504      	bpl.n	800b0b6 <_vfiprintf_r+0x4e>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	b01d      	add	sp, #116	; 0x74
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	0598      	lsls	r0, r3, #22
 800b0ba:	d4f7      	bmi.n	800b0ac <_vfiprintf_r+0x44>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0be:	f7fd fe6f 	bl	8008da0 <__retarget_lock_release_recursive>
 800b0c2:	e7f3      	b.n	800b0ac <_vfiprintf_r+0x44>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d2:	2330      	movs	r3, #48	; 0x30
 800b0d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b288 <_vfiprintf_r+0x220>
 800b0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	469a      	mov	sl, r3
 800b0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_vfiprintf_r+0x86>
 800b0ea:	2a25      	cmp	r2, #37	; 0x25
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x7a>
 800b0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f2:	d00b      	beq.n	800b10c <_vfiprintf_r+0xa4>
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffa1 	bl	800b042 <__sfputs_r>
 800b100:	3001      	adds	r0, #1
 800b102:	f000 80a9 	beq.w	800b258 <_vfiprintf_r+0x1f0>
 800b106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b108:	445a      	add	r2, fp
 800b10a:	9209      	str	r2, [sp, #36]	; 0x24
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 80a1 	beq.w	800b258 <_vfiprintf_r+0x1f0>
 800b116:	2300      	movs	r3, #0
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b120:	f10a 0a01 	add.w	sl, sl, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b12c:	931a      	str	r3, [sp, #104]	; 0x68
 800b12e:	4654      	mov	r4, sl
 800b130:	2205      	movs	r2, #5
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4854      	ldr	r0, [pc, #336]	; (800b288 <_vfiprintf_r+0x220>)
 800b138:	f7f5 f85a 	bl	80001f0 <memchr>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	b9d8      	cbnz	r0, 800b178 <_vfiprintf_r+0x110>
 800b140:	06d1      	lsls	r1, r2, #27
 800b142:	bf44      	itt	mi
 800b144:	2320      	movmi	r3, #32
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b14a:	0713      	lsls	r3, r2, #28
 800b14c:	bf44      	itt	mi
 800b14e:	232b      	movmi	r3, #43	; 0x2b
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b154:	f89a 3000 	ldrb.w	r3, [sl]
 800b158:	2b2a      	cmp	r3, #42	; 0x2a
 800b15a:	d015      	beq.n	800b188 <_vfiprintf_r+0x120>
 800b15c:	9a07      	ldr	r2, [sp, #28]
 800b15e:	4654      	mov	r4, sl
 800b160:	2000      	movs	r0, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4621      	mov	r1, r4
 800b168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16c:	3b30      	subs	r3, #48	; 0x30
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d94d      	bls.n	800b20e <_vfiprintf_r+0x1a6>
 800b172:	b1b0      	cbz	r0, 800b1a2 <_vfiprintf_r+0x13a>
 800b174:	9207      	str	r2, [sp, #28]
 800b176:	e014      	b.n	800b1a2 <_vfiprintf_r+0x13a>
 800b178:	eba0 0308 	sub.w	r3, r0, r8
 800b17c:	fa09 f303 	lsl.w	r3, r9, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	46a2      	mov	sl, r4
 800b186:	e7d2      	b.n	800b12e <_vfiprintf_r+0xc6>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	1d19      	adds	r1, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbb      	ittet	lt
 800b194:	425b      	neglt	r3, r3
 800b196:	f042 0202 	orrlt.w	r2, r2, #2
 800b19a:	9307      	strge	r3, [sp, #28]
 800b19c:	9307      	strlt	r3, [sp, #28]
 800b19e:	bfb8      	it	lt
 800b1a0:	9204      	strlt	r2, [sp, #16]
 800b1a2:	7823      	ldrb	r3, [r4, #0]
 800b1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b1a6:	d10c      	bne.n	800b1c2 <_vfiprintf_r+0x15a>
 800b1a8:	7863      	ldrb	r3, [r4, #1]
 800b1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ac:	d134      	bne.n	800b218 <_vfiprintf_r+0x1b0>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9203      	str	r2, [sp, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bfb8      	it	lt
 800b1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1be:	3402      	adds	r4, #2
 800b1c0:	9305      	str	r3, [sp, #20]
 800b1c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b298 <_vfiprintf_r+0x230>
 800b1c6:	7821      	ldrb	r1, [r4, #0]
 800b1c8:	2203      	movs	r2, #3
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	f7f5 f810 	bl	80001f0 <memchr>
 800b1d0:	b138      	cbz	r0, 800b1e2 <_vfiprintf_r+0x17a>
 800b1d2:	9b04      	ldr	r3, [sp, #16]
 800b1d4:	eba0 000a 	sub.w	r0, r0, sl
 800b1d8:	2240      	movs	r2, #64	; 0x40
 800b1da:	4082      	lsls	r2, r0
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	3401      	adds	r4, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e6:	4829      	ldr	r0, [pc, #164]	; (800b28c <_vfiprintf_r+0x224>)
 800b1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ec:	2206      	movs	r2, #6
 800b1ee:	f7f4 ffff 	bl	80001f0 <memchr>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d03f      	beq.n	800b276 <_vfiprintf_r+0x20e>
 800b1f6:	4b26      	ldr	r3, [pc, #152]	; (800b290 <_vfiprintf_r+0x228>)
 800b1f8:	bb1b      	cbnz	r3, 800b242 <_vfiprintf_r+0x1da>
 800b1fa:	9b03      	ldr	r3, [sp, #12]
 800b1fc:	3307      	adds	r3, #7
 800b1fe:	f023 0307 	bic.w	r3, r3, #7
 800b202:	3308      	adds	r3, #8
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b208:	443b      	add	r3, r7
 800b20a:	9309      	str	r3, [sp, #36]	; 0x24
 800b20c:	e768      	b.n	800b0e0 <_vfiprintf_r+0x78>
 800b20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b212:	460c      	mov	r4, r1
 800b214:	2001      	movs	r0, #1
 800b216:	e7a6      	b.n	800b166 <_vfiprintf_r+0xfe>
 800b218:	2300      	movs	r3, #0
 800b21a:	3401      	adds	r4, #1
 800b21c:	9305      	str	r3, [sp, #20]
 800b21e:	4619      	mov	r1, r3
 800b220:	f04f 0c0a 	mov.w	ip, #10
 800b224:	4620      	mov	r0, r4
 800b226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b22a:	3a30      	subs	r2, #48	; 0x30
 800b22c:	2a09      	cmp	r2, #9
 800b22e:	d903      	bls.n	800b238 <_vfiprintf_r+0x1d0>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0c6      	beq.n	800b1c2 <_vfiprintf_r+0x15a>
 800b234:	9105      	str	r1, [sp, #20]
 800b236:	e7c4      	b.n	800b1c2 <_vfiprintf_r+0x15a>
 800b238:	fb0c 2101 	mla	r1, ip, r1, r2
 800b23c:	4604      	mov	r4, r0
 800b23e:	2301      	movs	r3, #1
 800b240:	e7f0      	b.n	800b224 <_vfiprintf_r+0x1bc>
 800b242:	ab03      	add	r3, sp, #12
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	462a      	mov	r2, r5
 800b248:	4b12      	ldr	r3, [pc, #72]	; (800b294 <_vfiprintf_r+0x22c>)
 800b24a:	a904      	add	r1, sp, #16
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fc fc87 	bl	8007b60 <_printf_float>
 800b252:	4607      	mov	r7, r0
 800b254:	1c78      	adds	r0, r7, #1
 800b256:	d1d6      	bne.n	800b206 <_vfiprintf_r+0x19e>
 800b258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b25a:	07d9      	lsls	r1, r3, #31
 800b25c:	d405      	bmi.n	800b26a <_vfiprintf_r+0x202>
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	059a      	lsls	r2, r3, #22
 800b262:	d402      	bmi.n	800b26a <_vfiprintf_r+0x202>
 800b264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b266:	f7fd fd9b 	bl	8008da0 <__retarget_lock_release_recursive>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	065b      	lsls	r3, r3, #25
 800b26e:	f53f af1d 	bmi.w	800b0ac <_vfiprintf_r+0x44>
 800b272:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b274:	e71c      	b.n	800b0b0 <_vfiprintf_r+0x48>
 800b276:	ab03      	add	r3, sp, #12
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	462a      	mov	r2, r5
 800b27c:	4b05      	ldr	r3, [pc, #20]	; (800b294 <_vfiprintf_r+0x22c>)
 800b27e:	a904      	add	r1, sp, #16
 800b280:	4630      	mov	r0, r6
 800b282:	f7fc ff11 	bl	80080a8 <_printf_i>
 800b286:	e7e4      	b.n	800b252 <_vfiprintf_r+0x1ea>
 800b288:	0800c17c 	.word	0x0800c17c
 800b28c:	0800c186 	.word	0x0800c186
 800b290:	08007b61 	.word	0x08007b61
 800b294:	0800b043 	.word	0x0800b043
 800b298:	0800c182 	.word	0x0800c182

0800b29c <__sflush_r>:
 800b29c:	898a      	ldrh	r2, [r1, #12]
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	0710      	lsls	r0, r2, #28
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	d458      	bmi.n	800b35c <__sflush_r+0xc0>
 800b2aa:	684b      	ldr	r3, [r1, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dc05      	bgt.n	800b2bc <__sflush_r+0x20>
 800b2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dc02      	bgt.n	800b2bc <__sflush_r+0x20>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	d0f9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2c8:	682f      	ldr	r7, [r5, #0]
 800b2ca:	6a21      	ldr	r1, [r4, #32]
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	d032      	beq.n	800b336 <__sflush_r+0x9a>
 800b2d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	075a      	lsls	r2, r3, #29
 800b2d6:	d505      	bpl.n	800b2e4 <__sflush_r+0x48>
 800b2d8:	6863      	ldr	r3, [r4, #4]
 800b2da:	1ac0      	subs	r0, r0, r3
 800b2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2de:	b10b      	cbz	r3, 800b2e4 <__sflush_r+0x48>
 800b2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2e2:	1ac0      	subs	r0, r0, r3
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ea:	6a21      	ldr	r1, [r4, #32]
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	47b0      	blx	r6
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	d106      	bne.n	800b304 <__sflush_r+0x68>
 800b2f6:	6829      	ldr	r1, [r5, #0]
 800b2f8:	291d      	cmp	r1, #29
 800b2fa:	d82b      	bhi.n	800b354 <__sflush_r+0xb8>
 800b2fc:	4a29      	ldr	r2, [pc, #164]	; (800b3a4 <__sflush_r+0x108>)
 800b2fe:	410a      	asrs	r2, r1
 800b300:	07d6      	lsls	r6, r2, #31
 800b302:	d427      	bmi.n	800b354 <__sflush_r+0xb8>
 800b304:	2200      	movs	r2, #0
 800b306:	6062      	str	r2, [r4, #4]
 800b308:	04d9      	lsls	r1, r3, #19
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	6022      	str	r2, [r4, #0]
 800b30e:	d504      	bpl.n	800b31a <__sflush_r+0x7e>
 800b310:	1c42      	adds	r2, r0, #1
 800b312:	d101      	bne.n	800b318 <__sflush_r+0x7c>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b903      	cbnz	r3, 800b31a <__sflush_r+0x7e>
 800b318:	6560      	str	r0, [r4, #84]	; 0x54
 800b31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b31c:	602f      	str	r7, [r5, #0]
 800b31e:	2900      	cmp	r1, #0
 800b320:	d0c9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b326:	4299      	cmp	r1, r3
 800b328:	d002      	beq.n	800b330 <__sflush_r+0x94>
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7fe fbf6 	bl	8009b1c <_free_r>
 800b330:	2000      	movs	r0, #0
 800b332:	6360      	str	r0, [r4, #52]	; 0x34
 800b334:	e7c0      	b.n	800b2b8 <__sflush_r+0x1c>
 800b336:	2301      	movs	r3, #1
 800b338:	4628      	mov	r0, r5
 800b33a:	47b0      	blx	r6
 800b33c:	1c41      	adds	r1, r0, #1
 800b33e:	d1c8      	bne.n	800b2d2 <__sflush_r+0x36>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0c5      	beq.n	800b2d2 <__sflush_r+0x36>
 800b346:	2b1d      	cmp	r3, #29
 800b348:	d001      	beq.n	800b34e <__sflush_r+0xb2>
 800b34a:	2b16      	cmp	r3, #22
 800b34c:	d101      	bne.n	800b352 <__sflush_r+0xb6>
 800b34e:	602f      	str	r7, [r5, #0]
 800b350:	e7b1      	b.n	800b2b6 <__sflush_r+0x1a>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	e7ad      	b.n	800b2b8 <__sflush_r+0x1c>
 800b35c:	690f      	ldr	r7, [r1, #16]
 800b35e:	2f00      	cmp	r7, #0
 800b360:	d0a9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b362:	0793      	lsls	r3, r2, #30
 800b364:	680e      	ldr	r6, [r1, #0]
 800b366:	bf08      	it	eq
 800b368:	694b      	ldreq	r3, [r1, #20]
 800b36a:	600f      	str	r7, [r1, #0]
 800b36c:	bf18      	it	ne
 800b36e:	2300      	movne	r3, #0
 800b370:	eba6 0807 	sub.w	r8, r6, r7
 800b374:	608b      	str	r3, [r1, #8]
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	dd9c      	ble.n	800b2b6 <__sflush_r+0x1a>
 800b37c:	6a21      	ldr	r1, [r4, #32]
 800b37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b380:	4643      	mov	r3, r8
 800b382:	463a      	mov	r2, r7
 800b384:	4628      	mov	r0, r5
 800b386:	47b0      	blx	r6
 800b388:	2800      	cmp	r0, #0
 800b38a:	dc06      	bgt.n	800b39a <__sflush_r+0xfe>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	e78e      	b.n	800b2b8 <__sflush_r+0x1c>
 800b39a:	4407      	add	r7, r0
 800b39c:	eba8 0800 	sub.w	r8, r8, r0
 800b3a0:	e7e9      	b.n	800b376 <__sflush_r+0xda>
 800b3a2:	bf00      	nop
 800b3a4:	dfbffffe 	.word	0xdfbffffe

0800b3a8 <_fflush_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	690b      	ldr	r3, [r1, #16]
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b913      	cbnz	r3, 800b3b8 <_fflush_r+0x10>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	b118      	cbz	r0, 800b3c2 <_fflush_r+0x1a>
 800b3ba:	6a03      	ldr	r3, [r0, #32]
 800b3bc:	b90b      	cbnz	r3, 800b3c2 <_fflush_r+0x1a>
 800b3be:	f7fd fa31 	bl	8008824 <__sinit>
 800b3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0f3      	beq.n	800b3b2 <_fflush_r+0xa>
 800b3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3cc:	07d0      	lsls	r0, r2, #31
 800b3ce:	d404      	bmi.n	800b3da <_fflush_r+0x32>
 800b3d0:	0599      	lsls	r1, r3, #22
 800b3d2:	d402      	bmi.n	800b3da <_fflush_r+0x32>
 800b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d6:	f7fd fce2 	bl	8008d9e <__retarget_lock_acquire_recursive>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7ff ff5d 	bl	800b29c <__sflush_r>
 800b3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3e4:	07da      	lsls	r2, r3, #31
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	d4e4      	bmi.n	800b3b4 <_fflush_r+0xc>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	059b      	lsls	r3, r3, #22
 800b3ee:	d4e1      	bmi.n	800b3b4 <_fflush_r+0xc>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f2:	f7fd fcd5 	bl	8008da0 <__retarget_lock_release_recursive>
 800b3f6:	e7dd      	b.n	800b3b4 <_fflush_r+0xc>

0800b3f8 <fiprintf>:
 800b3f8:	b40e      	push	{r1, r2, r3}
 800b3fa:	b503      	push	{r0, r1, lr}
 800b3fc:	4601      	mov	r1, r0
 800b3fe:	ab03      	add	r3, sp, #12
 800b400:	4805      	ldr	r0, [pc, #20]	; (800b418 <fiprintf+0x20>)
 800b402:	f853 2b04 	ldr.w	r2, [r3], #4
 800b406:	6800      	ldr	r0, [r0, #0]
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	f7ff fe2d 	bl	800b068 <_vfiprintf_r>
 800b40e:	b002      	add	sp, #8
 800b410:	f85d eb04 	ldr.w	lr, [sp], #4
 800b414:	b003      	add	sp, #12
 800b416:	4770      	bx	lr
 800b418:	200001f4 	.word	0x200001f4

0800b41c <__swhatbuf_r>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	460c      	mov	r4, r1
 800b420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b424:	2900      	cmp	r1, #0
 800b426:	b096      	sub	sp, #88	; 0x58
 800b428:	4615      	mov	r5, r2
 800b42a:	461e      	mov	r6, r3
 800b42c:	da0d      	bge.n	800b44a <__swhatbuf_r+0x2e>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b434:	f04f 0100 	mov.w	r1, #0
 800b438:	bf0c      	ite	eq
 800b43a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b43e:	2340      	movne	r3, #64	; 0x40
 800b440:	2000      	movs	r0, #0
 800b442:	6031      	str	r1, [r6, #0]
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	b016      	add	sp, #88	; 0x58
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	466a      	mov	r2, sp
 800b44c:	f000 f862 	bl	800b514 <_fstat_r>
 800b450:	2800      	cmp	r0, #0
 800b452:	dbec      	blt.n	800b42e <__swhatbuf_r+0x12>
 800b454:	9901      	ldr	r1, [sp, #4]
 800b456:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b45a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b45e:	4259      	negs	r1, r3
 800b460:	4159      	adcs	r1, r3
 800b462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b466:	e7eb      	b.n	800b440 <__swhatbuf_r+0x24>

0800b468 <__smakebuf_r>:
 800b468:	898b      	ldrh	r3, [r1, #12]
 800b46a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b46c:	079d      	lsls	r5, r3, #30
 800b46e:	4606      	mov	r6, r0
 800b470:	460c      	mov	r4, r1
 800b472:	d507      	bpl.n	800b484 <__smakebuf_r+0x1c>
 800b474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	6123      	str	r3, [r4, #16]
 800b47c:	2301      	movs	r3, #1
 800b47e:	6163      	str	r3, [r4, #20]
 800b480:	b002      	add	sp, #8
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	ab01      	add	r3, sp, #4
 800b486:	466a      	mov	r2, sp
 800b488:	f7ff ffc8 	bl	800b41c <__swhatbuf_r>
 800b48c:	9900      	ldr	r1, [sp, #0]
 800b48e:	4605      	mov	r5, r0
 800b490:	4630      	mov	r0, r6
 800b492:	f7fe ff0f 	bl	800a2b4 <_malloc_r>
 800b496:	b948      	cbnz	r0, 800b4ac <__smakebuf_r+0x44>
 800b498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b49c:	059a      	lsls	r2, r3, #22
 800b49e:	d4ef      	bmi.n	800b480 <__smakebuf_r+0x18>
 800b4a0:	f023 0303 	bic.w	r3, r3, #3
 800b4a4:	f043 0302 	orr.w	r3, r3, #2
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	e7e3      	b.n	800b474 <__smakebuf_r+0xc>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	6020      	str	r0, [r4, #0]
 800b4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	9b00      	ldr	r3, [sp, #0]
 800b4b8:	6163      	str	r3, [r4, #20]
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	6120      	str	r0, [r4, #16]
 800b4be:	b15b      	cbz	r3, 800b4d8 <__smakebuf_r+0x70>
 800b4c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f000 f837 	bl	800b538 <_isatty_r>
 800b4ca:	b128      	cbz	r0, 800b4d8 <__smakebuf_r+0x70>
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	f023 0303 	bic.w	r3, r3, #3
 800b4d2:	f043 0301 	orr.w	r3, r3, #1
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	431d      	orrs	r5, r3
 800b4dc:	81a5      	strh	r5, [r4, #12]
 800b4de:	e7cf      	b.n	800b480 <__smakebuf_r+0x18>

0800b4e0 <memmove>:
 800b4e0:	4288      	cmp	r0, r1
 800b4e2:	b510      	push	{r4, lr}
 800b4e4:	eb01 0402 	add.w	r4, r1, r2
 800b4e8:	d902      	bls.n	800b4f0 <memmove+0x10>
 800b4ea:	4284      	cmp	r4, r0
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	d807      	bhi.n	800b500 <memmove+0x20>
 800b4f0:	1e43      	subs	r3, r0, #1
 800b4f2:	42a1      	cmp	r1, r4
 800b4f4:	d008      	beq.n	800b508 <memmove+0x28>
 800b4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4fe:	e7f8      	b.n	800b4f2 <memmove+0x12>
 800b500:	4402      	add	r2, r0
 800b502:	4601      	mov	r1, r0
 800b504:	428a      	cmp	r2, r1
 800b506:	d100      	bne.n	800b50a <memmove+0x2a>
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b512:	e7f7      	b.n	800b504 <memmove+0x24>

0800b514 <_fstat_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d07      	ldr	r5, [pc, #28]	; (800b534 <_fstat_r+0x20>)
 800b518:	2300      	movs	r3, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	4611      	mov	r1, r2
 800b520:	602b      	str	r3, [r5, #0]
 800b522:	f7f7 fbd2 	bl	8002cca <_fstat>
 800b526:	1c43      	adds	r3, r0, #1
 800b528:	d102      	bne.n	800b530 <_fstat_r+0x1c>
 800b52a:	682b      	ldr	r3, [r5, #0]
 800b52c:	b103      	cbz	r3, 800b530 <_fstat_r+0x1c>
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	bd38      	pop	{r3, r4, r5, pc}
 800b532:	bf00      	nop
 800b534:	20000d34 	.word	0x20000d34

0800b538 <_isatty_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_isatty_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7f7 fbd1 	bl	8002cea <_isatty>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_isatty_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_isatty_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	20000d34 	.word	0x20000d34

0800b558 <_sbrk_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d06      	ldr	r5, [pc, #24]	; (800b574 <_sbrk_r+0x1c>)
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7f7 fbda 	bl	8002d1c <_sbrk>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_sbrk_r+0x1a>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_sbrk_r+0x1a>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20000d34 	.word	0x20000d34

0800b578 <abort>:
 800b578:	b508      	push	{r3, lr}
 800b57a:	2006      	movs	r0, #6
 800b57c:	f000 f870 	bl	800b660 <raise>
 800b580:	2001      	movs	r0, #1
 800b582:	f7f7 fb6f 	bl	8002c64 <_exit>

0800b586 <_calloc_r>:
 800b586:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b588:	fba1 2402 	umull	r2, r4, r1, r2
 800b58c:	b94c      	cbnz	r4, 800b5a2 <_calloc_r+0x1c>
 800b58e:	4611      	mov	r1, r2
 800b590:	9201      	str	r2, [sp, #4]
 800b592:	f7fe fe8f 	bl	800a2b4 <_malloc_r>
 800b596:	9a01      	ldr	r2, [sp, #4]
 800b598:	4605      	mov	r5, r0
 800b59a:	b930      	cbnz	r0, 800b5aa <_calloc_r+0x24>
 800b59c:	4628      	mov	r0, r5
 800b59e:	b003      	add	sp, #12
 800b5a0:	bd30      	pop	{r4, r5, pc}
 800b5a2:	220c      	movs	r2, #12
 800b5a4:	6002      	str	r2, [r0, #0]
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	e7f8      	b.n	800b59c <_calloc_r+0x16>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	f7fd fad6 	bl	8008b5c <memset>
 800b5b0:	e7f4      	b.n	800b59c <_calloc_r+0x16>

0800b5b2 <_realloc_r>:
 800b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	460e      	mov	r6, r1
 800b5bc:	b921      	cbnz	r1, 800b5c8 <_realloc_r+0x16>
 800b5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	f7fe be76 	b.w	800a2b4 <_malloc_r>
 800b5c8:	b92a      	cbnz	r2, 800b5d6 <_realloc_r+0x24>
 800b5ca:	f7fe faa7 	bl	8009b1c <_free_r>
 800b5ce:	4625      	mov	r5, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	f000 f85f 	bl	800b698 <_malloc_usable_size_r>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4607      	mov	r7, r0
 800b5de:	d802      	bhi.n	800b5e6 <_realloc_r+0x34>
 800b5e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5e4:	d812      	bhi.n	800b60c <_realloc_r+0x5a>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	f7fe fe63 	bl	800a2b4 <_malloc_r>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d0ed      	beq.n	800b5d0 <_realloc_r+0x1e>
 800b5f4:	42bc      	cmp	r4, r7
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	bf28      	it	cs
 800b5fc:	463a      	movcs	r2, r7
 800b5fe:	f7fd fbd8 	bl	8008db2 <memcpy>
 800b602:	4631      	mov	r1, r6
 800b604:	4640      	mov	r0, r8
 800b606:	f7fe fa89 	bl	8009b1c <_free_r>
 800b60a:	e7e1      	b.n	800b5d0 <_realloc_r+0x1e>
 800b60c:	4635      	mov	r5, r6
 800b60e:	e7df      	b.n	800b5d0 <_realloc_r+0x1e>

0800b610 <_raise_r>:
 800b610:	291f      	cmp	r1, #31
 800b612:	b538      	push	{r3, r4, r5, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	d904      	bls.n	800b624 <_raise_r+0x14>
 800b61a:	2316      	movs	r3, #22
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b626:	b112      	cbz	r2, 800b62e <_raise_r+0x1e>
 800b628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b62c:	b94b      	cbnz	r3, 800b642 <_raise_r+0x32>
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 f830 	bl	800b694 <_getpid_r>
 800b634:	462a      	mov	r2, r5
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63e:	f000 b817 	b.w	800b670 <_kill_r>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d00a      	beq.n	800b65c <_raise_r+0x4c>
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	d103      	bne.n	800b652 <_raise_r+0x42>
 800b64a:	2316      	movs	r3, #22
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	2001      	movs	r0, #1
 800b650:	e7e7      	b.n	800b622 <_raise_r+0x12>
 800b652:	2400      	movs	r4, #0
 800b654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b658:	4628      	mov	r0, r5
 800b65a:	4798      	blx	r3
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7e0      	b.n	800b622 <_raise_r+0x12>

0800b660 <raise>:
 800b660:	4b02      	ldr	r3, [pc, #8]	; (800b66c <raise+0xc>)
 800b662:	4601      	mov	r1, r0
 800b664:	6818      	ldr	r0, [r3, #0]
 800b666:	f7ff bfd3 	b.w	800b610 <_raise_r>
 800b66a:	bf00      	nop
 800b66c:	200001f4 	.word	0x200001f4

0800b670 <_kill_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_kill_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f7f7 fae1 	bl	8002c44 <_kill>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_kill_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_kill_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	20000d34 	.word	0x20000d34

0800b694 <_getpid_r>:
 800b694:	f7f7 bace 	b.w	8002c34 <_getpid>

0800b698 <_malloc_usable_size_r>:
 800b698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69c:	1f18      	subs	r0, r3, #4
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bfbc      	itt	lt
 800b6a2:	580b      	ldrlt	r3, [r1, r0]
 800b6a4:	18c0      	addlt	r0, r0, r3
 800b6a6:	4770      	bx	lr

0800b6a8 <_init>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	bf00      	nop
 800b6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ae:	bc08      	pop	{r3}
 800b6b0:	469e      	mov	lr, r3
 800b6b2:	4770      	bx	lr

0800b6b4 <_fini>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr
